// Code generated by go-swagger; DO NOT EDIT.

package declare_capture

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new declare capture API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for declare capture API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDeclareCapture(params *CreateDeclareCaptureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeclareCaptureCreated, *CreateDeclareCaptureAccepted, error)

	DeleteDeclareCapture(params *DeleteDeclareCaptureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDeclareCaptureAccepted, *DeleteDeclareCaptureNoContent, error)

	GetDeclareCapture(params *GetDeclareCaptureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeclareCaptureOK, error)

	GetDeclareCaptures(params *GetDeclareCapturesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeclareCapturesOK, error)

	ReplaceDeclareCapture(params *ReplaceDeclareCaptureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceDeclareCaptureOK, *ReplaceDeclareCaptureAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateDeclareCapture adds a new declare capture

  Adds a new declare capture in the specified frontend in the configuration file.
*/
func (a *Client) CreateDeclareCapture(params *CreateDeclareCaptureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeclareCaptureCreated, *CreateDeclareCaptureAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeclareCaptureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDeclareCapture",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/captures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDeclareCaptureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateDeclareCaptureCreated:
		return value, nil, nil
	case *CreateDeclareCaptureAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDeclareCaptureDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteDeclareCapture deletes a declare capture

  Deletes a declare capture configuration by it's index in the specified frontend.
*/
func (a *Client) DeleteDeclareCapture(params *DeleteDeclareCaptureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDeclareCaptureAccepted, *DeleteDeclareCaptureNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeclareCaptureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDeclareCapture",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/captures/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDeclareCaptureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteDeclareCaptureAccepted:
		return value, nil, nil
	case *DeleteDeclareCaptureNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDeclareCaptureDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDeclareCapture returns one declare capture

  Returns one declare capture configuration by it's index in the specified frontend.
*/
func (a *Client) GetDeclareCapture(params *GetDeclareCaptureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeclareCaptureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeclareCaptureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeclareCapture",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/captures/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeclareCaptureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeclareCaptureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDeclareCaptureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDeclareCaptures returns an array of declare captures

  Returns an array of all declare capture records that are configured in specified frontend.
*/
func (a *Client) GetDeclareCaptures(params *GetDeclareCapturesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeclareCapturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeclareCapturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeclareCaptures",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/captures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeclareCapturesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeclareCapturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDeclareCapturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReplaceDeclareCapture replaces a declare capture

  Replaces a declare capture configuration by it's index in the specified frontend.
*/
func (a *Client) ReplaceDeclareCapture(params *ReplaceDeclareCaptureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceDeclareCaptureOK, *ReplaceDeclareCaptureAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceDeclareCaptureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceDeclareCapture",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/captures/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceDeclareCaptureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceDeclareCaptureOK:
		return value, nil, nil
	case *ReplaceDeclareCaptureAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceDeclareCaptureDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
