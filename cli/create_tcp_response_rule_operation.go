// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/practical-coder/hdt/client/tcp_response_rule"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTCPResponseRuleCreateTCPResponseRuleCmd returns a cmd to handle operation createTcpResponseRule
func makeOperationTCPResponseRuleCreateTCPResponseRuleCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "createTCPResponseRule",
		Short: `Adds a new TCP Response Rule of the specified type in the specified backend.`,
		RunE:  runOperationTCPResponseRuleCreateTCPResponseRule,
	}

	if err := registerOperationTCPResponseRuleCreateTCPResponseRuleParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTCPResponseRuleCreateTCPResponseRule uses cmd flags to call endpoint api
func runOperationTCPResponseRuleCreateTCPResponseRule(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := tcp_response_rule.NewCreateTCPResponseRuleParams()
	if err, _ := retrieveOperationTCPResponseRuleCreateTCPResponseRuleBackendFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTCPResponseRuleCreateTCPResponseRuleDataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTCPResponseRuleCreateTCPResponseRuleForceReloadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTCPResponseRuleCreateTCPResponseRuleTransactionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTCPResponseRuleCreateTCPResponseRuleVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTCPResponseRuleCreateTCPResponseRuleResult(appCli.TCPResponseRule.CreateTCPResponseRule(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTCPResponseRuleCreateTCPResponseRuleParamFlags registers all flags needed to fill params
func registerOperationTCPResponseRuleCreateTCPResponseRuleParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTCPResponseRuleCreateTCPResponseRuleBackendParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTCPResponseRuleCreateTCPResponseRuleDataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTCPResponseRuleCreateTCPResponseRuleForceReloadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTCPResponseRuleCreateTCPResponseRuleTransactionIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTCPResponseRuleCreateTCPResponseRuleVersionParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTCPResponseRuleCreateTCPResponseRuleBackendParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	backendDescription := `Required. Parent backend name`

	var backendFlagName string
	if cmdPrefix == "" {
		backendFlagName = "backend"
	} else {
		backendFlagName = fmt.Sprintf("%v.backend", cmdPrefix)
	}

	var backendFlagDefault string

	_ = cmd.PersistentFlags().String(backendFlagName, backendFlagDefault, backendDescription)

	return nil
}
func registerOperationTCPResponseRuleCreateTCPResponseRuleDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(dataFlagName, "", "Optional json string for [data]. ")

	// add flags for body
	if err := registerModelTCPResponseRuleFlags(0, "tcpResponseRule", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationTCPResponseRuleCreateTCPResponseRuleForceReloadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	forceReloadDescription := `If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.`

	var forceReloadFlagName string
	if cmdPrefix == "" {
		forceReloadFlagName = "force_reload"
	} else {
		forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
	}

	var forceReloadFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceReloadFlagName, forceReloadFlagDefault, forceReloadDescription)

	return nil
}
func registerOperationTCPResponseRuleCreateTCPResponseRuleTransactionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	transactionIdDescription := `ID of the transaction where we want to add the operation. Cannot be used when version is specified.`

	var transactionIdFlagName string
	if cmdPrefix == "" {
		transactionIdFlagName = "transaction_id"
	} else {
		transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
	}

	var transactionIdFlagDefault string

	_ = cmd.PersistentFlags().String(transactionIdFlagName, transactionIdFlagDefault, transactionIdDescription)

	return nil
}
func registerOperationTCPResponseRuleCreateTCPResponseRuleVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	versionDescription := `Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func retrieveOperationTCPResponseRuleCreateTCPResponseRuleBackendFlag(m *tcp_response_rule.CreateTCPResponseRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("backend") {

		var backendFlagName string
		if cmdPrefix == "" {
			backendFlagName = "backend"
		} else {
			backendFlagName = fmt.Sprintf("%v.backend", cmdPrefix)
		}

		backendFlagValue, err := cmd.Flags().GetString(backendFlagName)
		if err != nil {
			return err, false
		}
		m.Backend = backendFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTCPResponseRuleCreateTCPResponseRuleDataFlag(m *tcp_response_rule.CreateTCPResponseRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("data") {
		// Read data string from cmd and unmarshal
		dataValueStr, err := cmd.Flags().GetString("data")
		if err != nil {
			return err, false
		}

		dataValue := models.TCPResponseRule{}
		if err := json.Unmarshal([]byte(dataValueStr), &dataValue); err != nil {
			return fmt.Errorf("cannot unmarshal data string in models.TCPResponseRule: %v", err), false
		}
		m.Data = &dataValue
	}
	dataValueModel := m.Data
	if swag.IsZero(dataValueModel) {
		dataValueModel = &models.TCPResponseRule{}
	}
	err, added := retrieveModelTCPResponseRuleFlags(0, dataValueModel, "tcpResponseRule", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Data = dataValueModel
	}
	if dryRun && debug {

		dataValueDebugBytes, err := json.Marshal(m.Data)
		if err != nil {
			return err, false
		}
		logDebugf("Data dry-run payload: %v", string(dataValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationTCPResponseRuleCreateTCPResponseRuleForceReloadFlag(m *tcp_response_rule.CreateTCPResponseRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("force_reload") {

		var forceReloadFlagName string
		if cmdPrefix == "" {
			forceReloadFlagName = "force_reload"
		} else {
			forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
		}

		forceReloadFlagValue, err := cmd.Flags().GetBool(forceReloadFlagName)
		if err != nil {
			return err, false
		}
		m.ForceReload = &forceReloadFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTCPResponseRuleCreateTCPResponseRuleTransactionIDFlag(m *tcp_response_rule.CreateTCPResponseRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("transaction_id") {

		var transactionIdFlagName string
		if cmdPrefix == "" {
			transactionIdFlagName = "transaction_id"
		} else {
			transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
		}

		transactionIdFlagValue, err := cmd.Flags().GetString(transactionIdFlagName)
		if err != nil {
			return err, false
		}
		m.TransactionID = &transactionIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTCPResponseRuleCreateTCPResponseRuleVersionFlag(m *tcp_response_rule.CreateTCPResponseRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("version") {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

	}
	return nil, retAdded
}

// parseOperationTCPResponseRuleCreateTCPResponseRuleResult parses request result and return the string content
func parseOperationTCPResponseRuleCreateTCPResponseRuleResult(resp0 *tcp_response_rule.CreateTCPResponseRuleCreated, resp1 *tcp_response_rule.CreateTCPResponseRuleAccepted, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*tcp_response_rule.CreateTCPResponseRuleDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*tcp_response_rule.CreateTCPResponseRuleCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*tcp_response_rule.CreateTCPResponseRuleAccepted)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*tcp_response_rule.CreateTCPResponseRuleBadRequest)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*tcp_response_rule.CreateTCPResponseRuleConflict)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
		msgStr, err := json.Marshal(resp1.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
