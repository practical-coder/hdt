// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/practical-coder/hdt/client/cluster"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationClusterPostClusterCmd returns a cmd to handle operation postCluster
func makeOperationClusterPostClusterCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "postCluster",
		Short: `Post cluster settings`,
		RunE:  runOperationClusterPostCluster,
	}

	if err := registerOperationClusterPostClusterParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationClusterPostCluster uses cmd flags to call endpoint api
func runOperationClusterPostCluster(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := cluster.NewPostClusterParams()
	if err, _ := retrieveOperationClusterPostClusterAdvertisedAddressFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationClusterPostClusterAdvertisedPortFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationClusterPostClusterConfigurationFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationClusterPostClusterDataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationClusterPostClusterVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationClusterPostClusterResult(appCli.Cluster.PostCluster(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationClusterPostClusterParamFlags registers all flags needed to fill params
func registerOperationClusterPostClusterParamFlags(cmd *cobra.Command) error {
	if err := registerOperationClusterPostClusterAdvertisedAddressParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationClusterPostClusterAdvertisedPortParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationClusterPostClusterConfigurationParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationClusterPostClusterDataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationClusterPostClusterVersionParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationClusterPostClusterAdvertisedAddressParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	advertisedAddressDescription := `Force the advertised address when joining a cluster`

	var advertisedAddressFlagName string
	if cmdPrefix == "" {
		advertisedAddressFlagName = "advertised_address"
	} else {
		advertisedAddressFlagName = fmt.Sprintf("%v.advertised_address", cmdPrefix)
	}

	var advertisedAddressFlagDefault string

	_ = cmd.PersistentFlags().String(advertisedAddressFlagName, advertisedAddressFlagDefault, advertisedAddressDescription)

	return nil
}
func registerOperationClusterPostClusterAdvertisedPortParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	advertisedPortDescription := `Force the advertised port when joining a cluster`

	var advertisedPortFlagName string
	if cmdPrefix == "" {
		advertisedPortFlagName = "advertised_port"
	} else {
		advertisedPortFlagName = fmt.Sprintf("%v.advertised_port", cmdPrefix)
	}

	var advertisedPortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(advertisedPortFlagName, advertisedPortFlagDefault, advertisedPortDescription)

	return nil
}
func registerOperationClusterPostClusterConfigurationParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	configurationDescription := `Enum: ["keep"]. In case of moving to single mode do we keep or clean configuration`

	var configurationFlagName string
	if cmdPrefix == "" {
		configurationFlagName = "configuration"
	} else {
		configurationFlagName = fmt.Sprintf("%v.configuration", cmdPrefix)
	}

	var configurationFlagDefault string

	_ = cmd.PersistentFlags().String(configurationFlagName, configurationFlagDefault, configurationDescription)

	if err := cmd.RegisterFlagCompletionFunc(configurationFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["keep"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}
func registerOperationClusterPostClusterDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(dataFlagName, "", "Optional json string for [data]. ")

	// add flags for body
	if err := registerModelClusterSettingsFlags(0, "clusterSettings", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationClusterPostClusterVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	versionDescription := `Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func retrieveOperationClusterPostClusterAdvertisedAddressFlag(m *cluster.PostClusterParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("advertised_address") {

		var advertisedAddressFlagName string
		if cmdPrefix == "" {
			advertisedAddressFlagName = "advertised_address"
		} else {
			advertisedAddressFlagName = fmt.Sprintf("%v.advertised_address", cmdPrefix)
		}

		advertisedAddressFlagValue, err := cmd.Flags().GetString(advertisedAddressFlagName)
		if err != nil {
			return err, false
		}
		m.AdvertisedAddress = &advertisedAddressFlagValue

	}
	return nil, retAdded
}
func retrieveOperationClusterPostClusterAdvertisedPortFlag(m *cluster.PostClusterParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("advertised_port") {

		var advertisedPortFlagName string
		if cmdPrefix == "" {
			advertisedPortFlagName = "advertised_port"
		} else {
			advertisedPortFlagName = fmt.Sprintf("%v.advertised_port", cmdPrefix)
		}

		advertisedPortFlagValue, err := cmd.Flags().GetInt64(advertisedPortFlagName)
		if err != nil {
			return err, false
		}
		m.AdvertisedPort = &advertisedPortFlagValue

	}
	return nil, retAdded
}
func retrieveOperationClusterPostClusterConfigurationFlag(m *cluster.PostClusterParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("configuration") {

		var configurationFlagName string
		if cmdPrefix == "" {
			configurationFlagName = "configuration"
		} else {
			configurationFlagName = fmt.Sprintf("%v.configuration", cmdPrefix)
		}

		configurationFlagValue, err := cmd.Flags().GetString(configurationFlagName)
		if err != nil {
			return err, false
		}
		m.Configuration = &configurationFlagValue

	}
	return nil, retAdded
}
func retrieveOperationClusterPostClusterDataFlag(m *cluster.PostClusterParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("data") {
		// Read data string from cmd and unmarshal
		dataValueStr, err := cmd.Flags().GetString("data")
		if err != nil {
			return err, false
		}

		dataValue := models.ClusterSettings{}
		if err := json.Unmarshal([]byte(dataValueStr), &dataValue); err != nil {
			return fmt.Errorf("cannot unmarshal data string in models.ClusterSettings: %v", err), false
		}
		m.Data = &dataValue
	}
	dataValueModel := m.Data
	if swag.IsZero(dataValueModel) {
		dataValueModel = &models.ClusterSettings{}
	}
	err, added := retrieveModelClusterSettingsFlags(0, dataValueModel, "clusterSettings", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Data = dataValueModel
	}
	if dryRun && debug {

		dataValueDebugBytes, err := json.Marshal(m.Data)
		if err != nil {
			return err, false
		}
		logDebugf("Data dry-run payload: %v", string(dataValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationClusterPostClusterVersionFlag(m *cluster.PostClusterParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("version") {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

	}
	return nil, retAdded
}

// parseOperationClusterPostClusterResult parses request result and return the string content
func parseOperationClusterPostClusterResult(resp0 *cluster.PostClusterOK, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*cluster.PostClusterDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*cluster.PostClusterOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*cluster.PostClusterBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
