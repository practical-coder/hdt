// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for GeneralFile

// register flags to command
func registerModelGeneralFileFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGeneralFileDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralFileFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralFileID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralFileStorageName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGeneralFileDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerGeneralFileFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fileDescription := ``

	var fileFlagName string
	if cmdPrefix == "" {
		fileFlagName = "file"
	} else {
		fileFlagName = fmt.Sprintf("%v.file", cmdPrefix)
	}

	var fileFlagDefault string

	_ = cmd.PersistentFlags().String(fileFlagName, fileFlagDefault, fileDescription)

	return nil
}

func registerGeneralFileID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerGeneralFileStorageName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	storageNameDescription := ``

	var storageNameFlagName string
	if cmdPrefix == "" {
		storageNameFlagName = "storage_name"
	} else {
		storageNameFlagName = fmt.Sprintf("%v.storage_name", cmdPrefix)
	}

	var storageNameFlagDefault string

	_ = cmd.PersistentFlags().String(storageNameFlagName, storageNameFlagDefault, storageNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGeneralFileFlags(depth int, m *models.GeneralFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, descriptionAdded := retrieveGeneralFileDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, fileAdded := retrieveGeneralFileFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileAdded

	err, idAdded := retrieveGeneralFileIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, storageNameAdded := retrieveGeneralFileStorageNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storageNameAdded

	return nil, retAdded
}

func retrieveGeneralFileDescriptionFlags(depth int, m *models.GeneralFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralFileFileFlags(depth int, m *models.GeneralFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fileFlagName := fmt.Sprintf("%v.file", cmdPrefix)
	if cmd.Flags().Changed(fileFlagName) {

		var fileFlagName string
		if cmdPrefix == "" {
			fileFlagName = "file"
		} else {
			fileFlagName = fmt.Sprintf("%v.file", cmdPrefix)
		}

		fileFlagValue, err := cmd.Flags().GetString(fileFlagName)
		if err != nil {
			return err, false
		}
		m.File = fileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralFileIDFlags(depth int, m *models.GeneralFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralFileStorageNameFlags(depth int, m *models.GeneralFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	storageNameFlagName := fmt.Sprintf("%v.storage_name", cmdPrefix)
	if cmd.Flags().Changed(storageNameFlagName) {

		var storageNameFlagName string
		if cmdPrefix == "" {
			storageNameFlagName = "storage_name"
		} else {
			storageNameFlagName = fmt.Sprintf("%v.storage_name", cmdPrefix)
		}

		storageNameFlagValue, err := cmd.Flags().GetString(storageNameFlagName)
		if err != nil {
			return err, false
		}
		m.StorageName = storageNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
