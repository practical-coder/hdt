// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdt/client/spoe"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSpoeDeleteSpoeScopeCmd returns a cmd to handle operation deleteSpoeScope
func makeOperationSpoeDeleteSpoeScopeCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "deleteSpoeScope",
		Short: `Deletes a SPOE scope from the configuration file.`,
		RunE:  runOperationSpoeDeleteSpoeScope,
	}

	if err := registerOperationSpoeDeleteSpoeScopeParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSpoeDeleteSpoeScope uses cmd flags to call endpoint api
func runOperationSpoeDeleteSpoeScope(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := spoe.NewDeleteSpoeScopeParams()
	if err, _ := retrieveOperationSpoeDeleteSpoeScopeNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSpoeDeleteSpoeScopeSpoeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSpoeDeleteSpoeScopeTransactionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSpoeDeleteSpoeScopeVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSpoeDeleteSpoeScopeResult(appCli.Spoe.DeleteSpoeScope(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSpoeDeleteSpoeScopeParamFlags registers all flags needed to fill params
func registerOperationSpoeDeleteSpoeScopeParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSpoeDeleteSpoeScopeNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSpoeDeleteSpoeScopeSpoeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSpoeDeleteSpoeScopeTransactionIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSpoeDeleteSpoeScopeVersionParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSpoeDeleteSpoeScopeNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `Required. Spoe scope name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}
func registerOperationSpoeDeleteSpoeScopeSpoeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	spoeDescription := `Required. Spoe file name`

	var spoeFlagName string
	if cmdPrefix == "" {
		spoeFlagName = "spoe"
	} else {
		spoeFlagName = fmt.Sprintf("%v.spoe", cmdPrefix)
	}

	var spoeFlagDefault string

	_ = cmd.PersistentFlags().String(spoeFlagName, spoeFlagDefault, spoeDescription)

	return nil
}
func registerOperationSpoeDeleteSpoeScopeTransactionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	transactionIdDescription := `ID of the transaction where we want to add the operation. Cannot be used when version is specified.`

	var transactionIdFlagName string
	if cmdPrefix == "" {
		transactionIdFlagName = "transaction_id"
	} else {
		transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
	}

	var transactionIdFlagDefault string

	_ = cmd.PersistentFlags().String(transactionIdFlagName, transactionIdFlagDefault, transactionIdDescription)

	return nil
}
func registerOperationSpoeDeleteSpoeScopeVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	versionDescription := `Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func retrieveOperationSpoeDeleteSpoeScopeNameFlag(m *spoe.DeleteSpoeScopeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSpoeDeleteSpoeScopeSpoeFlag(m *spoe.DeleteSpoeScopeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("spoe") {

		var spoeFlagName string
		if cmdPrefix == "" {
			spoeFlagName = "spoe"
		} else {
			spoeFlagName = fmt.Sprintf("%v.spoe", cmdPrefix)
		}

		spoeFlagValue, err := cmd.Flags().GetString(spoeFlagName)
		if err != nil {
			return err, false
		}
		m.Spoe = spoeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSpoeDeleteSpoeScopeTransactionIDFlag(m *spoe.DeleteSpoeScopeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("transaction_id") {

		var transactionIdFlagName string
		if cmdPrefix == "" {
			transactionIdFlagName = "transaction_id"
		} else {
			transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
		}

		transactionIdFlagValue, err := cmd.Flags().GetString(transactionIdFlagName)
		if err != nil {
			return err, false
		}
		m.TransactionID = &transactionIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSpoeDeleteSpoeScopeVersionFlag(m *spoe.DeleteSpoeScopeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("version") {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

	}
	return nil, retAdded
}

// parseOperationSpoeDeleteSpoeScopeResult parses request result and return the string content
func parseOperationSpoeDeleteSpoeScopeResult(resp0 *spoe.DeleteSpoeScopeNoContent, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*spoe.DeleteSpoeScopeDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning deleteSpoeScopeNoContent is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*spoe.DeleteSpoeScopeNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response deleteSpoeScopeNoContent is not supported by go-swagger cli yet.

	return "", nil
}
