// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdt/client/configuration"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationConfigurationPostHAProxyConfigurationCmd returns a cmd to handle operation postHAProxyConfiguration
func makeOperationConfigurationPostHAProxyConfigurationCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "postHAProxyConfiguration",
		Short: `Push a new haproxy configuration file in plain text`,
		RunE:  runOperationConfigurationPostHAProxyConfiguration,
	}

	if err := registerOperationConfigurationPostHAProxyConfigurationParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationConfigurationPostHAProxyConfiguration uses cmd flags to call endpoint api
func runOperationConfigurationPostHAProxyConfiguration(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := configuration.NewPostHAProxyConfigurationParams()
	if err, _ := retrieveOperationConfigurationPostHAProxyConfigurationXRuntimeActionsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationConfigurationPostHAProxyConfigurationDataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationConfigurationPostHAProxyConfigurationForceReloadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationConfigurationPostHAProxyConfigurationOnlyValidateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationConfigurationPostHAProxyConfigurationSkipReloadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationConfigurationPostHAProxyConfigurationSkipVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationConfigurationPostHAProxyConfigurationVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationConfigurationPostHAProxyConfigurationResult(appCli.Configuration.PostHAProxyConfiguration(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationConfigurationPostHAProxyConfigurationParamFlags registers all flags needed to fill params
func registerOperationConfigurationPostHAProxyConfigurationParamFlags(cmd *cobra.Command) error {
	if err := registerOperationConfigurationPostHAProxyConfigurationXRuntimeActionsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationConfigurationPostHAProxyConfigurationDataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationConfigurationPostHAProxyConfigurationForceReloadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationConfigurationPostHAProxyConfigurationOnlyValidateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationConfigurationPostHAProxyConfigurationSkipReloadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationConfigurationPostHAProxyConfigurationSkipVersionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationConfigurationPostHAProxyConfigurationVersionParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationConfigurationPostHAProxyConfigurationXRuntimeActionsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRuntimeActionsDescription := `List of Runtime API commands with parameters separated by ';'`

	var xRuntimeActionsFlagName string
	if cmdPrefix == "" {
		xRuntimeActionsFlagName = "X-Runtime-Actions"
	} else {
		xRuntimeActionsFlagName = fmt.Sprintf("%v.X-Runtime-Actions", cmdPrefix)
	}

	var xRuntimeActionsFlagDefault string

	_ = cmd.PersistentFlags().String(xRuntimeActionsFlagName, xRuntimeActionsFlagDefault, xRuntimeActionsDescription)

	return nil
}
func registerOperationConfigurationPostHAProxyConfigurationDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	dataDescription := `Required. `

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	var dataFlagDefault string

	_ = cmd.PersistentFlags().String(dataFlagName, dataFlagDefault, dataDescription)

	return nil
}
func registerOperationConfigurationPostHAProxyConfigurationForceReloadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	forceReloadDescription := `If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.`

	var forceReloadFlagName string
	if cmdPrefix == "" {
		forceReloadFlagName = "force_reload"
	} else {
		forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
	}

	var forceReloadFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceReloadFlagName, forceReloadFlagDefault, forceReloadDescription)

	return nil
}
func registerOperationConfigurationPostHAProxyConfigurationOnlyValidateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	onlyValidateDescription := `If set, only validates configuration, without applying it`

	var onlyValidateFlagName string
	if cmdPrefix == "" {
		onlyValidateFlagName = "only_validate"
	} else {
		onlyValidateFlagName = fmt.Sprintf("%v.only_validate", cmdPrefix)
	}

	var onlyValidateFlagDefault bool

	_ = cmd.PersistentFlags().Bool(onlyValidateFlagName, onlyValidateFlagDefault, onlyValidateDescription)

	return nil
}
func registerOperationConfigurationPostHAProxyConfigurationSkipReloadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	skipReloadDescription := `If set, no reload will be initiated and runtime actions from X-Runtime-Actions will be applied`

	var skipReloadFlagName string
	if cmdPrefix == "" {
		skipReloadFlagName = "skip_reload"
	} else {
		skipReloadFlagName = fmt.Sprintf("%v.skip_reload", cmdPrefix)
	}

	var skipReloadFlagDefault bool

	_ = cmd.PersistentFlags().Bool(skipReloadFlagName, skipReloadFlagDefault, skipReloadDescription)

	return nil
}
func registerOperationConfigurationPostHAProxyConfigurationSkipVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	skipVersionDescription := `If set, no version check will be done and the pushed config will be enforced`

	var skipVersionFlagName string
	if cmdPrefix == "" {
		skipVersionFlagName = "skip_version"
	} else {
		skipVersionFlagName = fmt.Sprintf("%v.skip_version", cmdPrefix)
	}

	var skipVersionFlagDefault bool

	_ = cmd.PersistentFlags().Bool(skipVersionFlagName, skipVersionFlagDefault, skipVersionDescription)

	return nil
}
func registerOperationConfigurationPostHAProxyConfigurationVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	versionDescription := `Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func retrieveOperationConfigurationPostHAProxyConfigurationXRuntimeActionsFlag(m *configuration.PostHAProxyConfigurationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Runtime-Actions") {

		var xRuntimeActionsFlagName string
		if cmdPrefix == "" {
			xRuntimeActionsFlagName = "X-Runtime-Actions"
		} else {
			xRuntimeActionsFlagName = fmt.Sprintf("%v.X-Runtime-Actions", cmdPrefix)
		}

		xRuntimeActionsFlagValue, err := cmd.Flags().GetString(xRuntimeActionsFlagName)
		if err != nil {
			return err, false
		}
		m.XRuntimeActions = &xRuntimeActionsFlagValue

	}
	return nil, retAdded
}
func retrieveOperationConfigurationPostHAProxyConfigurationDataFlag(m *configuration.PostHAProxyConfigurationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("data") {

		var dataFlagName string
		if cmdPrefix == "" {
			dataFlagName = "data"
		} else {
			dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
		}

		dataFlagValue, err := cmd.Flags().GetString(dataFlagName)
		if err != nil {
			return err, false
		}
		m.Data = dataFlagValue

	}
	return nil, retAdded
}
func retrieveOperationConfigurationPostHAProxyConfigurationForceReloadFlag(m *configuration.PostHAProxyConfigurationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("force_reload") {

		var forceReloadFlagName string
		if cmdPrefix == "" {
			forceReloadFlagName = "force_reload"
		} else {
			forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
		}

		forceReloadFlagValue, err := cmd.Flags().GetBool(forceReloadFlagName)
		if err != nil {
			return err, false
		}
		m.ForceReload = &forceReloadFlagValue

	}
	return nil, retAdded
}
func retrieveOperationConfigurationPostHAProxyConfigurationOnlyValidateFlag(m *configuration.PostHAProxyConfigurationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("only_validate") {

		var onlyValidateFlagName string
		if cmdPrefix == "" {
			onlyValidateFlagName = "only_validate"
		} else {
			onlyValidateFlagName = fmt.Sprintf("%v.only_validate", cmdPrefix)
		}

		onlyValidateFlagValue, err := cmd.Flags().GetBool(onlyValidateFlagName)
		if err != nil {
			return err, false
		}
		m.OnlyValidate = &onlyValidateFlagValue

	}
	return nil, retAdded
}
func retrieveOperationConfigurationPostHAProxyConfigurationSkipReloadFlag(m *configuration.PostHAProxyConfigurationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("skip_reload") {

		var skipReloadFlagName string
		if cmdPrefix == "" {
			skipReloadFlagName = "skip_reload"
		} else {
			skipReloadFlagName = fmt.Sprintf("%v.skip_reload", cmdPrefix)
		}

		skipReloadFlagValue, err := cmd.Flags().GetBool(skipReloadFlagName)
		if err != nil {
			return err, false
		}
		m.SkipReload = &skipReloadFlagValue

	}
	return nil, retAdded
}
func retrieveOperationConfigurationPostHAProxyConfigurationSkipVersionFlag(m *configuration.PostHAProxyConfigurationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("skip_version") {

		var skipVersionFlagName string
		if cmdPrefix == "" {
			skipVersionFlagName = "skip_version"
		} else {
			skipVersionFlagName = fmt.Sprintf("%v.skip_version", cmdPrefix)
		}

		skipVersionFlagValue, err := cmd.Flags().GetBool(skipVersionFlagName)
		if err != nil {
			return err, false
		}
		m.SkipVersion = &skipVersionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationConfigurationPostHAProxyConfigurationVersionFlag(m *configuration.PostHAProxyConfigurationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("version") {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

	}
	return nil, retAdded
}

// parseOperationConfigurationPostHAProxyConfigurationResult parses request result and return the string content
func parseOperationConfigurationPostHAProxyConfigurationResult(resp0 *configuration.PostHAProxyConfigurationCreated, resp1 *configuration.PostHAProxyConfigurationAccepted, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*configuration.PostHAProxyConfigurationDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*configuration.PostHAProxyConfigurationCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*configuration.PostHAProxyConfigurationAccepted)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*configuration.PostHAProxyConfigurationBadRequest)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		return string(msgStr), nil
	}

	if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
		msgStr := fmt.Sprintf("%v", resp1.Payload)
		return string(msgStr), nil
	}

	return "", nil
}
