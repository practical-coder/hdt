// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdc/models"
	"github.com/spf13/cobra"
)

// Schema cli for HTTPAfterResponseRule

// register flags to command
func registerModelHTTPAfterResponseRuleFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerHTTPAfterResponseRuleCond(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPAfterResponseRuleCondTest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPAfterResponseRuleHdrFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPAfterResponseRuleHdrMatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPAfterResponseRuleHdrMethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPAfterResponseRuleHdrName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPAfterResponseRuleIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPAfterResponseRuleStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPAfterResponseRuleStatusReason(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPAfterResponseRuleStrictMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPAfterResponseRuleType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPAfterResponseRuleVarExpr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPAfterResponseRuleVarName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPAfterResponseRuleVarScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerHTTPAfterResponseRuleCond(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condDescription := `Enum: ["if","unless"]. `

	var condFlagName string
	if cmdPrefix == "" {
		condFlagName = "cond"
	} else {
		condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
	}

	var condFlagDefault string

	_ = cmd.PersistentFlags().String(condFlagName, condFlagDefault, condDescription)

	if err := cmd.RegisterFlagCompletionFunc(condFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["if","unless"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPAfterResponseRuleCondTest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condTestDescription := ``

	var condTestFlagName string
	if cmdPrefix == "" {
		condTestFlagName = "cond_test"
	} else {
		condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
	}

	var condTestFlagDefault string

	_ = cmd.PersistentFlags().String(condTestFlagName, condTestFlagDefault, condTestDescription)

	return nil
}

func registerHTTPAfterResponseRuleHdrFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrFormatDescription := ``

	var hdrFormatFlagName string
	if cmdPrefix == "" {
		hdrFormatFlagName = "hdr_format"
	} else {
		hdrFormatFlagName = fmt.Sprintf("%v.hdr_format", cmdPrefix)
	}

	var hdrFormatFlagDefault string

	_ = cmd.PersistentFlags().String(hdrFormatFlagName, hdrFormatFlagDefault, hdrFormatDescription)

	return nil
}

func registerHTTPAfterResponseRuleHdrMatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrMatchDescription := ``

	var hdrMatchFlagName string
	if cmdPrefix == "" {
		hdrMatchFlagName = "hdr_match"
	} else {
		hdrMatchFlagName = fmt.Sprintf("%v.hdr_match", cmdPrefix)
	}

	var hdrMatchFlagDefault string

	_ = cmd.PersistentFlags().String(hdrMatchFlagName, hdrMatchFlagDefault, hdrMatchDescription)

	return nil
}

func registerHTTPAfterResponseRuleHdrMethod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrMethodDescription := ``

	var hdrMethodFlagName string
	if cmdPrefix == "" {
		hdrMethodFlagName = "hdr_method"
	} else {
		hdrMethodFlagName = fmt.Sprintf("%v.hdr_method", cmdPrefix)
	}

	var hdrMethodFlagDefault string

	_ = cmd.PersistentFlags().String(hdrMethodFlagName, hdrMethodFlagDefault, hdrMethodDescription)

	return nil
}

func registerHTTPAfterResponseRuleHdrName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrNameDescription := ``

	var hdrNameFlagName string
	if cmdPrefix == "" {
		hdrNameFlagName = "hdr_name"
	} else {
		hdrNameFlagName = fmt.Sprintf("%v.hdr_name", cmdPrefix)
	}

	var hdrNameFlagDefault string

	_ = cmd.PersistentFlags().String(hdrNameFlagName, hdrNameFlagDefault, hdrNameDescription)

	return nil
}

func registerHTTPAfterResponseRuleIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	indexDescription := `Required. `

	var indexFlagName string
	if cmdPrefix == "" {
		indexFlagName = "index"
	} else {
		indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
	}

	var indexFlagDefault int64

	_ = cmd.PersistentFlags().Int64(indexFlagName, indexFlagDefault, indexDescription)

	return nil
}

func registerHTTPAfterResponseRuleStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := ``

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault int64

	_ = cmd.PersistentFlags().Int64(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerHTTPAfterResponseRuleStatusReason(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusReasonDescription := ``

	var statusReasonFlagName string
	if cmdPrefix == "" {
		statusReasonFlagName = "status_reason"
	} else {
		statusReasonFlagName = fmt.Sprintf("%v.status_reason", cmdPrefix)
	}

	var statusReasonFlagDefault string

	_ = cmd.PersistentFlags().String(statusReasonFlagName, statusReasonFlagDefault, statusReasonDescription)

	return nil
}

func registerHTTPAfterResponseRuleStrictMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	strictModeDescription := `Enum: ["on","off"]. `

	var strictModeFlagName string
	if cmdPrefix == "" {
		strictModeFlagName = "strict_mode"
	} else {
		strictModeFlagName = fmt.Sprintf("%v.strict_mode", cmdPrefix)
	}

	var strictModeFlagDefault string

	_ = cmd.PersistentFlags().String(strictModeFlagName, strictModeFlagDefault, strictModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(strictModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["on","off"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPAfterResponseRuleType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["add-header","allow","del-header","replace-header","replace-value","set-header","set-status","set-var","strict-mode","unset-var"]. Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["add-header","allow","del-header","replace-header","replace-value","set-header","set-status","set-var","strict-mode","unset-var"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPAfterResponseRuleVarExpr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varExprDescription := ``

	var varExprFlagName string
	if cmdPrefix == "" {
		varExprFlagName = "var_expr"
	} else {
		varExprFlagName = fmt.Sprintf("%v.var_expr", cmdPrefix)
	}

	var varExprFlagDefault string

	_ = cmd.PersistentFlags().String(varExprFlagName, varExprFlagDefault, varExprDescription)

	return nil
}

func registerHTTPAfterResponseRuleVarName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varNameDescription := ``

	var varNameFlagName string
	if cmdPrefix == "" {
		varNameFlagName = "var_name"
	} else {
		varNameFlagName = fmt.Sprintf("%v.var_name", cmdPrefix)
	}

	var varNameFlagDefault string

	_ = cmd.PersistentFlags().String(varNameFlagName, varNameFlagDefault, varNameDescription)

	return nil
}

func registerHTTPAfterResponseRuleVarScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varScopeDescription := ``

	var varScopeFlagName string
	if cmdPrefix == "" {
		varScopeFlagName = "var_scope"
	} else {
		varScopeFlagName = fmt.Sprintf("%v.var_scope", cmdPrefix)
	}

	var varScopeFlagDefault string

	_ = cmd.PersistentFlags().String(varScopeFlagName, varScopeFlagDefault, varScopeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHTTPAfterResponseRuleFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, condAdded := retrieveHTTPAfterResponseRuleCondFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condAdded

	err, condTestAdded := retrieveHTTPAfterResponseRuleCondTestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condTestAdded

	err, hdrFormatAdded := retrieveHTTPAfterResponseRuleHdrFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrFormatAdded

	err, hdrMatchAdded := retrieveHTTPAfterResponseRuleHdrMatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrMatchAdded

	err, hdrMethodAdded := retrieveHTTPAfterResponseRuleHdrMethodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrMethodAdded

	err, hdrNameAdded := retrieveHTTPAfterResponseRuleHdrNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrNameAdded

	err, indexAdded := retrieveHTTPAfterResponseRuleIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || indexAdded

	err, statusAdded := retrieveHTTPAfterResponseRuleStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, statusReasonAdded := retrieveHTTPAfterResponseRuleStatusReasonFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusReasonAdded

	err, strictModeAdded := retrieveHTTPAfterResponseRuleStrictModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || strictModeAdded

	err, typeAdded := retrieveHTTPAfterResponseRuleTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, varExprAdded := retrieveHTTPAfterResponseRuleVarExprFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varExprAdded

	err, varNameAdded := retrieveHTTPAfterResponseRuleVarNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varNameAdded

	err, varScopeAdded := retrieveHTTPAfterResponseRuleVarScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varScopeAdded

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleCondFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condFlagName := fmt.Sprintf("%v.cond", cmdPrefix)
	if cmd.Flags().Changed(condFlagName) {

		var condFlagName string
		if cmdPrefix == "" {
			condFlagName = "cond"
		} else {
			condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
		}

		condFlagValue, err := cmd.Flags().GetString(condFlagName)
		if err != nil {
			return err, false
		}
		m.Cond = condFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleCondTestFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condTestFlagName := fmt.Sprintf("%v.cond_test", cmdPrefix)
	if cmd.Flags().Changed(condTestFlagName) {

		var condTestFlagName string
		if cmdPrefix == "" {
			condTestFlagName = "cond_test"
		} else {
			condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
		}

		condTestFlagValue, err := cmd.Flags().GetString(condTestFlagName)
		if err != nil {
			return err, false
		}
		m.CondTest = condTestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleHdrFormatFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrFormatFlagName := fmt.Sprintf("%v.hdr_format", cmdPrefix)
	if cmd.Flags().Changed(hdrFormatFlagName) {

		var hdrFormatFlagName string
		if cmdPrefix == "" {
			hdrFormatFlagName = "hdr_format"
		} else {
			hdrFormatFlagName = fmt.Sprintf("%v.hdr_format", cmdPrefix)
		}

		hdrFormatFlagValue, err := cmd.Flags().GetString(hdrFormatFlagName)
		if err != nil {
			return err, false
		}
		m.HdrFormat = hdrFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleHdrMatchFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrMatchFlagName := fmt.Sprintf("%v.hdr_match", cmdPrefix)
	if cmd.Flags().Changed(hdrMatchFlagName) {

		var hdrMatchFlagName string
		if cmdPrefix == "" {
			hdrMatchFlagName = "hdr_match"
		} else {
			hdrMatchFlagName = fmt.Sprintf("%v.hdr_match", cmdPrefix)
		}

		hdrMatchFlagValue, err := cmd.Flags().GetString(hdrMatchFlagName)
		if err != nil {
			return err, false
		}
		m.HdrMatch = hdrMatchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleHdrMethodFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrMethodFlagName := fmt.Sprintf("%v.hdr_method", cmdPrefix)
	if cmd.Flags().Changed(hdrMethodFlagName) {

		var hdrMethodFlagName string
		if cmdPrefix == "" {
			hdrMethodFlagName = "hdr_method"
		} else {
			hdrMethodFlagName = fmt.Sprintf("%v.hdr_method", cmdPrefix)
		}

		hdrMethodFlagValue, err := cmd.Flags().GetString(hdrMethodFlagName)
		if err != nil {
			return err, false
		}
		m.HdrMethod = hdrMethodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleHdrNameFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrNameFlagName := fmt.Sprintf("%v.hdr_name", cmdPrefix)
	if cmd.Flags().Changed(hdrNameFlagName) {

		var hdrNameFlagName string
		if cmdPrefix == "" {
			hdrNameFlagName = "hdr_name"
		} else {
			hdrNameFlagName = fmt.Sprintf("%v.hdr_name", cmdPrefix)
		}

		hdrNameFlagValue, err := cmd.Flags().GetString(hdrNameFlagName)
		if err != nil {
			return err, false
		}
		m.HdrName = hdrNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleIndexFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	indexFlagName := fmt.Sprintf("%v.index", cmdPrefix)
	if cmd.Flags().Changed(indexFlagName) {

		var indexFlagName string
		if cmdPrefix == "" {
			indexFlagName = "index"
		} else {
			indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
		}

		indexFlagValue, err := cmd.Flags().GetInt64(indexFlagName)
		if err != nil {
			return err, false
		}
		m.Index = &indexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleStatusFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetInt64(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleStatusReasonFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusReasonFlagName := fmt.Sprintf("%v.status_reason", cmdPrefix)
	if cmd.Flags().Changed(statusReasonFlagName) {

		var statusReasonFlagName string
		if cmdPrefix == "" {
			statusReasonFlagName = "status_reason"
		} else {
			statusReasonFlagName = fmt.Sprintf("%v.status_reason", cmdPrefix)
		}

		statusReasonFlagValue, err := cmd.Flags().GetString(statusReasonFlagName)
		if err != nil {
			return err, false
		}
		m.StatusReason = statusReasonFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleStrictModeFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	strictModeFlagName := fmt.Sprintf("%v.strict_mode", cmdPrefix)
	if cmd.Flags().Changed(strictModeFlagName) {

		var strictModeFlagName string
		if cmdPrefix == "" {
			strictModeFlagName = "strict_mode"
		} else {
			strictModeFlagName = fmt.Sprintf("%v.strict_mode", cmdPrefix)
		}

		strictModeFlagValue, err := cmd.Flags().GetString(strictModeFlagName)
		if err != nil {
			return err, false
		}
		m.StrictMode = strictModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleTypeFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleVarExprFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varExprFlagName := fmt.Sprintf("%v.var_expr", cmdPrefix)
	if cmd.Flags().Changed(varExprFlagName) {

		var varExprFlagName string
		if cmdPrefix == "" {
			varExprFlagName = "var_expr"
		} else {
			varExprFlagName = fmt.Sprintf("%v.var_expr", cmdPrefix)
		}

		varExprFlagValue, err := cmd.Flags().GetString(varExprFlagName)
		if err != nil {
			return err, false
		}
		m.VarExpr = varExprFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleVarNameFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varNameFlagName := fmt.Sprintf("%v.var_name", cmdPrefix)
	if cmd.Flags().Changed(varNameFlagName) {

		var varNameFlagName string
		if cmdPrefix == "" {
			varNameFlagName = "var_name"
		} else {
			varNameFlagName = fmt.Sprintf("%v.var_name", cmdPrefix)
		}

		varNameFlagValue, err := cmd.Flags().GetString(varNameFlagName)
		if err != nil {
			return err, false
		}
		m.VarName = varNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPAfterResponseRuleVarScopeFlags(depth int, m *models.HTTPAfterResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varScopeFlagName := fmt.Sprintf("%v.var_scope", cmdPrefix)
	if cmd.Flags().Changed(varScopeFlagName) {

		var varScopeFlagName string
		if cmdPrefix == "" {
			varScopeFlagName = "var_scope"
		} else {
			varScopeFlagName = fmt.Sprintf("%v.var_scope", cmdPrefix)
		}

		varScopeFlagValue, err := cmd.Flags().GetString(varScopeFlagName)
		if err != nil {
			return err, false
		}
		m.VarScope = varScopeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
