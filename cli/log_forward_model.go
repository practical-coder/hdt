// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for LogForward

// register flags to command
func registerModelLogForwardFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLogForwardBacklog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLogForwardMaxconn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLogForwardName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLogForwardTimeoutClient(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLogForwardBacklog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	backlogDescription := ``

	var backlogFlagName string
	if cmdPrefix == "" {
		backlogFlagName = "backlog"
	} else {
		backlogFlagName = fmt.Sprintf("%v.backlog", cmdPrefix)
	}

	var backlogFlagDefault int64

	_ = cmd.PersistentFlags().Int64(backlogFlagName, backlogFlagDefault, backlogDescription)

	return nil
}

func registerLogForwardMaxconn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxconnDescription := ``

	var maxconnFlagName string
	if cmdPrefix == "" {
		maxconnFlagName = "maxconn"
	} else {
		maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
	}

	var maxconnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxconnFlagName, maxconnFlagDefault, maxconnDescription)

	return nil
}

func registerLogForwardName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerLogForwardTimeoutClient(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeoutClientDescription := ``

	var timeoutClientFlagName string
	if cmdPrefix == "" {
		timeoutClientFlagName = "timeout_client"
	} else {
		timeoutClientFlagName = fmt.Sprintf("%v.timeout_client", cmdPrefix)
	}

	var timeoutClientFlagDefault int64

	_ = cmd.PersistentFlags().Int64(timeoutClientFlagName, timeoutClientFlagDefault, timeoutClientDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLogForwardFlags(depth int, m *models.LogForward, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, backlogAdded := retrieveLogForwardBacklogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || backlogAdded

	err, maxconnAdded := retrieveLogForwardMaxconnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxconnAdded

	err, nameAdded := retrieveLogForwardNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, timeoutClientAdded := retrieveLogForwardTimeoutClientFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeoutClientAdded

	return nil, retAdded
}

func retrieveLogForwardBacklogFlags(depth int, m *models.LogForward, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	backlogFlagName := fmt.Sprintf("%v.backlog", cmdPrefix)
	if cmd.Flags().Changed(backlogFlagName) {

		var backlogFlagName string
		if cmdPrefix == "" {
			backlogFlagName = "backlog"
		} else {
			backlogFlagName = fmt.Sprintf("%v.backlog", cmdPrefix)
		}

		backlogFlagValue, err := cmd.Flags().GetInt64(backlogFlagName)
		if err != nil {
			return err, false
		}
		m.Backlog = &backlogFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLogForwardMaxconnFlags(depth int, m *models.LogForward, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxconnFlagName := fmt.Sprintf("%v.maxconn", cmdPrefix)
	if cmd.Flags().Changed(maxconnFlagName) {

		var maxconnFlagName string
		if cmdPrefix == "" {
			maxconnFlagName = "maxconn"
		} else {
			maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
		}

		maxconnFlagValue, err := cmd.Flags().GetInt64(maxconnFlagName)
		if err != nil {
			return err, false
		}
		m.Maxconn = &maxconnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLogForwardNameFlags(depth int, m *models.LogForward, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLogForwardTimeoutClientFlags(depth int, m *models.LogForward, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeoutClientFlagName := fmt.Sprintf("%v.timeout_client", cmdPrefix)
	if cmd.Flags().Changed(timeoutClientFlagName) {

		var timeoutClientFlagName string
		if cmdPrefix == "" {
			timeoutClientFlagName = "timeout_client"
		} else {
			timeoutClientFlagName = fmt.Sprintf("%v.timeout_client", cmdPrefix)
		}

		timeoutClientFlagValue, err := cmd.Flags().GetInt64(timeoutClientFlagName)
		if err != nil {
			return err, false
		}
		m.TimeoutClient = &timeoutClientFlagValue

		retAdded = true
	}

	return nil, retAdded
}
