// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdt/client/acl_runtime"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationACLRuntimeAddPayloadRuntimeACLCmd returns a cmd to handle operation addPayloadRuntimeAcl
func makeOperationACLRuntimeAddPayloadRuntimeACLCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "addPayloadRuntimeACL",
		Short: `Adds a new ACL payload.`,
		RunE:  runOperationACLRuntimeAddPayloadRuntimeACL,
	}

	if err := registerOperationACLRuntimeAddPayloadRuntimeACLParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationACLRuntimeAddPayloadRuntimeACL uses cmd flags to call endpoint api
func runOperationACLRuntimeAddPayloadRuntimeACL(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := acl_runtime.NewAddPayloadRuntimeACLParams()
	if err, _ := retrieveOperationACLRuntimeAddPayloadRuntimeACLACLIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationACLRuntimeAddPayloadRuntimeACLDataFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationACLRuntimeAddPayloadRuntimeACLResult(appCli.ACLRuntime.AddPayloadRuntimeACL(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationACLRuntimeAddPayloadRuntimeACLParamFlags registers all flags needed to fill params
func registerOperationACLRuntimeAddPayloadRuntimeACLParamFlags(cmd *cobra.Command) error {
	if err := registerOperationACLRuntimeAddPayloadRuntimeACLACLIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationACLRuntimeAddPayloadRuntimeACLDataParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationACLRuntimeAddPayloadRuntimeACLACLIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	aclIdDescription := `Required. ACL ID`

	var aclIdFlagName string
	if cmdPrefix == "" {
		aclIdFlagName = "acl_id"
	} else {
		aclIdFlagName = fmt.Sprintf("%v.acl_id", cmdPrefix)
	}

	var aclIdFlagDefault string

	_ = cmd.PersistentFlags().String(aclIdFlagName, aclIdFlagDefault, aclIdDescription)

	return nil
}
func registerOperationACLRuntimeAddPayloadRuntimeACLDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	// warning: array data models.ACLFilesEntries is not supported by go-swagger cli yet

	return nil
}

func retrieveOperationACLRuntimeAddPayloadRuntimeACLACLIDFlag(m *acl_runtime.AddPayloadRuntimeACLParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("acl_id") {

		var aclIdFlagName string
		if cmdPrefix == "" {
			aclIdFlagName = "acl_id"
		} else {
			aclIdFlagName = fmt.Sprintf("%v.acl_id", cmdPrefix)
		}

		aclIdFlagValue, err := cmd.Flags().GetString(aclIdFlagName)
		if err != nil {
			return err, false
		}
		m.ACLID = aclIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationACLRuntimeAddPayloadRuntimeACLDataFlag(m *acl_runtime.AddPayloadRuntimeACLParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("data") {

		// warning: array data models.ACLFilesEntries is not supported by go-swagger cli yet

	}
	return nil, retAdded
}

// parseOperationACLRuntimeAddPayloadRuntimeACLResult parses request result and return the string content
func parseOperationACLRuntimeAddPayloadRuntimeACLResult(resp0 *acl_runtime.AddPayloadRuntimeACLCreated, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*acl_runtime.AddPayloadRuntimeACLDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*acl_runtime.AddPayloadRuntimeACLCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*acl_runtime.AddPayloadRuntimeACLBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
