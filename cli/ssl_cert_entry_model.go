// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/practical-coder/hdc/models"
	"github.com/spf13/cobra"
)

// Schema cli for SslCertEntry

// register flags to command
func registerModelSslCertEntryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSslCertEntryAlgorithm(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslCertEntryChainIssuer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslCertEntryChainSubject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslCertEntryIssuer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslCertEntryNotAfter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslCertEntryNotBefore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslCertEntrySerial(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslCertEntrySha1FingerPrint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslCertEntryStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslCertEntryStorageName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslCertEntrySubject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslCertEntrySubjectAlternativeNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSslCertEntryAlgorithm(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	algorithmDescription := ``

	var algorithmFlagName string
	if cmdPrefix == "" {
		algorithmFlagName = "algorithm"
	} else {
		algorithmFlagName = fmt.Sprintf("%v.algorithm", cmdPrefix)
	}

	var algorithmFlagDefault string

	_ = cmd.PersistentFlags().String(algorithmFlagName, algorithmFlagDefault, algorithmDescription)

	return nil
}

func registerSslCertEntryChainIssuer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	chainIssuerDescription := ``

	var chainIssuerFlagName string
	if cmdPrefix == "" {
		chainIssuerFlagName = "chain_issuer"
	} else {
		chainIssuerFlagName = fmt.Sprintf("%v.chain_issuer", cmdPrefix)
	}

	var chainIssuerFlagDefault string

	_ = cmd.PersistentFlags().String(chainIssuerFlagName, chainIssuerFlagDefault, chainIssuerDescription)

	return nil
}

func registerSslCertEntryChainSubject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	chainSubjectDescription := ``

	var chainSubjectFlagName string
	if cmdPrefix == "" {
		chainSubjectFlagName = "chain_subject"
	} else {
		chainSubjectFlagName = fmt.Sprintf("%v.chain_subject", cmdPrefix)
	}

	var chainSubjectFlagDefault string

	_ = cmd.PersistentFlags().String(chainSubjectFlagName, chainSubjectFlagDefault, chainSubjectDescription)

	return nil
}

func registerSslCertEntryIssuer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	issuerDescription := ``

	var issuerFlagName string
	if cmdPrefix == "" {
		issuerFlagName = "issuer"
	} else {
		issuerFlagName = fmt.Sprintf("%v.issuer", cmdPrefix)
	}

	var issuerFlagDefault string

	_ = cmd.PersistentFlags().String(issuerFlagName, issuerFlagDefault, issuerDescription)

	return nil
}

func registerSslCertEntryNotAfter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive not_after strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerSslCertEntryNotBefore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive not_before strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerSslCertEntrySerial(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serialDescription := ``

	var serialFlagName string
	if cmdPrefix == "" {
		serialFlagName = "serial"
	} else {
		serialFlagName = fmt.Sprintf("%v.serial", cmdPrefix)
	}

	var serialFlagDefault string

	_ = cmd.PersistentFlags().String(serialFlagName, serialFlagDefault, serialDescription)

	return nil
}

func registerSslCertEntrySha1FingerPrint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sha1FingerPrintDescription := ``

	var sha1FingerPrintFlagName string
	if cmdPrefix == "" {
		sha1FingerPrintFlagName = "sha1_finger_print"
	} else {
		sha1FingerPrintFlagName = fmt.Sprintf("%v.sha1_finger_print", cmdPrefix)
	}

	var sha1FingerPrintFlagDefault string

	_ = cmd.PersistentFlags().String(sha1FingerPrintFlagName, sha1FingerPrintFlagDefault, sha1FingerPrintDescription)

	return nil
}

func registerSslCertEntryStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := ``

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerSslCertEntryStorageName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	storageNameDescription := ``

	var storageNameFlagName string
	if cmdPrefix == "" {
		storageNameFlagName = "storage_name"
	} else {
		storageNameFlagName = fmt.Sprintf("%v.storage_name", cmdPrefix)
	}

	var storageNameFlagDefault string

	_ = cmd.PersistentFlags().String(storageNameFlagName, storageNameFlagDefault, storageNameDescription)

	return nil
}

func registerSslCertEntrySubject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	subjectDescription := ``

	var subjectFlagName string
	if cmdPrefix == "" {
		subjectFlagName = "subject"
	} else {
		subjectFlagName = fmt.Sprintf("%v.subject", cmdPrefix)
	}

	var subjectFlagDefault string

	_ = cmd.PersistentFlags().String(subjectFlagName, subjectFlagDefault, subjectDescription)

	return nil
}

func registerSslCertEntrySubjectAlternativeNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: subject_alternative_names []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSslCertEntryFlags(depth int, m *models.SslCertEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, algorithmAdded := retrieveSslCertEntryAlgorithmFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || algorithmAdded

	err, chainIssuerAdded := retrieveSslCertEntryChainIssuerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chainIssuerAdded

	err, chainSubjectAdded := retrieveSslCertEntryChainSubjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chainSubjectAdded

	err, issuerAdded := retrieveSslCertEntryIssuerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || issuerAdded

	err, notAfterAdded := retrieveSslCertEntryNotAfterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || notAfterAdded

	err, notBeforeAdded := retrieveSslCertEntryNotBeforeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || notBeforeAdded

	err, serialAdded := retrieveSslCertEntrySerialFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serialAdded

	err, sha1FingerPrintAdded := retrieveSslCertEntrySha1FingerPrintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sha1FingerPrintAdded

	err, statusAdded := retrieveSslCertEntryStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, storageNameAdded := retrieveSslCertEntryStorageNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storageNameAdded

	err, subjectAdded := retrieveSslCertEntrySubjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subjectAdded

	err, subjectAlternativeNamesAdded := retrieveSslCertEntrySubjectAlternativeNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subjectAlternativeNamesAdded

	return nil, retAdded
}

func retrieveSslCertEntryAlgorithmFlags(depth int, m *models.SslCertEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	algorithmFlagName := fmt.Sprintf("%v.algorithm", cmdPrefix)
	if cmd.Flags().Changed(algorithmFlagName) {

		var algorithmFlagName string
		if cmdPrefix == "" {
			algorithmFlagName = "algorithm"
		} else {
			algorithmFlagName = fmt.Sprintf("%v.algorithm", cmdPrefix)
		}

		algorithmFlagValue, err := cmd.Flags().GetString(algorithmFlagName)
		if err != nil {
			return err, false
		}
		m.Algorithm = algorithmFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslCertEntryChainIssuerFlags(depth int, m *models.SslCertEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	chainIssuerFlagName := fmt.Sprintf("%v.chain_issuer", cmdPrefix)
	if cmd.Flags().Changed(chainIssuerFlagName) {

		var chainIssuerFlagName string
		if cmdPrefix == "" {
			chainIssuerFlagName = "chain_issuer"
		} else {
			chainIssuerFlagName = fmt.Sprintf("%v.chain_issuer", cmdPrefix)
		}

		chainIssuerFlagValue, err := cmd.Flags().GetString(chainIssuerFlagName)
		if err != nil {
			return err, false
		}
		m.ChainIssuer = chainIssuerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslCertEntryChainSubjectFlags(depth int, m *models.SslCertEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	chainSubjectFlagName := fmt.Sprintf("%v.chain_subject", cmdPrefix)
	if cmd.Flags().Changed(chainSubjectFlagName) {

		var chainSubjectFlagName string
		if cmdPrefix == "" {
			chainSubjectFlagName = "chain_subject"
		} else {
			chainSubjectFlagName = fmt.Sprintf("%v.chain_subject", cmdPrefix)
		}

		chainSubjectFlagValue, err := cmd.Flags().GetString(chainSubjectFlagName)
		if err != nil {
			return err, false
		}
		m.ChainSubject = chainSubjectFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslCertEntryIssuerFlags(depth int, m *models.SslCertEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	issuerFlagName := fmt.Sprintf("%v.issuer", cmdPrefix)
	if cmd.Flags().Changed(issuerFlagName) {

		var issuerFlagName string
		if cmdPrefix == "" {
			issuerFlagName = "issuer"
		} else {
			issuerFlagName = fmt.Sprintf("%v.issuer", cmdPrefix)
		}

		issuerFlagValue, err := cmd.Flags().GetString(issuerFlagName)
		if err != nil {
			return err, false
		}
		m.Issuer = issuerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslCertEntryNotAfterFlags(depth int, m *models.SslCertEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	notAfterFlagName := fmt.Sprintf("%v.not_after", cmdPrefix)
	if cmd.Flags().Changed(notAfterFlagName) {

		// warning: primitive not_after strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslCertEntryNotBeforeFlags(depth int, m *models.SslCertEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	notBeforeFlagName := fmt.Sprintf("%v.not_before", cmdPrefix)
	if cmd.Flags().Changed(notBeforeFlagName) {

		// warning: primitive not_before strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslCertEntrySerialFlags(depth int, m *models.SslCertEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serialFlagName := fmt.Sprintf("%v.serial", cmdPrefix)
	if cmd.Flags().Changed(serialFlagName) {

		var serialFlagName string
		if cmdPrefix == "" {
			serialFlagName = "serial"
		} else {
			serialFlagName = fmt.Sprintf("%v.serial", cmdPrefix)
		}

		serialFlagValue, err := cmd.Flags().GetString(serialFlagName)
		if err != nil {
			return err, false
		}
		m.Serial = serialFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslCertEntrySha1FingerPrintFlags(depth int, m *models.SslCertEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sha1FingerPrintFlagName := fmt.Sprintf("%v.sha1_finger_print", cmdPrefix)
	if cmd.Flags().Changed(sha1FingerPrintFlagName) {

		var sha1FingerPrintFlagName string
		if cmdPrefix == "" {
			sha1FingerPrintFlagName = "sha1_finger_print"
		} else {
			sha1FingerPrintFlagName = fmt.Sprintf("%v.sha1_finger_print", cmdPrefix)
		}

		sha1FingerPrintFlagValue, err := cmd.Flags().GetString(sha1FingerPrintFlagName)
		if err != nil {
			return err, false
		}
		m.Sha1FingerPrint = sha1FingerPrintFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslCertEntryStatusFlags(depth int, m *models.SslCertEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslCertEntryStorageNameFlags(depth int, m *models.SslCertEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	storageNameFlagName := fmt.Sprintf("%v.storage_name", cmdPrefix)
	if cmd.Flags().Changed(storageNameFlagName) {

		var storageNameFlagName string
		if cmdPrefix == "" {
			storageNameFlagName = "storage_name"
		} else {
			storageNameFlagName = fmt.Sprintf("%v.storage_name", cmdPrefix)
		}

		storageNameFlagValue, err := cmd.Flags().GetString(storageNameFlagName)
		if err != nil {
			return err, false
		}
		m.StorageName = storageNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslCertEntrySubjectFlags(depth int, m *models.SslCertEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subjectFlagName := fmt.Sprintf("%v.subject", cmdPrefix)
	if cmd.Flags().Changed(subjectFlagName) {

		var subjectFlagName string
		if cmdPrefix == "" {
			subjectFlagName = "subject"
		} else {
			subjectFlagName = fmt.Sprintf("%v.subject", cmdPrefix)
		}

		subjectFlagValue, err := cmd.Flags().GetString(subjectFlagName)
		if err != nil {
			return err, false
		}
		m.Subject = subjectFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslCertEntrySubjectAlternativeNamesFlags(depth int, m *models.SslCertEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subjectAlternativeNamesFlagName := fmt.Sprintf("%v.subject_alternative_names", cmdPrefix)
	if cmd.Flags().Changed(subjectAlternativeNamesFlagName) {
		// warning: subject_alternative_names array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
