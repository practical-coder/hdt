// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdt/client/transactions"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTransactionsGetTransactionsCmd returns a cmd to handle operation getTransactions
func makeOperationTransactionsGetTransactionsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getTransactions",
		Short: `Returns a list of HAProxy configuration transactions. Transactions can be filtered by their status.`,
		RunE:  runOperationTransactionsGetTransactions,
	}

	if err := registerOperationTransactionsGetTransactionsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTransactionsGetTransactions uses cmd flags to call endpoint api
func runOperationTransactionsGetTransactions(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := transactions.NewGetTransactionsParams()
	if err, _ := retrieveOperationTransactionsGetTransactionsStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTransactionsGetTransactionsResult(appCli.Transactions.GetTransactions(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTransactionsGetTransactionsParamFlags registers all flags needed to fill params
func registerOperationTransactionsGetTransactionsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTransactionsGetTransactionsStatusParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTransactionsGetTransactionsStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	statusDescription := `Enum: ["failed","in_progress"]. Filter by transaction status`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["failed","in_progress"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func retrieveOperationTransactionsGetTransactionsStatusFlag(m *transactions.GetTransactionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("status") {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = &statusFlagValue

	}
	return nil, retAdded
}

// parseOperationTransactionsGetTransactionsResult parses request result and return the string content
func parseOperationTransactionsGetTransactionsResult(resp0 *transactions.GetTransactionsOK, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*transactions.GetTransactionsDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*transactions.GetTransactionsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
