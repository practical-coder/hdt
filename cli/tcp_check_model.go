// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for TCPCheck

// register flags to command
func registerModelTCPCheckFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTCPCheckAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckAlpn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckCheckComment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckDefault(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckErrorStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckExclamationMark(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckFmt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckHexFmt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckHexString(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckLinger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckLogMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckMatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckMinRecv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckOkStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckOnError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckOnSuccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckPattern(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckPortString(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckProto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckSendProxy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckSni(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckSsl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckStatusCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckToutStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckVarExpr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckVarFmt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckVarName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckVarScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPCheckViaSocks4(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTCPCheckAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	actionDescription := `Enum: ["comment","connect","expect","send","send-lf","send-binary","send-binary-lf","set-var","set-var-fmt","unset-var"]. Required. `

	var actionFlagName string
	if cmdPrefix == "" {
		actionFlagName = "action"
	} else {
		actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
	}

	var actionFlagDefault string

	_ = cmd.PersistentFlags().String(actionFlagName, actionFlagDefault, actionDescription)

	if err := cmd.RegisterFlagCompletionFunc(actionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["comment","connect","expect","send","send-lf","send-binary","send-binary-lf","set-var","set-var-fmt","unset-var"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTCPCheckAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addrDescription := ``

	var addrFlagName string
	if cmdPrefix == "" {
		addrFlagName = "addr"
	} else {
		addrFlagName = fmt.Sprintf("%v.addr", cmdPrefix)
	}

	var addrFlagDefault string

	_ = cmd.PersistentFlags().String(addrFlagName, addrFlagDefault, addrDescription)

	return nil
}

func registerTCPCheckAlpn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	alpnDescription := ``

	var alpnFlagName string
	if cmdPrefix == "" {
		alpnFlagName = "alpn"
	} else {
		alpnFlagName = fmt.Sprintf("%v.alpn", cmdPrefix)
	}

	var alpnFlagDefault string

	_ = cmd.PersistentFlags().String(alpnFlagName, alpnFlagDefault, alpnDescription)

	return nil
}

func registerTCPCheckCheckComment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkCommentDescription := ``

	var checkCommentFlagName string
	if cmdPrefix == "" {
		checkCommentFlagName = "check_comment"
	} else {
		checkCommentFlagName = fmt.Sprintf("%v.check_comment", cmdPrefix)
	}

	var checkCommentFlagDefault string

	_ = cmd.PersistentFlags().String(checkCommentFlagName, checkCommentFlagDefault, checkCommentDescription)

	return nil
}

func registerTCPCheckData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataDescription := ``

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	var dataFlagDefault string

	_ = cmd.PersistentFlags().String(dataFlagName, dataFlagDefault, dataDescription)

	return nil
}

func registerTCPCheckDefault(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultDescription := ``

	var defaultFlagName string
	if cmdPrefix == "" {
		defaultFlagName = "default"
	} else {
		defaultFlagName = fmt.Sprintf("%v.default", cmdPrefix)
	}

	var defaultFlagDefault bool

	_ = cmd.PersistentFlags().Bool(defaultFlagName, defaultFlagDefault, defaultDescription)

	return nil
}

func registerTCPCheckErrorStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorStatusDescription := `Enum: ["L7OKC","L7RSP","L7STS","L6RSP","L4CON"]. `

	var errorStatusFlagName string
	if cmdPrefix == "" {
		errorStatusFlagName = "error_status"
	} else {
		errorStatusFlagName = fmt.Sprintf("%v.error_status", cmdPrefix)
	}

	var errorStatusFlagDefault string

	_ = cmd.PersistentFlags().String(errorStatusFlagName, errorStatusFlagDefault, errorStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(errorStatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["L7OKC","L7RSP","L7STS","L6RSP","L4CON"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTCPCheckExclamationMark(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	exclamationMarkDescription := ``

	var exclamationMarkFlagName string
	if cmdPrefix == "" {
		exclamationMarkFlagName = "exclamation_mark"
	} else {
		exclamationMarkFlagName = fmt.Sprintf("%v.exclamation_mark", cmdPrefix)
	}

	var exclamationMarkFlagDefault bool

	_ = cmd.PersistentFlags().Bool(exclamationMarkFlagName, exclamationMarkFlagDefault, exclamationMarkDescription)

	return nil
}

func registerTCPCheckFmt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fmtDescription := ``

	var fmtFlagName string
	if cmdPrefix == "" {
		fmtFlagName = "fmt"
	} else {
		fmtFlagName = fmt.Sprintf("%v.fmt", cmdPrefix)
	}

	var fmtFlagDefault string

	_ = cmd.PersistentFlags().String(fmtFlagName, fmtFlagDefault, fmtDescription)

	return nil
}

func registerTCPCheckHexFmt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hexFmtDescription := ``

	var hexFmtFlagName string
	if cmdPrefix == "" {
		hexFmtFlagName = "hex_fmt"
	} else {
		hexFmtFlagName = fmt.Sprintf("%v.hex_fmt", cmdPrefix)
	}

	var hexFmtFlagDefault string

	_ = cmd.PersistentFlags().String(hexFmtFlagName, hexFmtFlagDefault, hexFmtDescription)

	return nil
}

func registerTCPCheckHexString(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hexStringDescription := ``

	var hexStringFlagName string
	if cmdPrefix == "" {
		hexStringFlagName = "hex_string"
	} else {
		hexStringFlagName = fmt.Sprintf("%v.hex_string", cmdPrefix)
	}

	var hexStringFlagDefault string

	_ = cmd.PersistentFlags().String(hexStringFlagName, hexStringFlagDefault, hexStringDescription)

	return nil
}

func registerTCPCheckIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	indexDescription := `Required. `

	var indexFlagName string
	if cmdPrefix == "" {
		indexFlagName = "index"
	} else {
		indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
	}

	var indexFlagDefault int64

	_ = cmd.PersistentFlags().Int64(indexFlagName, indexFlagDefault, indexDescription)

	return nil
}

func registerTCPCheckLinger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lingerDescription := ``

	var lingerFlagName string
	if cmdPrefix == "" {
		lingerFlagName = "linger"
	} else {
		lingerFlagName = fmt.Sprintf("%v.linger", cmdPrefix)
	}

	var lingerFlagDefault bool

	_ = cmd.PersistentFlags().Bool(lingerFlagName, lingerFlagDefault, lingerDescription)

	return nil
}

func registerTCPCheckLogMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logMessageDescription := ``

	var logMessageFlagName string
	if cmdPrefix == "" {
		logMessageFlagName = "log_message"
	} else {
		logMessageFlagName = fmt.Sprintf("%v.log_message", cmdPrefix)
	}

	var logMessageFlagDefault string

	_ = cmd.PersistentFlags().String(logMessageFlagName, logMessageFlagDefault, logMessageDescription)

	return nil
}

func registerTCPCheckMatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	matchDescription := `Enum: ["string","rstring","string-lf","binary","rbinary","binary-lf"]. `

	var matchFlagName string
	if cmdPrefix == "" {
		matchFlagName = "match"
	} else {
		matchFlagName = fmt.Sprintf("%v.match", cmdPrefix)
	}

	var matchFlagDefault string

	_ = cmd.PersistentFlags().String(matchFlagName, matchFlagDefault, matchDescription)

	if err := cmd.RegisterFlagCompletionFunc(matchFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["string","rstring","string-lf","binary","rbinary","binary-lf"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTCPCheckMinRecv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minRecvDescription := ``

	var minRecvFlagName string
	if cmdPrefix == "" {
		minRecvFlagName = "min_recv"
	} else {
		minRecvFlagName = fmt.Sprintf("%v.min_recv", cmdPrefix)
	}

	var minRecvFlagDefault int64

	_ = cmd.PersistentFlags().Int64(minRecvFlagName, minRecvFlagDefault, minRecvDescription)

	return nil
}

func registerTCPCheckOkStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	okStatusDescription := `Enum: ["L7OK","L7OKC","L6OK","L4OK"]. `

	var okStatusFlagName string
	if cmdPrefix == "" {
		okStatusFlagName = "ok_status"
	} else {
		okStatusFlagName = fmt.Sprintf("%v.ok_status", cmdPrefix)
	}

	var okStatusFlagDefault string

	_ = cmd.PersistentFlags().String(okStatusFlagName, okStatusFlagDefault, okStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(okStatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["L7OK","L7OKC","L6OK","L4OK"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTCPCheckOnError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	onErrorDescription := ``

	var onErrorFlagName string
	if cmdPrefix == "" {
		onErrorFlagName = "on_error"
	} else {
		onErrorFlagName = fmt.Sprintf("%v.on_error", cmdPrefix)
	}

	var onErrorFlagDefault string

	_ = cmd.PersistentFlags().String(onErrorFlagName, onErrorFlagDefault, onErrorDescription)

	return nil
}

func registerTCPCheckOnSuccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	onSuccessDescription := ``

	var onSuccessFlagName string
	if cmdPrefix == "" {
		onSuccessFlagName = "on_success"
	} else {
		onSuccessFlagName = fmt.Sprintf("%v.on_success", cmdPrefix)
	}

	var onSuccessFlagDefault string

	_ = cmd.PersistentFlags().String(onSuccessFlagName, onSuccessFlagDefault, onSuccessDescription)

	return nil
}

func registerTCPCheckPattern(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	patternDescription := ``

	var patternFlagName string
	if cmdPrefix == "" {
		patternFlagName = "pattern"
	} else {
		patternFlagName = fmt.Sprintf("%v.pattern", cmdPrefix)
	}

	var patternFlagDefault string

	_ = cmd.PersistentFlags().String(patternFlagName, patternFlagDefault, patternDescription)

	return nil
}

func registerTCPCheckPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := ``

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault int64

	_ = cmd.PersistentFlags().Int64(portFlagName, portFlagDefault, portDescription)

	return nil
}

func registerTCPCheckPortString(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portStringDescription := ``

	var portStringFlagName string
	if cmdPrefix == "" {
		portStringFlagName = "port_string"
	} else {
		portStringFlagName = fmt.Sprintf("%v.port_string", cmdPrefix)
	}

	var portStringFlagDefault string

	_ = cmd.PersistentFlags().String(portStringFlagName, portStringFlagDefault, portStringDescription)

	return nil
}

func registerTCPCheckProto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protoDescription := ``

	var protoFlagName string
	if cmdPrefix == "" {
		protoFlagName = "proto"
	} else {
		protoFlagName = fmt.Sprintf("%v.proto", cmdPrefix)
	}

	var protoFlagDefault string

	_ = cmd.PersistentFlags().String(protoFlagName, protoFlagDefault, protoDescription)

	return nil
}

func registerTCPCheckSendProxy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sendProxyDescription := ``

	var sendProxyFlagName string
	if cmdPrefix == "" {
		sendProxyFlagName = "send_proxy"
	} else {
		sendProxyFlagName = fmt.Sprintf("%v.send_proxy", cmdPrefix)
	}

	var sendProxyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sendProxyFlagName, sendProxyFlagDefault, sendProxyDescription)

	return nil
}

func registerTCPCheckSni(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sniDescription := ``

	var sniFlagName string
	if cmdPrefix == "" {
		sniFlagName = "sni"
	} else {
		sniFlagName = fmt.Sprintf("%v.sni", cmdPrefix)
	}

	var sniFlagDefault string

	_ = cmd.PersistentFlags().String(sniFlagName, sniFlagDefault, sniDescription)

	return nil
}

func registerTCPCheckSsl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslDescription := ``

	var sslFlagName string
	if cmdPrefix == "" {
		sslFlagName = "ssl"
	} else {
		sslFlagName = fmt.Sprintf("%v.ssl", cmdPrefix)
	}

	var sslFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sslFlagName, sslFlagDefault, sslDescription)

	return nil
}

func registerTCPCheckStatusCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusCodeDescription := ``

	var statusCodeFlagName string
	if cmdPrefix == "" {
		statusCodeFlagName = "status-code"
	} else {
		statusCodeFlagName = fmt.Sprintf("%v.status-code", cmdPrefix)
	}

	var statusCodeFlagDefault string

	_ = cmd.PersistentFlags().String(statusCodeFlagName, statusCodeFlagDefault, statusCodeDescription)

	return nil
}

func registerTCPCheckToutStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	toutStatusDescription := `Enum: ["L7TOUT","L6TOUT","L4TOUT"]. `

	var toutStatusFlagName string
	if cmdPrefix == "" {
		toutStatusFlagName = "tout_status"
	} else {
		toutStatusFlagName = fmt.Sprintf("%v.tout_status", cmdPrefix)
	}

	var toutStatusFlagDefault string

	_ = cmd.PersistentFlags().String(toutStatusFlagName, toutStatusFlagDefault, toutStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(toutStatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["L7TOUT","L6TOUT","L4TOUT"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTCPCheckVarExpr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varExprDescription := ``

	var varExprFlagName string
	if cmdPrefix == "" {
		varExprFlagName = "var_expr"
	} else {
		varExprFlagName = fmt.Sprintf("%v.var_expr", cmdPrefix)
	}

	var varExprFlagDefault string

	_ = cmd.PersistentFlags().String(varExprFlagName, varExprFlagDefault, varExprDescription)

	return nil
}

func registerTCPCheckVarFmt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varFmtDescription := ``

	var varFmtFlagName string
	if cmdPrefix == "" {
		varFmtFlagName = "var_fmt"
	} else {
		varFmtFlagName = fmt.Sprintf("%v.var_fmt", cmdPrefix)
	}

	var varFmtFlagDefault string

	_ = cmd.PersistentFlags().String(varFmtFlagName, varFmtFlagDefault, varFmtDescription)

	return nil
}

func registerTCPCheckVarName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varNameDescription := ``

	var varNameFlagName string
	if cmdPrefix == "" {
		varNameFlagName = "var_name"
	} else {
		varNameFlagName = fmt.Sprintf("%v.var_name", cmdPrefix)
	}

	var varNameFlagDefault string

	_ = cmd.PersistentFlags().String(varNameFlagName, varNameFlagDefault, varNameDescription)

	return nil
}

func registerTCPCheckVarScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varScopeDescription := ``

	var varScopeFlagName string
	if cmdPrefix == "" {
		varScopeFlagName = "var_scope"
	} else {
		varScopeFlagName = fmt.Sprintf("%v.var_scope", cmdPrefix)
	}

	var varScopeFlagDefault string

	_ = cmd.PersistentFlags().String(varScopeFlagName, varScopeFlagDefault, varScopeDescription)

	return nil
}

func registerTCPCheckViaSocks4(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	viaSocks4Description := ``

	var viaSocks4FlagName string
	if cmdPrefix == "" {
		viaSocks4FlagName = "via_socks4"
	} else {
		viaSocks4FlagName = fmt.Sprintf("%v.via_socks4", cmdPrefix)
	}

	var viaSocks4FlagDefault bool

	_ = cmd.PersistentFlags().Bool(viaSocks4FlagName, viaSocks4FlagDefault, viaSocks4Description)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTCPCheckFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, actionAdded := retrieveTCPCheckActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || actionAdded

	err, addrAdded := retrieveTCPCheckAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addrAdded

	err, alpnAdded := retrieveTCPCheckAlpnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || alpnAdded

	err, checkCommentAdded := retrieveTCPCheckCheckCommentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkCommentAdded

	err, dataAdded := retrieveTCPCheckDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	err, defaultAdded := retrieveTCPCheckDefaultFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultAdded

	err, errorStatusAdded := retrieveTCPCheckErrorStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorStatusAdded

	err, exclamationMarkAdded := retrieveTCPCheckExclamationMarkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || exclamationMarkAdded

	err, fmtAdded := retrieveTCPCheckFmtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fmtAdded

	err, hexFmtAdded := retrieveTCPCheckHexFmtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hexFmtAdded

	err, hexStringAdded := retrieveTCPCheckHexStringFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hexStringAdded

	err, indexAdded := retrieveTCPCheckIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || indexAdded

	err, lingerAdded := retrieveTCPCheckLingerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lingerAdded

	err, logMessageAdded := retrieveTCPCheckLogMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logMessageAdded

	err, matchAdded := retrieveTCPCheckMatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || matchAdded

	err, minRecvAdded := retrieveTCPCheckMinRecvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minRecvAdded

	err, okStatusAdded := retrieveTCPCheckOkStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || okStatusAdded

	err, onErrorAdded := retrieveTCPCheckOnErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || onErrorAdded

	err, onSuccessAdded := retrieveTCPCheckOnSuccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || onSuccessAdded

	err, patternAdded := retrieveTCPCheckPatternFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || patternAdded

	err, portAdded := retrieveTCPCheckPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, portStringAdded := retrieveTCPCheckPortStringFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portStringAdded

	err, protoAdded := retrieveTCPCheckProtoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protoAdded

	err, sendProxyAdded := retrieveTCPCheckSendProxyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sendProxyAdded

	err, sniAdded := retrieveTCPCheckSniFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sniAdded

	err, sslAdded := retrieveTCPCheckSslFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslAdded

	err, statusCodeAdded := retrieveTCPCheckStatusCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusCodeAdded

	err, toutStatusAdded := retrieveTCPCheckToutStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || toutStatusAdded

	err, varExprAdded := retrieveTCPCheckVarExprFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varExprAdded

	err, varFmtAdded := retrieveTCPCheckVarFmtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varFmtAdded

	err, varNameAdded := retrieveTCPCheckVarNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varNameAdded

	err, varScopeAdded := retrieveTCPCheckVarScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varScopeAdded

	err, viaSocks4Added := retrieveTCPCheckViaSocks4Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || viaSocks4Added

	return nil, retAdded
}

func retrieveTCPCheckActionFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	actionFlagName := fmt.Sprintf("%v.action", cmdPrefix)
	if cmd.Flags().Changed(actionFlagName) {

		var actionFlagName string
		if cmdPrefix == "" {
			actionFlagName = "action"
		} else {
			actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
		}

		actionFlagValue, err := cmd.Flags().GetString(actionFlagName)
		if err != nil {
			return err, false
		}
		m.Action = actionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckAddrFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addrFlagName := fmt.Sprintf("%v.addr", cmdPrefix)
	if cmd.Flags().Changed(addrFlagName) {

		var addrFlagName string
		if cmdPrefix == "" {
			addrFlagName = "addr"
		} else {
			addrFlagName = fmt.Sprintf("%v.addr", cmdPrefix)
		}

		addrFlagValue, err := cmd.Flags().GetString(addrFlagName)
		if err != nil {
			return err, false
		}
		m.Addr = addrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckAlpnFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	alpnFlagName := fmt.Sprintf("%v.alpn", cmdPrefix)
	if cmd.Flags().Changed(alpnFlagName) {

		var alpnFlagName string
		if cmdPrefix == "" {
			alpnFlagName = "alpn"
		} else {
			alpnFlagName = fmt.Sprintf("%v.alpn", cmdPrefix)
		}

		alpnFlagValue, err := cmd.Flags().GetString(alpnFlagName)
		if err != nil {
			return err, false
		}
		m.Alpn = alpnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckCheckCommentFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkCommentFlagName := fmt.Sprintf("%v.check_comment", cmdPrefix)
	if cmd.Flags().Changed(checkCommentFlagName) {

		var checkCommentFlagName string
		if cmdPrefix == "" {
			checkCommentFlagName = "check_comment"
		} else {
			checkCommentFlagName = fmt.Sprintf("%v.check_comment", cmdPrefix)
		}

		checkCommentFlagValue, err := cmd.Flags().GetString(checkCommentFlagName)
		if err != nil {
			return err, false
		}
		m.CheckComment = checkCommentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckDataFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {

		var dataFlagName string
		if cmdPrefix == "" {
			dataFlagName = "data"
		} else {
			dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
		}

		dataFlagValue, err := cmd.Flags().GetString(dataFlagName)
		if err != nil {
			return err, false
		}
		m.Data = dataFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckDefaultFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultFlagName := fmt.Sprintf("%v.default", cmdPrefix)
	if cmd.Flags().Changed(defaultFlagName) {

		var defaultFlagName string
		if cmdPrefix == "" {
			defaultFlagName = "default"
		} else {
			defaultFlagName = fmt.Sprintf("%v.default", cmdPrefix)
		}

		defaultFlagValue, err := cmd.Flags().GetBool(defaultFlagName)
		if err != nil {
			return err, false
		}
		m.Default = defaultFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckErrorStatusFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorStatusFlagName := fmt.Sprintf("%v.error_status", cmdPrefix)
	if cmd.Flags().Changed(errorStatusFlagName) {

		var errorStatusFlagName string
		if cmdPrefix == "" {
			errorStatusFlagName = "error_status"
		} else {
			errorStatusFlagName = fmt.Sprintf("%v.error_status", cmdPrefix)
		}

		errorStatusFlagValue, err := cmd.Flags().GetString(errorStatusFlagName)
		if err != nil {
			return err, false
		}
		m.ErrorStatus = errorStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckExclamationMarkFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	exclamationMarkFlagName := fmt.Sprintf("%v.exclamation_mark", cmdPrefix)
	if cmd.Flags().Changed(exclamationMarkFlagName) {

		var exclamationMarkFlagName string
		if cmdPrefix == "" {
			exclamationMarkFlagName = "exclamation_mark"
		} else {
			exclamationMarkFlagName = fmt.Sprintf("%v.exclamation_mark", cmdPrefix)
		}

		exclamationMarkFlagValue, err := cmd.Flags().GetBool(exclamationMarkFlagName)
		if err != nil {
			return err, false
		}
		m.ExclamationMark = exclamationMarkFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckFmtFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fmtFlagName := fmt.Sprintf("%v.fmt", cmdPrefix)
	if cmd.Flags().Changed(fmtFlagName) {

		var fmtFlagName string
		if cmdPrefix == "" {
			fmtFlagName = "fmt"
		} else {
			fmtFlagName = fmt.Sprintf("%v.fmt", cmdPrefix)
		}

		fmtFlagValue, err := cmd.Flags().GetString(fmtFlagName)
		if err != nil {
			return err, false
		}
		m.Fmt = fmtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckHexFmtFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hexFmtFlagName := fmt.Sprintf("%v.hex_fmt", cmdPrefix)
	if cmd.Flags().Changed(hexFmtFlagName) {

		var hexFmtFlagName string
		if cmdPrefix == "" {
			hexFmtFlagName = "hex_fmt"
		} else {
			hexFmtFlagName = fmt.Sprintf("%v.hex_fmt", cmdPrefix)
		}

		hexFmtFlagValue, err := cmd.Flags().GetString(hexFmtFlagName)
		if err != nil {
			return err, false
		}
		m.HexFmt = hexFmtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckHexStringFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hexStringFlagName := fmt.Sprintf("%v.hex_string", cmdPrefix)
	if cmd.Flags().Changed(hexStringFlagName) {

		var hexStringFlagName string
		if cmdPrefix == "" {
			hexStringFlagName = "hex_string"
		} else {
			hexStringFlagName = fmt.Sprintf("%v.hex_string", cmdPrefix)
		}

		hexStringFlagValue, err := cmd.Flags().GetString(hexStringFlagName)
		if err != nil {
			return err, false
		}
		m.HexString = hexStringFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckIndexFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	indexFlagName := fmt.Sprintf("%v.index", cmdPrefix)
	if cmd.Flags().Changed(indexFlagName) {

		var indexFlagName string
		if cmdPrefix == "" {
			indexFlagName = "index"
		} else {
			indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
		}

		indexFlagValue, err := cmd.Flags().GetInt64(indexFlagName)
		if err != nil {
			return err, false
		}
		m.Index = &indexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckLingerFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lingerFlagName := fmt.Sprintf("%v.linger", cmdPrefix)
	if cmd.Flags().Changed(lingerFlagName) {

		var lingerFlagName string
		if cmdPrefix == "" {
			lingerFlagName = "linger"
		} else {
			lingerFlagName = fmt.Sprintf("%v.linger", cmdPrefix)
		}

		lingerFlagValue, err := cmd.Flags().GetBool(lingerFlagName)
		if err != nil {
			return err, false
		}
		m.Linger = lingerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckLogMessageFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logMessageFlagName := fmt.Sprintf("%v.log_message", cmdPrefix)
	if cmd.Flags().Changed(logMessageFlagName) {

		var logMessageFlagName string
		if cmdPrefix == "" {
			logMessageFlagName = "log_message"
		} else {
			logMessageFlagName = fmt.Sprintf("%v.log_message", cmdPrefix)
		}

		logMessageFlagValue, err := cmd.Flags().GetString(logMessageFlagName)
		if err != nil {
			return err, false
		}
		m.LogMessage = logMessageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckMatchFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	matchFlagName := fmt.Sprintf("%v.match", cmdPrefix)
	if cmd.Flags().Changed(matchFlagName) {

		var matchFlagName string
		if cmdPrefix == "" {
			matchFlagName = "match"
		} else {
			matchFlagName = fmt.Sprintf("%v.match", cmdPrefix)
		}

		matchFlagValue, err := cmd.Flags().GetString(matchFlagName)
		if err != nil {
			return err, false
		}
		m.Match = matchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckMinRecvFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minRecvFlagName := fmt.Sprintf("%v.min_recv", cmdPrefix)
	if cmd.Flags().Changed(minRecvFlagName) {

		var minRecvFlagName string
		if cmdPrefix == "" {
			minRecvFlagName = "min_recv"
		} else {
			minRecvFlagName = fmt.Sprintf("%v.min_recv", cmdPrefix)
		}

		minRecvFlagValue, err := cmd.Flags().GetInt64(minRecvFlagName)
		if err != nil {
			return err, false
		}
		m.MinRecv = minRecvFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckOkStatusFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	okStatusFlagName := fmt.Sprintf("%v.ok_status", cmdPrefix)
	if cmd.Flags().Changed(okStatusFlagName) {

		var okStatusFlagName string
		if cmdPrefix == "" {
			okStatusFlagName = "ok_status"
		} else {
			okStatusFlagName = fmt.Sprintf("%v.ok_status", cmdPrefix)
		}

		okStatusFlagValue, err := cmd.Flags().GetString(okStatusFlagName)
		if err != nil {
			return err, false
		}
		m.OkStatus = okStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckOnErrorFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	onErrorFlagName := fmt.Sprintf("%v.on_error", cmdPrefix)
	if cmd.Flags().Changed(onErrorFlagName) {

		var onErrorFlagName string
		if cmdPrefix == "" {
			onErrorFlagName = "on_error"
		} else {
			onErrorFlagName = fmt.Sprintf("%v.on_error", cmdPrefix)
		}

		onErrorFlagValue, err := cmd.Flags().GetString(onErrorFlagName)
		if err != nil {
			return err, false
		}
		m.OnError = onErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckOnSuccessFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	onSuccessFlagName := fmt.Sprintf("%v.on_success", cmdPrefix)
	if cmd.Flags().Changed(onSuccessFlagName) {

		var onSuccessFlagName string
		if cmdPrefix == "" {
			onSuccessFlagName = "on_success"
		} else {
			onSuccessFlagName = fmt.Sprintf("%v.on_success", cmdPrefix)
		}

		onSuccessFlagValue, err := cmd.Flags().GetString(onSuccessFlagName)
		if err != nil {
			return err, false
		}
		m.OnSuccess = onSuccessFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckPatternFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	patternFlagName := fmt.Sprintf("%v.pattern", cmdPrefix)
	if cmd.Flags().Changed(patternFlagName) {

		var patternFlagName string
		if cmdPrefix == "" {
			patternFlagName = "pattern"
		} else {
			patternFlagName = fmt.Sprintf("%v.pattern", cmdPrefix)
		}

		patternFlagValue, err := cmd.Flags().GetString(patternFlagName)
		if err != nil {
			return err, false
		}
		m.Pattern = patternFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckPortFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetInt64(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = &portFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckPortStringFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portStringFlagName := fmt.Sprintf("%v.port_string", cmdPrefix)
	if cmd.Flags().Changed(portStringFlagName) {

		var portStringFlagName string
		if cmdPrefix == "" {
			portStringFlagName = "port_string"
		} else {
			portStringFlagName = fmt.Sprintf("%v.port_string", cmdPrefix)
		}

		portStringFlagValue, err := cmd.Flags().GetString(portStringFlagName)
		if err != nil {
			return err, false
		}
		m.PortString = portStringFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckProtoFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protoFlagName := fmt.Sprintf("%v.proto", cmdPrefix)
	if cmd.Flags().Changed(protoFlagName) {

		var protoFlagName string
		if cmdPrefix == "" {
			protoFlagName = "proto"
		} else {
			protoFlagName = fmt.Sprintf("%v.proto", cmdPrefix)
		}

		protoFlagValue, err := cmd.Flags().GetString(protoFlagName)
		if err != nil {
			return err, false
		}
		m.Proto = protoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckSendProxyFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sendProxyFlagName := fmt.Sprintf("%v.send_proxy", cmdPrefix)
	if cmd.Flags().Changed(sendProxyFlagName) {

		var sendProxyFlagName string
		if cmdPrefix == "" {
			sendProxyFlagName = "send_proxy"
		} else {
			sendProxyFlagName = fmt.Sprintf("%v.send_proxy", cmdPrefix)
		}

		sendProxyFlagValue, err := cmd.Flags().GetBool(sendProxyFlagName)
		if err != nil {
			return err, false
		}
		m.SendProxy = sendProxyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckSniFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sniFlagName := fmt.Sprintf("%v.sni", cmdPrefix)
	if cmd.Flags().Changed(sniFlagName) {

		var sniFlagName string
		if cmdPrefix == "" {
			sniFlagName = "sni"
		} else {
			sniFlagName = fmt.Sprintf("%v.sni", cmdPrefix)
		}

		sniFlagValue, err := cmd.Flags().GetString(sniFlagName)
		if err != nil {
			return err, false
		}
		m.Sni = sniFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckSslFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslFlagName := fmt.Sprintf("%v.ssl", cmdPrefix)
	if cmd.Flags().Changed(sslFlagName) {

		var sslFlagName string
		if cmdPrefix == "" {
			sslFlagName = "ssl"
		} else {
			sslFlagName = fmt.Sprintf("%v.ssl", cmdPrefix)
		}

		sslFlagValue, err := cmd.Flags().GetBool(sslFlagName)
		if err != nil {
			return err, false
		}
		m.Ssl = sslFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckStatusCodeFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusCodeFlagName := fmt.Sprintf("%v.status-code", cmdPrefix)
	if cmd.Flags().Changed(statusCodeFlagName) {

		var statusCodeFlagName string
		if cmdPrefix == "" {
			statusCodeFlagName = "status-code"
		} else {
			statusCodeFlagName = fmt.Sprintf("%v.status-code", cmdPrefix)
		}

		statusCodeFlagValue, err := cmd.Flags().GetString(statusCodeFlagName)
		if err != nil {
			return err, false
		}
		m.StatusCode = statusCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckToutStatusFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	toutStatusFlagName := fmt.Sprintf("%v.tout_status", cmdPrefix)
	if cmd.Flags().Changed(toutStatusFlagName) {

		var toutStatusFlagName string
		if cmdPrefix == "" {
			toutStatusFlagName = "tout_status"
		} else {
			toutStatusFlagName = fmt.Sprintf("%v.tout_status", cmdPrefix)
		}

		toutStatusFlagValue, err := cmd.Flags().GetString(toutStatusFlagName)
		if err != nil {
			return err, false
		}
		m.ToutStatus = toutStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckVarExprFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varExprFlagName := fmt.Sprintf("%v.var_expr", cmdPrefix)
	if cmd.Flags().Changed(varExprFlagName) {

		var varExprFlagName string
		if cmdPrefix == "" {
			varExprFlagName = "var_expr"
		} else {
			varExprFlagName = fmt.Sprintf("%v.var_expr", cmdPrefix)
		}

		varExprFlagValue, err := cmd.Flags().GetString(varExprFlagName)
		if err != nil {
			return err, false
		}
		m.VarExpr = varExprFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckVarFmtFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varFmtFlagName := fmt.Sprintf("%v.var_fmt", cmdPrefix)
	if cmd.Flags().Changed(varFmtFlagName) {

		var varFmtFlagName string
		if cmdPrefix == "" {
			varFmtFlagName = "var_fmt"
		} else {
			varFmtFlagName = fmt.Sprintf("%v.var_fmt", cmdPrefix)
		}

		varFmtFlagValue, err := cmd.Flags().GetString(varFmtFlagName)
		if err != nil {
			return err, false
		}
		m.VarFmt = varFmtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckVarNameFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varNameFlagName := fmt.Sprintf("%v.var_name", cmdPrefix)
	if cmd.Flags().Changed(varNameFlagName) {

		var varNameFlagName string
		if cmdPrefix == "" {
			varNameFlagName = "var_name"
		} else {
			varNameFlagName = fmt.Sprintf("%v.var_name", cmdPrefix)
		}

		varNameFlagValue, err := cmd.Flags().GetString(varNameFlagName)
		if err != nil {
			return err, false
		}
		m.VarName = varNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckVarScopeFlags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varScopeFlagName := fmt.Sprintf("%v.var_scope", cmdPrefix)
	if cmd.Flags().Changed(varScopeFlagName) {

		var varScopeFlagName string
		if cmdPrefix == "" {
			varScopeFlagName = "var_scope"
		} else {
			varScopeFlagName = fmt.Sprintf("%v.var_scope", cmdPrefix)
		}

		varScopeFlagValue, err := cmd.Flags().GetString(varScopeFlagName)
		if err != nil {
			return err, false
		}
		m.VarScope = varScopeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPCheckViaSocks4Flags(depth int, m *models.TCPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	viaSocks4FlagName := fmt.Sprintf("%v.via_socks4", cmdPrefix)
	if cmd.Flags().Changed(viaSocks4FlagName) {

		var viaSocks4FlagName string
		if cmdPrefix == "" {
			viaSocks4FlagName = "via_socks4"
		} else {
			viaSocks4FlagName = fmt.Sprintf("%v.via_socks4", cmdPrefix)
		}

		viaSocks4FlagValue, err := cmd.Flags().GetBool(viaSocks4FlagName)
		if err != nil {
			return err, false
		}
		m.ViaSocks4 = viaSocks4FlagValue

		retAdded = true
	}

	return nil, retAdded
}
