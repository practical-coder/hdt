// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/practical-coder/hdc/models"
	"github.com/spf13/cobra"
)

// Schema cli for Cache

// register flags to command
func registerModelCacheFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCacheMaxAge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCacheMaxObjectSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCacheMaxSecondaryEntries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCacheName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCacheProcessVary(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCacheTotalMaxSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCacheMaxAge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxAgeDescription := ``

	var maxAgeFlagName string
	if cmdPrefix == "" {
		maxAgeFlagName = "max_age"
	} else {
		maxAgeFlagName = fmt.Sprintf("%v.max_age", cmdPrefix)
	}

	var maxAgeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxAgeFlagName, maxAgeFlagDefault, maxAgeDescription)

	return nil
}

func registerCacheMaxObjectSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxObjectSizeDescription := ``

	var maxObjectSizeFlagName string
	if cmdPrefix == "" {
		maxObjectSizeFlagName = "max_object_size"
	} else {
		maxObjectSizeFlagName = fmt.Sprintf("%v.max_object_size", cmdPrefix)
	}

	var maxObjectSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxObjectSizeFlagName, maxObjectSizeFlagDefault, maxObjectSizeDescription)

	return nil
}

func registerCacheMaxSecondaryEntries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxSecondaryEntriesDescription := ``

	var maxSecondaryEntriesFlagName string
	if cmdPrefix == "" {
		maxSecondaryEntriesFlagName = "max_secondary_entries"
	} else {
		maxSecondaryEntriesFlagName = fmt.Sprintf("%v.max_secondary_entries", cmdPrefix)
	}

	var maxSecondaryEntriesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxSecondaryEntriesFlagName, maxSecondaryEntriesFlagDefault, maxSecondaryEntriesDescription)

	return nil
}

func registerCacheName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerCacheProcessVary(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	processVaryDescription := ``

	var processVaryFlagName string
	if cmdPrefix == "" {
		processVaryFlagName = "process_vary"
	} else {
		processVaryFlagName = fmt.Sprintf("%v.process_vary", cmdPrefix)
	}

	var processVaryFlagDefault bool

	_ = cmd.PersistentFlags().Bool(processVaryFlagName, processVaryFlagDefault, processVaryDescription)

	return nil
}

func registerCacheTotalMaxSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalMaxSizeDescription := ``

	var totalMaxSizeFlagName string
	if cmdPrefix == "" {
		totalMaxSizeFlagName = "total_max_size"
	} else {
		totalMaxSizeFlagName = fmt.Sprintf("%v.total_max_size", cmdPrefix)
	}

	var totalMaxSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalMaxSizeFlagName, totalMaxSizeFlagDefault, totalMaxSizeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCacheFlags(depth int, m *models.Cache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, maxAgeAdded := retrieveCacheMaxAgeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxAgeAdded

	err, maxObjectSizeAdded := retrieveCacheMaxObjectSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxObjectSizeAdded

	err, maxSecondaryEntriesAdded := retrieveCacheMaxSecondaryEntriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxSecondaryEntriesAdded

	err, nameAdded := retrieveCacheNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, processVaryAdded := retrieveCacheProcessVaryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || processVaryAdded

	err, totalMaxSizeAdded := retrieveCacheTotalMaxSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalMaxSizeAdded

	return nil, retAdded
}

func retrieveCacheMaxAgeFlags(depth int, m *models.Cache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxAgeFlagName := fmt.Sprintf("%v.max_age", cmdPrefix)
	if cmd.Flags().Changed(maxAgeFlagName) {

		var maxAgeFlagName string
		if cmdPrefix == "" {
			maxAgeFlagName = "max_age"
		} else {
			maxAgeFlagName = fmt.Sprintf("%v.max_age", cmdPrefix)
		}

		maxAgeFlagValue, err := cmd.Flags().GetInt64(maxAgeFlagName)
		if err != nil {
			return err, false
		}
		m.MaxAge = maxAgeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCacheMaxObjectSizeFlags(depth int, m *models.Cache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxObjectSizeFlagName := fmt.Sprintf("%v.max_object_size", cmdPrefix)
	if cmd.Flags().Changed(maxObjectSizeFlagName) {

		var maxObjectSizeFlagName string
		if cmdPrefix == "" {
			maxObjectSizeFlagName = "max_object_size"
		} else {
			maxObjectSizeFlagName = fmt.Sprintf("%v.max_object_size", cmdPrefix)
		}

		maxObjectSizeFlagValue, err := cmd.Flags().GetInt64(maxObjectSizeFlagName)
		if err != nil {
			return err, false
		}
		m.MaxObjectSize = maxObjectSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCacheMaxSecondaryEntriesFlags(depth int, m *models.Cache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxSecondaryEntriesFlagName := fmt.Sprintf("%v.max_secondary_entries", cmdPrefix)
	if cmd.Flags().Changed(maxSecondaryEntriesFlagName) {

		var maxSecondaryEntriesFlagName string
		if cmdPrefix == "" {
			maxSecondaryEntriesFlagName = "max_secondary_entries"
		} else {
			maxSecondaryEntriesFlagName = fmt.Sprintf("%v.max_secondary_entries", cmdPrefix)
		}

		maxSecondaryEntriesFlagValue, err := cmd.Flags().GetInt64(maxSecondaryEntriesFlagName)
		if err != nil {
			return err, false
		}
		m.MaxSecondaryEntries = maxSecondaryEntriesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCacheNameFlags(depth int, m *models.Cache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCacheProcessVaryFlags(depth int, m *models.Cache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	processVaryFlagName := fmt.Sprintf("%v.process_vary", cmdPrefix)
	if cmd.Flags().Changed(processVaryFlagName) {

		var processVaryFlagName string
		if cmdPrefix == "" {
			processVaryFlagName = "process_vary"
		} else {
			processVaryFlagName = fmt.Sprintf("%v.process_vary", cmdPrefix)
		}

		processVaryFlagValue, err := cmd.Flags().GetBool(processVaryFlagName)
		if err != nil {
			return err, false
		}
		m.ProcessVary = &processVaryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCacheTotalMaxSizeFlags(depth int, m *models.Cache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalMaxSizeFlagName := fmt.Sprintf("%v.total_max_size", cmdPrefix)
	if cmd.Flags().Changed(totalMaxSizeFlagName) {

		var totalMaxSizeFlagName string
		if cmdPrefix == "" {
			totalMaxSizeFlagName = "total_max_size"
		} else {
			totalMaxSizeFlagName = fmt.Sprintf("%v.total_max_size", cmdPrefix)
		}

		totalMaxSizeFlagValue, err := cmd.Flags().GetInt64(totalMaxSizeFlagName)
		if err != nil {
			return err, false
		}
		m.TotalMaxSize = totalMaxSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
