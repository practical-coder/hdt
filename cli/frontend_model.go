// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/haproxytech/client-native/v4/models"

	"github.com/spf13/cobra"
)

// Schema cli for Frontend

// register flags to command
func registerModelFrontendFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerFrontendAcceptInvalidHTTPRequest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendBacklog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendBindProcess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendClflog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendClientTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendClitcpka(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendClitcpkaCnt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendClitcpkaIdle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendClitcpkaIntvl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendCompression(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendContstats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendDefaultBackend(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendDisableH2Upgrade(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendDontlogNormal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendDontlognull(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendForwardfor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendH1CaseAdjustBogusClient(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendHTTPBufferRequest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendHTTPUseHtx(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendHTTPConnectionMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendHTTPIgnoreProbes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendHTTPKeepAliveTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendHTTPNoDelay(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendHTTPRequestTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendHTTPUseProxyHeader(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendHttplog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendHttpslog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendIdleCloseOnResponse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendIndependentStreams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendLogFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendLogFormatSd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendLogSeparateErrors(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendLogTag(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendLogasap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendMaxconn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendMonitorFail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendMonitorURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendNolinger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendOriginalto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendSocketStats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendSpliceAuto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendSpliceRequest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendSpliceResponse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendStatsOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendStickTable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendTCPSmartAccept(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendTcpka(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendTcplog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendUniqueIDFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFrontendUniqueIDHeader(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerFrontendAcceptInvalidHTTPRequest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	acceptInvalidHttpRequestDescription := `Enum: ["enabled","disabled"]. `

	var acceptInvalidHttpRequestFlagName string
	if cmdPrefix == "" {
		acceptInvalidHttpRequestFlagName = "accept_invalid_http_request"
	} else {
		acceptInvalidHttpRequestFlagName = fmt.Sprintf("%v.accept_invalid_http_request", cmdPrefix)
	}

	var acceptInvalidHttpRequestFlagDefault string

	_ = cmd.PersistentFlags().String(acceptInvalidHttpRequestFlagName, acceptInvalidHttpRequestFlagDefault, acceptInvalidHttpRequestDescription)

	if err := cmd.RegisterFlagCompletionFunc(acceptInvalidHttpRequestFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendBacklog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	backlogDescription := ``

	var backlogFlagName string
	if cmdPrefix == "" {
		backlogFlagName = "backlog"
	} else {
		backlogFlagName = fmt.Sprintf("%v.backlog", cmdPrefix)
	}

	var backlogFlagDefault int64

	_ = cmd.PersistentFlags().Int64(backlogFlagName, backlogFlagDefault, backlogDescription)

	return nil
}

func registerFrontendBindProcess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bindProcessDescription := ``

	var bindProcessFlagName string
	if cmdPrefix == "" {
		bindProcessFlagName = "bind_process"
	} else {
		bindProcessFlagName = fmt.Sprintf("%v.bind_process", cmdPrefix)
	}

	var bindProcessFlagDefault string

	_ = cmd.PersistentFlags().String(bindProcessFlagName, bindProcessFlagDefault, bindProcessDescription)

	return nil
}

func registerFrontendClflog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clflogDescription := ``

	var clflogFlagName string
	if cmdPrefix == "" {
		clflogFlagName = "clflog"
	} else {
		clflogFlagName = fmt.Sprintf("%v.clflog", cmdPrefix)
	}

	var clflogFlagDefault bool

	_ = cmd.PersistentFlags().Bool(clflogFlagName, clflogFlagDefault, clflogDescription)

	return nil
}

func registerFrontendClientTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientTimeoutDescription := ``

	var clientTimeoutFlagName string
	if cmdPrefix == "" {
		clientTimeoutFlagName = "client_timeout"
	} else {
		clientTimeoutFlagName = fmt.Sprintf("%v.client_timeout", cmdPrefix)
	}

	var clientTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(clientTimeoutFlagName, clientTimeoutFlagDefault, clientTimeoutDescription)

	return nil
}

func registerFrontendClitcpka(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clitcpkaDescription := `Enum: ["enabled","disabled"]. `

	var clitcpkaFlagName string
	if cmdPrefix == "" {
		clitcpkaFlagName = "clitcpka"
	} else {
		clitcpkaFlagName = fmt.Sprintf("%v.clitcpka", cmdPrefix)
	}

	var clitcpkaFlagDefault string

	_ = cmd.PersistentFlags().String(clitcpkaFlagName, clitcpkaFlagDefault, clitcpkaDescription)

	if err := cmd.RegisterFlagCompletionFunc(clitcpkaFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendClitcpkaCnt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clitcpkaCntDescription := ``

	var clitcpkaCntFlagName string
	if cmdPrefix == "" {
		clitcpkaCntFlagName = "clitcpka_cnt"
	} else {
		clitcpkaCntFlagName = fmt.Sprintf("%v.clitcpka_cnt", cmdPrefix)
	}

	var clitcpkaCntFlagDefault int64

	_ = cmd.PersistentFlags().Int64(clitcpkaCntFlagName, clitcpkaCntFlagDefault, clitcpkaCntDescription)

	return nil
}

func registerFrontendClitcpkaIdle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clitcpkaIdleDescription := ``

	var clitcpkaIdleFlagName string
	if cmdPrefix == "" {
		clitcpkaIdleFlagName = "clitcpka_idle"
	} else {
		clitcpkaIdleFlagName = fmt.Sprintf("%v.clitcpka_idle", cmdPrefix)
	}

	var clitcpkaIdleFlagDefault int64

	_ = cmd.PersistentFlags().Int64(clitcpkaIdleFlagName, clitcpkaIdleFlagDefault, clitcpkaIdleDescription)

	return nil
}

func registerFrontendClitcpkaIntvl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clitcpkaIntvlDescription := ``

	var clitcpkaIntvlFlagName string
	if cmdPrefix == "" {
		clitcpkaIntvlFlagName = "clitcpka_intvl"
	} else {
		clitcpkaIntvlFlagName = fmt.Sprintf("%v.clitcpka_intvl", cmdPrefix)
	}

	var clitcpkaIntvlFlagDefault int64

	_ = cmd.PersistentFlags().Int64(clitcpkaIntvlFlagName, clitcpkaIntvlFlagDefault, clitcpkaIntvlDescription)

	return nil
}

func registerFrontendCompression(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var compressionFlagName string
	if cmdPrefix == "" {
		compressionFlagName = "compression"
	} else {
		compressionFlagName = fmt.Sprintf("%v.compression", cmdPrefix)
	}

	if err := registerModelCompressionFlags(depth+1, compressionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerFrontendContstats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	contstatsDescription := `Enum: ["enabled"]. `

	var contstatsFlagName string
	if cmdPrefix == "" {
		contstatsFlagName = "contstats"
	} else {
		contstatsFlagName = fmt.Sprintf("%v.contstats", cmdPrefix)
	}

	var contstatsFlagDefault string

	_ = cmd.PersistentFlags().String(contstatsFlagName, contstatsFlagDefault, contstatsDescription)

	if err := cmd.RegisterFlagCompletionFunc(contstatsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendDefaultBackend(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultBackendDescription := ``

	var defaultBackendFlagName string
	if cmdPrefix == "" {
		defaultBackendFlagName = "default_backend"
	} else {
		defaultBackendFlagName = fmt.Sprintf("%v.default_backend", cmdPrefix)
	}

	var defaultBackendFlagDefault string

	_ = cmd.PersistentFlags().String(defaultBackendFlagName, defaultBackendFlagDefault, defaultBackendDescription)

	return nil
}

func registerFrontendDisableH2Upgrade(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	disableH2UpgradeDescription := `Enum: ["enabled","disabled"]. `

	var disableH2UpgradeFlagName string
	if cmdPrefix == "" {
		disableH2UpgradeFlagName = "disable_h2_upgrade"
	} else {
		disableH2UpgradeFlagName = fmt.Sprintf("%v.disable_h2_upgrade", cmdPrefix)
	}

	var disableH2UpgradeFlagDefault string

	_ = cmd.PersistentFlags().String(disableH2UpgradeFlagName, disableH2UpgradeFlagDefault, disableH2UpgradeDescription)

	if err := cmd.RegisterFlagCompletionFunc(disableH2UpgradeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendDontlogNormal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dontlogNormalDescription := `Enum: ["enabled","disabled"]. `

	var dontlogNormalFlagName string
	if cmdPrefix == "" {
		dontlogNormalFlagName = "dontlog_normal"
	} else {
		dontlogNormalFlagName = fmt.Sprintf("%v.dontlog_normal", cmdPrefix)
	}

	var dontlogNormalFlagDefault string

	_ = cmd.PersistentFlags().String(dontlogNormalFlagName, dontlogNormalFlagDefault, dontlogNormalDescription)

	if err := cmd.RegisterFlagCompletionFunc(dontlogNormalFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendDontlognull(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dontlognullDescription := `Enum: ["enabled","disabled"]. `

	var dontlognullFlagName string
	if cmdPrefix == "" {
		dontlognullFlagName = "dontlognull"
	} else {
		dontlognullFlagName = fmt.Sprintf("%v.dontlognull", cmdPrefix)
	}

	var dontlognullFlagDefault string

	_ = cmd.PersistentFlags().String(dontlognullFlagName, dontlognullFlagDefault, dontlognullDescription)

	if err := cmd.RegisterFlagCompletionFunc(dontlognullFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendForwardfor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var forwardforFlagName string
	if cmdPrefix == "" {
		forwardforFlagName = "forwardfor"
	} else {
		forwardforFlagName = fmt.Sprintf("%v.forwardfor", cmdPrefix)
	}

	if err := registerModelForwardforFlags(depth+1, forwardforFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerFrontendH1CaseAdjustBogusClient(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h1CaseAdjustBogusClientDescription := `Enum: ["enabled","disabled"]. `

	var h1CaseAdjustBogusClientFlagName string
	if cmdPrefix == "" {
		h1CaseAdjustBogusClientFlagName = "h1_case_adjust_bogus_client"
	} else {
		h1CaseAdjustBogusClientFlagName = fmt.Sprintf("%v.h1_case_adjust_bogus_client", cmdPrefix)
	}

	var h1CaseAdjustBogusClientFlagDefault string

	_ = cmd.PersistentFlags().String(h1CaseAdjustBogusClientFlagName, h1CaseAdjustBogusClientFlagDefault, h1CaseAdjustBogusClientDescription)

	if err := cmd.RegisterFlagCompletionFunc(h1CaseAdjustBogusClientFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendHTTPBufferRequest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpBufferRequestDescription := `Enum: ["enabled","disabled"]. `

	var httpBufferRequestFlagName string
	if cmdPrefix == "" {
		httpBufferRequestFlagName = "http-buffer-request"
	} else {
		httpBufferRequestFlagName = fmt.Sprintf("%v.http-buffer-request", cmdPrefix)
	}

	var httpBufferRequestFlagDefault string

	_ = cmd.PersistentFlags().String(httpBufferRequestFlagName, httpBufferRequestFlagDefault, httpBufferRequestDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpBufferRequestFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendHTTPUseHtx(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpUseHtxDescription := `Enum: ["enabled","disabled"]. `

	var httpUseHtxFlagName string
	if cmdPrefix == "" {
		httpUseHtxFlagName = "http-use-htx"
	} else {
		httpUseHtxFlagName = fmt.Sprintf("%v.http-use-htx", cmdPrefix)
	}

	var httpUseHtxFlagDefault string

	_ = cmd.PersistentFlags().String(httpUseHtxFlagName, httpUseHtxFlagDefault, httpUseHtxDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpUseHtxFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendHTTPConnectionMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpConnectionModeDescription := `Enum: ["httpclose","http-server-close","http-keep-alive"]. `

	var httpConnectionModeFlagName string
	if cmdPrefix == "" {
		httpConnectionModeFlagName = "http_connection_mode"
	} else {
		httpConnectionModeFlagName = fmt.Sprintf("%v.http_connection_mode", cmdPrefix)
	}

	var httpConnectionModeFlagDefault string

	_ = cmd.PersistentFlags().String(httpConnectionModeFlagName, httpConnectionModeFlagDefault, httpConnectionModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpConnectionModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["httpclose","http-server-close","http-keep-alive"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendHTTPIgnoreProbes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpIgnoreProbesDescription := `Enum: ["enabled","disabled"]. `

	var httpIgnoreProbesFlagName string
	if cmdPrefix == "" {
		httpIgnoreProbesFlagName = "http_ignore_probes"
	} else {
		httpIgnoreProbesFlagName = fmt.Sprintf("%v.http_ignore_probes", cmdPrefix)
	}

	var httpIgnoreProbesFlagDefault string

	_ = cmd.PersistentFlags().String(httpIgnoreProbesFlagName, httpIgnoreProbesFlagDefault, httpIgnoreProbesDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpIgnoreProbesFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendHTTPKeepAliveTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpKeepAliveTimeoutDescription := ``

	var httpKeepAliveTimeoutFlagName string
	if cmdPrefix == "" {
		httpKeepAliveTimeoutFlagName = "http_keep_alive_timeout"
	} else {
		httpKeepAliveTimeoutFlagName = fmt.Sprintf("%v.http_keep_alive_timeout", cmdPrefix)
	}

	var httpKeepAliveTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpKeepAliveTimeoutFlagName, httpKeepAliveTimeoutFlagDefault, httpKeepAliveTimeoutDescription)

	return nil
}

func registerFrontendHTTPNoDelay(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpNoDelayDescription := `Enum: ["enabled","disabled"]. `

	var httpNoDelayFlagName string
	if cmdPrefix == "" {
		httpNoDelayFlagName = "http_no_delay"
	} else {
		httpNoDelayFlagName = fmt.Sprintf("%v.http_no_delay", cmdPrefix)
	}

	var httpNoDelayFlagDefault string

	_ = cmd.PersistentFlags().String(httpNoDelayFlagName, httpNoDelayFlagDefault, httpNoDelayDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpNoDelayFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendHTTPRequestTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpRequestTimeoutDescription := ``

	var httpRequestTimeoutFlagName string
	if cmdPrefix == "" {
		httpRequestTimeoutFlagName = "http_request_timeout"
	} else {
		httpRequestTimeoutFlagName = fmt.Sprintf("%v.http_request_timeout", cmdPrefix)
	}

	var httpRequestTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpRequestTimeoutFlagName, httpRequestTimeoutFlagDefault, httpRequestTimeoutDescription)

	return nil
}

func registerFrontendHTTPUseProxyHeader(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpUseProxyHeaderDescription := `Enum: ["enabled","disabled"]. `

	var httpUseProxyHeaderFlagName string
	if cmdPrefix == "" {
		httpUseProxyHeaderFlagName = "http_use_proxy_header"
	} else {
		httpUseProxyHeaderFlagName = fmt.Sprintf("%v.http_use_proxy_header", cmdPrefix)
	}

	var httpUseProxyHeaderFlagDefault string

	_ = cmd.PersistentFlags().String(httpUseProxyHeaderFlagName, httpUseProxyHeaderFlagDefault, httpUseProxyHeaderDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpUseProxyHeaderFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendHttplog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httplogDescription := ``

	var httplogFlagName string
	if cmdPrefix == "" {
		httplogFlagName = "httplog"
	} else {
		httplogFlagName = fmt.Sprintf("%v.httplog", cmdPrefix)
	}

	var httplogFlagDefault bool

	_ = cmd.PersistentFlags().Bool(httplogFlagName, httplogFlagDefault, httplogDescription)

	return nil
}

func registerFrontendHttpslog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpslogDescription := `Enum: ["enabled","disabled"]. `

	var httpslogFlagName string
	if cmdPrefix == "" {
		httpslogFlagName = "httpslog"
	} else {
		httpslogFlagName = fmt.Sprintf("%v.httpslog", cmdPrefix)
	}

	var httpslogFlagDefault string

	_ = cmd.PersistentFlags().String(httpslogFlagName, httpslogFlagDefault, httpslogDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpslogFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendIdleCloseOnResponse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idleCloseOnResponseDescription := `Enum: ["enabled","disabled"]. `

	var idleCloseOnResponseFlagName string
	if cmdPrefix == "" {
		idleCloseOnResponseFlagName = "idle_close_on_response"
	} else {
		idleCloseOnResponseFlagName = fmt.Sprintf("%v.idle_close_on_response", cmdPrefix)
	}

	var idleCloseOnResponseFlagDefault string

	_ = cmd.PersistentFlags().String(idleCloseOnResponseFlagName, idleCloseOnResponseFlagDefault, idleCloseOnResponseDescription)

	if err := cmd.RegisterFlagCompletionFunc(idleCloseOnResponseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendIndependentStreams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	independentStreamsDescription := `Enum: ["enabled","disabled"]. `

	var independentStreamsFlagName string
	if cmdPrefix == "" {
		independentStreamsFlagName = "independent_streams"
	} else {
		independentStreamsFlagName = fmt.Sprintf("%v.independent_streams", cmdPrefix)
	}

	var independentStreamsFlagDefault string

	_ = cmd.PersistentFlags().String(independentStreamsFlagName, independentStreamsFlagDefault, independentStreamsDescription)

	if err := cmd.RegisterFlagCompletionFunc(independentStreamsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendLogFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logFormatDescription := ``

	var logFormatFlagName string
	if cmdPrefix == "" {
		logFormatFlagName = "log_format"
	} else {
		logFormatFlagName = fmt.Sprintf("%v.log_format", cmdPrefix)
	}

	var logFormatFlagDefault string

	_ = cmd.PersistentFlags().String(logFormatFlagName, logFormatFlagDefault, logFormatDescription)

	return nil
}

func registerFrontendLogFormatSd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logFormatSdDescription := ``

	var logFormatSdFlagName string
	if cmdPrefix == "" {
		logFormatSdFlagName = "log_format_sd"
	} else {
		logFormatSdFlagName = fmt.Sprintf("%v.log_format_sd", cmdPrefix)
	}

	var logFormatSdFlagDefault string

	_ = cmd.PersistentFlags().String(logFormatSdFlagName, logFormatSdFlagDefault, logFormatSdDescription)

	return nil
}

func registerFrontendLogSeparateErrors(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logSeparateErrorsDescription := `Enum: ["enabled","disabled"]. `

	var logSeparateErrorsFlagName string
	if cmdPrefix == "" {
		logSeparateErrorsFlagName = "log_separate_errors"
	} else {
		logSeparateErrorsFlagName = fmt.Sprintf("%v.log_separate_errors", cmdPrefix)
	}

	var logSeparateErrorsFlagDefault string

	_ = cmd.PersistentFlags().String(logSeparateErrorsFlagName, logSeparateErrorsFlagDefault, logSeparateErrorsDescription)

	if err := cmd.RegisterFlagCompletionFunc(logSeparateErrorsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendLogTag(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logTagDescription := ``

	var logTagFlagName string
	if cmdPrefix == "" {
		logTagFlagName = "log_tag"
	} else {
		logTagFlagName = fmt.Sprintf("%v.log_tag", cmdPrefix)
	}

	var logTagFlagDefault string

	_ = cmd.PersistentFlags().String(logTagFlagName, logTagFlagDefault, logTagDescription)

	return nil
}

func registerFrontendLogasap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logasapDescription := `Enum: ["enabled","disabled"]. `

	var logasapFlagName string
	if cmdPrefix == "" {
		logasapFlagName = "logasap"
	} else {
		logasapFlagName = fmt.Sprintf("%v.logasap", cmdPrefix)
	}

	var logasapFlagDefault string

	_ = cmd.PersistentFlags().String(logasapFlagName, logasapFlagDefault, logasapDescription)

	if err := cmd.RegisterFlagCompletionFunc(logasapFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendMaxconn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxconnDescription := ``

	var maxconnFlagName string
	if cmdPrefix == "" {
		maxconnFlagName = "maxconn"
	} else {
		maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
	}

	var maxconnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxconnFlagName, maxconnFlagDefault, maxconnDescription)

	return nil
}

func registerFrontendMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `Enum: ["http","tcp"]. `

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	if err := cmd.RegisterFlagCompletionFunc(modeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["http","tcp"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendMonitorFail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var monitorFailFlagName string
	if cmdPrefix == "" {
		monitorFailFlagName = "monitor_fail"
	} else {
		monitorFailFlagName = fmt.Sprintf("%v.monitor_fail", cmdPrefix)
	}

	if err := registerModelMonitorFailFlags(depth+1, monitorFailFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerFrontendMonitorURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive monitor_uri MonitorURI is not supported by go-swagger cli yet

	return nil
}

func registerFrontendName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerFrontendNolinger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nolingerDescription := `Enum: ["enabled","disabled"]. `

	var nolingerFlagName string
	if cmdPrefix == "" {
		nolingerFlagName = "nolinger"
	} else {
		nolingerFlagName = fmt.Sprintf("%v.nolinger", cmdPrefix)
	}

	var nolingerFlagDefault string

	_ = cmd.PersistentFlags().String(nolingerFlagName, nolingerFlagDefault, nolingerDescription)

	if err := cmd.RegisterFlagCompletionFunc(nolingerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendOriginalto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	originaltoDescription := `Enum: ["enabled","disabled"]. `

	var originaltoFlagName string
	if cmdPrefix == "" {
		originaltoFlagName = "originalto"
	} else {
		originaltoFlagName = fmt.Sprintf("%v.originalto", cmdPrefix)
	}

	var originaltoFlagDefault string

	_ = cmd.PersistentFlags().String(originaltoFlagName, originaltoFlagDefault, originaltoDescription)

	if err := cmd.RegisterFlagCompletionFunc(originaltoFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendSocketStats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	socketStatsDescription := `Enum: ["enabled","disabled"]. `

	var socketStatsFlagName string
	if cmdPrefix == "" {
		socketStatsFlagName = "socket_stats"
	} else {
		socketStatsFlagName = fmt.Sprintf("%v.socket_stats", cmdPrefix)
	}

	var socketStatsFlagDefault string

	_ = cmd.PersistentFlags().String(socketStatsFlagName, socketStatsFlagDefault, socketStatsDescription)

	if err := cmd.RegisterFlagCompletionFunc(socketStatsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendSpliceAuto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spliceAutoDescription := `Enum: ["enabled","disabled"]. `

	var spliceAutoFlagName string
	if cmdPrefix == "" {
		spliceAutoFlagName = "splice_auto"
	} else {
		spliceAutoFlagName = fmt.Sprintf("%v.splice_auto", cmdPrefix)
	}

	var spliceAutoFlagDefault string

	_ = cmd.PersistentFlags().String(spliceAutoFlagName, spliceAutoFlagDefault, spliceAutoDescription)

	if err := cmd.RegisterFlagCompletionFunc(spliceAutoFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendSpliceRequest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spliceRequestDescription := `Enum: ["enabled","disabled"]. `

	var spliceRequestFlagName string
	if cmdPrefix == "" {
		spliceRequestFlagName = "splice_request"
	} else {
		spliceRequestFlagName = fmt.Sprintf("%v.splice_request", cmdPrefix)
	}

	var spliceRequestFlagDefault string

	_ = cmd.PersistentFlags().String(spliceRequestFlagName, spliceRequestFlagDefault, spliceRequestDescription)

	if err := cmd.RegisterFlagCompletionFunc(spliceRequestFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendSpliceResponse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spliceResponseDescription := `Enum: ["enabled","disabled"]. `

	var spliceResponseFlagName string
	if cmdPrefix == "" {
		spliceResponseFlagName = "splice_response"
	} else {
		spliceResponseFlagName = fmt.Sprintf("%v.splice_response", cmdPrefix)
	}

	var spliceResponseFlagDefault string

	_ = cmd.PersistentFlags().String(spliceResponseFlagName, spliceResponseFlagDefault, spliceResponseDescription)

	if err := cmd.RegisterFlagCompletionFunc(spliceResponseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendStatsOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var statsOptionsFlagName string
	if cmdPrefix == "" {
		statsOptionsFlagName = "stats_options"
	} else {
		statsOptionsFlagName = fmt.Sprintf("%v.stats_options", cmdPrefix)
	}

	if err := registerModelStatsOptionsFlags(depth+1, statsOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerFrontendStickTable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var stickTableFlagName string
	if cmdPrefix == "" {
		stickTableFlagName = "stick_table"
	} else {
		stickTableFlagName = fmt.Sprintf("%v.stick_table", cmdPrefix)
	}

	if err := registerModelConfigStickTableFlags(depth+1, stickTableFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerFrontendTCPSmartAccept(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpSmartAcceptDescription := `Enum: ["enabled","disabled"]. `

	var tcpSmartAcceptFlagName string
	if cmdPrefix == "" {
		tcpSmartAcceptFlagName = "tcp_smart_accept"
	} else {
		tcpSmartAcceptFlagName = fmt.Sprintf("%v.tcp_smart_accept", cmdPrefix)
	}

	var tcpSmartAcceptFlagDefault string

	_ = cmd.PersistentFlags().String(tcpSmartAcceptFlagName, tcpSmartAcceptFlagDefault, tcpSmartAcceptDescription)

	if err := cmd.RegisterFlagCompletionFunc(tcpSmartAcceptFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendTcpka(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpkaDescription := `Enum: ["enabled","disabled"]. `

	var tcpkaFlagName string
	if cmdPrefix == "" {
		tcpkaFlagName = "tcpka"
	} else {
		tcpkaFlagName = fmt.Sprintf("%v.tcpka", cmdPrefix)
	}

	var tcpkaFlagDefault string

	_ = cmd.PersistentFlags().String(tcpkaFlagName, tcpkaFlagDefault, tcpkaDescription)

	if err := cmd.RegisterFlagCompletionFunc(tcpkaFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFrontendTcplog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcplogDescription := ``

	var tcplogFlagName string
	if cmdPrefix == "" {
		tcplogFlagName = "tcplog"
	} else {
		tcplogFlagName = fmt.Sprintf("%v.tcplog", cmdPrefix)
	}

	var tcplogFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tcplogFlagName, tcplogFlagDefault, tcplogDescription)

	return nil
}

func registerFrontendUniqueIDFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uniqueIdFormatDescription := ``

	var uniqueIdFormatFlagName string
	if cmdPrefix == "" {
		uniqueIdFormatFlagName = "unique_id_format"
	} else {
		uniqueIdFormatFlagName = fmt.Sprintf("%v.unique_id_format", cmdPrefix)
	}

	var uniqueIdFormatFlagDefault string

	_ = cmd.PersistentFlags().String(uniqueIdFormatFlagName, uniqueIdFormatFlagDefault, uniqueIdFormatDescription)

	return nil
}

func registerFrontendUniqueIDHeader(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uniqueIdHeaderDescription := ``

	var uniqueIdHeaderFlagName string
	if cmdPrefix == "" {
		uniqueIdHeaderFlagName = "unique_id_header"
	} else {
		uniqueIdHeaderFlagName = fmt.Sprintf("%v.unique_id_header", cmdPrefix)
	}

	var uniqueIdHeaderFlagDefault string

	_ = cmd.PersistentFlags().String(uniqueIdHeaderFlagName, uniqueIdHeaderFlagDefault, uniqueIdHeaderDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelFrontendFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, acceptInvalidHttpRequestAdded := retrieveFrontendAcceptInvalidHTTPRequestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || acceptInvalidHttpRequestAdded

	err, backlogAdded := retrieveFrontendBacklogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || backlogAdded

	err, bindProcessAdded := retrieveFrontendBindProcessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bindProcessAdded

	err, clflogAdded := retrieveFrontendClflogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clflogAdded

	err, clientTimeoutAdded := retrieveFrontendClientTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientTimeoutAdded

	err, clitcpkaAdded := retrieveFrontendClitcpkaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clitcpkaAdded

	err, clitcpkaCntAdded := retrieveFrontendClitcpkaCntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clitcpkaCntAdded

	err, clitcpkaIdleAdded := retrieveFrontendClitcpkaIdleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clitcpkaIdleAdded

	err, clitcpkaIntvlAdded := retrieveFrontendClitcpkaIntvlFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clitcpkaIntvlAdded

	err, compressionAdded := retrieveFrontendCompressionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compressionAdded

	err, contstatsAdded := retrieveFrontendContstatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contstatsAdded

	err, defaultBackendAdded := retrieveFrontendDefaultBackendFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultBackendAdded

	err, disableH2UpgradeAdded := retrieveFrontendDisableH2UpgradeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || disableH2UpgradeAdded

	err, dontlogNormalAdded := retrieveFrontendDontlogNormalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dontlogNormalAdded

	err, dontlognullAdded := retrieveFrontendDontlognullFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dontlognullAdded

	err, forwardforAdded := retrieveFrontendForwardforFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forwardforAdded

	err, h1CaseAdjustBogusClientAdded := retrieveFrontendH1CaseAdjustBogusClientFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h1CaseAdjustBogusClientAdded

	err, httpBufferRequestAdded := retrieveFrontendHTTPBufferRequestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpBufferRequestAdded

	err, httpUseHtxAdded := retrieveFrontendHTTPUseHtxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpUseHtxAdded

	err, httpConnectionModeAdded := retrieveFrontendHTTPConnectionModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpConnectionModeAdded

	err, httpIgnoreProbesAdded := retrieveFrontendHTTPIgnoreProbesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpIgnoreProbesAdded

	err, httpKeepAliveTimeoutAdded := retrieveFrontendHTTPKeepAliveTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpKeepAliveTimeoutAdded

	err, httpNoDelayAdded := retrieveFrontendHTTPNoDelayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpNoDelayAdded

	err, httpRequestTimeoutAdded := retrieveFrontendHTTPRequestTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpRequestTimeoutAdded

	err, httpUseProxyHeaderAdded := retrieveFrontendHTTPUseProxyHeaderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpUseProxyHeaderAdded

	err, httplogAdded := retrieveFrontendHttplogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httplogAdded

	err, httpslogAdded := retrieveFrontendHttpslogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpslogAdded

	err, idleCloseOnResponseAdded := retrieveFrontendIdleCloseOnResponseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idleCloseOnResponseAdded

	err, independentStreamsAdded := retrieveFrontendIndependentStreamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || independentStreamsAdded

	err, logFormatAdded := retrieveFrontendLogFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logFormatAdded

	err, logFormatSdAdded := retrieveFrontendLogFormatSdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logFormatSdAdded

	err, logSeparateErrorsAdded := retrieveFrontendLogSeparateErrorsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logSeparateErrorsAdded

	err, logTagAdded := retrieveFrontendLogTagFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logTagAdded

	err, logasapAdded := retrieveFrontendLogasapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logasapAdded

	err, maxconnAdded := retrieveFrontendMaxconnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxconnAdded

	err, modeAdded := retrieveFrontendModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, monitorFailAdded := retrieveFrontendMonitorFailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || monitorFailAdded

	err, monitorUriAdded := retrieveFrontendMonitorURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || monitorUriAdded

	err, nameAdded := retrieveFrontendNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, nolingerAdded := retrieveFrontendNolingerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nolingerAdded

	err, originaltoAdded := retrieveFrontendOriginaltoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || originaltoAdded

	err, socketStatsAdded := retrieveFrontendSocketStatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || socketStatsAdded

	err, spliceAutoAdded := retrieveFrontendSpliceAutoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spliceAutoAdded

	err, spliceRequestAdded := retrieveFrontendSpliceRequestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spliceRequestAdded

	err, spliceResponseAdded := retrieveFrontendSpliceResponseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spliceResponseAdded

	err, statsOptionsAdded := retrieveFrontendStatsOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statsOptionsAdded

	err, stickTableAdded := retrieveFrontendStickTableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stickTableAdded

	err, tcpSmartAcceptAdded := retrieveFrontendTCPSmartAcceptFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpSmartAcceptAdded

	err, tcpkaAdded := retrieveFrontendTcpkaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpkaAdded

	err, tcplogAdded := retrieveFrontendTcplogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcplogAdded

	err, uniqueIdFormatAdded := retrieveFrontendUniqueIDFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uniqueIdFormatAdded

	err, uniqueIdHeaderAdded := retrieveFrontendUniqueIDHeaderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uniqueIdHeaderAdded

	return nil, retAdded
}

func retrieveFrontendAcceptInvalidHTTPRequestFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	acceptInvalidHttpRequestFlagName := fmt.Sprintf("%v.accept_invalid_http_request", cmdPrefix)
	if cmd.Flags().Changed(acceptInvalidHttpRequestFlagName) {

		var acceptInvalidHttpRequestFlagName string
		if cmdPrefix == "" {
			acceptInvalidHttpRequestFlagName = "accept_invalid_http_request"
		} else {
			acceptInvalidHttpRequestFlagName = fmt.Sprintf("%v.accept_invalid_http_request", cmdPrefix)
		}

		acceptInvalidHttpRequestFlagValue, err := cmd.Flags().GetString(acceptInvalidHttpRequestFlagName)
		if err != nil {
			return err, false
		}
		m.AcceptInvalidHTTPRequest = acceptInvalidHttpRequestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendBacklogFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	backlogFlagName := fmt.Sprintf("%v.backlog", cmdPrefix)
	if cmd.Flags().Changed(backlogFlagName) {

		var backlogFlagName string
		if cmdPrefix == "" {
			backlogFlagName = "backlog"
		} else {
			backlogFlagName = fmt.Sprintf("%v.backlog", cmdPrefix)
		}

		backlogFlagValue, err := cmd.Flags().GetInt64(backlogFlagName)
		if err != nil {
			return err, false
		}
		m.Backlog = &backlogFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendBindProcessFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bindProcessFlagName := fmt.Sprintf("%v.bind_process", cmdPrefix)
	if cmd.Flags().Changed(bindProcessFlagName) {

		var bindProcessFlagName string
		if cmdPrefix == "" {
			bindProcessFlagName = "bind_process"
		} else {
			bindProcessFlagName = fmt.Sprintf("%v.bind_process", cmdPrefix)
		}

		bindProcessFlagValue, err := cmd.Flags().GetString(bindProcessFlagName)
		if err != nil {
			return err, false
		}
		m.BindProcess = bindProcessFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendClflogFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clflogFlagName := fmt.Sprintf("%v.clflog", cmdPrefix)
	if cmd.Flags().Changed(clflogFlagName) {

		var clflogFlagName string
		if cmdPrefix == "" {
			clflogFlagName = "clflog"
		} else {
			clflogFlagName = fmt.Sprintf("%v.clflog", cmdPrefix)
		}

		clflogFlagValue, err := cmd.Flags().GetBool(clflogFlagName)
		if err != nil {
			return err, false
		}
		m.Clflog = clflogFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendClientTimeoutFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientTimeoutFlagName := fmt.Sprintf("%v.client_timeout", cmdPrefix)
	if cmd.Flags().Changed(clientTimeoutFlagName) {

		var clientTimeoutFlagName string
		if cmdPrefix == "" {
			clientTimeoutFlagName = "client_timeout"
		} else {
			clientTimeoutFlagName = fmt.Sprintf("%v.client_timeout", cmdPrefix)
		}

		clientTimeoutFlagValue, err := cmd.Flags().GetInt64(clientTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.ClientTimeout = &clientTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendClitcpkaFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clitcpkaFlagName := fmt.Sprintf("%v.clitcpka", cmdPrefix)
	if cmd.Flags().Changed(clitcpkaFlagName) {

		var clitcpkaFlagName string
		if cmdPrefix == "" {
			clitcpkaFlagName = "clitcpka"
		} else {
			clitcpkaFlagName = fmt.Sprintf("%v.clitcpka", cmdPrefix)
		}

		clitcpkaFlagValue, err := cmd.Flags().GetString(clitcpkaFlagName)
		if err != nil {
			return err, false
		}
		m.Clitcpka = clitcpkaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendClitcpkaCntFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clitcpkaCntFlagName := fmt.Sprintf("%v.clitcpka_cnt", cmdPrefix)
	if cmd.Flags().Changed(clitcpkaCntFlagName) {

		var clitcpkaCntFlagName string
		if cmdPrefix == "" {
			clitcpkaCntFlagName = "clitcpka_cnt"
		} else {
			clitcpkaCntFlagName = fmt.Sprintf("%v.clitcpka_cnt", cmdPrefix)
		}

		clitcpkaCntFlagValue, err := cmd.Flags().GetInt64(clitcpkaCntFlagName)
		if err != nil {
			return err, false
		}
		m.ClitcpkaCnt = &clitcpkaCntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendClitcpkaIdleFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clitcpkaIdleFlagName := fmt.Sprintf("%v.clitcpka_idle", cmdPrefix)
	if cmd.Flags().Changed(clitcpkaIdleFlagName) {

		var clitcpkaIdleFlagName string
		if cmdPrefix == "" {
			clitcpkaIdleFlagName = "clitcpka_idle"
		} else {
			clitcpkaIdleFlagName = fmt.Sprintf("%v.clitcpka_idle", cmdPrefix)
		}

		clitcpkaIdleFlagValue, err := cmd.Flags().GetInt64(clitcpkaIdleFlagName)
		if err != nil {
			return err, false
		}
		m.ClitcpkaIdle = &clitcpkaIdleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendClitcpkaIntvlFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clitcpkaIntvlFlagName := fmt.Sprintf("%v.clitcpka_intvl", cmdPrefix)
	if cmd.Flags().Changed(clitcpkaIntvlFlagName) {

		var clitcpkaIntvlFlagName string
		if cmdPrefix == "" {
			clitcpkaIntvlFlagName = "clitcpka_intvl"
		} else {
			clitcpkaIntvlFlagName = fmt.Sprintf("%v.clitcpka_intvl", cmdPrefix)
		}

		clitcpkaIntvlFlagValue, err := cmd.Flags().GetInt64(clitcpkaIntvlFlagName)
		if err != nil {
			return err, false
		}
		m.ClitcpkaIntvl = &clitcpkaIntvlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendCompressionFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	compressionFlagName := fmt.Sprintf("%v.compression", cmdPrefix)
	if cmd.Flags().Changed(compressionFlagName) {
		// info: complex object compression Compression is retrieved outside this Changed() block
	}
	compressionFlagValue := m.Compression
	if swag.IsZero(compressionFlagValue) {
		compressionFlagValue = &models.Compression{}
	}

	err, compressionAdded := retrieveModelCompressionFlags(depth+1, compressionFlagValue, compressionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compressionAdded
	if compressionAdded {
		m.Compression = compressionFlagValue
	}

	return nil, retAdded
}

func retrieveFrontendContstatsFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	contstatsFlagName := fmt.Sprintf("%v.contstats", cmdPrefix)
	if cmd.Flags().Changed(contstatsFlagName) {

		var contstatsFlagName string
		if cmdPrefix == "" {
			contstatsFlagName = "contstats"
		} else {
			contstatsFlagName = fmt.Sprintf("%v.contstats", cmdPrefix)
		}

		contstatsFlagValue, err := cmd.Flags().GetString(contstatsFlagName)
		if err != nil {
			return err, false
		}
		m.Contstats = contstatsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendDefaultBackendFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultBackendFlagName := fmt.Sprintf("%v.default_backend", cmdPrefix)
	if cmd.Flags().Changed(defaultBackendFlagName) {

		var defaultBackendFlagName string
		if cmdPrefix == "" {
			defaultBackendFlagName = "default_backend"
		} else {
			defaultBackendFlagName = fmt.Sprintf("%v.default_backend", cmdPrefix)
		}

		defaultBackendFlagValue, err := cmd.Flags().GetString(defaultBackendFlagName)
		if err != nil {
			return err, false
		}
		m.DefaultBackend = defaultBackendFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendDisableH2UpgradeFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	disableH2UpgradeFlagName := fmt.Sprintf("%v.disable_h2_upgrade", cmdPrefix)
	if cmd.Flags().Changed(disableH2UpgradeFlagName) {

		var disableH2UpgradeFlagName string
		if cmdPrefix == "" {
			disableH2UpgradeFlagName = "disable_h2_upgrade"
		} else {
			disableH2UpgradeFlagName = fmt.Sprintf("%v.disable_h2_upgrade", cmdPrefix)
		}

		disableH2UpgradeFlagValue, err := cmd.Flags().GetString(disableH2UpgradeFlagName)
		if err != nil {
			return err, false
		}
		m.DisableH2Upgrade = disableH2UpgradeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendDontlogNormalFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dontlogNormalFlagName := fmt.Sprintf("%v.dontlog_normal", cmdPrefix)
	if cmd.Flags().Changed(dontlogNormalFlagName) {

		var dontlogNormalFlagName string
		if cmdPrefix == "" {
			dontlogNormalFlagName = "dontlog_normal"
		} else {
			dontlogNormalFlagName = fmt.Sprintf("%v.dontlog_normal", cmdPrefix)
		}

		dontlogNormalFlagValue, err := cmd.Flags().GetString(dontlogNormalFlagName)
		if err != nil {
			return err, false
		}
		m.DontlogNormal = dontlogNormalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendDontlognullFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dontlognullFlagName := fmt.Sprintf("%v.dontlognull", cmdPrefix)
	if cmd.Flags().Changed(dontlognullFlagName) {

		var dontlognullFlagName string
		if cmdPrefix == "" {
			dontlognullFlagName = "dontlognull"
		} else {
			dontlognullFlagName = fmt.Sprintf("%v.dontlognull", cmdPrefix)
		}

		dontlognullFlagValue, err := cmd.Flags().GetString(dontlognullFlagName)
		if err != nil {
			return err, false
		}
		m.Dontlognull = dontlognullFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendForwardforFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forwardforFlagName := fmt.Sprintf("%v.forwardfor", cmdPrefix)
	if cmd.Flags().Changed(forwardforFlagName) {
		// info: complex object forwardfor Forwardfor is retrieved outside this Changed() block
	}
	forwardforFlagValue := m.Forwardfor
	if swag.IsZero(forwardforFlagValue) {
		forwardforFlagValue = &models.Forwardfor{}
	}

	err, forwardforAdded := retrieveModelForwardforFlags(depth+1, forwardforFlagValue, forwardforFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forwardforAdded
	if forwardforAdded {
		m.Forwardfor = forwardforFlagValue
	}

	return nil, retAdded
}

func retrieveFrontendH1CaseAdjustBogusClientFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h1CaseAdjustBogusClientFlagName := fmt.Sprintf("%v.h1_case_adjust_bogus_client", cmdPrefix)
	if cmd.Flags().Changed(h1CaseAdjustBogusClientFlagName) {

		var h1CaseAdjustBogusClientFlagName string
		if cmdPrefix == "" {
			h1CaseAdjustBogusClientFlagName = "h1_case_adjust_bogus_client"
		} else {
			h1CaseAdjustBogusClientFlagName = fmt.Sprintf("%v.h1_case_adjust_bogus_client", cmdPrefix)
		}

		h1CaseAdjustBogusClientFlagValue, err := cmd.Flags().GetString(h1CaseAdjustBogusClientFlagName)
		if err != nil {
			return err, false
		}
		m.H1CaseAdjustBogusClient = h1CaseAdjustBogusClientFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendHTTPBufferRequestFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpBufferRequestFlagName := fmt.Sprintf("%v.http-buffer-request", cmdPrefix)
	if cmd.Flags().Changed(httpBufferRequestFlagName) {

		var httpBufferRequestFlagName string
		if cmdPrefix == "" {
			httpBufferRequestFlagName = "http-buffer-request"
		} else {
			httpBufferRequestFlagName = fmt.Sprintf("%v.http-buffer-request", cmdPrefix)
		}

		httpBufferRequestFlagValue, err := cmd.Flags().GetString(httpBufferRequestFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPBufferRequest = httpBufferRequestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendHTTPUseHtxFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpUseHtxFlagName := fmt.Sprintf("%v.http-use-htx", cmdPrefix)
	if cmd.Flags().Changed(httpUseHtxFlagName) {

		var httpUseHtxFlagName string
		if cmdPrefix == "" {
			httpUseHtxFlagName = "http-use-htx"
		} else {
			httpUseHtxFlagName = fmt.Sprintf("%v.http-use-htx", cmdPrefix)
		}

		httpUseHtxFlagValue, err := cmd.Flags().GetString(httpUseHtxFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPUseHtx = httpUseHtxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendHTTPConnectionModeFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpConnectionModeFlagName := fmt.Sprintf("%v.http_connection_mode", cmdPrefix)
	if cmd.Flags().Changed(httpConnectionModeFlagName) {

		var httpConnectionModeFlagName string
		if cmdPrefix == "" {
			httpConnectionModeFlagName = "http_connection_mode"
		} else {
			httpConnectionModeFlagName = fmt.Sprintf("%v.http_connection_mode", cmdPrefix)
		}

		httpConnectionModeFlagValue, err := cmd.Flags().GetString(httpConnectionModeFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPConnectionMode = httpConnectionModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendHTTPIgnoreProbesFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpIgnoreProbesFlagName := fmt.Sprintf("%v.http_ignore_probes", cmdPrefix)
	if cmd.Flags().Changed(httpIgnoreProbesFlagName) {

		var httpIgnoreProbesFlagName string
		if cmdPrefix == "" {
			httpIgnoreProbesFlagName = "http_ignore_probes"
		} else {
			httpIgnoreProbesFlagName = fmt.Sprintf("%v.http_ignore_probes", cmdPrefix)
		}

		httpIgnoreProbesFlagValue, err := cmd.Flags().GetString(httpIgnoreProbesFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPIgnoreProbes = httpIgnoreProbesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendHTTPKeepAliveTimeoutFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpKeepAliveTimeoutFlagName := fmt.Sprintf("%v.http_keep_alive_timeout", cmdPrefix)
	if cmd.Flags().Changed(httpKeepAliveTimeoutFlagName) {

		var httpKeepAliveTimeoutFlagName string
		if cmdPrefix == "" {
			httpKeepAliveTimeoutFlagName = "http_keep_alive_timeout"
		} else {
			httpKeepAliveTimeoutFlagName = fmt.Sprintf("%v.http_keep_alive_timeout", cmdPrefix)
		}

		httpKeepAliveTimeoutFlagValue, err := cmd.Flags().GetInt64(httpKeepAliveTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPKeepAliveTimeout = &httpKeepAliveTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendHTTPNoDelayFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpNoDelayFlagName := fmt.Sprintf("%v.http_no_delay", cmdPrefix)
	if cmd.Flags().Changed(httpNoDelayFlagName) {

		var httpNoDelayFlagName string
		if cmdPrefix == "" {
			httpNoDelayFlagName = "http_no_delay"
		} else {
			httpNoDelayFlagName = fmt.Sprintf("%v.http_no_delay", cmdPrefix)
		}

		httpNoDelayFlagValue, err := cmd.Flags().GetString(httpNoDelayFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPNoDelay = httpNoDelayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendHTTPRequestTimeoutFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpRequestTimeoutFlagName := fmt.Sprintf("%v.http_request_timeout", cmdPrefix)
	if cmd.Flags().Changed(httpRequestTimeoutFlagName) {

		var httpRequestTimeoutFlagName string
		if cmdPrefix == "" {
			httpRequestTimeoutFlagName = "http_request_timeout"
		} else {
			httpRequestTimeoutFlagName = fmt.Sprintf("%v.http_request_timeout", cmdPrefix)
		}

		httpRequestTimeoutFlagValue, err := cmd.Flags().GetInt64(httpRequestTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPRequestTimeout = &httpRequestTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendHTTPUseProxyHeaderFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpUseProxyHeaderFlagName := fmt.Sprintf("%v.http_use_proxy_header", cmdPrefix)
	if cmd.Flags().Changed(httpUseProxyHeaderFlagName) {

		var httpUseProxyHeaderFlagName string
		if cmdPrefix == "" {
			httpUseProxyHeaderFlagName = "http_use_proxy_header"
		} else {
			httpUseProxyHeaderFlagName = fmt.Sprintf("%v.http_use_proxy_header", cmdPrefix)
		}

		httpUseProxyHeaderFlagValue, err := cmd.Flags().GetString(httpUseProxyHeaderFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPUseProxyHeader = httpUseProxyHeaderFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendHttplogFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httplogFlagName := fmt.Sprintf("%v.httplog", cmdPrefix)
	if cmd.Flags().Changed(httplogFlagName) {

		var httplogFlagName string
		if cmdPrefix == "" {
			httplogFlagName = "httplog"
		} else {
			httplogFlagName = fmt.Sprintf("%v.httplog", cmdPrefix)
		}

		httplogFlagValue, err := cmd.Flags().GetBool(httplogFlagName)
		if err != nil {
			return err, false
		}
		m.Httplog = httplogFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendHttpslogFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpslogFlagName := fmt.Sprintf("%v.httpslog", cmdPrefix)
	if cmd.Flags().Changed(httpslogFlagName) {

		var httpslogFlagName string
		if cmdPrefix == "" {
			httpslogFlagName = "httpslog"
		} else {
			httpslogFlagName = fmt.Sprintf("%v.httpslog", cmdPrefix)
		}

		httpslogFlagValue, err := cmd.Flags().GetString(httpslogFlagName)
		if err != nil {
			return err, false
		}
		m.Httpslog = httpslogFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendIdleCloseOnResponseFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idleCloseOnResponseFlagName := fmt.Sprintf("%v.idle_close_on_response", cmdPrefix)
	if cmd.Flags().Changed(idleCloseOnResponseFlagName) {

		var idleCloseOnResponseFlagName string
		if cmdPrefix == "" {
			idleCloseOnResponseFlagName = "idle_close_on_response"
		} else {
			idleCloseOnResponseFlagName = fmt.Sprintf("%v.idle_close_on_response", cmdPrefix)
		}

		idleCloseOnResponseFlagValue, err := cmd.Flags().GetString(idleCloseOnResponseFlagName)
		if err != nil {
			return err, false
		}
		m.IdleCloseOnResponse = idleCloseOnResponseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendIndependentStreamsFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	independentStreamsFlagName := fmt.Sprintf("%v.independent_streams", cmdPrefix)
	if cmd.Flags().Changed(independentStreamsFlagName) {

		var independentStreamsFlagName string
		if cmdPrefix == "" {
			independentStreamsFlagName = "independent_streams"
		} else {
			independentStreamsFlagName = fmt.Sprintf("%v.independent_streams", cmdPrefix)
		}

		independentStreamsFlagValue, err := cmd.Flags().GetString(independentStreamsFlagName)
		if err != nil {
			return err, false
		}
		m.IndependentStreams = independentStreamsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendLogFormatFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logFormatFlagName := fmt.Sprintf("%v.log_format", cmdPrefix)
	if cmd.Flags().Changed(logFormatFlagName) {

		var logFormatFlagName string
		if cmdPrefix == "" {
			logFormatFlagName = "log_format"
		} else {
			logFormatFlagName = fmt.Sprintf("%v.log_format", cmdPrefix)
		}

		logFormatFlagValue, err := cmd.Flags().GetString(logFormatFlagName)
		if err != nil {
			return err, false
		}
		m.LogFormat = logFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendLogFormatSdFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logFormatSdFlagName := fmt.Sprintf("%v.log_format_sd", cmdPrefix)
	if cmd.Flags().Changed(logFormatSdFlagName) {

		var logFormatSdFlagName string
		if cmdPrefix == "" {
			logFormatSdFlagName = "log_format_sd"
		} else {
			logFormatSdFlagName = fmt.Sprintf("%v.log_format_sd", cmdPrefix)
		}

		logFormatSdFlagValue, err := cmd.Flags().GetString(logFormatSdFlagName)
		if err != nil {
			return err, false
		}
		m.LogFormatSd = logFormatSdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendLogSeparateErrorsFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logSeparateErrorsFlagName := fmt.Sprintf("%v.log_separate_errors", cmdPrefix)
	if cmd.Flags().Changed(logSeparateErrorsFlagName) {

		var logSeparateErrorsFlagName string
		if cmdPrefix == "" {
			logSeparateErrorsFlagName = "log_separate_errors"
		} else {
			logSeparateErrorsFlagName = fmt.Sprintf("%v.log_separate_errors", cmdPrefix)
		}

		logSeparateErrorsFlagValue, err := cmd.Flags().GetString(logSeparateErrorsFlagName)
		if err != nil {
			return err, false
		}
		m.LogSeparateErrors = logSeparateErrorsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendLogTagFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logTagFlagName := fmt.Sprintf("%v.log_tag", cmdPrefix)
	if cmd.Flags().Changed(logTagFlagName) {

		var logTagFlagName string
		if cmdPrefix == "" {
			logTagFlagName = "log_tag"
		} else {
			logTagFlagName = fmt.Sprintf("%v.log_tag", cmdPrefix)
		}

		logTagFlagValue, err := cmd.Flags().GetString(logTagFlagName)
		if err != nil {
			return err, false
		}
		m.LogTag = logTagFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendLogasapFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logasapFlagName := fmt.Sprintf("%v.logasap", cmdPrefix)
	if cmd.Flags().Changed(logasapFlagName) {

		var logasapFlagName string
		if cmdPrefix == "" {
			logasapFlagName = "logasap"
		} else {
			logasapFlagName = fmt.Sprintf("%v.logasap", cmdPrefix)
		}

		logasapFlagValue, err := cmd.Flags().GetString(logasapFlagName)
		if err != nil {
			return err, false
		}
		m.Logasap = logasapFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendMaxconnFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxconnFlagName := fmt.Sprintf("%v.maxconn", cmdPrefix)
	if cmd.Flags().Changed(maxconnFlagName) {

		var maxconnFlagName string
		if cmdPrefix == "" {
			maxconnFlagName = "maxconn"
		} else {
			maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
		}

		maxconnFlagValue, err := cmd.Flags().GetInt64(maxconnFlagName)
		if err != nil {
			return err, false
		}
		m.Maxconn = &maxconnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendModeFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendMonitorFailFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	monitorFailFlagName := fmt.Sprintf("%v.monitor_fail", cmdPrefix)
	if cmd.Flags().Changed(monitorFailFlagName) {
		// info: complex object monitor_fail MonitorFail is retrieved outside this Changed() block
	}
	monitorFailFlagValue := m.MonitorFail
	if swag.IsZero(monitorFailFlagValue) {
		monitorFailFlagValue = &models.MonitorFail{}
	}

	err, monitorFailAdded := retrieveModelMonitorFailFlags(depth+1, monitorFailFlagValue, monitorFailFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || monitorFailAdded
	if monitorFailAdded {
		m.MonitorFail = monitorFailFlagValue
	}

	return nil, retAdded
}

func retrieveFrontendMonitorURIFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	monitorUriFlagName := fmt.Sprintf("%v.monitor_uri", cmdPrefix)
	if cmd.Flags().Changed(monitorUriFlagName) {

		// warning: primitive monitor_uri MonitorURI is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendNameFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendNolingerFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nolingerFlagName := fmt.Sprintf("%v.nolinger", cmdPrefix)
	if cmd.Flags().Changed(nolingerFlagName) {

		var nolingerFlagName string
		if cmdPrefix == "" {
			nolingerFlagName = "nolinger"
		} else {
			nolingerFlagName = fmt.Sprintf("%v.nolinger", cmdPrefix)
		}

		nolingerFlagValue, err := cmd.Flags().GetString(nolingerFlagName)
		if err != nil {
			return err, false
		}
		m.Nolinger = nolingerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendOriginaltoFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	originaltoFlagName := fmt.Sprintf("%v.originalto", cmdPrefix)
	if cmd.Flags().Changed(originaltoFlagName) {

		var originaltoFlagName string
		if cmdPrefix == "" {
			originaltoFlagName = "originalto"
		} else {
			originaltoFlagName = fmt.Sprintf("%v.originalto", cmdPrefix)
		}

		originaltoFlagValue, err := cmd.Flags().GetString(originaltoFlagName)
		if err != nil {
			return err, false
		}
		m.Originalto = originaltoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendSocketStatsFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	socketStatsFlagName := fmt.Sprintf("%v.socket_stats", cmdPrefix)
	if cmd.Flags().Changed(socketStatsFlagName) {

		var socketStatsFlagName string
		if cmdPrefix == "" {
			socketStatsFlagName = "socket_stats"
		} else {
			socketStatsFlagName = fmt.Sprintf("%v.socket_stats", cmdPrefix)
		}

		socketStatsFlagValue, err := cmd.Flags().GetString(socketStatsFlagName)
		if err != nil {
			return err, false
		}
		m.SocketStats = socketStatsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendSpliceAutoFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spliceAutoFlagName := fmt.Sprintf("%v.splice_auto", cmdPrefix)
	if cmd.Flags().Changed(spliceAutoFlagName) {

		var spliceAutoFlagName string
		if cmdPrefix == "" {
			spliceAutoFlagName = "splice_auto"
		} else {
			spliceAutoFlagName = fmt.Sprintf("%v.splice_auto", cmdPrefix)
		}

		spliceAutoFlagValue, err := cmd.Flags().GetString(spliceAutoFlagName)
		if err != nil {
			return err, false
		}
		m.SpliceAuto = spliceAutoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendSpliceRequestFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spliceRequestFlagName := fmt.Sprintf("%v.splice_request", cmdPrefix)
	if cmd.Flags().Changed(spliceRequestFlagName) {

		var spliceRequestFlagName string
		if cmdPrefix == "" {
			spliceRequestFlagName = "splice_request"
		} else {
			spliceRequestFlagName = fmt.Sprintf("%v.splice_request", cmdPrefix)
		}

		spliceRequestFlagValue, err := cmd.Flags().GetString(spliceRequestFlagName)
		if err != nil {
			return err, false
		}
		m.SpliceRequest = spliceRequestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendSpliceResponseFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spliceResponseFlagName := fmt.Sprintf("%v.splice_response", cmdPrefix)
	if cmd.Flags().Changed(spliceResponseFlagName) {

		var spliceResponseFlagName string
		if cmdPrefix == "" {
			spliceResponseFlagName = "splice_response"
		} else {
			spliceResponseFlagName = fmt.Sprintf("%v.splice_response", cmdPrefix)
		}

		spliceResponseFlagValue, err := cmd.Flags().GetString(spliceResponseFlagName)
		if err != nil {
			return err, false
		}
		m.SpliceResponse = spliceResponseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendStatsOptionsFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statsOptionsFlagName := fmt.Sprintf("%v.stats_options", cmdPrefix)
	if cmd.Flags().Changed(statsOptionsFlagName) {
		// info: complex object stats_options StatsOptions is retrieved outside this Changed() block
	}
	statsOptionsFlagValue := m.StatsOptions
	if swag.IsZero(statsOptionsFlagValue) {
		statsOptionsFlagValue = &models.StatsOptions{}
	}

	err, statsOptionsAdded := retrieveModelStatsOptionsFlags(depth+1, statsOptionsFlagValue, statsOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statsOptionsAdded
	if statsOptionsAdded {
		m.StatsOptions = statsOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveFrontendStickTableFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stickTableFlagName := fmt.Sprintf("%v.stick_table", cmdPrefix)
	if cmd.Flags().Changed(stickTableFlagName) {
		// info: complex object stick_table ConfigStickTable is retrieved outside this Changed() block
	}
	stickTableFlagValue := m.StickTable
	if swag.IsZero(stickTableFlagValue) {
		stickTableFlagValue = &models.ConfigStickTable{}
	}

	err, stickTableAdded := retrieveModelConfigStickTableFlags(depth+1, stickTableFlagValue, stickTableFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stickTableAdded
	if stickTableAdded {
		m.StickTable = stickTableFlagValue
	}

	return nil, retAdded
}

func retrieveFrontendTCPSmartAcceptFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpSmartAcceptFlagName := fmt.Sprintf("%v.tcp_smart_accept", cmdPrefix)
	if cmd.Flags().Changed(tcpSmartAcceptFlagName) {

		var tcpSmartAcceptFlagName string
		if cmdPrefix == "" {
			tcpSmartAcceptFlagName = "tcp_smart_accept"
		} else {
			tcpSmartAcceptFlagName = fmt.Sprintf("%v.tcp_smart_accept", cmdPrefix)
		}

		tcpSmartAcceptFlagValue, err := cmd.Flags().GetString(tcpSmartAcceptFlagName)
		if err != nil {
			return err, false
		}
		m.TCPSmartAccept = tcpSmartAcceptFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendTcpkaFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpkaFlagName := fmt.Sprintf("%v.tcpka", cmdPrefix)
	if cmd.Flags().Changed(tcpkaFlagName) {

		var tcpkaFlagName string
		if cmdPrefix == "" {
			tcpkaFlagName = "tcpka"
		} else {
			tcpkaFlagName = fmt.Sprintf("%v.tcpka", cmdPrefix)
		}

		tcpkaFlagValue, err := cmd.Flags().GetString(tcpkaFlagName)
		if err != nil {
			return err, false
		}
		m.Tcpka = tcpkaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendTcplogFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcplogFlagName := fmt.Sprintf("%v.tcplog", cmdPrefix)
	if cmd.Flags().Changed(tcplogFlagName) {

		var tcplogFlagName string
		if cmdPrefix == "" {
			tcplogFlagName = "tcplog"
		} else {
			tcplogFlagName = fmt.Sprintf("%v.tcplog", cmdPrefix)
		}

		tcplogFlagValue, err := cmd.Flags().GetBool(tcplogFlagName)
		if err != nil {
			return err, false
		}
		m.Tcplog = tcplogFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendUniqueIDFormatFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uniqueIdFormatFlagName := fmt.Sprintf("%v.unique_id_format", cmdPrefix)
	if cmd.Flags().Changed(uniqueIdFormatFlagName) {

		var uniqueIdFormatFlagName string
		if cmdPrefix == "" {
			uniqueIdFormatFlagName = "unique_id_format"
		} else {
			uniqueIdFormatFlagName = fmt.Sprintf("%v.unique_id_format", cmdPrefix)
		}

		uniqueIdFormatFlagValue, err := cmd.Flags().GetString(uniqueIdFormatFlagName)
		if err != nil {
			return err, false
		}
		m.UniqueIDFormat = uniqueIdFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFrontendUniqueIDHeaderFlags(depth int, m *models.Frontend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uniqueIdHeaderFlagName := fmt.Sprintf("%v.unique_id_header", cmdPrefix)
	if cmd.Flags().Changed(uniqueIdHeaderFlagName) {

		var uniqueIdHeaderFlagName string
		if cmdPrefix == "" {
			uniqueIdHeaderFlagName = "unique_id_header"
		} else {
			uniqueIdHeaderFlagName = fmt.Sprintf("%v.unique_id_header", cmdPrefix)
		}

		uniqueIdHeaderFlagValue, err := cmd.Flags().GetString(uniqueIdHeaderFlagName)
		if err != nil {
			return err, false
		}
		m.UniqueIDHeader = uniqueIdHeaderFlagValue

		retAdded = true
	}

	return nil, retAdded
}
