// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/haproxytech/client-native/v4/models"

	"github.com/spf13/cobra"
)

// Schema cli for Defaults

// register flags to command
func registerModelDefaultsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDefaultsErrorFiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsAbortonclose(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsAcceptInvalidHTTPRequest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsAcceptInvalidHTTPResponse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsAdvCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsAllbackups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsBacklog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsBalance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsBindProcess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsCheckTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsCheckcache(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsClflog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsClientFinTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsClientTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsClitcpka(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsClitcpkaCnt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsClitcpkaIdle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsClitcpkaIntvl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsCompression(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsConnectTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsContstats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsCookie(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsDefaultBackend(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsDefaultServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsDisableH2Upgrade(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsDontlogNormal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsDontlognull(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsDynamicCookieKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsExternalCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsExternalCheckCommand(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsExternalCheckPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsForwardfor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsH1CaseAdjustBogusClient(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsH1CaseAdjustBogusServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHTTPBufferRequest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHTTPCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHTTPUseHtx(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHTTPConnectionMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHTTPIgnoreProbes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHTTPKeepAliveTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHTTPNoDelay(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHTTPPretendKeepalive(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHTTPRequestTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHTTPReuse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHTTPUseProxyHeader(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHttpchkParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHttplog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsHttpslog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsIdleCloseOnResponse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsIndependentStreams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsLoadServerStateFromFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsLogFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsLogFormatSd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsLogHealthChecks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsLogSeparateErrors(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsLogTag(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsLogasap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsMaxconn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsMonitorURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsMysqlCheckParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsNolinger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsOriginalto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsPersist(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsPgsqlCheckParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsPreferLastServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsQueueTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsRedispatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsRetries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsServerFinTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsServerTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsSmtpchkParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsSocketStats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsSpliceAuto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsSpliceRequest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsSpliceResponse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsSrvtcpka(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsSrvtcpkaCnt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsSrvtcpkaIdle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsSrvtcpkaIntvl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsStatsOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsTCPSmartAccept(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsTCPSmartConnect(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsTcpka(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsTcplog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsTransparent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsTunnelTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsUniqueIDFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultsUniqueIDHeader(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultsErrorFiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ErrorFiles []*Errorfile array type is not supported by go-swagger cli yet

	return nil
}

func registerDefaultsAbortonclose(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	abortoncloseDescription := `Enum: ["enabled","disabled"]. `

	var abortoncloseFlagName string
	if cmdPrefix == "" {
		abortoncloseFlagName = "abortonclose"
	} else {
		abortoncloseFlagName = fmt.Sprintf("%v.abortonclose", cmdPrefix)
	}

	var abortoncloseFlagDefault string

	_ = cmd.PersistentFlags().String(abortoncloseFlagName, abortoncloseFlagDefault, abortoncloseDescription)

	if err := cmd.RegisterFlagCompletionFunc(abortoncloseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsAcceptInvalidHTTPRequest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	acceptInvalidHttpRequestDescription := `Enum: ["enabled","disabled"]. `

	var acceptInvalidHttpRequestFlagName string
	if cmdPrefix == "" {
		acceptInvalidHttpRequestFlagName = "accept_invalid_http_request"
	} else {
		acceptInvalidHttpRequestFlagName = fmt.Sprintf("%v.accept_invalid_http_request", cmdPrefix)
	}

	var acceptInvalidHttpRequestFlagDefault string

	_ = cmd.PersistentFlags().String(acceptInvalidHttpRequestFlagName, acceptInvalidHttpRequestFlagDefault, acceptInvalidHttpRequestDescription)

	if err := cmd.RegisterFlagCompletionFunc(acceptInvalidHttpRequestFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsAcceptInvalidHTTPResponse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	acceptInvalidHttpResponseDescription := `Enum: ["enabled","disabled"]. `

	var acceptInvalidHttpResponseFlagName string
	if cmdPrefix == "" {
		acceptInvalidHttpResponseFlagName = "accept_invalid_http_response"
	} else {
		acceptInvalidHttpResponseFlagName = fmt.Sprintf("%v.accept_invalid_http_response", cmdPrefix)
	}

	var acceptInvalidHttpResponseFlagDefault string

	_ = cmd.PersistentFlags().String(acceptInvalidHttpResponseFlagName, acceptInvalidHttpResponseFlagDefault, acceptInvalidHttpResponseDescription)

	if err := cmd.RegisterFlagCompletionFunc(acceptInvalidHttpResponseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsAdvCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	advCheckDescription := `Enum: ["ssl-hello-chk","smtpchk","ldap-check","mysql-check","pgsql-check","tcp-check","redis-check","httpchk"]. `

	var advCheckFlagName string
	if cmdPrefix == "" {
		advCheckFlagName = "adv_check"
	} else {
		advCheckFlagName = fmt.Sprintf("%v.adv_check", cmdPrefix)
	}

	var advCheckFlagDefault string

	_ = cmd.PersistentFlags().String(advCheckFlagName, advCheckFlagDefault, advCheckDescription)

	if err := cmd.RegisterFlagCompletionFunc(advCheckFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ssl-hello-chk","smtpchk","ldap-check","mysql-check","pgsql-check","tcp-check","redis-check","httpchk"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsAllbackups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allbackupsDescription := `Enum: ["enabled","disabled"]. `

	var allbackupsFlagName string
	if cmdPrefix == "" {
		allbackupsFlagName = "allbackups"
	} else {
		allbackupsFlagName = fmt.Sprintf("%v.allbackups", cmdPrefix)
	}

	var allbackupsFlagDefault string

	_ = cmd.PersistentFlags().String(allbackupsFlagName, allbackupsFlagDefault, allbackupsDescription)

	if err := cmd.RegisterFlagCompletionFunc(allbackupsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsBacklog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	backlogDescription := ``

	var backlogFlagName string
	if cmdPrefix == "" {
		backlogFlagName = "backlog"
	} else {
		backlogFlagName = fmt.Sprintf("%v.backlog", cmdPrefix)
	}

	var backlogFlagDefault int64

	_ = cmd.PersistentFlags().Int64(backlogFlagName, backlogFlagDefault, backlogDescription)

	return nil
}

func registerDefaultsBalance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var balanceFlagName string
	if cmdPrefix == "" {
		balanceFlagName = "balance"
	} else {
		balanceFlagName = fmt.Sprintf("%v.balance", cmdPrefix)
	}

	if err := registerModelBalanceFlags(depth+1, balanceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultsBindProcess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bindProcessDescription := ``

	var bindProcessFlagName string
	if cmdPrefix == "" {
		bindProcessFlagName = "bind_process"
	} else {
		bindProcessFlagName = fmt.Sprintf("%v.bind_process", cmdPrefix)
	}

	var bindProcessFlagDefault string

	_ = cmd.PersistentFlags().String(bindProcessFlagName, bindProcessFlagDefault, bindProcessDescription)

	return nil
}

func registerDefaultsCheckTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkTimeoutDescription := ``

	var checkTimeoutFlagName string
	if cmdPrefix == "" {
		checkTimeoutFlagName = "check_timeout"
	} else {
		checkTimeoutFlagName = fmt.Sprintf("%v.check_timeout", cmdPrefix)
	}

	var checkTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(checkTimeoutFlagName, checkTimeoutFlagDefault, checkTimeoutDescription)

	return nil
}

func registerDefaultsCheckcache(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkcacheDescription := `Enum: ["enabled","disabled"]. `

	var checkcacheFlagName string
	if cmdPrefix == "" {
		checkcacheFlagName = "checkcache"
	} else {
		checkcacheFlagName = fmt.Sprintf("%v.checkcache", cmdPrefix)
	}

	var checkcacheFlagDefault string

	_ = cmd.PersistentFlags().String(checkcacheFlagName, checkcacheFlagDefault, checkcacheDescription)

	if err := cmd.RegisterFlagCompletionFunc(checkcacheFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsClflog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clflogDescription := ``

	var clflogFlagName string
	if cmdPrefix == "" {
		clflogFlagName = "clflog"
	} else {
		clflogFlagName = fmt.Sprintf("%v.clflog", cmdPrefix)
	}

	var clflogFlagDefault bool

	_ = cmd.PersistentFlags().Bool(clflogFlagName, clflogFlagDefault, clflogDescription)

	return nil
}

func registerDefaultsClientFinTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientFinTimeoutDescription := ``

	var clientFinTimeoutFlagName string
	if cmdPrefix == "" {
		clientFinTimeoutFlagName = "client_fin_timeout"
	} else {
		clientFinTimeoutFlagName = fmt.Sprintf("%v.client_fin_timeout", cmdPrefix)
	}

	var clientFinTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(clientFinTimeoutFlagName, clientFinTimeoutFlagDefault, clientFinTimeoutDescription)

	return nil
}

func registerDefaultsClientTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientTimeoutDescription := ``

	var clientTimeoutFlagName string
	if cmdPrefix == "" {
		clientTimeoutFlagName = "client_timeout"
	} else {
		clientTimeoutFlagName = fmt.Sprintf("%v.client_timeout", cmdPrefix)
	}

	var clientTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(clientTimeoutFlagName, clientTimeoutFlagDefault, clientTimeoutDescription)

	return nil
}

func registerDefaultsClitcpka(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clitcpkaDescription := `Enum: ["enabled","disabled"]. `

	var clitcpkaFlagName string
	if cmdPrefix == "" {
		clitcpkaFlagName = "clitcpka"
	} else {
		clitcpkaFlagName = fmt.Sprintf("%v.clitcpka", cmdPrefix)
	}

	var clitcpkaFlagDefault string

	_ = cmd.PersistentFlags().String(clitcpkaFlagName, clitcpkaFlagDefault, clitcpkaDescription)

	if err := cmd.RegisterFlagCompletionFunc(clitcpkaFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsClitcpkaCnt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clitcpkaCntDescription := ``

	var clitcpkaCntFlagName string
	if cmdPrefix == "" {
		clitcpkaCntFlagName = "clitcpka_cnt"
	} else {
		clitcpkaCntFlagName = fmt.Sprintf("%v.clitcpka_cnt", cmdPrefix)
	}

	var clitcpkaCntFlagDefault int64

	_ = cmd.PersistentFlags().Int64(clitcpkaCntFlagName, clitcpkaCntFlagDefault, clitcpkaCntDescription)

	return nil
}

func registerDefaultsClitcpkaIdle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clitcpkaIdleDescription := ``

	var clitcpkaIdleFlagName string
	if cmdPrefix == "" {
		clitcpkaIdleFlagName = "clitcpka_idle"
	} else {
		clitcpkaIdleFlagName = fmt.Sprintf("%v.clitcpka_idle", cmdPrefix)
	}

	var clitcpkaIdleFlagDefault int64

	_ = cmd.PersistentFlags().Int64(clitcpkaIdleFlagName, clitcpkaIdleFlagDefault, clitcpkaIdleDescription)

	return nil
}

func registerDefaultsClitcpkaIntvl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clitcpkaIntvlDescription := ``

	var clitcpkaIntvlFlagName string
	if cmdPrefix == "" {
		clitcpkaIntvlFlagName = "clitcpka_intvl"
	} else {
		clitcpkaIntvlFlagName = fmt.Sprintf("%v.clitcpka_intvl", cmdPrefix)
	}

	var clitcpkaIntvlFlagDefault int64

	_ = cmd.PersistentFlags().Int64(clitcpkaIntvlFlagName, clitcpkaIntvlFlagDefault, clitcpkaIntvlDescription)

	return nil
}

func registerDefaultsCompression(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var compressionFlagName string
	if cmdPrefix == "" {
		compressionFlagName = "compression"
	} else {
		compressionFlagName = fmt.Sprintf("%v.compression", cmdPrefix)
	}

	if err := registerModelCompressionFlags(depth+1, compressionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultsConnectTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connectTimeoutDescription := ``

	var connectTimeoutFlagName string
	if cmdPrefix == "" {
		connectTimeoutFlagName = "connect_timeout"
	} else {
		connectTimeoutFlagName = fmt.Sprintf("%v.connect_timeout", cmdPrefix)
	}

	var connectTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(connectTimeoutFlagName, connectTimeoutFlagDefault, connectTimeoutDescription)

	return nil
}

func registerDefaultsContstats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	contstatsDescription := `Enum: ["enabled"]. `

	var contstatsFlagName string
	if cmdPrefix == "" {
		contstatsFlagName = "contstats"
	} else {
		contstatsFlagName = fmt.Sprintf("%v.contstats", cmdPrefix)
	}

	var contstatsFlagDefault string

	_ = cmd.PersistentFlags().String(contstatsFlagName, contstatsFlagDefault, contstatsDescription)

	if err := cmd.RegisterFlagCompletionFunc(contstatsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsCookie(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var cookieFlagName string
	if cmdPrefix == "" {
		cookieFlagName = "cookie"
	} else {
		cookieFlagName = fmt.Sprintf("%v.cookie", cmdPrefix)
	}

	if err := registerModelCookieFlags(depth+1, cookieFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultsDefaultBackend(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultBackendDescription := ``

	var defaultBackendFlagName string
	if cmdPrefix == "" {
		defaultBackendFlagName = "default_backend"
	} else {
		defaultBackendFlagName = fmt.Sprintf("%v.default_backend", cmdPrefix)
	}

	var defaultBackendFlagDefault string

	_ = cmd.PersistentFlags().String(defaultBackendFlagName, defaultBackendFlagDefault, defaultBackendDescription)

	return nil
}

func registerDefaultsDefaultServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var defaultServerFlagName string
	if cmdPrefix == "" {
		defaultServerFlagName = "default_server"
	} else {
		defaultServerFlagName = fmt.Sprintf("%v.default_server", cmdPrefix)
	}

	if err := registerModelDefaultServerFlags(depth+1, defaultServerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultsDisableH2Upgrade(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	disableH2UpgradeDescription := `Enum: ["enabled","disabled"]. `

	var disableH2UpgradeFlagName string
	if cmdPrefix == "" {
		disableH2UpgradeFlagName = "disable_h2_upgrade"
	} else {
		disableH2UpgradeFlagName = fmt.Sprintf("%v.disable_h2_upgrade", cmdPrefix)
	}

	var disableH2UpgradeFlagDefault string

	_ = cmd.PersistentFlags().String(disableH2UpgradeFlagName, disableH2UpgradeFlagDefault, disableH2UpgradeDescription)

	if err := cmd.RegisterFlagCompletionFunc(disableH2UpgradeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsDontlogNormal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dontlogNormalDescription := `Enum: ["enabled","disabled"]. `

	var dontlogNormalFlagName string
	if cmdPrefix == "" {
		dontlogNormalFlagName = "dontlog_normal"
	} else {
		dontlogNormalFlagName = fmt.Sprintf("%v.dontlog_normal", cmdPrefix)
	}

	var dontlogNormalFlagDefault string

	_ = cmd.PersistentFlags().String(dontlogNormalFlagName, dontlogNormalFlagDefault, dontlogNormalDescription)

	if err := cmd.RegisterFlagCompletionFunc(dontlogNormalFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsDontlognull(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dontlognullDescription := `Enum: ["enabled","disabled"]. `

	var dontlognullFlagName string
	if cmdPrefix == "" {
		dontlognullFlagName = "dontlognull"
	} else {
		dontlognullFlagName = fmt.Sprintf("%v.dontlognull", cmdPrefix)
	}

	var dontlognullFlagDefault string

	_ = cmd.PersistentFlags().String(dontlognullFlagName, dontlognullFlagDefault, dontlognullDescription)

	if err := cmd.RegisterFlagCompletionFunc(dontlognullFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsDynamicCookieKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dynamicCookieKeyDescription := ``

	var dynamicCookieKeyFlagName string
	if cmdPrefix == "" {
		dynamicCookieKeyFlagName = "dynamic_cookie_key"
	} else {
		dynamicCookieKeyFlagName = fmt.Sprintf("%v.dynamic_cookie_key", cmdPrefix)
	}

	var dynamicCookieKeyFlagDefault string

	_ = cmd.PersistentFlags().String(dynamicCookieKeyFlagName, dynamicCookieKeyFlagDefault, dynamicCookieKeyDescription)

	return nil
}

func registerDefaultsExternalCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	externalCheckDescription := `Enum: ["enabled","disabled"]. `

	var externalCheckFlagName string
	if cmdPrefix == "" {
		externalCheckFlagName = "external_check"
	} else {
		externalCheckFlagName = fmt.Sprintf("%v.external_check", cmdPrefix)
	}

	var externalCheckFlagDefault string

	_ = cmd.PersistentFlags().String(externalCheckFlagName, externalCheckFlagDefault, externalCheckDescription)

	if err := cmd.RegisterFlagCompletionFunc(externalCheckFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsExternalCheckCommand(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	externalCheckCommandDescription := ``

	var externalCheckCommandFlagName string
	if cmdPrefix == "" {
		externalCheckCommandFlagName = "external_check_command"
	} else {
		externalCheckCommandFlagName = fmt.Sprintf("%v.external_check_command", cmdPrefix)
	}

	var externalCheckCommandFlagDefault string

	_ = cmd.PersistentFlags().String(externalCheckCommandFlagName, externalCheckCommandFlagDefault, externalCheckCommandDescription)

	return nil
}

func registerDefaultsExternalCheckPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	externalCheckPathDescription := ``

	var externalCheckPathFlagName string
	if cmdPrefix == "" {
		externalCheckPathFlagName = "external_check_path"
	} else {
		externalCheckPathFlagName = fmt.Sprintf("%v.external_check_path", cmdPrefix)
	}

	var externalCheckPathFlagDefault string

	_ = cmd.PersistentFlags().String(externalCheckPathFlagName, externalCheckPathFlagDefault, externalCheckPathDescription)

	return nil
}

func registerDefaultsForwardfor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var forwardforFlagName string
	if cmdPrefix == "" {
		forwardforFlagName = "forwardfor"
	} else {
		forwardforFlagName = fmt.Sprintf("%v.forwardfor", cmdPrefix)
	}

	if err := registerModelForwardforFlags(depth+1, forwardforFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultsH1CaseAdjustBogusClient(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h1CaseAdjustBogusClientDescription := `Enum: ["enabled","disabled"]. `

	var h1CaseAdjustBogusClientFlagName string
	if cmdPrefix == "" {
		h1CaseAdjustBogusClientFlagName = "h1_case_adjust_bogus_client"
	} else {
		h1CaseAdjustBogusClientFlagName = fmt.Sprintf("%v.h1_case_adjust_bogus_client", cmdPrefix)
	}

	var h1CaseAdjustBogusClientFlagDefault string

	_ = cmd.PersistentFlags().String(h1CaseAdjustBogusClientFlagName, h1CaseAdjustBogusClientFlagDefault, h1CaseAdjustBogusClientDescription)

	if err := cmd.RegisterFlagCompletionFunc(h1CaseAdjustBogusClientFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsH1CaseAdjustBogusServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h1CaseAdjustBogusServerDescription := `Enum: ["enabled","disabled"]. `

	var h1CaseAdjustBogusServerFlagName string
	if cmdPrefix == "" {
		h1CaseAdjustBogusServerFlagName = "h1_case_adjust_bogus_server"
	} else {
		h1CaseAdjustBogusServerFlagName = fmt.Sprintf("%v.h1_case_adjust_bogus_server", cmdPrefix)
	}

	var h1CaseAdjustBogusServerFlagDefault string

	_ = cmd.PersistentFlags().String(h1CaseAdjustBogusServerFlagName, h1CaseAdjustBogusServerFlagDefault, h1CaseAdjustBogusServerDescription)

	if err := cmd.RegisterFlagCompletionFunc(h1CaseAdjustBogusServerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsHTTPBufferRequest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpBufferRequestDescription := `Enum: ["enabled","disabled"]. `

	var httpBufferRequestFlagName string
	if cmdPrefix == "" {
		httpBufferRequestFlagName = "http-buffer-request"
	} else {
		httpBufferRequestFlagName = fmt.Sprintf("%v.http-buffer-request", cmdPrefix)
	}

	var httpBufferRequestFlagDefault string

	_ = cmd.PersistentFlags().String(httpBufferRequestFlagName, httpBufferRequestFlagDefault, httpBufferRequestDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpBufferRequestFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsHTTPCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var httpCheckFlagName string
	if cmdPrefix == "" {
		httpCheckFlagName = "http-check"
	} else {
		httpCheckFlagName = fmt.Sprintf("%v.http-check", cmdPrefix)
	}

	if err := registerModelHTTPCheckFlags(depth+1, httpCheckFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultsHTTPUseHtx(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpUseHtxDescription := `Enum: ["enabled","disabled"]. `

	var httpUseHtxFlagName string
	if cmdPrefix == "" {
		httpUseHtxFlagName = "http-use-htx"
	} else {
		httpUseHtxFlagName = fmt.Sprintf("%v.http-use-htx", cmdPrefix)
	}

	var httpUseHtxFlagDefault string

	_ = cmd.PersistentFlags().String(httpUseHtxFlagName, httpUseHtxFlagDefault, httpUseHtxDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpUseHtxFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsHTTPConnectionMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpConnectionModeDescription := `Enum: ["httpclose","http-server-close","http-keep-alive"]. `

	var httpConnectionModeFlagName string
	if cmdPrefix == "" {
		httpConnectionModeFlagName = "http_connection_mode"
	} else {
		httpConnectionModeFlagName = fmt.Sprintf("%v.http_connection_mode", cmdPrefix)
	}

	var httpConnectionModeFlagDefault string

	_ = cmd.PersistentFlags().String(httpConnectionModeFlagName, httpConnectionModeFlagDefault, httpConnectionModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpConnectionModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["httpclose","http-server-close","http-keep-alive"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsHTTPIgnoreProbes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpIgnoreProbesDescription := `Enum: ["enabled","disabled"]. `

	var httpIgnoreProbesFlagName string
	if cmdPrefix == "" {
		httpIgnoreProbesFlagName = "http_ignore_probes"
	} else {
		httpIgnoreProbesFlagName = fmt.Sprintf("%v.http_ignore_probes", cmdPrefix)
	}

	var httpIgnoreProbesFlagDefault string

	_ = cmd.PersistentFlags().String(httpIgnoreProbesFlagName, httpIgnoreProbesFlagDefault, httpIgnoreProbesDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpIgnoreProbesFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsHTTPKeepAliveTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpKeepAliveTimeoutDescription := ``

	var httpKeepAliveTimeoutFlagName string
	if cmdPrefix == "" {
		httpKeepAliveTimeoutFlagName = "http_keep_alive_timeout"
	} else {
		httpKeepAliveTimeoutFlagName = fmt.Sprintf("%v.http_keep_alive_timeout", cmdPrefix)
	}

	var httpKeepAliveTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpKeepAliveTimeoutFlagName, httpKeepAliveTimeoutFlagDefault, httpKeepAliveTimeoutDescription)

	return nil
}

func registerDefaultsHTTPNoDelay(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpNoDelayDescription := `Enum: ["enabled","disabled"]. `

	var httpNoDelayFlagName string
	if cmdPrefix == "" {
		httpNoDelayFlagName = "http_no_delay"
	} else {
		httpNoDelayFlagName = fmt.Sprintf("%v.http_no_delay", cmdPrefix)
	}

	var httpNoDelayFlagDefault string

	_ = cmd.PersistentFlags().String(httpNoDelayFlagName, httpNoDelayFlagDefault, httpNoDelayDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpNoDelayFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsHTTPPretendKeepalive(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpPretendKeepaliveDescription := `Enum: ["enabled","disabled"]. `

	var httpPretendKeepaliveFlagName string
	if cmdPrefix == "" {
		httpPretendKeepaliveFlagName = "http_pretend_keepalive"
	} else {
		httpPretendKeepaliveFlagName = fmt.Sprintf("%v.http_pretend_keepalive", cmdPrefix)
	}

	var httpPretendKeepaliveFlagDefault string

	_ = cmd.PersistentFlags().String(httpPretendKeepaliveFlagName, httpPretendKeepaliveFlagDefault, httpPretendKeepaliveDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpPretendKeepaliveFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsHTTPRequestTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpRequestTimeoutDescription := ``

	var httpRequestTimeoutFlagName string
	if cmdPrefix == "" {
		httpRequestTimeoutFlagName = "http_request_timeout"
	} else {
		httpRequestTimeoutFlagName = fmt.Sprintf("%v.http_request_timeout", cmdPrefix)
	}

	var httpRequestTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpRequestTimeoutFlagName, httpRequestTimeoutFlagDefault, httpRequestTimeoutDescription)

	return nil
}

func registerDefaultsHTTPReuse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpReuseDescription := `Enum: ["aggressive","always","never","safe"]. `

	var httpReuseFlagName string
	if cmdPrefix == "" {
		httpReuseFlagName = "http_reuse"
	} else {
		httpReuseFlagName = fmt.Sprintf("%v.http_reuse", cmdPrefix)
	}

	var httpReuseFlagDefault string

	_ = cmd.PersistentFlags().String(httpReuseFlagName, httpReuseFlagDefault, httpReuseDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpReuseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["aggressive","always","never","safe"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsHTTPUseProxyHeader(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpUseProxyHeaderDescription := `Enum: ["enabled","disabled"]. `

	var httpUseProxyHeaderFlagName string
	if cmdPrefix == "" {
		httpUseProxyHeaderFlagName = "http_use_proxy_header"
	} else {
		httpUseProxyHeaderFlagName = fmt.Sprintf("%v.http_use_proxy_header", cmdPrefix)
	}

	var httpUseProxyHeaderFlagDefault string

	_ = cmd.PersistentFlags().String(httpUseProxyHeaderFlagName, httpUseProxyHeaderFlagDefault, httpUseProxyHeaderDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpUseProxyHeaderFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsHttpchkParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var httpchkParamsFlagName string
	if cmdPrefix == "" {
		httpchkParamsFlagName = "httpchk_params"
	} else {
		httpchkParamsFlagName = fmt.Sprintf("%v.httpchk_params", cmdPrefix)
	}

	if err := registerModelHttpchkParamsFlags(depth+1, httpchkParamsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultsHttplog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httplogDescription := ``

	var httplogFlagName string
	if cmdPrefix == "" {
		httplogFlagName = "httplog"
	} else {
		httplogFlagName = fmt.Sprintf("%v.httplog", cmdPrefix)
	}

	var httplogFlagDefault bool

	_ = cmd.PersistentFlags().Bool(httplogFlagName, httplogFlagDefault, httplogDescription)

	return nil
}

func registerDefaultsHttpslog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpslogDescription := `Enum: ["enabled","disabled"]. `

	var httpslogFlagName string
	if cmdPrefix == "" {
		httpslogFlagName = "httpslog"
	} else {
		httpslogFlagName = fmt.Sprintf("%v.httpslog", cmdPrefix)
	}

	var httpslogFlagDefault string

	_ = cmd.PersistentFlags().String(httpslogFlagName, httpslogFlagDefault, httpslogDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpslogFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsIdleCloseOnResponse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idleCloseOnResponseDescription := `Enum: ["enabled","disabled"]. `

	var idleCloseOnResponseFlagName string
	if cmdPrefix == "" {
		idleCloseOnResponseFlagName = "idle_close_on_response"
	} else {
		idleCloseOnResponseFlagName = fmt.Sprintf("%v.idle_close_on_response", cmdPrefix)
	}

	var idleCloseOnResponseFlagDefault string

	_ = cmd.PersistentFlags().String(idleCloseOnResponseFlagName, idleCloseOnResponseFlagDefault, idleCloseOnResponseDescription)

	if err := cmd.RegisterFlagCompletionFunc(idleCloseOnResponseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsIndependentStreams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	independentStreamsDescription := `Enum: ["enabled","disabled"]. `

	var independentStreamsFlagName string
	if cmdPrefix == "" {
		independentStreamsFlagName = "independent_streams"
	} else {
		independentStreamsFlagName = fmt.Sprintf("%v.independent_streams", cmdPrefix)
	}

	var independentStreamsFlagDefault string

	_ = cmd.PersistentFlags().String(independentStreamsFlagName, independentStreamsFlagDefault, independentStreamsDescription)

	if err := cmd.RegisterFlagCompletionFunc(independentStreamsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsLoadServerStateFromFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	loadServerStateFromFileDescription := `Enum: ["global","local","none"]. `

	var loadServerStateFromFileFlagName string
	if cmdPrefix == "" {
		loadServerStateFromFileFlagName = "load_server_state_from_file"
	} else {
		loadServerStateFromFileFlagName = fmt.Sprintf("%v.load_server_state_from_file", cmdPrefix)
	}

	var loadServerStateFromFileFlagDefault string

	_ = cmd.PersistentFlags().String(loadServerStateFromFileFlagName, loadServerStateFromFileFlagDefault, loadServerStateFromFileDescription)

	if err := cmd.RegisterFlagCompletionFunc(loadServerStateFromFileFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["global","local","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsLogFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logFormatDescription := ``

	var logFormatFlagName string
	if cmdPrefix == "" {
		logFormatFlagName = "log_format"
	} else {
		logFormatFlagName = fmt.Sprintf("%v.log_format", cmdPrefix)
	}

	var logFormatFlagDefault string

	_ = cmd.PersistentFlags().String(logFormatFlagName, logFormatFlagDefault, logFormatDescription)

	return nil
}

func registerDefaultsLogFormatSd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logFormatSdDescription := ``

	var logFormatSdFlagName string
	if cmdPrefix == "" {
		logFormatSdFlagName = "log_format_sd"
	} else {
		logFormatSdFlagName = fmt.Sprintf("%v.log_format_sd", cmdPrefix)
	}

	var logFormatSdFlagDefault string

	_ = cmd.PersistentFlags().String(logFormatSdFlagName, logFormatSdFlagDefault, logFormatSdDescription)

	return nil
}

func registerDefaultsLogHealthChecks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logHealthChecksDescription := `Enum: ["enabled","disabled"]. `

	var logHealthChecksFlagName string
	if cmdPrefix == "" {
		logHealthChecksFlagName = "log_health_checks"
	} else {
		logHealthChecksFlagName = fmt.Sprintf("%v.log_health_checks", cmdPrefix)
	}

	var logHealthChecksFlagDefault string

	_ = cmd.PersistentFlags().String(logHealthChecksFlagName, logHealthChecksFlagDefault, logHealthChecksDescription)

	if err := cmd.RegisterFlagCompletionFunc(logHealthChecksFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsLogSeparateErrors(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logSeparateErrorsDescription := `Enum: ["enabled","disabled"]. `

	var logSeparateErrorsFlagName string
	if cmdPrefix == "" {
		logSeparateErrorsFlagName = "log_separate_errors"
	} else {
		logSeparateErrorsFlagName = fmt.Sprintf("%v.log_separate_errors", cmdPrefix)
	}

	var logSeparateErrorsFlagDefault string

	_ = cmd.PersistentFlags().String(logSeparateErrorsFlagName, logSeparateErrorsFlagDefault, logSeparateErrorsDescription)

	if err := cmd.RegisterFlagCompletionFunc(logSeparateErrorsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsLogTag(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logTagDescription := ``

	var logTagFlagName string
	if cmdPrefix == "" {
		logTagFlagName = "log_tag"
	} else {
		logTagFlagName = fmt.Sprintf("%v.log_tag", cmdPrefix)
	}

	var logTagFlagDefault string

	_ = cmd.PersistentFlags().String(logTagFlagName, logTagFlagDefault, logTagDescription)

	return nil
}

func registerDefaultsLogasap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logasapDescription := `Enum: ["enabled","disabled"]. `

	var logasapFlagName string
	if cmdPrefix == "" {
		logasapFlagName = "logasap"
	} else {
		logasapFlagName = fmt.Sprintf("%v.logasap", cmdPrefix)
	}

	var logasapFlagDefault string

	_ = cmd.PersistentFlags().String(logasapFlagName, logasapFlagDefault, logasapDescription)

	if err := cmd.RegisterFlagCompletionFunc(logasapFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsMaxconn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxconnDescription := ``

	var maxconnFlagName string
	if cmdPrefix == "" {
		maxconnFlagName = "maxconn"
	} else {
		maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
	}

	var maxconnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxconnFlagName, maxconnFlagDefault, maxconnDescription)

	return nil
}

func registerDefaultsMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `Enum: ["tcp","http"]. `

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	if err := cmd.RegisterFlagCompletionFunc(modeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["tcp","http"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsMonitorURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive monitor_uri MonitorURI is not supported by go-swagger cli yet

	return nil
}

func registerDefaultsMysqlCheckParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var mysqlCheckParamsFlagName string
	if cmdPrefix == "" {
		mysqlCheckParamsFlagName = "mysql_check_params"
	} else {
		mysqlCheckParamsFlagName = fmt.Sprintf("%v.mysql_check_params", cmdPrefix)
	}

	if err := registerModelMysqlCheckParamsFlags(depth+1, mysqlCheckParamsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultsNolinger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nolingerDescription := `Enum: ["enabled","disabled"]. `

	var nolingerFlagName string
	if cmdPrefix == "" {
		nolingerFlagName = "nolinger"
	} else {
		nolingerFlagName = fmt.Sprintf("%v.nolinger", cmdPrefix)
	}

	var nolingerFlagDefault string

	_ = cmd.PersistentFlags().String(nolingerFlagName, nolingerFlagDefault, nolingerDescription)

	if err := cmd.RegisterFlagCompletionFunc(nolingerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsOriginalto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	originaltoDescription := `Enum: ["enabled","disabled"]. `

	var originaltoFlagName string
	if cmdPrefix == "" {
		originaltoFlagName = "originalto"
	} else {
		originaltoFlagName = fmt.Sprintf("%v.originalto", cmdPrefix)
	}

	var originaltoFlagDefault string

	_ = cmd.PersistentFlags().String(originaltoFlagName, originaltoFlagDefault, originaltoDescription)

	if err := cmd.RegisterFlagCompletionFunc(originaltoFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsPersist(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	persistDescription := `Enum: ["enabled","disabled"]. `

	var persistFlagName string
	if cmdPrefix == "" {
		persistFlagName = "persist"
	} else {
		persistFlagName = fmt.Sprintf("%v.persist", cmdPrefix)
	}

	var persistFlagDefault string

	_ = cmd.PersistentFlags().String(persistFlagName, persistFlagDefault, persistDescription)

	if err := cmd.RegisterFlagCompletionFunc(persistFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsPgsqlCheckParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var pgsqlCheckParamsFlagName string
	if cmdPrefix == "" {
		pgsqlCheckParamsFlagName = "pgsql_check_params"
	} else {
		pgsqlCheckParamsFlagName = fmt.Sprintf("%v.pgsql_check_params", cmdPrefix)
	}

	if err := registerModelPgsqlCheckParamsFlags(depth+1, pgsqlCheckParamsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultsPreferLastServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	preferLastServerDescription := `Enum: ["enabled","disabled"]. `

	var preferLastServerFlagName string
	if cmdPrefix == "" {
		preferLastServerFlagName = "prefer_last_server"
	} else {
		preferLastServerFlagName = fmt.Sprintf("%v.prefer_last_server", cmdPrefix)
	}

	var preferLastServerFlagDefault string

	_ = cmd.PersistentFlags().String(preferLastServerFlagName, preferLastServerFlagDefault, preferLastServerDescription)

	if err := cmd.RegisterFlagCompletionFunc(preferLastServerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsQueueTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	queueTimeoutDescription := ``

	var queueTimeoutFlagName string
	if cmdPrefix == "" {
		queueTimeoutFlagName = "queue_timeout"
	} else {
		queueTimeoutFlagName = fmt.Sprintf("%v.queue_timeout", cmdPrefix)
	}

	var queueTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(queueTimeoutFlagName, queueTimeoutFlagDefault, queueTimeoutDescription)

	return nil
}

func registerDefaultsRedispatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var redispatchFlagName string
	if cmdPrefix == "" {
		redispatchFlagName = "redispatch"
	} else {
		redispatchFlagName = fmt.Sprintf("%v.redispatch", cmdPrefix)
	}

	if err := registerModelRedispatchFlags(depth+1, redispatchFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultsRetries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	retriesDescription := ``

	var retriesFlagName string
	if cmdPrefix == "" {
		retriesFlagName = "retries"
	} else {
		retriesFlagName = fmt.Sprintf("%v.retries", cmdPrefix)
	}

	var retriesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(retriesFlagName, retriesFlagDefault, retriesDescription)

	return nil
}

func registerDefaultsServerFinTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverFinTimeoutDescription := ``

	var serverFinTimeoutFlagName string
	if cmdPrefix == "" {
		serverFinTimeoutFlagName = "server_fin_timeout"
	} else {
		serverFinTimeoutFlagName = fmt.Sprintf("%v.server_fin_timeout", cmdPrefix)
	}

	var serverFinTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(serverFinTimeoutFlagName, serverFinTimeoutFlagDefault, serverFinTimeoutDescription)

	return nil
}

func registerDefaultsServerTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverTimeoutDescription := ``

	var serverTimeoutFlagName string
	if cmdPrefix == "" {
		serverTimeoutFlagName = "server_timeout"
	} else {
		serverTimeoutFlagName = fmt.Sprintf("%v.server_timeout", cmdPrefix)
	}

	var serverTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(serverTimeoutFlagName, serverTimeoutFlagDefault, serverTimeoutDescription)

	return nil
}

func registerDefaultsSmtpchkParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var smtpchkParamsFlagName string
	if cmdPrefix == "" {
		smtpchkParamsFlagName = "smtpchk_params"
	} else {
		smtpchkParamsFlagName = fmt.Sprintf("%v.smtpchk_params", cmdPrefix)
	}

	if err := registerModelSmtpchkParamsFlags(depth+1, smtpchkParamsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultsSocketStats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	socketStatsDescription := `Enum: ["enabled","disabled"]. `

	var socketStatsFlagName string
	if cmdPrefix == "" {
		socketStatsFlagName = "socket_stats"
	} else {
		socketStatsFlagName = fmt.Sprintf("%v.socket_stats", cmdPrefix)
	}

	var socketStatsFlagDefault string

	_ = cmd.PersistentFlags().String(socketStatsFlagName, socketStatsFlagDefault, socketStatsDescription)

	if err := cmd.RegisterFlagCompletionFunc(socketStatsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsSpliceAuto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spliceAutoDescription := `Enum: ["enabled","disabled"]. `

	var spliceAutoFlagName string
	if cmdPrefix == "" {
		spliceAutoFlagName = "splice_auto"
	} else {
		spliceAutoFlagName = fmt.Sprintf("%v.splice_auto", cmdPrefix)
	}

	var spliceAutoFlagDefault string

	_ = cmd.PersistentFlags().String(spliceAutoFlagName, spliceAutoFlagDefault, spliceAutoDescription)

	if err := cmd.RegisterFlagCompletionFunc(spliceAutoFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsSpliceRequest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spliceRequestDescription := `Enum: ["enabled","disabled"]. `

	var spliceRequestFlagName string
	if cmdPrefix == "" {
		spliceRequestFlagName = "splice_request"
	} else {
		spliceRequestFlagName = fmt.Sprintf("%v.splice_request", cmdPrefix)
	}

	var spliceRequestFlagDefault string

	_ = cmd.PersistentFlags().String(spliceRequestFlagName, spliceRequestFlagDefault, spliceRequestDescription)

	if err := cmd.RegisterFlagCompletionFunc(spliceRequestFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsSpliceResponse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spliceResponseDescription := `Enum: ["enabled","disabled"]. `

	var spliceResponseFlagName string
	if cmdPrefix == "" {
		spliceResponseFlagName = "splice_response"
	} else {
		spliceResponseFlagName = fmt.Sprintf("%v.splice_response", cmdPrefix)
	}

	var spliceResponseFlagDefault string

	_ = cmd.PersistentFlags().String(spliceResponseFlagName, spliceResponseFlagDefault, spliceResponseDescription)

	if err := cmd.RegisterFlagCompletionFunc(spliceResponseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsSrvtcpka(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	srvtcpkaDescription := `Enum: ["enabled","disabled"]. `

	var srvtcpkaFlagName string
	if cmdPrefix == "" {
		srvtcpkaFlagName = "srvtcpka"
	} else {
		srvtcpkaFlagName = fmt.Sprintf("%v.srvtcpka", cmdPrefix)
	}

	var srvtcpkaFlagDefault string

	_ = cmd.PersistentFlags().String(srvtcpkaFlagName, srvtcpkaFlagDefault, srvtcpkaDescription)

	if err := cmd.RegisterFlagCompletionFunc(srvtcpkaFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsSrvtcpkaCnt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	srvtcpkaCntDescription := ``

	var srvtcpkaCntFlagName string
	if cmdPrefix == "" {
		srvtcpkaCntFlagName = "srvtcpka_cnt"
	} else {
		srvtcpkaCntFlagName = fmt.Sprintf("%v.srvtcpka_cnt", cmdPrefix)
	}

	var srvtcpkaCntFlagDefault int64

	_ = cmd.PersistentFlags().Int64(srvtcpkaCntFlagName, srvtcpkaCntFlagDefault, srvtcpkaCntDescription)

	return nil
}

func registerDefaultsSrvtcpkaIdle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	srvtcpkaIdleDescription := ``

	var srvtcpkaIdleFlagName string
	if cmdPrefix == "" {
		srvtcpkaIdleFlagName = "srvtcpka_idle"
	} else {
		srvtcpkaIdleFlagName = fmt.Sprintf("%v.srvtcpka_idle", cmdPrefix)
	}

	var srvtcpkaIdleFlagDefault int64

	_ = cmd.PersistentFlags().Int64(srvtcpkaIdleFlagName, srvtcpkaIdleFlagDefault, srvtcpkaIdleDescription)

	return nil
}

func registerDefaultsSrvtcpkaIntvl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	srvtcpkaIntvlDescription := ``

	var srvtcpkaIntvlFlagName string
	if cmdPrefix == "" {
		srvtcpkaIntvlFlagName = "srvtcpka_intvl"
	} else {
		srvtcpkaIntvlFlagName = fmt.Sprintf("%v.srvtcpka_intvl", cmdPrefix)
	}

	var srvtcpkaIntvlFlagDefault int64

	_ = cmd.PersistentFlags().Int64(srvtcpkaIntvlFlagName, srvtcpkaIntvlFlagDefault, srvtcpkaIntvlDescription)

	return nil
}

func registerDefaultsStatsOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var statsOptionsFlagName string
	if cmdPrefix == "" {
		statsOptionsFlagName = "stats_options"
	} else {
		statsOptionsFlagName = fmt.Sprintf("%v.stats_options", cmdPrefix)
	}

	if err := registerModelStatsOptionsFlags(depth+1, statsOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultsTCPSmartAccept(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpSmartAcceptDescription := `Enum: ["enabled","disabled"]. `

	var tcpSmartAcceptFlagName string
	if cmdPrefix == "" {
		tcpSmartAcceptFlagName = "tcp_smart_accept"
	} else {
		tcpSmartAcceptFlagName = fmt.Sprintf("%v.tcp_smart_accept", cmdPrefix)
	}

	var tcpSmartAcceptFlagDefault string

	_ = cmd.PersistentFlags().String(tcpSmartAcceptFlagName, tcpSmartAcceptFlagDefault, tcpSmartAcceptDescription)

	if err := cmd.RegisterFlagCompletionFunc(tcpSmartAcceptFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsTCPSmartConnect(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpSmartConnectDescription := `Enum: ["enabled","disabled"]. `

	var tcpSmartConnectFlagName string
	if cmdPrefix == "" {
		tcpSmartConnectFlagName = "tcp_smart_connect"
	} else {
		tcpSmartConnectFlagName = fmt.Sprintf("%v.tcp_smart_connect", cmdPrefix)
	}

	var tcpSmartConnectFlagDefault string

	_ = cmd.PersistentFlags().String(tcpSmartConnectFlagName, tcpSmartConnectFlagDefault, tcpSmartConnectDescription)

	if err := cmd.RegisterFlagCompletionFunc(tcpSmartConnectFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsTcpka(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpkaDescription := `Enum: ["enabled","disabled"]. `

	var tcpkaFlagName string
	if cmdPrefix == "" {
		tcpkaFlagName = "tcpka"
	} else {
		tcpkaFlagName = fmt.Sprintf("%v.tcpka", cmdPrefix)
	}

	var tcpkaFlagDefault string

	_ = cmd.PersistentFlags().String(tcpkaFlagName, tcpkaFlagDefault, tcpkaDescription)

	if err := cmd.RegisterFlagCompletionFunc(tcpkaFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsTcplog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcplogDescription := ``

	var tcplogFlagName string
	if cmdPrefix == "" {
		tcplogFlagName = "tcplog"
	} else {
		tcplogFlagName = fmt.Sprintf("%v.tcplog", cmdPrefix)
	}

	var tcplogFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tcplogFlagName, tcplogFlagDefault, tcplogDescription)

	return nil
}

func registerDefaultsTransparent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transparentDescription := `Enum: ["enabled","disabled"]. `

	var transparentFlagName string
	if cmdPrefix == "" {
		transparentFlagName = "transparent"
	} else {
		transparentFlagName = fmt.Sprintf("%v.transparent", cmdPrefix)
	}

	var transparentFlagDefault string

	_ = cmd.PersistentFlags().String(transparentFlagName, transparentFlagDefault, transparentDescription)

	if err := cmd.RegisterFlagCompletionFunc(transparentFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDefaultsTunnelTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tunnelTimeoutDescription := ``

	var tunnelTimeoutFlagName string
	if cmdPrefix == "" {
		tunnelTimeoutFlagName = "tunnel_timeout"
	} else {
		tunnelTimeoutFlagName = fmt.Sprintf("%v.tunnel_timeout", cmdPrefix)
	}

	var tunnelTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tunnelTimeoutFlagName, tunnelTimeoutFlagDefault, tunnelTimeoutDescription)

	return nil
}

func registerDefaultsUniqueIDFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uniqueIdFormatDescription := ``

	var uniqueIdFormatFlagName string
	if cmdPrefix == "" {
		uniqueIdFormatFlagName = "unique_id_format"
	} else {
		uniqueIdFormatFlagName = fmt.Sprintf("%v.unique_id_format", cmdPrefix)
	}

	var uniqueIdFormatFlagDefault string

	_ = cmd.PersistentFlags().String(uniqueIdFormatFlagName, uniqueIdFormatFlagDefault, uniqueIdFormatDescription)

	return nil
}

func registerDefaultsUniqueIDHeader(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uniqueIdHeaderDescription := ``

	var uniqueIdHeaderFlagName string
	if cmdPrefix == "" {
		uniqueIdHeaderFlagName = "unique_id_header"
	} else {
		uniqueIdHeaderFlagName = fmt.Sprintf("%v.unique_id_header", cmdPrefix)
	}

	var uniqueIdHeaderFlagDefault string

	_ = cmd.PersistentFlags().String(uniqueIdHeaderFlagName, uniqueIdHeaderFlagDefault, uniqueIdHeaderDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDefaultsFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, errorFilesAdded := retrieveDefaultsErrorFilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorFilesAdded

	err, abortoncloseAdded := retrieveDefaultsAbortoncloseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || abortoncloseAdded

	err, acceptInvalidHttpRequestAdded := retrieveDefaultsAcceptInvalidHTTPRequestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || acceptInvalidHttpRequestAdded

	err, acceptInvalidHttpResponseAdded := retrieveDefaultsAcceptInvalidHTTPResponseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || acceptInvalidHttpResponseAdded

	err, advCheckAdded := retrieveDefaultsAdvCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || advCheckAdded

	err, allbackupsAdded := retrieveDefaultsAllbackupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allbackupsAdded

	err, backlogAdded := retrieveDefaultsBacklogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || backlogAdded

	err, balanceAdded := retrieveDefaultsBalanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || balanceAdded

	err, bindProcessAdded := retrieveDefaultsBindProcessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bindProcessAdded

	err, checkTimeoutAdded := retrieveDefaultsCheckTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkTimeoutAdded

	err, checkcacheAdded := retrieveDefaultsCheckcacheFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkcacheAdded

	err, clflogAdded := retrieveDefaultsClflogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clflogAdded

	err, clientFinTimeoutAdded := retrieveDefaultsClientFinTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientFinTimeoutAdded

	err, clientTimeoutAdded := retrieveDefaultsClientTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientTimeoutAdded

	err, clitcpkaAdded := retrieveDefaultsClitcpkaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clitcpkaAdded

	err, clitcpkaCntAdded := retrieveDefaultsClitcpkaCntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clitcpkaCntAdded

	err, clitcpkaIdleAdded := retrieveDefaultsClitcpkaIdleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clitcpkaIdleAdded

	err, clitcpkaIntvlAdded := retrieveDefaultsClitcpkaIntvlFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clitcpkaIntvlAdded

	err, compressionAdded := retrieveDefaultsCompressionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compressionAdded

	err, connectTimeoutAdded := retrieveDefaultsConnectTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectTimeoutAdded

	err, contstatsAdded := retrieveDefaultsContstatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contstatsAdded

	err, cookieAdded := retrieveDefaultsCookieFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cookieAdded

	err, defaultBackendAdded := retrieveDefaultsDefaultBackendFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultBackendAdded

	err, defaultServerAdded := retrieveDefaultsDefaultServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultServerAdded

	err, disableH2UpgradeAdded := retrieveDefaultsDisableH2UpgradeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || disableH2UpgradeAdded

	err, dontlogNormalAdded := retrieveDefaultsDontlogNormalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dontlogNormalAdded

	err, dontlognullAdded := retrieveDefaultsDontlognullFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dontlognullAdded

	err, dynamicCookieKeyAdded := retrieveDefaultsDynamicCookieKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dynamicCookieKeyAdded

	err, externalCheckAdded := retrieveDefaultsExternalCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || externalCheckAdded

	err, externalCheckCommandAdded := retrieveDefaultsExternalCheckCommandFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || externalCheckCommandAdded

	err, externalCheckPathAdded := retrieveDefaultsExternalCheckPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || externalCheckPathAdded

	err, forwardforAdded := retrieveDefaultsForwardforFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forwardforAdded

	err, h1CaseAdjustBogusClientAdded := retrieveDefaultsH1CaseAdjustBogusClientFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h1CaseAdjustBogusClientAdded

	err, h1CaseAdjustBogusServerAdded := retrieveDefaultsH1CaseAdjustBogusServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h1CaseAdjustBogusServerAdded

	err, httpBufferRequestAdded := retrieveDefaultsHTTPBufferRequestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpBufferRequestAdded

	err, httpCheckAdded := retrieveDefaultsHTTPCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpCheckAdded

	err, httpUseHtxAdded := retrieveDefaultsHTTPUseHtxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpUseHtxAdded

	err, httpConnectionModeAdded := retrieveDefaultsHTTPConnectionModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpConnectionModeAdded

	err, httpIgnoreProbesAdded := retrieveDefaultsHTTPIgnoreProbesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpIgnoreProbesAdded

	err, httpKeepAliveTimeoutAdded := retrieveDefaultsHTTPKeepAliveTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpKeepAliveTimeoutAdded

	err, httpNoDelayAdded := retrieveDefaultsHTTPNoDelayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpNoDelayAdded

	err, httpPretendKeepaliveAdded := retrieveDefaultsHTTPPretendKeepaliveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpPretendKeepaliveAdded

	err, httpRequestTimeoutAdded := retrieveDefaultsHTTPRequestTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpRequestTimeoutAdded

	err, httpReuseAdded := retrieveDefaultsHTTPReuseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpReuseAdded

	err, httpUseProxyHeaderAdded := retrieveDefaultsHTTPUseProxyHeaderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpUseProxyHeaderAdded

	err, httpchkParamsAdded := retrieveDefaultsHttpchkParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpchkParamsAdded

	err, httplogAdded := retrieveDefaultsHttplogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httplogAdded

	err, httpslogAdded := retrieveDefaultsHttpslogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpslogAdded

	err, idleCloseOnResponseAdded := retrieveDefaultsIdleCloseOnResponseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idleCloseOnResponseAdded

	err, independentStreamsAdded := retrieveDefaultsIndependentStreamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || independentStreamsAdded

	err, loadServerStateFromFileAdded := retrieveDefaultsLoadServerStateFromFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || loadServerStateFromFileAdded

	err, logFormatAdded := retrieveDefaultsLogFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logFormatAdded

	err, logFormatSdAdded := retrieveDefaultsLogFormatSdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logFormatSdAdded

	err, logHealthChecksAdded := retrieveDefaultsLogHealthChecksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logHealthChecksAdded

	err, logSeparateErrorsAdded := retrieveDefaultsLogSeparateErrorsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logSeparateErrorsAdded

	err, logTagAdded := retrieveDefaultsLogTagFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logTagAdded

	err, logasapAdded := retrieveDefaultsLogasapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logasapAdded

	err, maxconnAdded := retrieveDefaultsMaxconnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxconnAdded

	err, modeAdded := retrieveDefaultsModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, monitorUriAdded := retrieveDefaultsMonitorURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || monitorUriAdded

	err, mysqlCheckParamsAdded := retrieveDefaultsMysqlCheckParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mysqlCheckParamsAdded

	err, nolingerAdded := retrieveDefaultsNolingerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nolingerAdded

	err, originaltoAdded := retrieveDefaultsOriginaltoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || originaltoAdded

	err, persistAdded := retrieveDefaultsPersistFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || persistAdded

	err, pgsqlCheckParamsAdded := retrieveDefaultsPgsqlCheckParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pgsqlCheckParamsAdded

	err, preferLastServerAdded := retrieveDefaultsPreferLastServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || preferLastServerAdded

	err, queueTimeoutAdded := retrieveDefaultsQueueTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || queueTimeoutAdded

	err, redispatchAdded := retrieveDefaultsRedispatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redispatchAdded

	err, retriesAdded := retrieveDefaultsRetriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || retriesAdded

	err, serverFinTimeoutAdded := retrieveDefaultsServerFinTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverFinTimeoutAdded

	err, serverTimeoutAdded := retrieveDefaultsServerTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverTimeoutAdded

	err, smtpchkParamsAdded := retrieveDefaultsSmtpchkParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || smtpchkParamsAdded

	err, socketStatsAdded := retrieveDefaultsSocketStatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || socketStatsAdded

	err, spliceAutoAdded := retrieveDefaultsSpliceAutoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spliceAutoAdded

	err, spliceRequestAdded := retrieveDefaultsSpliceRequestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spliceRequestAdded

	err, spliceResponseAdded := retrieveDefaultsSpliceResponseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spliceResponseAdded

	err, srvtcpkaAdded := retrieveDefaultsSrvtcpkaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || srvtcpkaAdded

	err, srvtcpkaCntAdded := retrieveDefaultsSrvtcpkaCntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || srvtcpkaCntAdded

	err, srvtcpkaIdleAdded := retrieveDefaultsSrvtcpkaIdleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || srvtcpkaIdleAdded

	err, srvtcpkaIntvlAdded := retrieveDefaultsSrvtcpkaIntvlFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || srvtcpkaIntvlAdded

	err, statsOptionsAdded := retrieveDefaultsStatsOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statsOptionsAdded

	err, tcpSmartAcceptAdded := retrieveDefaultsTCPSmartAcceptFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpSmartAcceptAdded

	err, tcpSmartConnectAdded := retrieveDefaultsTCPSmartConnectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpSmartConnectAdded

	err, tcpkaAdded := retrieveDefaultsTcpkaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpkaAdded

	err, tcplogAdded := retrieveDefaultsTcplogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcplogAdded

	err, transparentAdded := retrieveDefaultsTransparentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transparentAdded

	err, tunnelTimeoutAdded := retrieveDefaultsTunnelTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tunnelTimeoutAdded

	err, uniqueIdFormatAdded := retrieveDefaultsUniqueIDFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uniqueIdFormatAdded

	err, uniqueIdHeaderAdded := retrieveDefaultsUniqueIDHeaderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uniqueIdHeaderAdded

	return nil, retAdded
}

func retrieveDefaultsErrorFilesFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorFilesFlagName := fmt.Sprintf("%v.ErrorFiles", cmdPrefix)
	if cmd.Flags().Changed(errorFilesFlagName) {
		// warning: ErrorFiles array type []*Errorfile is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDefaultsAbortoncloseFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	abortoncloseFlagName := fmt.Sprintf("%v.abortonclose", cmdPrefix)
	if cmd.Flags().Changed(abortoncloseFlagName) {

		var abortoncloseFlagName string
		if cmdPrefix == "" {
			abortoncloseFlagName = "abortonclose"
		} else {
			abortoncloseFlagName = fmt.Sprintf("%v.abortonclose", cmdPrefix)
		}

		abortoncloseFlagValue, err := cmd.Flags().GetString(abortoncloseFlagName)
		if err != nil {
			return err, false
		}
		m.Abortonclose = abortoncloseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsAcceptInvalidHTTPRequestFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	acceptInvalidHttpRequestFlagName := fmt.Sprintf("%v.accept_invalid_http_request", cmdPrefix)
	if cmd.Flags().Changed(acceptInvalidHttpRequestFlagName) {

		var acceptInvalidHttpRequestFlagName string
		if cmdPrefix == "" {
			acceptInvalidHttpRequestFlagName = "accept_invalid_http_request"
		} else {
			acceptInvalidHttpRequestFlagName = fmt.Sprintf("%v.accept_invalid_http_request", cmdPrefix)
		}

		acceptInvalidHttpRequestFlagValue, err := cmd.Flags().GetString(acceptInvalidHttpRequestFlagName)
		if err != nil {
			return err, false
		}
		m.AcceptInvalidHTTPRequest = acceptInvalidHttpRequestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsAcceptInvalidHTTPResponseFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	acceptInvalidHttpResponseFlagName := fmt.Sprintf("%v.accept_invalid_http_response", cmdPrefix)
	if cmd.Flags().Changed(acceptInvalidHttpResponseFlagName) {

		var acceptInvalidHttpResponseFlagName string
		if cmdPrefix == "" {
			acceptInvalidHttpResponseFlagName = "accept_invalid_http_response"
		} else {
			acceptInvalidHttpResponseFlagName = fmt.Sprintf("%v.accept_invalid_http_response", cmdPrefix)
		}

		acceptInvalidHttpResponseFlagValue, err := cmd.Flags().GetString(acceptInvalidHttpResponseFlagName)
		if err != nil {
			return err, false
		}
		m.AcceptInvalidHTTPResponse = acceptInvalidHttpResponseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsAdvCheckFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	advCheckFlagName := fmt.Sprintf("%v.adv_check", cmdPrefix)
	if cmd.Flags().Changed(advCheckFlagName) {

		var advCheckFlagName string
		if cmdPrefix == "" {
			advCheckFlagName = "adv_check"
		} else {
			advCheckFlagName = fmt.Sprintf("%v.adv_check", cmdPrefix)
		}

		advCheckFlagValue, err := cmd.Flags().GetString(advCheckFlagName)
		if err != nil {
			return err, false
		}
		m.AdvCheck = advCheckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsAllbackupsFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allbackupsFlagName := fmt.Sprintf("%v.allbackups", cmdPrefix)
	if cmd.Flags().Changed(allbackupsFlagName) {

		var allbackupsFlagName string
		if cmdPrefix == "" {
			allbackupsFlagName = "allbackups"
		} else {
			allbackupsFlagName = fmt.Sprintf("%v.allbackups", cmdPrefix)
		}

		allbackupsFlagValue, err := cmd.Flags().GetString(allbackupsFlagName)
		if err != nil {
			return err, false
		}
		m.Allbackups = allbackupsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsBacklogFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	backlogFlagName := fmt.Sprintf("%v.backlog", cmdPrefix)
	if cmd.Flags().Changed(backlogFlagName) {

		var backlogFlagName string
		if cmdPrefix == "" {
			backlogFlagName = "backlog"
		} else {
			backlogFlagName = fmt.Sprintf("%v.backlog", cmdPrefix)
		}

		backlogFlagValue, err := cmd.Flags().GetInt64(backlogFlagName)
		if err != nil {
			return err, false
		}
		m.Backlog = &backlogFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsBalanceFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	balanceFlagName := fmt.Sprintf("%v.balance", cmdPrefix)
	if cmd.Flags().Changed(balanceFlagName) {
		// info: complex object balance Balance is retrieved outside this Changed() block
	}
	balanceFlagValue := m.Balance
	if swag.IsZero(balanceFlagValue) {
		balanceFlagValue = &models.Balance{}
	}

	err, balanceAdded := retrieveModelBalanceFlags(depth+1, balanceFlagValue, balanceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || balanceAdded
	if balanceAdded {
		m.Balance = balanceFlagValue
	}

	return nil, retAdded
}

func retrieveDefaultsBindProcessFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bindProcessFlagName := fmt.Sprintf("%v.bind_process", cmdPrefix)
	if cmd.Flags().Changed(bindProcessFlagName) {

		var bindProcessFlagName string
		if cmdPrefix == "" {
			bindProcessFlagName = "bind_process"
		} else {
			bindProcessFlagName = fmt.Sprintf("%v.bind_process", cmdPrefix)
		}

		bindProcessFlagValue, err := cmd.Flags().GetString(bindProcessFlagName)
		if err != nil {
			return err, false
		}
		m.BindProcess = bindProcessFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsCheckTimeoutFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkTimeoutFlagName := fmt.Sprintf("%v.check_timeout", cmdPrefix)
	if cmd.Flags().Changed(checkTimeoutFlagName) {

		var checkTimeoutFlagName string
		if cmdPrefix == "" {
			checkTimeoutFlagName = "check_timeout"
		} else {
			checkTimeoutFlagName = fmt.Sprintf("%v.check_timeout", cmdPrefix)
		}

		checkTimeoutFlagValue, err := cmd.Flags().GetInt64(checkTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.CheckTimeout = &checkTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsCheckcacheFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkcacheFlagName := fmt.Sprintf("%v.checkcache", cmdPrefix)
	if cmd.Flags().Changed(checkcacheFlagName) {

		var checkcacheFlagName string
		if cmdPrefix == "" {
			checkcacheFlagName = "checkcache"
		} else {
			checkcacheFlagName = fmt.Sprintf("%v.checkcache", cmdPrefix)
		}

		checkcacheFlagValue, err := cmd.Flags().GetString(checkcacheFlagName)
		if err != nil {
			return err, false
		}
		m.Checkcache = checkcacheFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsClflogFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clflogFlagName := fmt.Sprintf("%v.clflog", cmdPrefix)
	if cmd.Flags().Changed(clflogFlagName) {

		var clflogFlagName string
		if cmdPrefix == "" {
			clflogFlagName = "clflog"
		} else {
			clflogFlagName = fmt.Sprintf("%v.clflog", cmdPrefix)
		}

		clflogFlagValue, err := cmd.Flags().GetBool(clflogFlagName)
		if err != nil {
			return err, false
		}
		m.Clflog = clflogFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsClientFinTimeoutFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientFinTimeoutFlagName := fmt.Sprintf("%v.client_fin_timeout", cmdPrefix)
	if cmd.Flags().Changed(clientFinTimeoutFlagName) {

		var clientFinTimeoutFlagName string
		if cmdPrefix == "" {
			clientFinTimeoutFlagName = "client_fin_timeout"
		} else {
			clientFinTimeoutFlagName = fmt.Sprintf("%v.client_fin_timeout", cmdPrefix)
		}

		clientFinTimeoutFlagValue, err := cmd.Flags().GetInt64(clientFinTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.ClientFinTimeout = &clientFinTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsClientTimeoutFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientTimeoutFlagName := fmt.Sprintf("%v.client_timeout", cmdPrefix)
	if cmd.Flags().Changed(clientTimeoutFlagName) {

		var clientTimeoutFlagName string
		if cmdPrefix == "" {
			clientTimeoutFlagName = "client_timeout"
		} else {
			clientTimeoutFlagName = fmt.Sprintf("%v.client_timeout", cmdPrefix)
		}

		clientTimeoutFlagValue, err := cmd.Flags().GetInt64(clientTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.ClientTimeout = &clientTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsClitcpkaFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clitcpkaFlagName := fmt.Sprintf("%v.clitcpka", cmdPrefix)
	if cmd.Flags().Changed(clitcpkaFlagName) {

		var clitcpkaFlagName string
		if cmdPrefix == "" {
			clitcpkaFlagName = "clitcpka"
		} else {
			clitcpkaFlagName = fmt.Sprintf("%v.clitcpka", cmdPrefix)
		}

		clitcpkaFlagValue, err := cmd.Flags().GetString(clitcpkaFlagName)
		if err != nil {
			return err, false
		}
		m.Clitcpka = clitcpkaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsClitcpkaCntFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clitcpkaCntFlagName := fmt.Sprintf("%v.clitcpka_cnt", cmdPrefix)
	if cmd.Flags().Changed(clitcpkaCntFlagName) {

		var clitcpkaCntFlagName string
		if cmdPrefix == "" {
			clitcpkaCntFlagName = "clitcpka_cnt"
		} else {
			clitcpkaCntFlagName = fmt.Sprintf("%v.clitcpka_cnt", cmdPrefix)
		}

		clitcpkaCntFlagValue, err := cmd.Flags().GetInt64(clitcpkaCntFlagName)
		if err != nil {
			return err, false
		}
		m.ClitcpkaCnt = &clitcpkaCntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsClitcpkaIdleFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clitcpkaIdleFlagName := fmt.Sprintf("%v.clitcpka_idle", cmdPrefix)
	if cmd.Flags().Changed(clitcpkaIdleFlagName) {

		var clitcpkaIdleFlagName string
		if cmdPrefix == "" {
			clitcpkaIdleFlagName = "clitcpka_idle"
		} else {
			clitcpkaIdleFlagName = fmt.Sprintf("%v.clitcpka_idle", cmdPrefix)
		}

		clitcpkaIdleFlagValue, err := cmd.Flags().GetInt64(clitcpkaIdleFlagName)
		if err != nil {
			return err, false
		}
		m.ClitcpkaIdle = &clitcpkaIdleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsClitcpkaIntvlFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clitcpkaIntvlFlagName := fmt.Sprintf("%v.clitcpka_intvl", cmdPrefix)
	if cmd.Flags().Changed(clitcpkaIntvlFlagName) {

		var clitcpkaIntvlFlagName string
		if cmdPrefix == "" {
			clitcpkaIntvlFlagName = "clitcpka_intvl"
		} else {
			clitcpkaIntvlFlagName = fmt.Sprintf("%v.clitcpka_intvl", cmdPrefix)
		}

		clitcpkaIntvlFlagValue, err := cmd.Flags().GetInt64(clitcpkaIntvlFlagName)
		if err != nil {
			return err, false
		}
		m.ClitcpkaIntvl = &clitcpkaIntvlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsCompressionFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	compressionFlagName := fmt.Sprintf("%v.compression", cmdPrefix)
	if cmd.Flags().Changed(compressionFlagName) {
		// info: complex object compression Compression is retrieved outside this Changed() block
	}
	compressionFlagValue := m.Compression
	if swag.IsZero(compressionFlagValue) {
		compressionFlagValue = &models.Compression{}
	}

	err, compressionAdded := retrieveModelCompressionFlags(depth+1, compressionFlagValue, compressionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compressionAdded
	if compressionAdded {
		m.Compression = compressionFlagValue
	}

	return nil, retAdded
}

func retrieveDefaultsConnectTimeoutFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectTimeoutFlagName := fmt.Sprintf("%v.connect_timeout", cmdPrefix)
	if cmd.Flags().Changed(connectTimeoutFlagName) {

		var connectTimeoutFlagName string
		if cmdPrefix == "" {
			connectTimeoutFlagName = "connect_timeout"
		} else {
			connectTimeoutFlagName = fmt.Sprintf("%v.connect_timeout", cmdPrefix)
		}

		connectTimeoutFlagValue, err := cmd.Flags().GetInt64(connectTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.ConnectTimeout = &connectTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsContstatsFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	contstatsFlagName := fmt.Sprintf("%v.contstats", cmdPrefix)
	if cmd.Flags().Changed(contstatsFlagName) {

		var contstatsFlagName string
		if cmdPrefix == "" {
			contstatsFlagName = "contstats"
		} else {
			contstatsFlagName = fmt.Sprintf("%v.contstats", cmdPrefix)
		}

		contstatsFlagValue, err := cmd.Flags().GetString(contstatsFlagName)
		if err != nil {
			return err, false
		}
		m.Contstats = contstatsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsCookieFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cookieFlagName := fmt.Sprintf("%v.cookie", cmdPrefix)
	if cmd.Flags().Changed(cookieFlagName) {
		// info: complex object cookie Cookie is retrieved outside this Changed() block
	}
	cookieFlagValue := m.Cookie
	if swag.IsZero(cookieFlagValue) {
		cookieFlagValue = &models.Cookie{}
	}

	err, cookieAdded := retrieveModelCookieFlags(depth+1, cookieFlagValue, cookieFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cookieAdded
	if cookieAdded {
		m.Cookie = cookieFlagValue
	}

	return nil, retAdded
}

func retrieveDefaultsDefaultBackendFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultBackendFlagName := fmt.Sprintf("%v.default_backend", cmdPrefix)
	if cmd.Flags().Changed(defaultBackendFlagName) {

		var defaultBackendFlagName string
		if cmdPrefix == "" {
			defaultBackendFlagName = "default_backend"
		} else {
			defaultBackendFlagName = fmt.Sprintf("%v.default_backend", cmdPrefix)
		}

		defaultBackendFlagValue, err := cmd.Flags().GetString(defaultBackendFlagName)
		if err != nil {
			return err, false
		}
		m.DefaultBackend = defaultBackendFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsDefaultServerFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultServerFlagName := fmt.Sprintf("%v.default_server", cmdPrefix)
	if cmd.Flags().Changed(defaultServerFlagName) {
		// info: complex object default_server DefaultServer is retrieved outside this Changed() block
	}
	defaultServerFlagValue := m.DefaultServer
	if swag.IsZero(defaultServerFlagValue) {
		defaultServerFlagValue = &models.DefaultServer{}
	}

	err, defaultServerAdded := retrieveModelDefaultServerFlags(depth+1, defaultServerFlagValue, defaultServerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultServerAdded
	if defaultServerAdded {
		m.DefaultServer = defaultServerFlagValue
	}

	return nil, retAdded
}

func retrieveDefaultsDisableH2UpgradeFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	disableH2UpgradeFlagName := fmt.Sprintf("%v.disable_h2_upgrade", cmdPrefix)
	if cmd.Flags().Changed(disableH2UpgradeFlagName) {

		var disableH2UpgradeFlagName string
		if cmdPrefix == "" {
			disableH2UpgradeFlagName = "disable_h2_upgrade"
		} else {
			disableH2UpgradeFlagName = fmt.Sprintf("%v.disable_h2_upgrade", cmdPrefix)
		}

		disableH2UpgradeFlagValue, err := cmd.Flags().GetString(disableH2UpgradeFlagName)
		if err != nil {
			return err, false
		}
		m.DisableH2Upgrade = disableH2UpgradeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsDontlogNormalFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dontlogNormalFlagName := fmt.Sprintf("%v.dontlog_normal", cmdPrefix)
	if cmd.Flags().Changed(dontlogNormalFlagName) {

		var dontlogNormalFlagName string
		if cmdPrefix == "" {
			dontlogNormalFlagName = "dontlog_normal"
		} else {
			dontlogNormalFlagName = fmt.Sprintf("%v.dontlog_normal", cmdPrefix)
		}

		dontlogNormalFlagValue, err := cmd.Flags().GetString(dontlogNormalFlagName)
		if err != nil {
			return err, false
		}
		m.DontlogNormal = dontlogNormalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsDontlognullFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dontlognullFlagName := fmt.Sprintf("%v.dontlognull", cmdPrefix)
	if cmd.Flags().Changed(dontlognullFlagName) {

		var dontlognullFlagName string
		if cmdPrefix == "" {
			dontlognullFlagName = "dontlognull"
		} else {
			dontlognullFlagName = fmt.Sprintf("%v.dontlognull", cmdPrefix)
		}

		dontlognullFlagValue, err := cmd.Flags().GetString(dontlognullFlagName)
		if err != nil {
			return err, false
		}
		m.Dontlognull = dontlognullFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsDynamicCookieKeyFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dynamicCookieKeyFlagName := fmt.Sprintf("%v.dynamic_cookie_key", cmdPrefix)
	if cmd.Flags().Changed(dynamicCookieKeyFlagName) {

		var dynamicCookieKeyFlagName string
		if cmdPrefix == "" {
			dynamicCookieKeyFlagName = "dynamic_cookie_key"
		} else {
			dynamicCookieKeyFlagName = fmt.Sprintf("%v.dynamic_cookie_key", cmdPrefix)
		}

		dynamicCookieKeyFlagValue, err := cmd.Flags().GetString(dynamicCookieKeyFlagName)
		if err != nil {
			return err, false
		}
		m.DynamicCookieKey = dynamicCookieKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsExternalCheckFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	externalCheckFlagName := fmt.Sprintf("%v.external_check", cmdPrefix)
	if cmd.Flags().Changed(externalCheckFlagName) {

		var externalCheckFlagName string
		if cmdPrefix == "" {
			externalCheckFlagName = "external_check"
		} else {
			externalCheckFlagName = fmt.Sprintf("%v.external_check", cmdPrefix)
		}

		externalCheckFlagValue, err := cmd.Flags().GetString(externalCheckFlagName)
		if err != nil {
			return err, false
		}
		m.ExternalCheck = externalCheckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsExternalCheckCommandFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	externalCheckCommandFlagName := fmt.Sprintf("%v.external_check_command", cmdPrefix)
	if cmd.Flags().Changed(externalCheckCommandFlagName) {

		var externalCheckCommandFlagName string
		if cmdPrefix == "" {
			externalCheckCommandFlagName = "external_check_command"
		} else {
			externalCheckCommandFlagName = fmt.Sprintf("%v.external_check_command", cmdPrefix)
		}

		externalCheckCommandFlagValue, err := cmd.Flags().GetString(externalCheckCommandFlagName)
		if err != nil {
			return err, false
		}
		m.ExternalCheckCommand = externalCheckCommandFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsExternalCheckPathFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	externalCheckPathFlagName := fmt.Sprintf("%v.external_check_path", cmdPrefix)
	if cmd.Flags().Changed(externalCheckPathFlagName) {

		var externalCheckPathFlagName string
		if cmdPrefix == "" {
			externalCheckPathFlagName = "external_check_path"
		} else {
			externalCheckPathFlagName = fmt.Sprintf("%v.external_check_path", cmdPrefix)
		}

		externalCheckPathFlagValue, err := cmd.Flags().GetString(externalCheckPathFlagName)
		if err != nil {
			return err, false
		}
		m.ExternalCheckPath = externalCheckPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsForwardforFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forwardforFlagName := fmt.Sprintf("%v.forwardfor", cmdPrefix)
	if cmd.Flags().Changed(forwardforFlagName) {
		// info: complex object forwardfor Forwardfor is retrieved outside this Changed() block
	}
	forwardforFlagValue := m.Forwardfor
	if swag.IsZero(forwardforFlagValue) {
		forwardforFlagValue = &models.Forwardfor{}
	}

	err, forwardforAdded := retrieveModelForwardforFlags(depth+1, forwardforFlagValue, forwardforFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forwardforAdded
	if forwardforAdded {
		m.Forwardfor = forwardforFlagValue
	}

	return nil, retAdded
}

func retrieveDefaultsH1CaseAdjustBogusClientFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h1CaseAdjustBogusClientFlagName := fmt.Sprintf("%v.h1_case_adjust_bogus_client", cmdPrefix)
	if cmd.Flags().Changed(h1CaseAdjustBogusClientFlagName) {

		var h1CaseAdjustBogusClientFlagName string
		if cmdPrefix == "" {
			h1CaseAdjustBogusClientFlagName = "h1_case_adjust_bogus_client"
		} else {
			h1CaseAdjustBogusClientFlagName = fmt.Sprintf("%v.h1_case_adjust_bogus_client", cmdPrefix)
		}

		h1CaseAdjustBogusClientFlagValue, err := cmd.Flags().GetString(h1CaseAdjustBogusClientFlagName)
		if err != nil {
			return err, false
		}
		m.H1CaseAdjustBogusClient = h1CaseAdjustBogusClientFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsH1CaseAdjustBogusServerFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h1CaseAdjustBogusServerFlagName := fmt.Sprintf("%v.h1_case_adjust_bogus_server", cmdPrefix)
	if cmd.Flags().Changed(h1CaseAdjustBogusServerFlagName) {

		var h1CaseAdjustBogusServerFlagName string
		if cmdPrefix == "" {
			h1CaseAdjustBogusServerFlagName = "h1_case_adjust_bogus_server"
		} else {
			h1CaseAdjustBogusServerFlagName = fmt.Sprintf("%v.h1_case_adjust_bogus_server", cmdPrefix)
		}

		h1CaseAdjustBogusServerFlagValue, err := cmd.Flags().GetString(h1CaseAdjustBogusServerFlagName)
		if err != nil {
			return err, false
		}
		m.H1CaseAdjustBogusServer = h1CaseAdjustBogusServerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsHTTPBufferRequestFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpBufferRequestFlagName := fmt.Sprintf("%v.http-buffer-request", cmdPrefix)
	if cmd.Flags().Changed(httpBufferRequestFlagName) {

		var httpBufferRequestFlagName string
		if cmdPrefix == "" {
			httpBufferRequestFlagName = "http-buffer-request"
		} else {
			httpBufferRequestFlagName = fmt.Sprintf("%v.http-buffer-request", cmdPrefix)
		}

		httpBufferRequestFlagValue, err := cmd.Flags().GetString(httpBufferRequestFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPBufferRequest = httpBufferRequestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsHTTPCheckFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpCheckFlagName := fmt.Sprintf("%v.http-check", cmdPrefix)
	if cmd.Flags().Changed(httpCheckFlagName) {
		// info: complex object http-check HTTPCheck is retrieved outside this Changed() block
	}
	httpCheckFlagValue := m.HTTPCheck
	if swag.IsZero(httpCheckFlagValue) {
		httpCheckFlagValue = &models.HTTPCheck{}
	}

	err, httpCheckAdded := retrieveModelHTTPCheckFlags(depth+1, httpCheckFlagValue, httpCheckFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpCheckAdded
	if httpCheckAdded {
		m.HTTPCheck = httpCheckFlagValue
	}

	return nil, retAdded
}

func retrieveDefaultsHTTPUseHtxFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpUseHtxFlagName := fmt.Sprintf("%v.http-use-htx", cmdPrefix)
	if cmd.Flags().Changed(httpUseHtxFlagName) {

		var httpUseHtxFlagName string
		if cmdPrefix == "" {
			httpUseHtxFlagName = "http-use-htx"
		} else {
			httpUseHtxFlagName = fmt.Sprintf("%v.http-use-htx", cmdPrefix)
		}

		httpUseHtxFlagValue, err := cmd.Flags().GetString(httpUseHtxFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPUseHtx = httpUseHtxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsHTTPConnectionModeFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpConnectionModeFlagName := fmt.Sprintf("%v.http_connection_mode", cmdPrefix)
	if cmd.Flags().Changed(httpConnectionModeFlagName) {

		var httpConnectionModeFlagName string
		if cmdPrefix == "" {
			httpConnectionModeFlagName = "http_connection_mode"
		} else {
			httpConnectionModeFlagName = fmt.Sprintf("%v.http_connection_mode", cmdPrefix)
		}

		httpConnectionModeFlagValue, err := cmd.Flags().GetString(httpConnectionModeFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPConnectionMode = httpConnectionModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsHTTPIgnoreProbesFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpIgnoreProbesFlagName := fmt.Sprintf("%v.http_ignore_probes", cmdPrefix)
	if cmd.Flags().Changed(httpIgnoreProbesFlagName) {

		var httpIgnoreProbesFlagName string
		if cmdPrefix == "" {
			httpIgnoreProbesFlagName = "http_ignore_probes"
		} else {
			httpIgnoreProbesFlagName = fmt.Sprintf("%v.http_ignore_probes", cmdPrefix)
		}

		httpIgnoreProbesFlagValue, err := cmd.Flags().GetString(httpIgnoreProbesFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPIgnoreProbes = httpIgnoreProbesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsHTTPKeepAliveTimeoutFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpKeepAliveTimeoutFlagName := fmt.Sprintf("%v.http_keep_alive_timeout", cmdPrefix)
	if cmd.Flags().Changed(httpKeepAliveTimeoutFlagName) {

		var httpKeepAliveTimeoutFlagName string
		if cmdPrefix == "" {
			httpKeepAliveTimeoutFlagName = "http_keep_alive_timeout"
		} else {
			httpKeepAliveTimeoutFlagName = fmt.Sprintf("%v.http_keep_alive_timeout", cmdPrefix)
		}

		httpKeepAliveTimeoutFlagValue, err := cmd.Flags().GetInt64(httpKeepAliveTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPKeepAliveTimeout = &httpKeepAliveTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsHTTPNoDelayFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpNoDelayFlagName := fmt.Sprintf("%v.http_no_delay", cmdPrefix)
	if cmd.Flags().Changed(httpNoDelayFlagName) {

		var httpNoDelayFlagName string
		if cmdPrefix == "" {
			httpNoDelayFlagName = "http_no_delay"
		} else {
			httpNoDelayFlagName = fmt.Sprintf("%v.http_no_delay", cmdPrefix)
		}

		httpNoDelayFlagValue, err := cmd.Flags().GetString(httpNoDelayFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPNoDelay = httpNoDelayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsHTTPPretendKeepaliveFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpPretendKeepaliveFlagName := fmt.Sprintf("%v.http_pretend_keepalive", cmdPrefix)
	if cmd.Flags().Changed(httpPretendKeepaliveFlagName) {

		var httpPretendKeepaliveFlagName string
		if cmdPrefix == "" {
			httpPretendKeepaliveFlagName = "http_pretend_keepalive"
		} else {
			httpPretendKeepaliveFlagName = fmt.Sprintf("%v.http_pretend_keepalive", cmdPrefix)
		}

		httpPretendKeepaliveFlagValue, err := cmd.Flags().GetString(httpPretendKeepaliveFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPPretendKeepalive = httpPretendKeepaliveFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsHTTPRequestTimeoutFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpRequestTimeoutFlagName := fmt.Sprintf("%v.http_request_timeout", cmdPrefix)
	if cmd.Flags().Changed(httpRequestTimeoutFlagName) {

		var httpRequestTimeoutFlagName string
		if cmdPrefix == "" {
			httpRequestTimeoutFlagName = "http_request_timeout"
		} else {
			httpRequestTimeoutFlagName = fmt.Sprintf("%v.http_request_timeout", cmdPrefix)
		}

		httpRequestTimeoutFlagValue, err := cmd.Flags().GetInt64(httpRequestTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPRequestTimeout = &httpRequestTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsHTTPReuseFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpReuseFlagName := fmt.Sprintf("%v.http_reuse", cmdPrefix)
	if cmd.Flags().Changed(httpReuseFlagName) {

		var httpReuseFlagName string
		if cmdPrefix == "" {
			httpReuseFlagName = "http_reuse"
		} else {
			httpReuseFlagName = fmt.Sprintf("%v.http_reuse", cmdPrefix)
		}

		httpReuseFlagValue, err := cmd.Flags().GetString(httpReuseFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPReuse = httpReuseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsHTTPUseProxyHeaderFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpUseProxyHeaderFlagName := fmt.Sprintf("%v.http_use_proxy_header", cmdPrefix)
	if cmd.Flags().Changed(httpUseProxyHeaderFlagName) {

		var httpUseProxyHeaderFlagName string
		if cmdPrefix == "" {
			httpUseProxyHeaderFlagName = "http_use_proxy_header"
		} else {
			httpUseProxyHeaderFlagName = fmt.Sprintf("%v.http_use_proxy_header", cmdPrefix)
		}

		httpUseProxyHeaderFlagValue, err := cmd.Flags().GetString(httpUseProxyHeaderFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPUseProxyHeader = httpUseProxyHeaderFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsHttpchkParamsFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpchkParamsFlagName := fmt.Sprintf("%v.httpchk_params", cmdPrefix)
	if cmd.Flags().Changed(httpchkParamsFlagName) {
		// info: complex object httpchk_params HttpchkParams is retrieved outside this Changed() block
	}
	httpchkParamsFlagValue := m.HttpchkParams
	if swag.IsZero(httpchkParamsFlagValue) {
		httpchkParamsFlagValue = &models.HttpchkParams{}
	}

	err, httpchkParamsAdded := retrieveModelHttpchkParamsFlags(depth+1, httpchkParamsFlagValue, httpchkParamsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpchkParamsAdded
	if httpchkParamsAdded {
		m.HttpchkParams = httpchkParamsFlagValue
	}

	return nil, retAdded
}

func retrieveDefaultsHttplogFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httplogFlagName := fmt.Sprintf("%v.httplog", cmdPrefix)
	if cmd.Flags().Changed(httplogFlagName) {

		var httplogFlagName string
		if cmdPrefix == "" {
			httplogFlagName = "httplog"
		} else {
			httplogFlagName = fmt.Sprintf("%v.httplog", cmdPrefix)
		}

		httplogFlagValue, err := cmd.Flags().GetBool(httplogFlagName)
		if err != nil {
			return err, false
		}
		m.Httplog = httplogFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsHttpslogFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpslogFlagName := fmt.Sprintf("%v.httpslog", cmdPrefix)
	if cmd.Flags().Changed(httpslogFlagName) {

		var httpslogFlagName string
		if cmdPrefix == "" {
			httpslogFlagName = "httpslog"
		} else {
			httpslogFlagName = fmt.Sprintf("%v.httpslog", cmdPrefix)
		}

		httpslogFlagValue, err := cmd.Flags().GetString(httpslogFlagName)
		if err != nil {
			return err, false
		}
		m.Httpslog = httpslogFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsIdleCloseOnResponseFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idleCloseOnResponseFlagName := fmt.Sprintf("%v.idle_close_on_response", cmdPrefix)
	if cmd.Flags().Changed(idleCloseOnResponseFlagName) {

		var idleCloseOnResponseFlagName string
		if cmdPrefix == "" {
			idleCloseOnResponseFlagName = "idle_close_on_response"
		} else {
			idleCloseOnResponseFlagName = fmt.Sprintf("%v.idle_close_on_response", cmdPrefix)
		}

		idleCloseOnResponseFlagValue, err := cmd.Flags().GetString(idleCloseOnResponseFlagName)
		if err != nil {
			return err, false
		}
		m.IdleCloseOnResponse = idleCloseOnResponseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsIndependentStreamsFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	independentStreamsFlagName := fmt.Sprintf("%v.independent_streams", cmdPrefix)
	if cmd.Flags().Changed(independentStreamsFlagName) {

		var independentStreamsFlagName string
		if cmdPrefix == "" {
			independentStreamsFlagName = "independent_streams"
		} else {
			independentStreamsFlagName = fmt.Sprintf("%v.independent_streams", cmdPrefix)
		}

		independentStreamsFlagValue, err := cmd.Flags().GetString(independentStreamsFlagName)
		if err != nil {
			return err, false
		}
		m.IndependentStreams = independentStreamsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsLoadServerStateFromFileFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	loadServerStateFromFileFlagName := fmt.Sprintf("%v.load_server_state_from_file", cmdPrefix)
	if cmd.Flags().Changed(loadServerStateFromFileFlagName) {

		var loadServerStateFromFileFlagName string
		if cmdPrefix == "" {
			loadServerStateFromFileFlagName = "load_server_state_from_file"
		} else {
			loadServerStateFromFileFlagName = fmt.Sprintf("%v.load_server_state_from_file", cmdPrefix)
		}

		loadServerStateFromFileFlagValue, err := cmd.Flags().GetString(loadServerStateFromFileFlagName)
		if err != nil {
			return err, false
		}
		m.LoadServerStateFromFile = loadServerStateFromFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsLogFormatFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logFormatFlagName := fmt.Sprintf("%v.log_format", cmdPrefix)
	if cmd.Flags().Changed(logFormatFlagName) {

		var logFormatFlagName string
		if cmdPrefix == "" {
			logFormatFlagName = "log_format"
		} else {
			logFormatFlagName = fmt.Sprintf("%v.log_format", cmdPrefix)
		}

		logFormatFlagValue, err := cmd.Flags().GetString(logFormatFlagName)
		if err != nil {
			return err, false
		}
		m.LogFormat = logFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsLogFormatSdFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logFormatSdFlagName := fmt.Sprintf("%v.log_format_sd", cmdPrefix)
	if cmd.Flags().Changed(logFormatSdFlagName) {

		var logFormatSdFlagName string
		if cmdPrefix == "" {
			logFormatSdFlagName = "log_format_sd"
		} else {
			logFormatSdFlagName = fmt.Sprintf("%v.log_format_sd", cmdPrefix)
		}

		logFormatSdFlagValue, err := cmd.Flags().GetString(logFormatSdFlagName)
		if err != nil {
			return err, false
		}
		m.LogFormatSd = logFormatSdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsLogHealthChecksFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logHealthChecksFlagName := fmt.Sprintf("%v.log_health_checks", cmdPrefix)
	if cmd.Flags().Changed(logHealthChecksFlagName) {

		var logHealthChecksFlagName string
		if cmdPrefix == "" {
			logHealthChecksFlagName = "log_health_checks"
		} else {
			logHealthChecksFlagName = fmt.Sprintf("%v.log_health_checks", cmdPrefix)
		}

		logHealthChecksFlagValue, err := cmd.Flags().GetString(logHealthChecksFlagName)
		if err != nil {
			return err, false
		}
		m.LogHealthChecks = logHealthChecksFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsLogSeparateErrorsFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logSeparateErrorsFlagName := fmt.Sprintf("%v.log_separate_errors", cmdPrefix)
	if cmd.Flags().Changed(logSeparateErrorsFlagName) {

		var logSeparateErrorsFlagName string
		if cmdPrefix == "" {
			logSeparateErrorsFlagName = "log_separate_errors"
		} else {
			logSeparateErrorsFlagName = fmt.Sprintf("%v.log_separate_errors", cmdPrefix)
		}

		logSeparateErrorsFlagValue, err := cmd.Flags().GetString(logSeparateErrorsFlagName)
		if err != nil {
			return err, false
		}
		m.LogSeparateErrors = logSeparateErrorsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsLogTagFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logTagFlagName := fmt.Sprintf("%v.log_tag", cmdPrefix)
	if cmd.Flags().Changed(logTagFlagName) {

		var logTagFlagName string
		if cmdPrefix == "" {
			logTagFlagName = "log_tag"
		} else {
			logTagFlagName = fmt.Sprintf("%v.log_tag", cmdPrefix)
		}

		logTagFlagValue, err := cmd.Flags().GetString(logTagFlagName)
		if err != nil {
			return err, false
		}
		m.LogTag = logTagFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsLogasapFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logasapFlagName := fmt.Sprintf("%v.logasap", cmdPrefix)
	if cmd.Flags().Changed(logasapFlagName) {

		var logasapFlagName string
		if cmdPrefix == "" {
			logasapFlagName = "logasap"
		} else {
			logasapFlagName = fmt.Sprintf("%v.logasap", cmdPrefix)
		}

		logasapFlagValue, err := cmd.Flags().GetString(logasapFlagName)
		if err != nil {
			return err, false
		}
		m.Logasap = logasapFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsMaxconnFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxconnFlagName := fmt.Sprintf("%v.maxconn", cmdPrefix)
	if cmd.Flags().Changed(maxconnFlagName) {

		var maxconnFlagName string
		if cmdPrefix == "" {
			maxconnFlagName = "maxconn"
		} else {
			maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
		}

		maxconnFlagValue, err := cmd.Flags().GetInt64(maxconnFlagName)
		if err != nil {
			return err, false
		}
		m.Maxconn = &maxconnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsModeFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsMonitorURIFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	monitorUriFlagName := fmt.Sprintf("%v.monitor_uri", cmdPrefix)
	if cmd.Flags().Changed(monitorUriFlagName) {

		// warning: primitive monitor_uri MonitorURI is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsMysqlCheckParamsFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mysqlCheckParamsFlagName := fmt.Sprintf("%v.mysql_check_params", cmdPrefix)
	if cmd.Flags().Changed(mysqlCheckParamsFlagName) {
		// info: complex object mysql_check_params MysqlCheckParams is retrieved outside this Changed() block
	}
	mysqlCheckParamsFlagValue := m.MysqlCheckParams
	if swag.IsZero(mysqlCheckParamsFlagValue) {
		mysqlCheckParamsFlagValue = &models.MysqlCheckParams{}
	}

	err, mysqlCheckParamsAdded := retrieveModelMysqlCheckParamsFlags(depth+1, mysqlCheckParamsFlagValue, mysqlCheckParamsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mysqlCheckParamsAdded
	if mysqlCheckParamsAdded {
		m.MysqlCheckParams = mysqlCheckParamsFlagValue
	}

	return nil, retAdded
}

func retrieveDefaultsNolingerFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nolingerFlagName := fmt.Sprintf("%v.nolinger", cmdPrefix)
	if cmd.Flags().Changed(nolingerFlagName) {

		var nolingerFlagName string
		if cmdPrefix == "" {
			nolingerFlagName = "nolinger"
		} else {
			nolingerFlagName = fmt.Sprintf("%v.nolinger", cmdPrefix)
		}

		nolingerFlagValue, err := cmd.Flags().GetString(nolingerFlagName)
		if err != nil {
			return err, false
		}
		m.Nolinger = nolingerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsOriginaltoFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	originaltoFlagName := fmt.Sprintf("%v.originalto", cmdPrefix)
	if cmd.Flags().Changed(originaltoFlagName) {

		var originaltoFlagName string
		if cmdPrefix == "" {
			originaltoFlagName = "originalto"
		} else {
			originaltoFlagName = fmt.Sprintf("%v.originalto", cmdPrefix)
		}

		originaltoFlagValue, err := cmd.Flags().GetString(originaltoFlagName)
		if err != nil {
			return err, false
		}
		m.Originalto = originaltoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsPersistFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	persistFlagName := fmt.Sprintf("%v.persist", cmdPrefix)
	if cmd.Flags().Changed(persistFlagName) {

		var persistFlagName string
		if cmdPrefix == "" {
			persistFlagName = "persist"
		} else {
			persistFlagName = fmt.Sprintf("%v.persist", cmdPrefix)
		}

		persistFlagValue, err := cmd.Flags().GetString(persistFlagName)
		if err != nil {
			return err, false
		}
		m.Persist = persistFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsPgsqlCheckParamsFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pgsqlCheckParamsFlagName := fmt.Sprintf("%v.pgsql_check_params", cmdPrefix)
	if cmd.Flags().Changed(pgsqlCheckParamsFlagName) {
		// info: complex object pgsql_check_params PgsqlCheckParams is retrieved outside this Changed() block
	}
	pgsqlCheckParamsFlagValue := m.PgsqlCheckParams
	if swag.IsZero(pgsqlCheckParamsFlagValue) {
		pgsqlCheckParamsFlagValue = &models.PgsqlCheckParams{}
	}

	err, pgsqlCheckParamsAdded := retrieveModelPgsqlCheckParamsFlags(depth+1, pgsqlCheckParamsFlagValue, pgsqlCheckParamsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pgsqlCheckParamsAdded
	if pgsqlCheckParamsAdded {
		m.PgsqlCheckParams = pgsqlCheckParamsFlagValue
	}

	return nil, retAdded
}

func retrieveDefaultsPreferLastServerFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	preferLastServerFlagName := fmt.Sprintf("%v.prefer_last_server", cmdPrefix)
	if cmd.Flags().Changed(preferLastServerFlagName) {

		var preferLastServerFlagName string
		if cmdPrefix == "" {
			preferLastServerFlagName = "prefer_last_server"
		} else {
			preferLastServerFlagName = fmt.Sprintf("%v.prefer_last_server", cmdPrefix)
		}

		preferLastServerFlagValue, err := cmd.Flags().GetString(preferLastServerFlagName)
		if err != nil {
			return err, false
		}
		m.PreferLastServer = preferLastServerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsQueueTimeoutFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	queueTimeoutFlagName := fmt.Sprintf("%v.queue_timeout", cmdPrefix)
	if cmd.Flags().Changed(queueTimeoutFlagName) {

		var queueTimeoutFlagName string
		if cmdPrefix == "" {
			queueTimeoutFlagName = "queue_timeout"
		} else {
			queueTimeoutFlagName = fmt.Sprintf("%v.queue_timeout", cmdPrefix)
		}

		queueTimeoutFlagValue, err := cmd.Flags().GetInt64(queueTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.QueueTimeout = &queueTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsRedispatchFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redispatchFlagName := fmt.Sprintf("%v.redispatch", cmdPrefix)
	if cmd.Flags().Changed(redispatchFlagName) {
		// info: complex object redispatch Redispatch is retrieved outside this Changed() block
	}
	redispatchFlagValue := m.Redispatch
	if swag.IsZero(redispatchFlagValue) {
		redispatchFlagValue = &models.Redispatch{}
	}

	err, redispatchAdded := retrieveModelRedispatchFlags(depth+1, redispatchFlagValue, redispatchFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redispatchAdded
	if redispatchAdded {
		m.Redispatch = redispatchFlagValue
	}

	return nil, retAdded
}

func retrieveDefaultsRetriesFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	retriesFlagName := fmt.Sprintf("%v.retries", cmdPrefix)
	if cmd.Flags().Changed(retriesFlagName) {

		var retriesFlagName string
		if cmdPrefix == "" {
			retriesFlagName = "retries"
		} else {
			retriesFlagName = fmt.Sprintf("%v.retries", cmdPrefix)
		}

		retriesFlagValue, err := cmd.Flags().GetInt64(retriesFlagName)
		if err != nil {
			return err, false
		}
		m.Retries = &retriesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsServerFinTimeoutFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverFinTimeoutFlagName := fmt.Sprintf("%v.server_fin_timeout", cmdPrefix)
	if cmd.Flags().Changed(serverFinTimeoutFlagName) {

		var serverFinTimeoutFlagName string
		if cmdPrefix == "" {
			serverFinTimeoutFlagName = "server_fin_timeout"
		} else {
			serverFinTimeoutFlagName = fmt.Sprintf("%v.server_fin_timeout", cmdPrefix)
		}

		serverFinTimeoutFlagValue, err := cmd.Flags().GetInt64(serverFinTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.ServerFinTimeout = &serverFinTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsServerTimeoutFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverTimeoutFlagName := fmt.Sprintf("%v.server_timeout", cmdPrefix)
	if cmd.Flags().Changed(serverTimeoutFlagName) {

		var serverTimeoutFlagName string
		if cmdPrefix == "" {
			serverTimeoutFlagName = "server_timeout"
		} else {
			serverTimeoutFlagName = fmt.Sprintf("%v.server_timeout", cmdPrefix)
		}

		serverTimeoutFlagValue, err := cmd.Flags().GetInt64(serverTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.ServerTimeout = &serverTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsSmtpchkParamsFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	smtpchkParamsFlagName := fmt.Sprintf("%v.smtpchk_params", cmdPrefix)
	if cmd.Flags().Changed(smtpchkParamsFlagName) {
		// info: complex object smtpchk_params SmtpchkParams is retrieved outside this Changed() block
	}
	smtpchkParamsFlagValue := m.SmtpchkParams
	if swag.IsZero(smtpchkParamsFlagValue) {
		smtpchkParamsFlagValue = &models.SmtpchkParams{}
	}

	err, smtpchkParamsAdded := retrieveModelSmtpchkParamsFlags(depth+1, smtpchkParamsFlagValue, smtpchkParamsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || smtpchkParamsAdded
	if smtpchkParamsAdded {
		m.SmtpchkParams = smtpchkParamsFlagValue
	}

	return nil, retAdded
}

func retrieveDefaultsSocketStatsFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	socketStatsFlagName := fmt.Sprintf("%v.socket_stats", cmdPrefix)
	if cmd.Flags().Changed(socketStatsFlagName) {

		var socketStatsFlagName string
		if cmdPrefix == "" {
			socketStatsFlagName = "socket_stats"
		} else {
			socketStatsFlagName = fmt.Sprintf("%v.socket_stats", cmdPrefix)
		}

		socketStatsFlagValue, err := cmd.Flags().GetString(socketStatsFlagName)
		if err != nil {
			return err, false
		}
		m.SocketStats = socketStatsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsSpliceAutoFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spliceAutoFlagName := fmt.Sprintf("%v.splice_auto", cmdPrefix)
	if cmd.Flags().Changed(spliceAutoFlagName) {

		var spliceAutoFlagName string
		if cmdPrefix == "" {
			spliceAutoFlagName = "splice_auto"
		} else {
			spliceAutoFlagName = fmt.Sprintf("%v.splice_auto", cmdPrefix)
		}

		spliceAutoFlagValue, err := cmd.Flags().GetString(spliceAutoFlagName)
		if err != nil {
			return err, false
		}
		m.SpliceAuto = spliceAutoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsSpliceRequestFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spliceRequestFlagName := fmt.Sprintf("%v.splice_request", cmdPrefix)
	if cmd.Flags().Changed(spliceRequestFlagName) {

		var spliceRequestFlagName string
		if cmdPrefix == "" {
			spliceRequestFlagName = "splice_request"
		} else {
			spliceRequestFlagName = fmt.Sprintf("%v.splice_request", cmdPrefix)
		}

		spliceRequestFlagValue, err := cmd.Flags().GetString(spliceRequestFlagName)
		if err != nil {
			return err, false
		}
		m.SpliceRequest = spliceRequestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsSpliceResponseFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spliceResponseFlagName := fmt.Sprintf("%v.splice_response", cmdPrefix)
	if cmd.Flags().Changed(spliceResponseFlagName) {

		var spliceResponseFlagName string
		if cmdPrefix == "" {
			spliceResponseFlagName = "splice_response"
		} else {
			spliceResponseFlagName = fmt.Sprintf("%v.splice_response", cmdPrefix)
		}

		spliceResponseFlagValue, err := cmd.Flags().GetString(spliceResponseFlagName)
		if err != nil {
			return err, false
		}
		m.SpliceResponse = spliceResponseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsSrvtcpkaFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	srvtcpkaFlagName := fmt.Sprintf("%v.srvtcpka", cmdPrefix)
	if cmd.Flags().Changed(srvtcpkaFlagName) {

		var srvtcpkaFlagName string
		if cmdPrefix == "" {
			srvtcpkaFlagName = "srvtcpka"
		} else {
			srvtcpkaFlagName = fmt.Sprintf("%v.srvtcpka", cmdPrefix)
		}

		srvtcpkaFlagValue, err := cmd.Flags().GetString(srvtcpkaFlagName)
		if err != nil {
			return err, false
		}
		m.Srvtcpka = srvtcpkaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsSrvtcpkaCntFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	srvtcpkaCntFlagName := fmt.Sprintf("%v.srvtcpka_cnt", cmdPrefix)
	if cmd.Flags().Changed(srvtcpkaCntFlagName) {

		var srvtcpkaCntFlagName string
		if cmdPrefix == "" {
			srvtcpkaCntFlagName = "srvtcpka_cnt"
		} else {
			srvtcpkaCntFlagName = fmt.Sprintf("%v.srvtcpka_cnt", cmdPrefix)
		}

		srvtcpkaCntFlagValue, err := cmd.Flags().GetInt64(srvtcpkaCntFlagName)
		if err != nil {
			return err, false
		}
		m.SrvtcpkaCnt = &srvtcpkaCntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsSrvtcpkaIdleFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	srvtcpkaIdleFlagName := fmt.Sprintf("%v.srvtcpka_idle", cmdPrefix)
	if cmd.Flags().Changed(srvtcpkaIdleFlagName) {

		var srvtcpkaIdleFlagName string
		if cmdPrefix == "" {
			srvtcpkaIdleFlagName = "srvtcpka_idle"
		} else {
			srvtcpkaIdleFlagName = fmt.Sprintf("%v.srvtcpka_idle", cmdPrefix)
		}

		srvtcpkaIdleFlagValue, err := cmd.Flags().GetInt64(srvtcpkaIdleFlagName)
		if err != nil {
			return err, false
		}
		m.SrvtcpkaIdle = &srvtcpkaIdleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsSrvtcpkaIntvlFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	srvtcpkaIntvlFlagName := fmt.Sprintf("%v.srvtcpka_intvl", cmdPrefix)
	if cmd.Flags().Changed(srvtcpkaIntvlFlagName) {

		var srvtcpkaIntvlFlagName string
		if cmdPrefix == "" {
			srvtcpkaIntvlFlagName = "srvtcpka_intvl"
		} else {
			srvtcpkaIntvlFlagName = fmt.Sprintf("%v.srvtcpka_intvl", cmdPrefix)
		}

		srvtcpkaIntvlFlagValue, err := cmd.Flags().GetInt64(srvtcpkaIntvlFlagName)
		if err != nil {
			return err, false
		}
		m.SrvtcpkaIntvl = &srvtcpkaIntvlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsStatsOptionsFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statsOptionsFlagName := fmt.Sprintf("%v.stats_options", cmdPrefix)
	if cmd.Flags().Changed(statsOptionsFlagName) {
		// info: complex object stats_options StatsOptions is retrieved outside this Changed() block
	}
	statsOptionsFlagValue := m.StatsOptions
	if swag.IsZero(statsOptionsFlagValue) {
		statsOptionsFlagValue = &models.StatsOptions{}
	}

	err, statsOptionsAdded := retrieveModelStatsOptionsFlags(depth+1, statsOptionsFlagValue, statsOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statsOptionsAdded
	if statsOptionsAdded {
		m.StatsOptions = statsOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveDefaultsTCPSmartAcceptFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpSmartAcceptFlagName := fmt.Sprintf("%v.tcp_smart_accept", cmdPrefix)
	if cmd.Flags().Changed(tcpSmartAcceptFlagName) {

		var tcpSmartAcceptFlagName string
		if cmdPrefix == "" {
			tcpSmartAcceptFlagName = "tcp_smart_accept"
		} else {
			tcpSmartAcceptFlagName = fmt.Sprintf("%v.tcp_smart_accept", cmdPrefix)
		}

		tcpSmartAcceptFlagValue, err := cmd.Flags().GetString(tcpSmartAcceptFlagName)
		if err != nil {
			return err, false
		}
		m.TCPSmartAccept = tcpSmartAcceptFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsTCPSmartConnectFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpSmartConnectFlagName := fmt.Sprintf("%v.tcp_smart_connect", cmdPrefix)
	if cmd.Flags().Changed(tcpSmartConnectFlagName) {

		var tcpSmartConnectFlagName string
		if cmdPrefix == "" {
			tcpSmartConnectFlagName = "tcp_smart_connect"
		} else {
			tcpSmartConnectFlagName = fmt.Sprintf("%v.tcp_smart_connect", cmdPrefix)
		}

		tcpSmartConnectFlagValue, err := cmd.Flags().GetString(tcpSmartConnectFlagName)
		if err != nil {
			return err, false
		}
		m.TCPSmartConnect = tcpSmartConnectFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsTcpkaFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpkaFlagName := fmt.Sprintf("%v.tcpka", cmdPrefix)
	if cmd.Flags().Changed(tcpkaFlagName) {

		var tcpkaFlagName string
		if cmdPrefix == "" {
			tcpkaFlagName = "tcpka"
		} else {
			tcpkaFlagName = fmt.Sprintf("%v.tcpka", cmdPrefix)
		}

		tcpkaFlagValue, err := cmd.Flags().GetString(tcpkaFlagName)
		if err != nil {
			return err, false
		}
		m.Tcpka = tcpkaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsTcplogFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcplogFlagName := fmt.Sprintf("%v.tcplog", cmdPrefix)
	if cmd.Flags().Changed(tcplogFlagName) {

		var tcplogFlagName string
		if cmdPrefix == "" {
			tcplogFlagName = "tcplog"
		} else {
			tcplogFlagName = fmt.Sprintf("%v.tcplog", cmdPrefix)
		}

		tcplogFlagValue, err := cmd.Flags().GetBool(tcplogFlagName)
		if err != nil {
			return err, false
		}
		m.Tcplog = tcplogFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsTransparentFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transparentFlagName := fmt.Sprintf("%v.transparent", cmdPrefix)
	if cmd.Flags().Changed(transparentFlagName) {

		var transparentFlagName string
		if cmdPrefix == "" {
			transparentFlagName = "transparent"
		} else {
			transparentFlagName = fmt.Sprintf("%v.transparent", cmdPrefix)
		}

		transparentFlagValue, err := cmd.Flags().GetString(transparentFlagName)
		if err != nil {
			return err, false
		}
		m.Transparent = transparentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsTunnelTimeoutFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tunnelTimeoutFlagName := fmt.Sprintf("%v.tunnel_timeout", cmdPrefix)
	if cmd.Flags().Changed(tunnelTimeoutFlagName) {

		var tunnelTimeoutFlagName string
		if cmdPrefix == "" {
			tunnelTimeoutFlagName = "tunnel_timeout"
		} else {
			tunnelTimeoutFlagName = fmt.Sprintf("%v.tunnel_timeout", cmdPrefix)
		}

		tunnelTimeoutFlagValue, err := cmd.Flags().GetInt64(tunnelTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.TunnelTimeout = &tunnelTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsUniqueIDFormatFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uniqueIdFormatFlagName := fmt.Sprintf("%v.unique_id_format", cmdPrefix)
	if cmd.Flags().Changed(uniqueIdFormatFlagName) {

		var uniqueIdFormatFlagName string
		if cmdPrefix == "" {
			uniqueIdFormatFlagName = "unique_id_format"
		} else {
			uniqueIdFormatFlagName = fmt.Sprintf("%v.unique_id_format", cmdPrefix)
		}

		uniqueIdFormatFlagValue, err := cmd.Flags().GetString(uniqueIdFormatFlagName)
		if err != nil {
			return err, false
		}
		m.UniqueIDFormat = uniqueIdFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultsUniqueIDHeaderFlags(depth int, m *models.Defaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uniqueIdHeaderFlagName := fmt.Sprintf("%v.unique_id_header", cmdPrefix)
	if cmd.Flags().Changed(uniqueIdHeaderFlagName) {

		var uniqueIdHeaderFlagName string
		if cmdPrefix == "" {
			uniqueIdHeaderFlagName = "unique_id_header"
		} else {
			uniqueIdHeaderFlagName = fmt.Sprintf("%v.unique_id_header", cmdPrefix)
		}

		uniqueIdHeaderFlagValue, err := cmd.Flags().GetString(uniqueIdHeaderFlagName)
		if err != nil {
			return err, false
		}
		m.UniqueIDHeader = uniqueIdHeaderFlagValue

		retAdded = true
	}

	return nil, retAdded
}
