// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdc/models"
	"github.com/spf13/cobra"
)

// Schema cli for Consul

// register flags to command
func registerModelConsulFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConsulAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulRetryTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulServerSlotsBase(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulServerSlotsGrowthIncrement(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulServerSlotsGrowthType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulServiceBlacklist(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulServiceWhitelist(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulServiceAllowlist(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulServiceDenylist(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsulToken(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConsulAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addressDescription := `Required. `

	var addressFlagName string
	if cmdPrefix == "" {
		addressFlagName = "address"
	} else {
		addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
	}

	var addressFlagDefault string

	_ = cmd.PersistentFlags().String(addressFlagName, addressFlagDefault, addressDescription)

	return nil
}

func registerConsulDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerConsulEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Required. `

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerConsulID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Auto generated ID.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerConsulName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerConsulNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := ``

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func registerConsulPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := `Required. `

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault int64

	_ = cmd.PersistentFlags().Int64(portFlagName, portFlagDefault, portDescription)

	return nil
}

func registerConsulRetryTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	retryTimeoutDescription := `Required. Duration in seconds in-between data pulling requests to the consul server`

	var retryTimeoutFlagName string
	if cmdPrefix == "" {
		retryTimeoutFlagName = "retry_timeout"
	} else {
		retryTimeoutFlagName = fmt.Sprintf("%v.retry_timeout", cmdPrefix)
	}

	var retryTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(retryTimeoutFlagName, retryTimeoutFlagDefault, retryTimeoutDescription)

	return nil
}

func registerConsulServerSlotsBase(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverSlotsBaseDescription := ``

	var serverSlotsBaseFlagName string
	if cmdPrefix == "" {
		serverSlotsBaseFlagName = "server_slots_base"
	} else {
		serverSlotsBaseFlagName = fmt.Sprintf("%v.server_slots_base", cmdPrefix)
	}

	var serverSlotsBaseFlagDefault int64 = 10

	_ = cmd.PersistentFlags().Int64(serverSlotsBaseFlagName, serverSlotsBaseFlagDefault, serverSlotsBaseDescription)

	return nil
}

func registerConsulServerSlotsGrowthIncrement(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverSlotsGrowthIncrementDescription := ``

	var serverSlotsGrowthIncrementFlagName string
	if cmdPrefix == "" {
		serverSlotsGrowthIncrementFlagName = "server_slots_growth_increment"
	} else {
		serverSlotsGrowthIncrementFlagName = fmt.Sprintf("%v.server_slots_growth_increment", cmdPrefix)
	}

	var serverSlotsGrowthIncrementFlagDefault int64

	_ = cmd.PersistentFlags().Int64(serverSlotsGrowthIncrementFlagName, serverSlotsGrowthIncrementFlagDefault, serverSlotsGrowthIncrementDescription)

	return nil
}

func registerConsulServerSlotsGrowthType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverSlotsGrowthTypeDescription := `Enum: ["linear","exponential"]. `

	var serverSlotsGrowthTypeFlagName string
	if cmdPrefix == "" {
		serverSlotsGrowthTypeFlagName = "server_slots_growth_type"
	} else {
		serverSlotsGrowthTypeFlagName = fmt.Sprintf("%v.server_slots_growth_type", cmdPrefix)
	}

	var serverSlotsGrowthTypeFlagDefault string = "exponential"

	_ = cmd.PersistentFlags().String(serverSlotsGrowthTypeFlagName, serverSlotsGrowthTypeFlagDefault, serverSlotsGrowthTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(serverSlotsGrowthTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["linear","exponential"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerConsulServiceBlacklist(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: service-blacklist []string array type is not supported by go-swagger cli yet

	return nil
}

func registerConsulServiceWhitelist(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: service-whitelist []string array type is not supported by go-swagger cli yet

	return nil
}

func registerConsulServiceAllowlist(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: service_allowlist []string array type is not supported by go-swagger cli yet

	return nil
}

func registerConsulServiceDenylist(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: service_denylist []string array type is not supported by go-swagger cli yet

	return nil
}

func registerConsulToken(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tokenDescription := ``

	var tokenFlagName string
	if cmdPrefix == "" {
		tokenFlagName = "token"
	} else {
		tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
	}

	var tokenFlagDefault string

	_ = cmd.PersistentFlags().String(tokenFlagName, tokenFlagDefault, tokenDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConsulFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressAdded := retrieveConsulAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressAdded

	err, descriptionAdded := retrieveConsulDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, enabledAdded := retrieveConsulEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, idAdded := retrieveConsulIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveConsulNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, namespaceAdded := retrieveConsulNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	err, portAdded := retrieveConsulPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, retryTimeoutAdded := retrieveConsulRetryTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || retryTimeoutAdded

	err, serverSlotsBaseAdded := retrieveConsulServerSlotsBaseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverSlotsBaseAdded

	err, serverSlotsGrowthIncrementAdded := retrieveConsulServerSlotsGrowthIncrementFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverSlotsGrowthIncrementAdded

	err, serverSlotsGrowthTypeAdded := retrieveConsulServerSlotsGrowthTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverSlotsGrowthTypeAdded

	err, serviceBlacklistAdded := retrieveConsulServiceBlacklistFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceBlacklistAdded

	err, serviceWhitelistAdded := retrieveConsulServiceWhitelistFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceWhitelistAdded

	err, serviceAllowlistAdded := retrieveConsulServiceAllowlistFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceAllowlistAdded

	err, serviceDenylistAdded := retrieveConsulServiceDenylistFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceDenylistAdded

	err, tokenAdded := retrieveConsulTokenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenAdded

	return nil, retAdded
}

func retrieveConsulAddressFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressFlagName := fmt.Sprintf("%v.address", cmdPrefix)
	if cmd.Flags().Changed(addressFlagName) {

		var addressFlagName string
		if cmdPrefix == "" {
			addressFlagName = "address"
		} else {
			addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
		}

		addressFlagValue, err := cmd.Flags().GetString(addressFlagName)
		if err != nil {
			return err, false
		}
		m.Address = &addressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsulDescriptionFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsulEnabledFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsulIDFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsulNameFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsulNamespaceFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsulPortFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetInt64(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = &portFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsulRetryTimeoutFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	retryTimeoutFlagName := fmt.Sprintf("%v.retry_timeout", cmdPrefix)
	if cmd.Flags().Changed(retryTimeoutFlagName) {

		var retryTimeoutFlagName string
		if cmdPrefix == "" {
			retryTimeoutFlagName = "retry_timeout"
		} else {
			retryTimeoutFlagName = fmt.Sprintf("%v.retry_timeout", cmdPrefix)
		}

		retryTimeoutFlagValue, err := cmd.Flags().GetInt64(retryTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.RetryTimeout = &retryTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsulServerSlotsBaseFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverSlotsBaseFlagName := fmt.Sprintf("%v.server_slots_base", cmdPrefix)
	if cmd.Flags().Changed(serverSlotsBaseFlagName) {

		var serverSlotsBaseFlagName string
		if cmdPrefix == "" {
			serverSlotsBaseFlagName = "server_slots_base"
		} else {
			serverSlotsBaseFlagName = fmt.Sprintf("%v.server_slots_base", cmdPrefix)
		}

		serverSlotsBaseFlagValue, err := cmd.Flags().GetInt64(serverSlotsBaseFlagName)
		if err != nil {
			return err, false
		}
		m.ServerSlotsBase = &serverSlotsBaseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsulServerSlotsGrowthIncrementFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverSlotsGrowthIncrementFlagName := fmt.Sprintf("%v.server_slots_growth_increment", cmdPrefix)
	if cmd.Flags().Changed(serverSlotsGrowthIncrementFlagName) {

		var serverSlotsGrowthIncrementFlagName string
		if cmdPrefix == "" {
			serverSlotsGrowthIncrementFlagName = "server_slots_growth_increment"
		} else {
			serverSlotsGrowthIncrementFlagName = fmt.Sprintf("%v.server_slots_growth_increment", cmdPrefix)
		}

		serverSlotsGrowthIncrementFlagValue, err := cmd.Flags().GetInt64(serverSlotsGrowthIncrementFlagName)
		if err != nil {
			return err, false
		}
		m.ServerSlotsGrowthIncrement = serverSlotsGrowthIncrementFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsulServerSlotsGrowthTypeFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverSlotsGrowthTypeFlagName := fmt.Sprintf("%v.server_slots_growth_type", cmdPrefix)
	if cmd.Flags().Changed(serverSlotsGrowthTypeFlagName) {

		var serverSlotsGrowthTypeFlagName string
		if cmdPrefix == "" {
			serverSlotsGrowthTypeFlagName = "server_slots_growth_type"
		} else {
			serverSlotsGrowthTypeFlagName = fmt.Sprintf("%v.server_slots_growth_type", cmdPrefix)
		}

		serverSlotsGrowthTypeFlagValue, err := cmd.Flags().GetString(serverSlotsGrowthTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ServerSlotsGrowthType = &serverSlotsGrowthTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsulServiceBlacklistFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceBlacklistFlagName := fmt.Sprintf("%v.service-blacklist", cmdPrefix)
	if cmd.Flags().Changed(serviceBlacklistFlagName) {
		// warning: service-blacklist array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveConsulServiceWhitelistFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceWhitelistFlagName := fmt.Sprintf("%v.service-whitelist", cmdPrefix)
	if cmd.Flags().Changed(serviceWhitelistFlagName) {
		// warning: service-whitelist array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveConsulServiceAllowlistFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceAllowlistFlagName := fmt.Sprintf("%v.service_allowlist", cmdPrefix)
	if cmd.Flags().Changed(serviceAllowlistFlagName) {
		// warning: service_allowlist array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveConsulServiceDenylistFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceDenylistFlagName := fmt.Sprintf("%v.service_denylist", cmdPrefix)
	if cmd.Flags().Changed(serviceDenylistFlagName) {
		// warning: service_denylist array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveConsulTokenFlags(depth int, m *models.Consul, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tokenFlagName := fmt.Sprintf("%v.token", cmdPrefix)
	if cmd.Flags().Changed(tokenFlagName) {

		var tokenFlagName string
		if cmdPrefix == "" {
			tokenFlagName = "token"
		} else {
			tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
		}

		tokenFlagValue, err := cmd.Flags().GetString(tokenFlagName)
		if err != nil {
			return err, false
		}
		m.Token = tokenFlagValue

		retAdded = true
	}

	return nil, retAdded
}
