// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for Capture

// register flags to command
func registerModelCaptureFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCaptureIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCaptureLength(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCaptureType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCaptureIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	indexDescription := `Required. `

	var indexFlagName string
	if cmdPrefix == "" {
		indexFlagName = "index"
	} else {
		indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
	}

	var indexFlagDefault int64

	_ = cmd.PersistentFlags().Int64(indexFlagName, indexFlagDefault, indexDescription)

	return nil
}

func registerCaptureLength(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lengthDescription := `Required. `

	var lengthFlagName string
	if cmdPrefix == "" {
		lengthFlagName = "length"
	} else {
		lengthFlagName = fmt.Sprintf("%v.length", cmdPrefix)
	}

	var lengthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(lengthFlagName, lengthFlagDefault, lengthDescription)

	return nil
}

func registerCaptureType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["request","response"]. Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["request","response"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCaptureFlags(depth int, m *models.Capture, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, indexAdded := retrieveCaptureIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || indexAdded

	err, lengthAdded := retrieveCaptureLengthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lengthAdded

	err, typeAdded := retrieveCaptureTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveCaptureIndexFlags(depth int, m *models.Capture, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	indexFlagName := fmt.Sprintf("%v.index", cmdPrefix)
	if cmd.Flags().Changed(indexFlagName) {

		var indexFlagName string
		if cmdPrefix == "" {
			indexFlagName = "index"
		} else {
			indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
		}

		indexFlagValue, err := cmd.Flags().GetInt64(indexFlagName)
		if err != nil {
			return err, false
		}
		m.Index = &indexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCaptureLengthFlags(depth int, m *models.Capture, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lengthFlagName := fmt.Sprintf("%v.length", cmdPrefix)
	if cmd.Flags().Changed(lengthFlagName) {

		var lengthFlagName string
		if cmdPrefix == "" {
			lengthFlagName = "length"
		} else {
			lengthFlagName = fmt.Sprintf("%v.length", cmdPrefix)
		}

		lengthFlagValue, err := cmd.Flags().GetInt64(lengthFlagName)
		if err != nil {
			return err, false
		}
		m.Length = lengthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCaptureTypeFlags(depth int, m *models.Capture, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
