// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdt/client/frontend"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationFrontendDeleteFrontendCmd returns a cmd to handle operation deleteFrontend
func makeOperationFrontendDeleteFrontendCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "deleteFrontend",
		Short: `Deletes a frontend from the configuration by it's name.`,
		RunE:  runOperationFrontendDeleteFrontend,
	}

	if err := registerOperationFrontendDeleteFrontendParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationFrontendDeleteFrontend uses cmd flags to call endpoint api
func runOperationFrontendDeleteFrontend(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := frontend.NewDeleteFrontendParams()
	if err, _ := retrieveOperationFrontendDeleteFrontendForceReloadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationFrontendDeleteFrontendNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationFrontendDeleteFrontendTransactionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationFrontendDeleteFrontendVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationFrontendDeleteFrontendResult(appCli.Frontend.DeleteFrontend(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationFrontendDeleteFrontendParamFlags registers all flags needed to fill params
func registerOperationFrontendDeleteFrontendParamFlags(cmd *cobra.Command) error {
	if err := registerOperationFrontendDeleteFrontendForceReloadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationFrontendDeleteFrontendNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationFrontendDeleteFrontendTransactionIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationFrontendDeleteFrontendVersionParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationFrontendDeleteFrontendForceReloadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	forceReloadDescription := `If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.`

	var forceReloadFlagName string
	if cmdPrefix == "" {
		forceReloadFlagName = "force_reload"
	} else {
		forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
	}

	var forceReloadFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceReloadFlagName, forceReloadFlagDefault, forceReloadDescription)

	return nil
}
func registerOperationFrontendDeleteFrontendNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `Required. Frontend name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}
func registerOperationFrontendDeleteFrontendTransactionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	transactionIdDescription := `ID of the transaction where we want to add the operation. Cannot be used when version is specified.`

	var transactionIdFlagName string
	if cmdPrefix == "" {
		transactionIdFlagName = "transaction_id"
	} else {
		transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
	}

	var transactionIdFlagDefault string

	_ = cmd.PersistentFlags().String(transactionIdFlagName, transactionIdFlagDefault, transactionIdDescription)

	return nil
}
func registerOperationFrontendDeleteFrontendVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	versionDescription := `Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func retrieveOperationFrontendDeleteFrontendForceReloadFlag(m *frontend.DeleteFrontendParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("force_reload") {

		var forceReloadFlagName string
		if cmdPrefix == "" {
			forceReloadFlagName = "force_reload"
		} else {
			forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
		}

		forceReloadFlagValue, err := cmd.Flags().GetBool(forceReloadFlagName)
		if err != nil {
			return err, false
		}
		m.ForceReload = &forceReloadFlagValue

	}
	return nil, retAdded
}
func retrieveOperationFrontendDeleteFrontendNameFlag(m *frontend.DeleteFrontendParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationFrontendDeleteFrontendTransactionIDFlag(m *frontend.DeleteFrontendParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("transaction_id") {

		var transactionIdFlagName string
		if cmdPrefix == "" {
			transactionIdFlagName = "transaction_id"
		} else {
			transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
		}

		transactionIdFlagValue, err := cmd.Flags().GetString(transactionIdFlagName)
		if err != nil {
			return err, false
		}
		m.TransactionID = &transactionIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationFrontendDeleteFrontendVersionFlag(m *frontend.DeleteFrontendParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("version") {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

	}
	return nil, retAdded
}

// parseOperationFrontendDeleteFrontendResult parses request result and return the string content
func parseOperationFrontendDeleteFrontendResult(resp0 *frontend.DeleteFrontendAccepted, resp1 *frontend.DeleteFrontendNoContent, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*frontend.DeleteFrontendDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning deleteFrontendAccepted is not supported

		// Non schema case: warning deleteFrontendNoContent is not supported

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*frontend.DeleteFrontendNotFound)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response deleteFrontendAccepted is not supported by go-swagger cli yet.

	// warning: non schema response deleteFrontendNoContent is not supported by go-swagger cli yet.

	return "", nil
}
