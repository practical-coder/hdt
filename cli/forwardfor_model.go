// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for Forwardfor

// register flags to command
func registerModelForwardforFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerForwardforEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerForwardforExcept(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerForwardforHeader(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerForwardforIfnone(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerForwardforEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Enum: ["enabled"]. Required. `

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault string

	_ = cmd.PersistentFlags().String(enabledFlagName, enabledFlagDefault, enabledDescription)

	if err := cmd.RegisterFlagCompletionFunc(enabledFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerForwardforExcept(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	exceptDescription := ``

	var exceptFlagName string
	if cmdPrefix == "" {
		exceptFlagName = "except"
	} else {
		exceptFlagName = fmt.Sprintf("%v.except", cmdPrefix)
	}

	var exceptFlagDefault string

	_ = cmd.PersistentFlags().String(exceptFlagName, exceptFlagDefault, exceptDescription)

	return nil
}

func registerForwardforHeader(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	headerDescription := ``

	var headerFlagName string
	if cmdPrefix == "" {
		headerFlagName = "header"
	} else {
		headerFlagName = fmt.Sprintf("%v.header", cmdPrefix)
	}

	var headerFlagDefault string

	_ = cmd.PersistentFlags().String(headerFlagName, headerFlagDefault, headerDescription)

	return nil
}

func registerForwardforIfnone(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ifnoneDescription := ``

	var ifnoneFlagName string
	if cmdPrefix == "" {
		ifnoneFlagName = "ifnone"
	} else {
		ifnoneFlagName = fmt.Sprintf("%v.ifnone", cmdPrefix)
	}

	var ifnoneFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ifnoneFlagName, ifnoneFlagDefault, ifnoneDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelForwardforFlags(depth int, m *models.Forwardfor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enabledAdded := retrieveForwardforEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, exceptAdded := retrieveForwardforExceptFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || exceptAdded

	err, headerAdded := retrieveForwardforHeaderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || headerAdded

	err, ifnoneAdded := retrieveForwardforIfnoneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ifnoneAdded

	return nil, retAdded
}

func retrieveForwardforEnabledFlags(depth int, m *models.Forwardfor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetString(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveForwardforExceptFlags(depth int, m *models.Forwardfor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	exceptFlagName := fmt.Sprintf("%v.except", cmdPrefix)
	if cmd.Flags().Changed(exceptFlagName) {

		var exceptFlagName string
		if cmdPrefix == "" {
			exceptFlagName = "except"
		} else {
			exceptFlagName = fmt.Sprintf("%v.except", cmdPrefix)
		}

		exceptFlagValue, err := cmd.Flags().GetString(exceptFlagName)
		if err != nil {
			return err, false
		}
		m.Except = exceptFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveForwardforHeaderFlags(depth int, m *models.Forwardfor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	headerFlagName := fmt.Sprintf("%v.header", cmdPrefix)
	if cmd.Flags().Changed(headerFlagName) {

		var headerFlagName string
		if cmdPrefix == "" {
			headerFlagName = "header"
		} else {
			headerFlagName = fmt.Sprintf("%v.header", cmdPrefix)
		}

		headerFlagValue, err := cmd.Flags().GetString(headerFlagName)
		if err != nil {
			return err, false
		}
		m.Header = headerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveForwardforIfnoneFlags(depth int, m *models.Forwardfor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ifnoneFlagName := fmt.Sprintf("%v.ifnone", cmdPrefix)
	if cmd.Flags().Changed(ifnoneFlagName) {

		var ifnoneFlagName string
		if cmdPrefix == "" {
			ifnoneFlagName = "ifnone"
		} else {
			ifnoneFlagName = fmt.Sprintf("%v.ifnone", cmdPrefix)
		}

		ifnoneFlagValue, err := cmd.Flags().GetBool(ifnoneFlagName)
		if err != nil {
			return err, false
		}
		m.Ifnone = ifnoneFlagValue

		retAdded = true
	}

	return nil, retAdded
}
