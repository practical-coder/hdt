// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for MysqlCheckParams

// register flags to command
func registerModelMysqlCheckParamsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMysqlCheckParamsClientVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMysqlCheckParamsUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMysqlCheckParamsClientVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientVersionDescription := `Enum: ["pre-41","post-41"]. `

	var clientVersionFlagName string
	if cmdPrefix == "" {
		clientVersionFlagName = "client_version"
	} else {
		clientVersionFlagName = fmt.Sprintf("%v.client_version", cmdPrefix)
	}

	var clientVersionFlagDefault string

	_ = cmd.PersistentFlags().String(clientVersionFlagName, clientVersionFlagDefault, clientVersionDescription)

	if err := cmd.RegisterFlagCompletionFunc(clientVersionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["pre-41","post-41"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerMysqlCheckParamsUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMysqlCheckParamsFlags(depth int, m *models.MysqlCheckParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, clientVersionAdded := retrieveMysqlCheckParamsClientVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientVersionAdded

	err, usernameAdded := retrieveMysqlCheckParamsUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveMysqlCheckParamsClientVersionFlags(depth int, m *models.MysqlCheckParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientVersionFlagName := fmt.Sprintf("%v.client_version", cmdPrefix)
	if cmd.Flags().Changed(clientVersionFlagName) {

		var clientVersionFlagName string
		if cmdPrefix == "" {
			clientVersionFlagName = "client_version"
		} else {
			clientVersionFlagName = fmt.Sprintf("%v.client_version", cmdPrefix)
		}

		clientVersionFlagValue, err := cmd.Flags().GetString(clientVersionFlagName)
		if err != nil {
			return err, false
		}
		m.ClientVersion = clientVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMysqlCheckParamsUsernameFlags(depth int, m *models.MysqlCheckParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
