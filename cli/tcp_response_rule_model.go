// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/models"
	"github.com/spf13/cobra"
)

// Schema cli for TCPResponseRule

// register flags to command
func registerModelTCPResponseRuleFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTCPResponseRuleAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPResponseRuleCond(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPResponseRuleCondTest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPResponseRuleIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPResponseRuleLuaAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPResponseRuleLuaParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPResponseRuleTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPResponseRuleType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTCPResponseRuleAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	actionDescription := `Enum: ["accept","reject","lua"]. `

	var actionFlagName string
	if cmdPrefix == "" {
		actionFlagName = "action"
	} else {
		actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
	}

	var actionFlagDefault string

	_ = cmd.PersistentFlags().String(actionFlagName, actionFlagDefault, actionDescription)

	if err := cmd.RegisterFlagCompletionFunc(actionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["accept","reject","lua"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTCPResponseRuleCond(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condDescription := `Enum: ["if","unless"]. `

	var condFlagName string
	if cmdPrefix == "" {
		condFlagName = "cond"
	} else {
		condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
	}

	var condFlagDefault string

	_ = cmd.PersistentFlags().String(condFlagName, condFlagDefault, condDescription)

	if err := cmd.RegisterFlagCompletionFunc(condFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["if","unless"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTCPResponseRuleCondTest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condTestDescription := ``

	var condTestFlagName string
	if cmdPrefix == "" {
		condTestFlagName = "cond_test"
	} else {
		condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
	}

	var condTestFlagDefault string

	_ = cmd.PersistentFlags().String(condTestFlagName, condTestFlagDefault, condTestDescription)

	return nil
}

func registerTCPResponseRuleIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	indexDescription := `Required. `

	var indexFlagName string
	if cmdPrefix == "" {
		indexFlagName = "index"
	} else {
		indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
	}

	var indexFlagDefault int64

	_ = cmd.PersistentFlags().Int64(indexFlagName, indexFlagDefault, indexDescription)

	return nil
}

func registerTCPResponseRuleLuaAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaActionDescription := ``

	var luaActionFlagName string
	if cmdPrefix == "" {
		luaActionFlagName = "lua_action"
	} else {
		luaActionFlagName = fmt.Sprintf("%v.lua_action", cmdPrefix)
	}

	var luaActionFlagDefault string

	_ = cmd.PersistentFlags().String(luaActionFlagName, luaActionFlagDefault, luaActionDescription)

	return nil
}

func registerTCPResponseRuleLuaParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaParamsDescription := ``

	var luaParamsFlagName string
	if cmdPrefix == "" {
		luaParamsFlagName = "lua_params"
	} else {
		luaParamsFlagName = fmt.Sprintf("%v.lua_params", cmdPrefix)
	}

	var luaParamsFlagDefault string

	_ = cmd.PersistentFlags().String(luaParamsFlagName, luaParamsFlagDefault, luaParamsDescription)

	return nil
}

func registerTCPResponseRuleTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeoutDescription := ``

	var timeoutFlagName string
	if cmdPrefix == "" {
		timeoutFlagName = "timeout"
	} else {
		timeoutFlagName = fmt.Sprintf("%v.timeout", cmdPrefix)
	}

	var timeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(timeoutFlagName, timeoutFlagDefault, timeoutDescription)

	return nil
}

func registerTCPResponseRuleType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["content","inspect-delay"]. Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["content","inspect-delay"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTCPResponseRuleFlags(depth int, m *models.TCPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, actionAdded := retrieveTCPResponseRuleActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || actionAdded

	err, condAdded := retrieveTCPResponseRuleCondFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condAdded

	err, condTestAdded := retrieveTCPResponseRuleCondTestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condTestAdded

	err, indexAdded := retrieveTCPResponseRuleIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || indexAdded

	err, luaActionAdded := retrieveTCPResponseRuleLuaActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaActionAdded

	err, luaParamsAdded := retrieveTCPResponseRuleLuaParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaParamsAdded

	err, timeoutAdded := retrieveTCPResponseRuleTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeoutAdded

	err, typeAdded := retrieveTCPResponseRuleTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveTCPResponseRuleActionFlags(depth int, m *models.TCPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	actionFlagName := fmt.Sprintf("%v.action", cmdPrefix)
	if cmd.Flags().Changed(actionFlagName) {

		var actionFlagName string
		if cmdPrefix == "" {
			actionFlagName = "action"
		} else {
			actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
		}

		actionFlagValue, err := cmd.Flags().GetString(actionFlagName)
		if err != nil {
			return err, false
		}
		m.Action = actionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPResponseRuleCondFlags(depth int, m *models.TCPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condFlagName := fmt.Sprintf("%v.cond", cmdPrefix)
	if cmd.Flags().Changed(condFlagName) {

		var condFlagName string
		if cmdPrefix == "" {
			condFlagName = "cond"
		} else {
			condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
		}

		condFlagValue, err := cmd.Flags().GetString(condFlagName)
		if err != nil {
			return err, false
		}
		m.Cond = condFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPResponseRuleCondTestFlags(depth int, m *models.TCPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condTestFlagName := fmt.Sprintf("%v.cond_test", cmdPrefix)
	if cmd.Flags().Changed(condTestFlagName) {

		var condTestFlagName string
		if cmdPrefix == "" {
			condTestFlagName = "cond_test"
		} else {
			condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
		}

		condTestFlagValue, err := cmd.Flags().GetString(condTestFlagName)
		if err != nil {
			return err, false
		}
		m.CondTest = condTestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPResponseRuleIndexFlags(depth int, m *models.TCPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	indexFlagName := fmt.Sprintf("%v.index", cmdPrefix)
	if cmd.Flags().Changed(indexFlagName) {

		var indexFlagName string
		if cmdPrefix == "" {
			indexFlagName = "index"
		} else {
			indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
		}

		indexFlagValue, err := cmd.Flags().GetInt64(indexFlagName)
		if err != nil {
			return err, false
		}
		m.Index = &indexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPResponseRuleLuaActionFlags(depth int, m *models.TCPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaActionFlagName := fmt.Sprintf("%v.lua_action", cmdPrefix)
	if cmd.Flags().Changed(luaActionFlagName) {

		var luaActionFlagName string
		if cmdPrefix == "" {
			luaActionFlagName = "lua_action"
		} else {
			luaActionFlagName = fmt.Sprintf("%v.lua_action", cmdPrefix)
		}

		luaActionFlagValue, err := cmd.Flags().GetString(luaActionFlagName)
		if err != nil {
			return err, false
		}
		m.LuaAction = luaActionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPResponseRuleLuaParamsFlags(depth int, m *models.TCPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaParamsFlagName := fmt.Sprintf("%v.lua_params", cmdPrefix)
	if cmd.Flags().Changed(luaParamsFlagName) {

		var luaParamsFlagName string
		if cmdPrefix == "" {
			luaParamsFlagName = "lua_params"
		} else {
			luaParamsFlagName = fmt.Sprintf("%v.lua_params", cmdPrefix)
		}

		luaParamsFlagValue, err := cmd.Flags().GetString(luaParamsFlagName)
		if err != nil {
			return err, false
		}
		m.LuaParams = luaParamsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPResponseRuleTimeoutFlags(depth int, m *models.TCPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeoutFlagName := fmt.Sprintf("%v.timeout", cmdPrefix)
	if cmd.Flags().Changed(timeoutFlagName) {

		var timeoutFlagName string
		if cmdPrefix == "" {
			timeoutFlagName = "timeout"
		} else {
			timeoutFlagName = fmt.Sprintf("%v.timeout", cmdPrefix)
		}

		timeoutFlagValue, err := cmd.Flags().GetInt64(timeoutFlagName)
		if err != nil {
			return err, false
		}
		m.Timeout = &timeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPResponseRuleTypeFlags(depth int, m *models.TCPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
