// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/models"
	"github.com/spf13/cobra"
)

// Schema cli for NativeStatStats

// register flags to command
func registerModelNativeStatStatsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNativeStatStatsAct(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsAgentCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsAgentDesc(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsAgentDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsAgentFall(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsAgentHealth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsAgentRise(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsAgentStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsAlgo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsBck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsBin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsBout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCheckCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCheckDesc(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCheckDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCheckFall(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCheckHealth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCheckRise(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCheckStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsChkdown(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsChkfail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCliAbrt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCompByp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCompIn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCompOut(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCompRsp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsConnRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsConnRateMax(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsConnTot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCookie(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsCtime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsDcon(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsDowntime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsDreq(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsDresp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsDses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsEcon(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsEreq(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsEresp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsHanafail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsHrsp1xx(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsHrsp2xx(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsHrsp3xx(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsHrsp4xx(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsHrsp5xx(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsHrspOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsIid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsIntercepted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsLastchg(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsLastsess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsLbtot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsPid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsQcur(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsQlimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsQmax(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsQtime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsRateLim(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsRateMax(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsReqRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsReqRateMax(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsReqTot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsRtime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsScur(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsSid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsSlim(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsSmax(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsSrvAbrt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsStot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsThrottle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsTracked(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsTtime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsWeight(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsWredis(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatStatsWretr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNativeStatStatsAct(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	actDescription := ``

	var actFlagName string
	if cmdPrefix == "" {
		actFlagName = "act"
	} else {
		actFlagName = fmt.Sprintf("%v.act", cmdPrefix)
	}

	var actFlagDefault int64

	_ = cmd.PersistentFlags().Int64(actFlagName, actFlagDefault, actDescription)

	return nil
}

func registerNativeStatStatsAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addrDescription := ``

	var addrFlagName string
	if cmdPrefix == "" {
		addrFlagName = "addr"
	} else {
		addrFlagName = fmt.Sprintf("%v.addr", cmdPrefix)
	}

	var addrFlagDefault string

	_ = cmd.PersistentFlags().String(addrFlagName, addrFlagDefault, addrDescription)

	return nil
}

func registerNativeStatStatsAgentCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentCodeDescription := ``

	var agentCodeFlagName string
	if cmdPrefix == "" {
		agentCodeFlagName = "agent_code"
	} else {
		agentCodeFlagName = fmt.Sprintf("%v.agent_code", cmdPrefix)
	}

	var agentCodeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(agentCodeFlagName, agentCodeFlagDefault, agentCodeDescription)

	return nil
}

func registerNativeStatStatsAgentDesc(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentDescDescription := ``

	var agentDescFlagName string
	if cmdPrefix == "" {
		agentDescFlagName = "agent_desc"
	} else {
		agentDescFlagName = fmt.Sprintf("%v.agent_desc", cmdPrefix)
	}

	var agentDescFlagDefault string

	_ = cmd.PersistentFlags().String(agentDescFlagName, agentDescFlagDefault, agentDescDescription)

	return nil
}

func registerNativeStatStatsAgentDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentDurationDescription := ``

	var agentDurationFlagName string
	if cmdPrefix == "" {
		agentDurationFlagName = "agent_duration"
	} else {
		agentDurationFlagName = fmt.Sprintf("%v.agent_duration", cmdPrefix)
	}

	var agentDurationFlagDefault int64

	_ = cmd.PersistentFlags().Int64(agentDurationFlagName, agentDurationFlagDefault, agentDurationDescription)

	return nil
}

func registerNativeStatStatsAgentFall(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentFallDescription := ``

	var agentFallFlagName string
	if cmdPrefix == "" {
		agentFallFlagName = "agent_fall"
	} else {
		agentFallFlagName = fmt.Sprintf("%v.agent_fall", cmdPrefix)
	}

	var agentFallFlagDefault int64

	_ = cmd.PersistentFlags().Int64(agentFallFlagName, agentFallFlagDefault, agentFallDescription)

	return nil
}

func registerNativeStatStatsAgentHealth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentHealthDescription := ``

	var agentHealthFlagName string
	if cmdPrefix == "" {
		agentHealthFlagName = "agent_health"
	} else {
		agentHealthFlagName = fmt.Sprintf("%v.agent_health", cmdPrefix)
	}

	var agentHealthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(agentHealthFlagName, agentHealthFlagDefault, agentHealthDescription)

	return nil
}

func registerNativeStatStatsAgentRise(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentRiseDescription := ``

	var agentRiseFlagName string
	if cmdPrefix == "" {
		agentRiseFlagName = "agent_rise"
	} else {
		agentRiseFlagName = fmt.Sprintf("%v.agent_rise", cmdPrefix)
	}

	var agentRiseFlagDefault int64

	_ = cmd.PersistentFlags().Int64(agentRiseFlagName, agentRiseFlagDefault, agentRiseDescription)

	return nil
}

func registerNativeStatStatsAgentStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentStatusDescription := `Enum: ["UNK","INI","SOCKERR","L40K","L4TOUT","L4CON","L7OK","L7STS"]. `

	var agentStatusFlagName string
	if cmdPrefix == "" {
		agentStatusFlagName = "agent_status"
	} else {
		agentStatusFlagName = fmt.Sprintf("%v.agent_status", cmdPrefix)
	}

	var agentStatusFlagDefault string

	_ = cmd.PersistentFlags().String(agentStatusFlagName, agentStatusFlagDefault, agentStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(agentStatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["UNK","INI","SOCKERR","L40K","L4TOUT","L4CON","L7OK","L7STS"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNativeStatStatsAlgo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	algoDescription := ``

	var algoFlagName string
	if cmdPrefix == "" {
		algoFlagName = "algo"
	} else {
		algoFlagName = fmt.Sprintf("%v.algo", cmdPrefix)
	}

	var algoFlagDefault string

	_ = cmd.PersistentFlags().String(algoFlagName, algoFlagDefault, algoDescription)

	return nil
}

func registerNativeStatStatsBck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bckDescription := ``

	var bckFlagName string
	if cmdPrefix == "" {
		bckFlagName = "bck"
	} else {
		bckFlagName = fmt.Sprintf("%v.bck", cmdPrefix)
	}

	var bckFlagDefault int64

	_ = cmd.PersistentFlags().Int64(bckFlagName, bckFlagDefault, bckDescription)

	return nil
}

func registerNativeStatStatsBin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	binDescription := ``

	var binFlagName string
	if cmdPrefix == "" {
		binFlagName = "bin"
	} else {
		binFlagName = fmt.Sprintf("%v.bin", cmdPrefix)
	}

	var binFlagDefault int64

	_ = cmd.PersistentFlags().Int64(binFlagName, binFlagDefault, binDescription)

	return nil
}

func registerNativeStatStatsBout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	boutDescription := ``

	var boutFlagName string
	if cmdPrefix == "" {
		boutFlagName = "bout"
	} else {
		boutFlagName = fmt.Sprintf("%v.bout", cmdPrefix)
	}

	var boutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(boutFlagName, boutFlagDefault, boutDescription)

	return nil
}

func registerNativeStatStatsCheckCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkCodeDescription := ``

	var checkCodeFlagName string
	if cmdPrefix == "" {
		checkCodeFlagName = "check_code"
	} else {
		checkCodeFlagName = fmt.Sprintf("%v.check_code", cmdPrefix)
	}

	var checkCodeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(checkCodeFlagName, checkCodeFlagDefault, checkCodeDescription)

	return nil
}

func registerNativeStatStatsCheckDesc(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkDescDescription := ``

	var checkDescFlagName string
	if cmdPrefix == "" {
		checkDescFlagName = "check_desc"
	} else {
		checkDescFlagName = fmt.Sprintf("%v.check_desc", cmdPrefix)
	}

	var checkDescFlagDefault string

	_ = cmd.PersistentFlags().String(checkDescFlagName, checkDescFlagDefault, checkDescDescription)

	return nil
}

func registerNativeStatStatsCheckDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkDurationDescription := ``

	var checkDurationFlagName string
	if cmdPrefix == "" {
		checkDurationFlagName = "check_duration"
	} else {
		checkDurationFlagName = fmt.Sprintf("%v.check_duration", cmdPrefix)
	}

	var checkDurationFlagDefault int64

	_ = cmd.PersistentFlags().Int64(checkDurationFlagName, checkDurationFlagDefault, checkDurationDescription)

	return nil
}

func registerNativeStatStatsCheckFall(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkFallDescription := ``

	var checkFallFlagName string
	if cmdPrefix == "" {
		checkFallFlagName = "check_fall"
	} else {
		checkFallFlagName = fmt.Sprintf("%v.check_fall", cmdPrefix)
	}

	var checkFallFlagDefault int64

	_ = cmd.PersistentFlags().Int64(checkFallFlagName, checkFallFlagDefault, checkFallDescription)

	return nil
}

func registerNativeStatStatsCheckHealth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkHealthDescription := ``

	var checkHealthFlagName string
	if cmdPrefix == "" {
		checkHealthFlagName = "check_health"
	} else {
		checkHealthFlagName = fmt.Sprintf("%v.check_health", cmdPrefix)
	}

	var checkHealthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(checkHealthFlagName, checkHealthFlagDefault, checkHealthDescription)

	return nil
}

func registerNativeStatStatsCheckRise(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkRiseDescription := ``

	var checkRiseFlagName string
	if cmdPrefix == "" {
		checkRiseFlagName = "check_rise"
	} else {
		checkRiseFlagName = fmt.Sprintf("%v.check_rise", cmdPrefix)
	}

	var checkRiseFlagDefault int64

	_ = cmd.PersistentFlags().Int64(checkRiseFlagName, checkRiseFlagDefault, checkRiseDescription)

	return nil
}

func registerNativeStatStatsCheckStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkStatusDescription := `Enum: ["UNK","INI","SOCKERR","L40K","L4TOUT","L4CON","L6OK","L6TOUT","L6RSP","L7OK","L7OKC","L7TOUT","L7RSP","L7STS"]. `

	var checkStatusFlagName string
	if cmdPrefix == "" {
		checkStatusFlagName = "check_status"
	} else {
		checkStatusFlagName = fmt.Sprintf("%v.check_status", cmdPrefix)
	}

	var checkStatusFlagDefault string

	_ = cmd.PersistentFlags().String(checkStatusFlagName, checkStatusFlagDefault, checkStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(checkStatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["UNK","INI","SOCKERR","L40K","L4TOUT","L4CON","L6OK","L6TOUT","L6RSP","L7OK","L7OKC","L7TOUT","L7RSP","L7STS"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNativeStatStatsChkdown(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	chkdownDescription := ``

	var chkdownFlagName string
	if cmdPrefix == "" {
		chkdownFlagName = "chkdown"
	} else {
		chkdownFlagName = fmt.Sprintf("%v.chkdown", cmdPrefix)
	}

	var chkdownFlagDefault int64

	_ = cmd.PersistentFlags().Int64(chkdownFlagName, chkdownFlagDefault, chkdownDescription)

	return nil
}

func registerNativeStatStatsChkfail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	chkfailDescription := ``

	var chkfailFlagName string
	if cmdPrefix == "" {
		chkfailFlagName = "chkfail"
	} else {
		chkfailFlagName = fmt.Sprintf("%v.chkfail", cmdPrefix)
	}

	var chkfailFlagDefault int64

	_ = cmd.PersistentFlags().Int64(chkfailFlagName, chkfailFlagDefault, chkfailDescription)

	return nil
}

func registerNativeStatStatsCliAbrt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cliAbrtDescription := ``

	var cliAbrtFlagName string
	if cmdPrefix == "" {
		cliAbrtFlagName = "cli_abrt"
	} else {
		cliAbrtFlagName = fmt.Sprintf("%v.cli_abrt", cmdPrefix)
	}

	var cliAbrtFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cliAbrtFlagName, cliAbrtFlagDefault, cliAbrtDescription)

	return nil
}

func registerNativeStatStatsCompByp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	compBypDescription := ``

	var compBypFlagName string
	if cmdPrefix == "" {
		compBypFlagName = "comp_byp"
	} else {
		compBypFlagName = fmt.Sprintf("%v.comp_byp", cmdPrefix)
	}

	var compBypFlagDefault int64

	_ = cmd.PersistentFlags().Int64(compBypFlagName, compBypFlagDefault, compBypDescription)

	return nil
}

func registerNativeStatStatsCompIn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	compInDescription := ``

	var compInFlagName string
	if cmdPrefix == "" {
		compInFlagName = "comp_in"
	} else {
		compInFlagName = fmt.Sprintf("%v.comp_in", cmdPrefix)
	}

	var compInFlagDefault int64

	_ = cmd.PersistentFlags().Int64(compInFlagName, compInFlagDefault, compInDescription)

	return nil
}

func registerNativeStatStatsCompOut(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	compOutDescription := ``

	var compOutFlagName string
	if cmdPrefix == "" {
		compOutFlagName = "comp_out"
	} else {
		compOutFlagName = fmt.Sprintf("%v.comp_out", cmdPrefix)
	}

	var compOutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(compOutFlagName, compOutFlagDefault, compOutDescription)

	return nil
}

func registerNativeStatStatsCompRsp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	compRspDescription := ``

	var compRspFlagName string
	if cmdPrefix == "" {
		compRspFlagName = "comp_rsp"
	} else {
		compRspFlagName = fmt.Sprintf("%v.comp_rsp", cmdPrefix)
	}

	var compRspFlagDefault int64

	_ = cmd.PersistentFlags().Int64(compRspFlagName, compRspFlagDefault, compRspDescription)

	return nil
}

func registerNativeStatStatsConnRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connRateDescription := ``

	var connRateFlagName string
	if cmdPrefix == "" {
		connRateFlagName = "conn_rate"
	} else {
		connRateFlagName = fmt.Sprintf("%v.conn_rate", cmdPrefix)
	}

	var connRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(connRateFlagName, connRateFlagDefault, connRateDescription)

	return nil
}

func registerNativeStatStatsConnRateMax(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connRateMaxDescription := ``

	var connRateMaxFlagName string
	if cmdPrefix == "" {
		connRateMaxFlagName = "conn_rate_max"
	} else {
		connRateMaxFlagName = fmt.Sprintf("%v.conn_rate_max", cmdPrefix)
	}

	var connRateMaxFlagDefault int64

	_ = cmd.PersistentFlags().Int64(connRateMaxFlagName, connRateMaxFlagDefault, connRateMaxDescription)

	return nil
}

func registerNativeStatStatsConnTot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connTotDescription := ``

	var connTotFlagName string
	if cmdPrefix == "" {
		connTotFlagName = "conn_tot"
	} else {
		connTotFlagName = fmt.Sprintf("%v.conn_tot", cmdPrefix)
	}

	var connTotFlagDefault int64

	_ = cmd.PersistentFlags().Int64(connTotFlagName, connTotFlagDefault, connTotDescription)

	return nil
}

func registerNativeStatStatsCookie(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cookieDescription := ``

	var cookieFlagName string
	if cmdPrefix == "" {
		cookieFlagName = "cookie"
	} else {
		cookieFlagName = fmt.Sprintf("%v.cookie", cmdPrefix)
	}

	var cookieFlagDefault string

	_ = cmd.PersistentFlags().String(cookieFlagName, cookieFlagDefault, cookieDescription)

	return nil
}

func registerNativeStatStatsCtime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ctimeDescription := ``

	var ctimeFlagName string
	if cmdPrefix == "" {
		ctimeFlagName = "ctime"
	} else {
		ctimeFlagName = fmt.Sprintf("%v.ctime", cmdPrefix)
	}

	var ctimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ctimeFlagName, ctimeFlagDefault, ctimeDescription)

	return nil
}

func registerNativeStatStatsDcon(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dconDescription := ``

	var dconFlagName string
	if cmdPrefix == "" {
		dconFlagName = "dcon"
	} else {
		dconFlagName = fmt.Sprintf("%v.dcon", cmdPrefix)
	}

	var dconFlagDefault int64

	_ = cmd.PersistentFlags().Int64(dconFlagName, dconFlagDefault, dconDescription)

	return nil
}

func registerNativeStatStatsDowntime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	downtimeDescription := ``

	var downtimeFlagName string
	if cmdPrefix == "" {
		downtimeFlagName = "downtime"
	} else {
		downtimeFlagName = fmt.Sprintf("%v.downtime", cmdPrefix)
	}

	var downtimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(downtimeFlagName, downtimeFlagDefault, downtimeDescription)

	return nil
}

func registerNativeStatStatsDreq(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dreqDescription := ``

	var dreqFlagName string
	if cmdPrefix == "" {
		dreqFlagName = "dreq"
	} else {
		dreqFlagName = fmt.Sprintf("%v.dreq", cmdPrefix)
	}

	var dreqFlagDefault int64

	_ = cmd.PersistentFlags().Int64(dreqFlagName, dreqFlagDefault, dreqDescription)

	return nil
}

func registerNativeStatStatsDresp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	drespDescription := ``

	var drespFlagName string
	if cmdPrefix == "" {
		drespFlagName = "dresp"
	} else {
		drespFlagName = fmt.Sprintf("%v.dresp", cmdPrefix)
	}

	var drespFlagDefault int64

	_ = cmd.PersistentFlags().Int64(drespFlagName, drespFlagDefault, drespDescription)

	return nil
}

func registerNativeStatStatsDses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dsesDescription := ``

	var dsesFlagName string
	if cmdPrefix == "" {
		dsesFlagName = "dses"
	} else {
		dsesFlagName = fmt.Sprintf("%v.dses", cmdPrefix)
	}

	var dsesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(dsesFlagName, dsesFlagDefault, dsesDescription)

	return nil
}

func registerNativeStatStatsEcon(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	econDescription := ``

	var econFlagName string
	if cmdPrefix == "" {
		econFlagName = "econ"
	} else {
		econFlagName = fmt.Sprintf("%v.econ", cmdPrefix)
	}

	var econFlagDefault int64

	_ = cmd.PersistentFlags().Int64(econFlagName, econFlagDefault, econDescription)

	return nil
}

func registerNativeStatStatsEreq(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ereqDescription := ``

	var ereqFlagName string
	if cmdPrefix == "" {
		ereqFlagName = "ereq"
	} else {
		ereqFlagName = fmt.Sprintf("%v.ereq", cmdPrefix)
	}

	var ereqFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ereqFlagName, ereqFlagDefault, ereqDescription)

	return nil
}

func registerNativeStatStatsEresp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	erespDescription := ``

	var erespFlagName string
	if cmdPrefix == "" {
		erespFlagName = "eresp"
	} else {
		erespFlagName = fmt.Sprintf("%v.eresp", cmdPrefix)
	}

	var erespFlagDefault int64

	_ = cmd.PersistentFlags().Int64(erespFlagName, erespFlagDefault, erespDescription)

	return nil
}

func registerNativeStatStatsHanafail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hanafailDescription := ``

	var hanafailFlagName string
	if cmdPrefix == "" {
		hanafailFlagName = "hanafail"
	} else {
		hanafailFlagName = fmt.Sprintf("%v.hanafail", cmdPrefix)
	}

	var hanafailFlagDefault string

	_ = cmd.PersistentFlags().String(hanafailFlagName, hanafailFlagDefault, hanafailDescription)

	return nil
}

func registerNativeStatStatsHrsp1xx(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hrsp1xxDescription := ``

	var hrsp1xxFlagName string
	if cmdPrefix == "" {
		hrsp1xxFlagName = "hrsp_1xx"
	} else {
		hrsp1xxFlagName = fmt.Sprintf("%v.hrsp_1xx", cmdPrefix)
	}

	var hrsp1xxFlagDefault int64

	_ = cmd.PersistentFlags().Int64(hrsp1xxFlagName, hrsp1xxFlagDefault, hrsp1xxDescription)

	return nil
}

func registerNativeStatStatsHrsp2xx(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hrsp2xxDescription := ``

	var hrsp2xxFlagName string
	if cmdPrefix == "" {
		hrsp2xxFlagName = "hrsp_2xx"
	} else {
		hrsp2xxFlagName = fmt.Sprintf("%v.hrsp_2xx", cmdPrefix)
	}

	var hrsp2xxFlagDefault int64

	_ = cmd.PersistentFlags().Int64(hrsp2xxFlagName, hrsp2xxFlagDefault, hrsp2xxDescription)

	return nil
}

func registerNativeStatStatsHrsp3xx(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hrsp3xxDescription := ``

	var hrsp3xxFlagName string
	if cmdPrefix == "" {
		hrsp3xxFlagName = "hrsp_3xx"
	} else {
		hrsp3xxFlagName = fmt.Sprintf("%v.hrsp_3xx", cmdPrefix)
	}

	var hrsp3xxFlagDefault int64

	_ = cmd.PersistentFlags().Int64(hrsp3xxFlagName, hrsp3xxFlagDefault, hrsp3xxDescription)

	return nil
}

func registerNativeStatStatsHrsp4xx(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hrsp4xxDescription := ``

	var hrsp4xxFlagName string
	if cmdPrefix == "" {
		hrsp4xxFlagName = "hrsp_4xx"
	} else {
		hrsp4xxFlagName = fmt.Sprintf("%v.hrsp_4xx", cmdPrefix)
	}

	var hrsp4xxFlagDefault int64

	_ = cmd.PersistentFlags().Int64(hrsp4xxFlagName, hrsp4xxFlagDefault, hrsp4xxDescription)

	return nil
}

func registerNativeStatStatsHrsp5xx(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hrsp5xxDescription := ``

	var hrsp5xxFlagName string
	if cmdPrefix == "" {
		hrsp5xxFlagName = "hrsp_5xx"
	} else {
		hrsp5xxFlagName = fmt.Sprintf("%v.hrsp_5xx", cmdPrefix)
	}

	var hrsp5xxFlagDefault int64

	_ = cmd.PersistentFlags().Int64(hrsp5xxFlagName, hrsp5xxFlagDefault, hrsp5xxDescription)

	return nil
}

func registerNativeStatStatsHrspOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hrspOtherDescription := ``

	var hrspOtherFlagName string
	if cmdPrefix == "" {
		hrspOtherFlagName = "hrsp_other"
	} else {
		hrspOtherFlagName = fmt.Sprintf("%v.hrsp_other", cmdPrefix)
	}

	var hrspOtherFlagDefault int64

	_ = cmd.PersistentFlags().Int64(hrspOtherFlagName, hrspOtherFlagDefault, hrspOtherDescription)

	return nil
}

func registerNativeStatStatsIid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	iidDescription := ``

	var iidFlagName string
	if cmdPrefix == "" {
		iidFlagName = "iid"
	} else {
		iidFlagName = fmt.Sprintf("%v.iid", cmdPrefix)
	}

	var iidFlagDefault int64

	_ = cmd.PersistentFlags().Int64(iidFlagName, iidFlagDefault, iidDescription)

	return nil
}

func registerNativeStatStatsIntercepted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	interceptedDescription := ``

	var interceptedFlagName string
	if cmdPrefix == "" {
		interceptedFlagName = "intercepted"
	} else {
		interceptedFlagName = fmt.Sprintf("%v.intercepted", cmdPrefix)
	}

	var interceptedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(interceptedFlagName, interceptedFlagDefault, interceptedDescription)

	return nil
}

func registerNativeStatStatsLastchg(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastchgDescription := ``

	var lastchgFlagName string
	if cmdPrefix == "" {
		lastchgFlagName = "lastchg"
	} else {
		lastchgFlagName = fmt.Sprintf("%v.lastchg", cmdPrefix)
	}

	var lastchgFlagDefault int64

	_ = cmd.PersistentFlags().Int64(lastchgFlagName, lastchgFlagDefault, lastchgDescription)

	return nil
}

func registerNativeStatStatsLastsess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastsessDescription := ``

	var lastsessFlagName string
	if cmdPrefix == "" {
		lastsessFlagName = "lastsess"
	} else {
		lastsessFlagName = fmt.Sprintf("%v.lastsess", cmdPrefix)
	}

	var lastsessFlagDefault int64

	_ = cmd.PersistentFlags().Int64(lastsessFlagName, lastsessFlagDefault, lastsessDescription)

	return nil
}

func registerNativeStatStatsLbtot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lbtotDescription := ``

	var lbtotFlagName string
	if cmdPrefix == "" {
		lbtotFlagName = "lbtot"
	} else {
		lbtotFlagName = fmt.Sprintf("%v.lbtot", cmdPrefix)
	}

	var lbtotFlagDefault int64

	_ = cmd.PersistentFlags().Int64(lbtotFlagName, lbtotFlagDefault, lbtotDescription)

	return nil
}

func registerNativeStatStatsMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `Enum: ["tcp","http","health","unknown"]. `

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	if err := cmd.RegisterFlagCompletionFunc(modeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["tcp","http","health","unknown"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNativeStatStatsPid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pidDescription := ``

	var pidFlagName string
	if cmdPrefix == "" {
		pidFlagName = "pid"
	} else {
		pidFlagName = fmt.Sprintf("%v.pid", cmdPrefix)
	}

	var pidFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pidFlagName, pidFlagDefault, pidDescription)

	return nil
}

func registerNativeStatStatsQcur(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	qcurDescription := ``

	var qcurFlagName string
	if cmdPrefix == "" {
		qcurFlagName = "qcur"
	} else {
		qcurFlagName = fmt.Sprintf("%v.qcur", cmdPrefix)
	}

	var qcurFlagDefault int64

	_ = cmd.PersistentFlags().Int64(qcurFlagName, qcurFlagDefault, qcurDescription)

	return nil
}

func registerNativeStatStatsQlimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	qlimitDescription := ``

	var qlimitFlagName string
	if cmdPrefix == "" {
		qlimitFlagName = "qlimit"
	} else {
		qlimitFlagName = fmt.Sprintf("%v.qlimit", cmdPrefix)
	}

	var qlimitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(qlimitFlagName, qlimitFlagDefault, qlimitDescription)

	return nil
}

func registerNativeStatStatsQmax(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	qmaxDescription := ``

	var qmaxFlagName string
	if cmdPrefix == "" {
		qmaxFlagName = "qmax"
	} else {
		qmaxFlagName = fmt.Sprintf("%v.qmax", cmdPrefix)
	}

	var qmaxFlagDefault int64

	_ = cmd.PersistentFlags().Int64(qmaxFlagName, qmaxFlagDefault, qmaxDescription)

	return nil
}

func registerNativeStatStatsQtime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	qtimeDescription := ``

	var qtimeFlagName string
	if cmdPrefix == "" {
		qtimeFlagName = "qtime"
	} else {
		qtimeFlagName = fmt.Sprintf("%v.qtime", cmdPrefix)
	}

	var qtimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(qtimeFlagName, qtimeFlagDefault, qtimeDescription)

	return nil
}

func registerNativeStatStatsRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rateDescription := ``

	var rateFlagName string
	if cmdPrefix == "" {
		rateFlagName = "rate"
	} else {
		rateFlagName = fmt.Sprintf("%v.rate", cmdPrefix)
	}

	var rateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(rateFlagName, rateFlagDefault, rateDescription)

	return nil
}

func registerNativeStatStatsRateLim(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rateLimDescription := ``

	var rateLimFlagName string
	if cmdPrefix == "" {
		rateLimFlagName = "rate_lim"
	} else {
		rateLimFlagName = fmt.Sprintf("%v.rate_lim", cmdPrefix)
	}

	var rateLimFlagDefault int64

	_ = cmd.PersistentFlags().Int64(rateLimFlagName, rateLimFlagDefault, rateLimDescription)

	return nil
}

func registerNativeStatStatsRateMax(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rateMaxDescription := ``

	var rateMaxFlagName string
	if cmdPrefix == "" {
		rateMaxFlagName = "rate_max"
	} else {
		rateMaxFlagName = fmt.Sprintf("%v.rate_max", cmdPrefix)
	}

	var rateMaxFlagDefault int64

	_ = cmd.PersistentFlags().Int64(rateMaxFlagName, rateMaxFlagDefault, rateMaxDescription)

	return nil
}

func registerNativeStatStatsReqRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	reqRateDescription := ``

	var reqRateFlagName string
	if cmdPrefix == "" {
		reqRateFlagName = "req_rate"
	} else {
		reqRateFlagName = fmt.Sprintf("%v.req_rate", cmdPrefix)
	}

	var reqRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(reqRateFlagName, reqRateFlagDefault, reqRateDescription)

	return nil
}

func registerNativeStatStatsReqRateMax(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	reqRateMaxDescription := ``

	var reqRateMaxFlagName string
	if cmdPrefix == "" {
		reqRateMaxFlagName = "req_rate_max"
	} else {
		reqRateMaxFlagName = fmt.Sprintf("%v.req_rate_max", cmdPrefix)
	}

	var reqRateMaxFlagDefault int64

	_ = cmd.PersistentFlags().Int64(reqRateMaxFlagName, reqRateMaxFlagDefault, reqRateMaxDescription)

	return nil
}

func registerNativeStatStatsReqTot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	reqTotDescription := ``

	var reqTotFlagName string
	if cmdPrefix == "" {
		reqTotFlagName = "req_tot"
	} else {
		reqTotFlagName = fmt.Sprintf("%v.req_tot", cmdPrefix)
	}

	var reqTotFlagDefault int64

	_ = cmd.PersistentFlags().Int64(reqTotFlagName, reqTotFlagDefault, reqTotDescription)

	return nil
}

func registerNativeStatStatsRtime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rtimeDescription := ``

	var rtimeFlagName string
	if cmdPrefix == "" {
		rtimeFlagName = "rtime"
	} else {
		rtimeFlagName = fmt.Sprintf("%v.rtime", cmdPrefix)
	}

	var rtimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(rtimeFlagName, rtimeFlagDefault, rtimeDescription)

	return nil
}

func registerNativeStatStatsScur(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scurDescription := ``

	var scurFlagName string
	if cmdPrefix == "" {
		scurFlagName = "scur"
	} else {
		scurFlagName = fmt.Sprintf("%v.scur", cmdPrefix)
	}

	var scurFlagDefault int64

	_ = cmd.PersistentFlags().Int64(scurFlagName, scurFlagDefault, scurDescription)

	return nil
}

func registerNativeStatStatsSid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sidDescription := ``

	var sidFlagName string
	if cmdPrefix == "" {
		sidFlagName = "sid"
	} else {
		sidFlagName = fmt.Sprintf("%v.sid", cmdPrefix)
	}

	var sidFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sidFlagName, sidFlagDefault, sidDescription)

	return nil
}

func registerNativeStatStatsSlim(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slimDescription := ``

	var slimFlagName string
	if cmdPrefix == "" {
		slimFlagName = "slim"
	} else {
		slimFlagName = fmt.Sprintf("%v.slim", cmdPrefix)
	}

	var slimFlagDefault int64

	_ = cmd.PersistentFlags().Int64(slimFlagName, slimFlagDefault, slimDescription)

	return nil
}

func registerNativeStatStatsSmax(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	smaxDescription := ``

	var smaxFlagName string
	if cmdPrefix == "" {
		smaxFlagName = "smax"
	} else {
		smaxFlagName = fmt.Sprintf("%v.smax", cmdPrefix)
	}

	var smaxFlagDefault int64

	_ = cmd.PersistentFlags().Int64(smaxFlagName, smaxFlagDefault, smaxDescription)

	return nil
}

func registerNativeStatStatsSrvAbrt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	srvAbrtDescription := ``

	var srvAbrtFlagName string
	if cmdPrefix == "" {
		srvAbrtFlagName = "srv_abrt"
	} else {
		srvAbrtFlagName = fmt.Sprintf("%v.srv_abrt", cmdPrefix)
	}

	var srvAbrtFlagDefault int64

	_ = cmd.PersistentFlags().Int64(srvAbrtFlagName, srvAbrtFlagDefault, srvAbrtDescription)

	return nil
}

func registerNativeStatStatsStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Enum: ["UP","DOWN","NOLB","MAINT","no check"]. `

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["UP","DOWN","NOLB","MAINT","no check"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNativeStatStatsStot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stotDescription := ``

	var stotFlagName string
	if cmdPrefix == "" {
		stotFlagName = "stot"
	} else {
		stotFlagName = fmt.Sprintf("%v.stot", cmdPrefix)
	}

	var stotFlagDefault int64

	_ = cmd.PersistentFlags().Int64(stotFlagName, stotFlagDefault, stotDescription)

	return nil
}

func registerNativeStatStatsThrottle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	throttleDescription := ``

	var throttleFlagName string
	if cmdPrefix == "" {
		throttleFlagName = "throttle"
	} else {
		throttleFlagName = fmt.Sprintf("%v.throttle", cmdPrefix)
	}

	var throttleFlagDefault int64

	_ = cmd.PersistentFlags().Int64(throttleFlagName, throttleFlagDefault, throttleDescription)

	return nil
}

func registerNativeStatStatsTracked(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackedDescription := ``

	var trackedFlagName string
	if cmdPrefix == "" {
		trackedFlagName = "tracked"
	} else {
		trackedFlagName = fmt.Sprintf("%v.tracked", cmdPrefix)
	}

	var trackedFlagDefault string

	_ = cmd.PersistentFlags().String(trackedFlagName, trackedFlagDefault, trackedDescription)

	return nil
}

func registerNativeStatStatsTtime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ttimeDescription := ``

	var ttimeFlagName string
	if cmdPrefix == "" {
		ttimeFlagName = "ttime"
	} else {
		ttimeFlagName = fmt.Sprintf("%v.ttime", cmdPrefix)
	}

	var ttimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ttimeFlagName, ttimeFlagDefault, ttimeDescription)

	return nil
}

func registerNativeStatStatsWeight(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	weightDescription := ``

	var weightFlagName string
	if cmdPrefix == "" {
		weightFlagName = "weight"
	} else {
		weightFlagName = fmt.Sprintf("%v.weight", cmdPrefix)
	}

	var weightFlagDefault int64

	_ = cmd.PersistentFlags().Int64(weightFlagName, weightFlagDefault, weightDescription)

	return nil
}

func registerNativeStatStatsWredis(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wredisDescription := ``

	var wredisFlagName string
	if cmdPrefix == "" {
		wredisFlagName = "wredis"
	} else {
		wredisFlagName = fmt.Sprintf("%v.wredis", cmdPrefix)
	}

	var wredisFlagDefault int64

	_ = cmd.PersistentFlags().Int64(wredisFlagName, wredisFlagDefault, wredisDescription)

	return nil
}

func registerNativeStatStatsWretr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wretrDescription := ``

	var wretrFlagName string
	if cmdPrefix == "" {
		wretrFlagName = "wretr"
	} else {
		wretrFlagName = fmt.Sprintf("%v.wretr", cmdPrefix)
	}

	var wretrFlagDefault int64

	_ = cmd.PersistentFlags().Int64(wretrFlagName, wretrFlagDefault, wretrDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNativeStatStatsFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, actAdded := retrieveNativeStatStatsActFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || actAdded

	err, addrAdded := retrieveNativeStatStatsAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addrAdded

	err, agentCodeAdded := retrieveNativeStatStatsAgentCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentCodeAdded

	err, agentDescAdded := retrieveNativeStatStatsAgentDescFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentDescAdded

	err, agentDurationAdded := retrieveNativeStatStatsAgentDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentDurationAdded

	err, agentFallAdded := retrieveNativeStatStatsAgentFallFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentFallAdded

	err, agentHealthAdded := retrieveNativeStatStatsAgentHealthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentHealthAdded

	err, agentRiseAdded := retrieveNativeStatStatsAgentRiseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentRiseAdded

	err, agentStatusAdded := retrieveNativeStatStatsAgentStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentStatusAdded

	err, algoAdded := retrieveNativeStatStatsAlgoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || algoAdded

	err, bckAdded := retrieveNativeStatStatsBckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bckAdded

	err, binAdded := retrieveNativeStatStatsBinFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || binAdded

	err, boutAdded := retrieveNativeStatStatsBoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || boutAdded

	err, checkCodeAdded := retrieveNativeStatStatsCheckCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkCodeAdded

	err, checkDescAdded := retrieveNativeStatStatsCheckDescFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkDescAdded

	err, checkDurationAdded := retrieveNativeStatStatsCheckDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkDurationAdded

	err, checkFallAdded := retrieveNativeStatStatsCheckFallFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkFallAdded

	err, checkHealthAdded := retrieveNativeStatStatsCheckHealthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkHealthAdded

	err, checkRiseAdded := retrieveNativeStatStatsCheckRiseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkRiseAdded

	err, checkStatusAdded := retrieveNativeStatStatsCheckStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkStatusAdded

	err, chkdownAdded := retrieveNativeStatStatsChkdownFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chkdownAdded

	err, chkfailAdded := retrieveNativeStatStatsChkfailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chkfailAdded

	err, cliAbrtAdded := retrieveNativeStatStatsCliAbrtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cliAbrtAdded

	err, compBypAdded := retrieveNativeStatStatsCompBypFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compBypAdded

	err, compInAdded := retrieveNativeStatStatsCompInFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compInAdded

	err, compOutAdded := retrieveNativeStatStatsCompOutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compOutAdded

	err, compRspAdded := retrieveNativeStatStatsCompRspFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compRspAdded

	err, connRateAdded := retrieveNativeStatStatsConnRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connRateAdded

	err, connRateMaxAdded := retrieveNativeStatStatsConnRateMaxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connRateMaxAdded

	err, connTotAdded := retrieveNativeStatStatsConnTotFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connTotAdded

	err, cookieAdded := retrieveNativeStatStatsCookieFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cookieAdded

	err, ctimeAdded := retrieveNativeStatStatsCtimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ctimeAdded

	err, dconAdded := retrieveNativeStatStatsDconFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dconAdded

	err, downtimeAdded := retrieveNativeStatStatsDowntimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || downtimeAdded

	err, dreqAdded := retrieveNativeStatStatsDreqFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dreqAdded

	err, drespAdded := retrieveNativeStatStatsDrespFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || drespAdded

	err, dsesAdded := retrieveNativeStatStatsDsesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dsesAdded

	err, econAdded := retrieveNativeStatStatsEconFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || econAdded

	err, ereqAdded := retrieveNativeStatStatsEreqFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ereqAdded

	err, erespAdded := retrieveNativeStatStatsErespFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || erespAdded

	err, hanafailAdded := retrieveNativeStatStatsHanafailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hanafailAdded

	err, hrsp1xxAdded := retrieveNativeStatStatsHrsp1xxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hrsp1xxAdded

	err, hrsp2xxAdded := retrieveNativeStatStatsHrsp2xxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hrsp2xxAdded

	err, hrsp3xxAdded := retrieveNativeStatStatsHrsp3xxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hrsp3xxAdded

	err, hrsp4xxAdded := retrieveNativeStatStatsHrsp4xxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hrsp4xxAdded

	err, hrsp5xxAdded := retrieveNativeStatStatsHrsp5xxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hrsp5xxAdded

	err, hrspOtherAdded := retrieveNativeStatStatsHrspOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hrspOtherAdded

	err, iidAdded := retrieveNativeStatStatsIidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || iidAdded

	err, interceptedAdded := retrieveNativeStatStatsInterceptedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interceptedAdded

	err, lastchgAdded := retrieveNativeStatStatsLastchgFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastchgAdded

	err, lastsessAdded := retrieveNativeStatStatsLastsessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastsessAdded

	err, lbtotAdded := retrieveNativeStatStatsLbtotFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lbtotAdded

	err, modeAdded := retrieveNativeStatStatsModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, pidAdded := retrieveNativeStatStatsPidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pidAdded

	err, qcurAdded := retrieveNativeStatStatsQcurFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || qcurAdded

	err, qlimitAdded := retrieveNativeStatStatsQlimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || qlimitAdded

	err, qmaxAdded := retrieveNativeStatStatsQmaxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || qmaxAdded

	err, qtimeAdded := retrieveNativeStatStatsQtimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || qtimeAdded

	err, rateAdded := retrieveNativeStatStatsRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rateAdded

	err, rateLimAdded := retrieveNativeStatStatsRateLimFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rateLimAdded

	err, rateMaxAdded := retrieveNativeStatStatsRateMaxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rateMaxAdded

	err, reqRateAdded := retrieveNativeStatStatsReqRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || reqRateAdded

	err, reqRateMaxAdded := retrieveNativeStatStatsReqRateMaxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || reqRateMaxAdded

	err, reqTotAdded := retrieveNativeStatStatsReqTotFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || reqTotAdded

	err, rtimeAdded := retrieveNativeStatStatsRtimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rtimeAdded

	err, scurAdded := retrieveNativeStatStatsScurFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scurAdded

	err, sidAdded := retrieveNativeStatStatsSidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sidAdded

	err, slimAdded := retrieveNativeStatStatsSlimFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slimAdded

	err, smaxAdded := retrieveNativeStatStatsSmaxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || smaxAdded

	err, srvAbrtAdded := retrieveNativeStatStatsSrvAbrtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || srvAbrtAdded

	err, statusAdded := retrieveNativeStatStatsStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, stotAdded := retrieveNativeStatStatsStotFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stotAdded

	err, throttleAdded := retrieveNativeStatStatsThrottleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || throttleAdded

	err, trackedAdded := retrieveNativeStatStatsTrackedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackedAdded

	err, ttimeAdded := retrieveNativeStatStatsTtimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ttimeAdded

	err, weightAdded := retrieveNativeStatStatsWeightFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || weightAdded

	err, wredisAdded := retrieveNativeStatStatsWredisFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wredisAdded

	err, wretrAdded := retrieveNativeStatStatsWretrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wretrAdded

	return nil, retAdded
}

func retrieveNativeStatStatsActFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	actFlagName := fmt.Sprintf("%v.act", cmdPrefix)
	if cmd.Flags().Changed(actFlagName) {

		var actFlagName string
		if cmdPrefix == "" {
			actFlagName = "act"
		} else {
			actFlagName = fmt.Sprintf("%v.act", cmdPrefix)
		}

		actFlagValue, err := cmd.Flags().GetInt64(actFlagName)
		if err != nil {
			return err, false
		}
		m.Act = &actFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsAddrFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addrFlagName := fmt.Sprintf("%v.addr", cmdPrefix)
	if cmd.Flags().Changed(addrFlagName) {

		var addrFlagName string
		if cmdPrefix == "" {
			addrFlagName = "addr"
		} else {
			addrFlagName = fmt.Sprintf("%v.addr", cmdPrefix)
		}

		addrFlagValue, err := cmd.Flags().GetString(addrFlagName)
		if err != nil {
			return err, false
		}
		m.Addr = addrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsAgentCodeFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentCodeFlagName := fmt.Sprintf("%v.agent_code", cmdPrefix)
	if cmd.Flags().Changed(agentCodeFlagName) {

		var agentCodeFlagName string
		if cmdPrefix == "" {
			agentCodeFlagName = "agent_code"
		} else {
			agentCodeFlagName = fmt.Sprintf("%v.agent_code", cmdPrefix)
		}

		agentCodeFlagValue, err := cmd.Flags().GetInt64(agentCodeFlagName)
		if err != nil {
			return err, false
		}
		m.AgentCode = &agentCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsAgentDescFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentDescFlagName := fmt.Sprintf("%v.agent_desc", cmdPrefix)
	if cmd.Flags().Changed(agentDescFlagName) {

		var agentDescFlagName string
		if cmdPrefix == "" {
			agentDescFlagName = "agent_desc"
		} else {
			agentDescFlagName = fmt.Sprintf("%v.agent_desc", cmdPrefix)
		}

		agentDescFlagValue, err := cmd.Flags().GetString(agentDescFlagName)
		if err != nil {
			return err, false
		}
		m.AgentDesc = agentDescFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsAgentDurationFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentDurationFlagName := fmt.Sprintf("%v.agent_duration", cmdPrefix)
	if cmd.Flags().Changed(agentDurationFlagName) {

		var agentDurationFlagName string
		if cmdPrefix == "" {
			agentDurationFlagName = "agent_duration"
		} else {
			agentDurationFlagName = fmt.Sprintf("%v.agent_duration", cmdPrefix)
		}

		agentDurationFlagValue, err := cmd.Flags().GetInt64(agentDurationFlagName)
		if err != nil {
			return err, false
		}
		m.AgentDuration = &agentDurationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsAgentFallFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentFallFlagName := fmt.Sprintf("%v.agent_fall", cmdPrefix)
	if cmd.Flags().Changed(agentFallFlagName) {

		var agentFallFlagName string
		if cmdPrefix == "" {
			agentFallFlagName = "agent_fall"
		} else {
			agentFallFlagName = fmt.Sprintf("%v.agent_fall", cmdPrefix)
		}

		agentFallFlagValue, err := cmd.Flags().GetInt64(agentFallFlagName)
		if err != nil {
			return err, false
		}
		m.AgentFall = &agentFallFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsAgentHealthFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentHealthFlagName := fmt.Sprintf("%v.agent_health", cmdPrefix)
	if cmd.Flags().Changed(agentHealthFlagName) {

		var agentHealthFlagName string
		if cmdPrefix == "" {
			agentHealthFlagName = "agent_health"
		} else {
			agentHealthFlagName = fmt.Sprintf("%v.agent_health", cmdPrefix)
		}

		agentHealthFlagValue, err := cmd.Flags().GetInt64(agentHealthFlagName)
		if err != nil {
			return err, false
		}
		m.AgentHealth = &agentHealthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsAgentRiseFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentRiseFlagName := fmt.Sprintf("%v.agent_rise", cmdPrefix)
	if cmd.Flags().Changed(agentRiseFlagName) {

		var agentRiseFlagName string
		if cmdPrefix == "" {
			agentRiseFlagName = "agent_rise"
		} else {
			agentRiseFlagName = fmt.Sprintf("%v.agent_rise", cmdPrefix)
		}

		agentRiseFlagValue, err := cmd.Flags().GetInt64(agentRiseFlagName)
		if err != nil {
			return err, false
		}
		m.AgentRise = &agentRiseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsAgentStatusFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentStatusFlagName := fmt.Sprintf("%v.agent_status", cmdPrefix)
	if cmd.Flags().Changed(agentStatusFlagName) {

		var agentStatusFlagName string
		if cmdPrefix == "" {
			agentStatusFlagName = "agent_status"
		} else {
			agentStatusFlagName = fmt.Sprintf("%v.agent_status", cmdPrefix)
		}

		agentStatusFlagValue, err := cmd.Flags().GetString(agentStatusFlagName)
		if err != nil {
			return err, false
		}
		m.AgentStatus = agentStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsAlgoFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	algoFlagName := fmt.Sprintf("%v.algo", cmdPrefix)
	if cmd.Flags().Changed(algoFlagName) {

		var algoFlagName string
		if cmdPrefix == "" {
			algoFlagName = "algo"
		} else {
			algoFlagName = fmt.Sprintf("%v.algo", cmdPrefix)
		}

		algoFlagValue, err := cmd.Flags().GetString(algoFlagName)
		if err != nil {
			return err, false
		}
		m.Algo = algoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsBckFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bckFlagName := fmt.Sprintf("%v.bck", cmdPrefix)
	if cmd.Flags().Changed(bckFlagName) {

		var bckFlagName string
		if cmdPrefix == "" {
			bckFlagName = "bck"
		} else {
			bckFlagName = fmt.Sprintf("%v.bck", cmdPrefix)
		}

		bckFlagValue, err := cmd.Flags().GetInt64(bckFlagName)
		if err != nil {
			return err, false
		}
		m.Bck = &bckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsBinFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	binFlagName := fmt.Sprintf("%v.bin", cmdPrefix)
	if cmd.Flags().Changed(binFlagName) {

		var binFlagName string
		if cmdPrefix == "" {
			binFlagName = "bin"
		} else {
			binFlagName = fmt.Sprintf("%v.bin", cmdPrefix)
		}

		binFlagValue, err := cmd.Flags().GetInt64(binFlagName)
		if err != nil {
			return err, false
		}
		m.Bin = &binFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsBoutFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	boutFlagName := fmt.Sprintf("%v.bout", cmdPrefix)
	if cmd.Flags().Changed(boutFlagName) {

		var boutFlagName string
		if cmdPrefix == "" {
			boutFlagName = "bout"
		} else {
			boutFlagName = fmt.Sprintf("%v.bout", cmdPrefix)
		}

		boutFlagValue, err := cmd.Flags().GetInt64(boutFlagName)
		if err != nil {
			return err, false
		}
		m.Bout = &boutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCheckCodeFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkCodeFlagName := fmt.Sprintf("%v.check_code", cmdPrefix)
	if cmd.Flags().Changed(checkCodeFlagName) {

		var checkCodeFlagName string
		if cmdPrefix == "" {
			checkCodeFlagName = "check_code"
		} else {
			checkCodeFlagName = fmt.Sprintf("%v.check_code", cmdPrefix)
		}

		checkCodeFlagValue, err := cmd.Flags().GetInt64(checkCodeFlagName)
		if err != nil {
			return err, false
		}
		m.CheckCode = &checkCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCheckDescFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkDescFlagName := fmt.Sprintf("%v.check_desc", cmdPrefix)
	if cmd.Flags().Changed(checkDescFlagName) {

		var checkDescFlagName string
		if cmdPrefix == "" {
			checkDescFlagName = "check_desc"
		} else {
			checkDescFlagName = fmt.Sprintf("%v.check_desc", cmdPrefix)
		}

		checkDescFlagValue, err := cmd.Flags().GetString(checkDescFlagName)
		if err != nil {
			return err, false
		}
		m.CheckDesc = checkDescFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCheckDurationFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkDurationFlagName := fmt.Sprintf("%v.check_duration", cmdPrefix)
	if cmd.Flags().Changed(checkDurationFlagName) {

		var checkDurationFlagName string
		if cmdPrefix == "" {
			checkDurationFlagName = "check_duration"
		} else {
			checkDurationFlagName = fmt.Sprintf("%v.check_duration", cmdPrefix)
		}

		checkDurationFlagValue, err := cmd.Flags().GetInt64(checkDurationFlagName)
		if err != nil {
			return err, false
		}
		m.CheckDuration = &checkDurationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCheckFallFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkFallFlagName := fmt.Sprintf("%v.check_fall", cmdPrefix)
	if cmd.Flags().Changed(checkFallFlagName) {

		var checkFallFlagName string
		if cmdPrefix == "" {
			checkFallFlagName = "check_fall"
		} else {
			checkFallFlagName = fmt.Sprintf("%v.check_fall", cmdPrefix)
		}

		checkFallFlagValue, err := cmd.Flags().GetInt64(checkFallFlagName)
		if err != nil {
			return err, false
		}
		m.CheckFall = &checkFallFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCheckHealthFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkHealthFlagName := fmt.Sprintf("%v.check_health", cmdPrefix)
	if cmd.Flags().Changed(checkHealthFlagName) {

		var checkHealthFlagName string
		if cmdPrefix == "" {
			checkHealthFlagName = "check_health"
		} else {
			checkHealthFlagName = fmt.Sprintf("%v.check_health", cmdPrefix)
		}

		checkHealthFlagValue, err := cmd.Flags().GetInt64(checkHealthFlagName)
		if err != nil {
			return err, false
		}
		m.CheckHealth = &checkHealthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCheckRiseFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkRiseFlagName := fmt.Sprintf("%v.check_rise", cmdPrefix)
	if cmd.Flags().Changed(checkRiseFlagName) {

		var checkRiseFlagName string
		if cmdPrefix == "" {
			checkRiseFlagName = "check_rise"
		} else {
			checkRiseFlagName = fmt.Sprintf("%v.check_rise", cmdPrefix)
		}

		checkRiseFlagValue, err := cmd.Flags().GetInt64(checkRiseFlagName)
		if err != nil {
			return err, false
		}
		m.CheckRise = &checkRiseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCheckStatusFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkStatusFlagName := fmt.Sprintf("%v.check_status", cmdPrefix)
	if cmd.Flags().Changed(checkStatusFlagName) {

		var checkStatusFlagName string
		if cmdPrefix == "" {
			checkStatusFlagName = "check_status"
		} else {
			checkStatusFlagName = fmt.Sprintf("%v.check_status", cmdPrefix)
		}

		checkStatusFlagValue, err := cmd.Flags().GetString(checkStatusFlagName)
		if err != nil {
			return err, false
		}
		m.CheckStatus = checkStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsChkdownFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	chkdownFlagName := fmt.Sprintf("%v.chkdown", cmdPrefix)
	if cmd.Flags().Changed(chkdownFlagName) {

		var chkdownFlagName string
		if cmdPrefix == "" {
			chkdownFlagName = "chkdown"
		} else {
			chkdownFlagName = fmt.Sprintf("%v.chkdown", cmdPrefix)
		}

		chkdownFlagValue, err := cmd.Flags().GetInt64(chkdownFlagName)
		if err != nil {
			return err, false
		}
		m.Chkdown = &chkdownFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsChkfailFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	chkfailFlagName := fmt.Sprintf("%v.chkfail", cmdPrefix)
	if cmd.Flags().Changed(chkfailFlagName) {

		var chkfailFlagName string
		if cmdPrefix == "" {
			chkfailFlagName = "chkfail"
		} else {
			chkfailFlagName = fmt.Sprintf("%v.chkfail", cmdPrefix)
		}

		chkfailFlagValue, err := cmd.Flags().GetInt64(chkfailFlagName)
		if err != nil {
			return err, false
		}
		m.Chkfail = &chkfailFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCliAbrtFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cliAbrtFlagName := fmt.Sprintf("%v.cli_abrt", cmdPrefix)
	if cmd.Flags().Changed(cliAbrtFlagName) {

		var cliAbrtFlagName string
		if cmdPrefix == "" {
			cliAbrtFlagName = "cli_abrt"
		} else {
			cliAbrtFlagName = fmt.Sprintf("%v.cli_abrt", cmdPrefix)
		}

		cliAbrtFlagValue, err := cmd.Flags().GetInt64(cliAbrtFlagName)
		if err != nil {
			return err, false
		}
		m.CliAbrt = &cliAbrtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCompBypFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	compBypFlagName := fmt.Sprintf("%v.comp_byp", cmdPrefix)
	if cmd.Flags().Changed(compBypFlagName) {

		var compBypFlagName string
		if cmdPrefix == "" {
			compBypFlagName = "comp_byp"
		} else {
			compBypFlagName = fmt.Sprintf("%v.comp_byp", cmdPrefix)
		}

		compBypFlagValue, err := cmd.Flags().GetInt64(compBypFlagName)
		if err != nil {
			return err, false
		}
		m.CompByp = &compBypFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCompInFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	compInFlagName := fmt.Sprintf("%v.comp_in", cmdPrefix)
	if cmd.Flags().Changed(compInFlagName) {

		var compInFlagName string
		if cmdPrefix == "" {
			compInFlagName = "comp_in"
		} else {
			compInFlagName = fmt.Sprintf("%v.comp_in", cmdPrefix)
		}

		compInFlagValue, err := cmd.Flags().GetInt64(compInFlagName)
		if err != nil {
			return err, false
		}
		m.CompIn = &compInFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCompOutFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	compOutFlagName := fmt.Sprintf("%v.comp_out", cmdPrefix)
	if cmd.Flags().Changed(compOutFlagName) {

		var compOutFlagName string
		if cmdPrefix == "" {
			compOutFlagName = "comp_out"
		} else {
			compOutFlagName = fmt.Sprintf("%v.comp_out", cmdPrefix)
		}

		compOutFlagValue, err := cmd.Flags().GetInt64(compOutFlagName)
		if err != nil {
			return err, false
		}
		m.CompOut = &compOutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCompRspFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	compRspFlagName := fmt.Sprintf("%v.comp_rsp", cmdPrefix)
	if cmd.Flags().Changed(compRspFlagName) {

		var compRspFlagName string
		if cmdPrefix == "" {
			compRspFlagName = "comp_rsp"
		} else {
			compRspFlagName = fmt.Sprintf("%v.comp_rsp", cmdPrefix)
		}

		compRspFlagValue, err := cmd.Flags().GetInt64(compRspFlagName)
		if err != nil {
			return err, false
		}
		m.CompRsp = &compRspFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsConnRateFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connRateFlagName := fmt.Sprintf("%v.conn_rate", cmdPrefix)
	if cmd.Flags().Changed(connRateFlagName) {

		var connRateFlagName string
		if cmdPrefix == "" {
			connRateFlagName = "conn_rate"
		} else {
			connRateFlagName = fmt.Sprintf("%v.conn_rate", cmdPrefix)
		}

		connRateFlagValue, err := cmd.Flags().GetInt64(connRateFlagName)
		if err != nil {
			return err, false
		}
		m.ConnRate = &connRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsConnRateMaxFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connRateMaxFlagName := fmt.Sprintf("%v.conn_rate_max", cmdPrefix)
	if cmd.Flags().Changed(connRateMaxFlagName) {

		var connRateMaxFlagName string
		if cmdPrefix == "" {
			connRateMaxFlagName = "conn_rate_max"
		} else {
			connRateMaxFlagName = fmt.Sprintf("%v.conn_rate_max", cmdPrefix)
		}

		connRateMaxFlagValue, err := cmd.Flags().GetInt64(connRateMaxFlagName)
		if err != nil {
			return err, false
		}
		m.ConnRateMax = &connRateMaxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsConnTotFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connTotFlagName := fmt.Sprintf("%v.conn_tot", cmdPrefix)
	if cmd.Flags().Changed(connTotFlagName) {

		var connTotFlagName string
		if cmdPrefix == "" {
			connTotFlagName = "conn_tot"
		} else {
			connTotFlagName = fmt.Sprintf("%v.conn_tot", cmdPrefix)
		}

		connTotFlagValue, err := cmd.Flags().GetInt64(connTotFlagName)
		if err != nil {
			return err, false
		}
		m.ConnTot = &connTotFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCookieFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cookieFlagName := fmt.Sprintf("%v.cookie", cmdPrefix)
	if cmd.Flags().Changed(cookieFlagName) {

		var cookieFlagName string
		if cmdPrefix == "" {
			cookieFlagName = "cookie"
		} else {
			cookieFlagName = fmt.Sprintf("%v.cookie", cmdPrefix)
		}

		cookieFlagValue, err := cmd.Flags().GetString(cookieFlagName)
		if err != nil {
			return err, false
		}
		m.Cookie = cookieFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsCtimeFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ctimeFlagName := fmt.Sprintf("%v.ctime", cmdPrefix)
	if cmd.Flags().Changed(ctimeFlagName) {

		var ctimeFlagName string
		if cmdPrefix == "" {
			ctimeFlagName = "ctime"
		} else {
			ctimeFlagName = fmt.Sprintf("%v.ctime", cmdPrefix)
		}

		ctimeFlagValue, err := cmd.Flags().GetInt64(ctimeFlagName)
		if err != nil {
			return err, false
		}
		m.Ctime = &ctimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsDconFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dconFlagName := fmt.Sprintf("%v.dcon", cmdPrefix)
	if cmd.Flags().Changed(dconFlagName) {

		var dconFlagName string
		if cmdPrefix == "" {
			dconFlagName = "dcon"
		} else {
			dconFlagName = fmt.Sprintf("%v.dcon", cmdPrefix)
		}

		dconFlagValue, err := cmd.Flags().GetInt64(dconFlagName)
		if err != nil {
			return err, false
		}
		m.Dcon = &dconFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsDowntimeFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	downtimeFlagName := fmt.Sprintf("%v.downtime", cmdPrefix)
	if cmd.Flags().Changed(downtimeFlagName) {

		var downtimeFlagName string
		if cmdPrefix == "" {
			downtimeFlagName = "downtime"
		} else {
			downtimeFlagName = fmt.Sprintf("%v.downtime", cmdPrefix)
		}

		downtimeFlagValue, err := cmd.Flags().GetInt64(downtimeFlagName)
		if err != nil {
			return err, false
		}
		m.Downtime = &downtimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsDreqFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dreqFlagName := fmt.Sprintf("%v.dreq", cmdPrefix)
	if cmd.Flags().Changed(dreqFlagName) {

		var dreqFlagName string
		if cmdPrefix == "" {
			dreqFlagName = "dreq"
		} else {
			dreqFlagName = fmt.Sprintf("%v.dreq", cmdPrefix)
		}

		dreqFlagValue, err := cmd.Flags().GetInt64(dreqFlagName)
		if err != nil {
			return err, false
		}
		m.Dreq = &dreqFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsDrespFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	drespFlagName := fmt.Sprintf("%v.dresp", cmdPrefix)
	if cmd.Flags().Changed(drespFlagName) {

		var drespFlagName string
		if cmdPrefix == "" {
			drespFlagName = "dresp"
		} else {
			drespFlagName = fmt.Sprintf("%v.dresp", cmdPrefix)
		}

		drespFlagValue, err := cmd.Flags().GetInt64(drespFlagName)
		if err != nil {
			return err, false
		}
		m.Dresp = &drespFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsDsesFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dsesFlagName := fmt.Sprintf("%v.dses", cmdPrefix)
	if cmd.Flags().Changed(dsesFlagName) {

		var dsesFlagName string
		if cmdPrefix == "" {
			dsesFlagName = "dses"
		} else {
			dsesFlagName = fmt.Sprintf("%v.dses", cmdPrefix)
		}

		dsesFlagValue, err := cmd.Flags().GetInt64(dsesFlagName)
		if err != nil {
			return err, false
		}
		m.Dses = &dsesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsEconFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	econFlagName := fmt.Sprintf("%v.econ", cmdPrefix)
	if cmd.Flags().Changed(econFlagName) {

		var econFlagName string
		if cmdPrefix == "" {
			econFlagName = "econ"
		} else {
			econFlagName = fmt.Sprintf("%v.econ", cmdPrefix)
		}

		econFlagValue, err := cmd.Flags().GetInt64(econFlagName)
		if err != nil {
			return err, false
		}
		m.Econ = &econFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsEreqFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ereqFlagName := fmt.Sprintf("%v.ereq", cmdPrefix)
	if cmd.Flags().Changed(ereqFlagName) {

		var ereqFlagName string
		if cmdPrefix == "" {
			ereqFlagName = "ereq"
		} else {
			ereqFlagName = fmt.Sprintf("%v.ereq", cmdPrefix)
		}

		ereqFlagValue, err := cmd.Flags().GetInt64(ereqFlagName)
		if err != nil {
			return err, false
		}
		m.Ereq = &ereqFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsErespFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	erespFlagName := fmt.Sprintf("%v.eresp", cmdPrefix)
	if cmd.Flags().Changed(erespFlagName) {

		var erespFlagName string
		if cmdPrefix == "" {
			erespFlagName = "eresp"
		} else {
			erespFlagName = fmt.Sprintf("%v.eresp", cmdPrefix)
		}

		erespFlagValue, err := cmd.Flags().GetInt64(erespFlagName)
		if err != nil {
			return err, false
		}
		m.Eresp = &erespFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsHanafailFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hanafailFlagName := fmt.Sprintf("%v.hanafail", cmdPrefix)
	if cmd.Flags().Changed(hanafailFlagName) {

		var hanafailFlagName string
		if cmdPrefix == "" {
			hanafailFlagName = "hanafail"
		} else {
			hanafailFlagName = fmt.Sprintf("%v.hanafail", cmdPrefix)
		}

		hanafailFlagValue, err := cmd.Flags().GetString(hanafailFlagName)
		if err != nil {
			return err, false
		}
		m.Hanafail = hanafailFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsHrsp1xxFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hrsp1xxFlagName := fmt.Sprintf("%v.hrsp_1xx", cmdPrefix)
	if cmd.Flags().Changed(hrsp1xxFlagName) {

		var hrsp1xxFlagName string
		if cmdPrefix == "" {
			hrsp1xxFlagName = "hrsp_1xx"
		} else {
			hrsp1xxFlagName = fmt.Sprintf("%v.hrsp_1xx", cmdPrefix)
		}

		hrsp1xxFlagValue, err := cmd.Flags().GetInt64(hrsp1xxFlagName)
		if err != nil {
			return err, false
		}
		m.Hrsp1xx = &hrsp1xxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsHrsp2xxFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hrsp2xxFlagName := fmt.Sprintf("%v.hrsp_2xx", cmdPrefix)
	if cmd.Flags().Changed(hrsp2xxFlagName) {

		var hrsp2xxFlagName string
		if cmdPrefix == "" {
			hrsp2xxFlagName = "hrsp_2xx"
		} else {
			hrsp2xxFlagName = fmt.Sprintf("%v.hrsp_2xx", cmdPrefix)
		}

		hrsp2xxFlagValue, err := cmd.Flags().GetInt64(hrsp2xxFlagName)
		if err != nil {
			return err, false
		}
		m.Hrsp2xx = &hrsp2xxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsHrsp3xxFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hrsp3xxFlagName := fmt.Sprintf("%v.hrsp_3xx", cmdPrefix)
	if cmd.Flags().Changed(hrsp3xxFlagName) {

		var hrsp3xxFlagName string
		if cmdPrefix == "" {
			hrsp3xxFlagName = "hrsp_3xx"
		} else {
			hrsp3xxFlagName = fmt.Sprintf("%v.hrsp_3xx", cmdPrefix)
		}

		hrsp3xxFlagValue, err := cmd.Flags().GetInt64(hrsp3xxFlagName)
		if err != nil {
			return err, false
		}
		m.Hrsp3xx = &hrsp3xxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsHrsp4xxFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hrsp4xxFlagName := fmt.Sprintf("%v.hrsp_4xx", cmdPrefix)
	if cmd.Flags().Changed(hrsp4xxFlagName) {

		var hrsp4xxFlagName string
		if cmdPrefix == "" {
			hrsp4xxFlagName = "hrsp_4xx"
		} else {
			hrsp4xxFlagName = fmt.Sprintf("%v.hrsp_4xx", cmdPrefix)
		}

		hrsp4xxFlagValue, err := cmd.Flags().GetInt64(hrsp4xxFlagName)
		if err != nil {
			return err, false
		}
		m.Hrsp4xx = &hrsp4xxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsHrsp5xxFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hrsp5xxFlagName := fmt.Sprintf("%v.hrsp_5xx", cmdPrefix)
	if cmd.Flags().Changed(hrsp5xxFlagName) {

		var hrsp5xxFlagName string
		if cmdPrefix == "" {
			hrsp5xxFlagName = "hrsp_5xx"
		} else {
			hrsp5xxFlagName = fmt.Sprintf("%v.hrsp_5xx", cmdPrefix)
		}

		hrsp5xxFlagValue, err := cmd.Flags().GetInt64(hrsp5xxFlagName)
		if err != nil {
			return err, false
		}
		m.Hrsp5xx = &hrsp5xxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsHrspOtherFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hrspOtherFlagName := fmt.Sprintf("%v.hrsp_other", cmdPrefix)
	if cmd.Flags().Changed(hrspOtherFlagName) {

		var hrspOtherFlagName string
		if cmdPrefix == "" {
			hrspOtherFlagName = "hrsp_other"
		} else {
			hrspOtherFlagName = fmt.Sprintf("%v.hrsp_other", cmdPrefix)
		}

		hrspOtherFlagValue, err := cmd.Flags().GetInt64(hrspOtherFlagName)
		if err != nil {
			return err, false
		}
		m.HrspOther = &hrspOtherFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsIidFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	iidFlagName := fmt.Sprintf("%v.iid", cmdPrefix)
	if cmd.Flags().Changed(iidFlagName) {

		var iidFlagName string
		if cmdPrefix == "" {
			iidFlagName = "iid"
		} else {
			iidFlagName = fmt.Sprintf("%v.iid", cmdPrefix)
		}

		iidFlagValue, err := cmd.Flags().GetInt64(iidFlagName)
		if err != nil {
			return err, false
		}
		m.Iid = &iidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsInterceptedFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interceptedFlagName := fmt.Sprintf("%v.intercepted", cmdPrefix)
	if cmd.Flags().Changed(interceptedFlagName) {

		var interceptedFlagName string
		if cmdPrefix == "" {
			interceptedFlagName = "intercepted"
		} else {
			interceptedFlagName = fmt.Sprintf("%v.intercepted", cmdPrefix)
		}

		interceptedFlagValue, err := cmd.Flags().GetInt64(interceptedFlagName)
		if err != nil {
			return err, false
		}
		m.Intercepted = &interceptedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsLastchgFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastchgFlagName := fmt.Sprintf("%v.lastchg", cmdPrefix)
	if cmd.Flags().Changed(lastchgFlagName) {

		var lastchgFlagName string
		if cmdPrefix == "" {
			lastchgFlagName = "lastchg"
		} else {
			lastchgFlagName = fmt.Sprintf("%v.lastchg", cmdPrefix)
		}

		lastchgFlagValue, err := cmd.Flags().GetInt64(lastchgFlagName)
		if err != nil {
			return err, false
		}
		m.Lastchg = &lastchgFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsLastsessFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastsessFlagName := fmt.Sprintf("%v.lastsess", cmdPrefix)
	if cmd.Flags().Changed(lastsessFlagName) {

		var lastsessFlagName string
		if cmdPrefix == "" {
			lastsessFlagName = "lastsess"
		} else {
			lastsessFlagName = fmt.Sprintf("%v.lastsess", cmdPrefix)
		}

		lastsessFlagValue, err := cmd.Flags().GetInt64(lastsessFlagName)
		if err != nil {
			return err, false
		}
		m.Lastsess = &lastsessFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsLbtotFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lbtotFlagName := fmt.Sprintf("%v.lbtot", cmdPrefix)
	if cmd.Flags().Changed(lbtotFlagName) {

		var lbtotFlagName string
		if cmdPrefix == "" {
			lbtotFlagName = "lbtot"
		} else {
			lbtotFlagName = fmt.Sprintf("%v.lbtot", cmdPrefix)
		}

		lbtotFlagValue, err := cmd.Flags().GetInt64(lbtotFlagName)
		if err != nil {
			return err, false
		}
		m.Lbtot = &lbtotFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsModeFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsPidFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pidFlagName := fmt.Sprintf("%v.pid", cmdPrefix)
	if cmd.Flags().Changed(pidFlagName) {

		var pidFlagName string
		if cmdPrefix == "" {
			pidFlagName = "pid"
		} else {
			pidFlagName = fmt.Sprintf("%v.pid", cmdPrefix)
		}

		pidFlagValue, err := cmd.Flags().GetInt64(pidFlagName)
		if err != nil {
			return err, false
		}
		m.Pid = &pidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsQcurFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	qcurFlagName := fmt.Sprintf("%v.qcur", cmdPrefix)
	if cmd.Flags().Changed(qcurFlagName) {

		var qcurFlagName string
		if cmdPrefix == "" {
			qcurFlagName = "qcur"
		} else {
			qcurFlagName = fmt.Sprintf("%v.qcur", cmdPrefix)
		}

		qcurFlagValue, err := cmd.Flags().GetInt64(qcurFlagName)
		if err != nil {
			return err, false
		}
		m.Qcur = &qcurFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsQlimitFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	qlimitFlagName := fmt.Sprintf("%v.qlimit", cmdPrefix)
	if cmd.Flags().Changed(qlimitFlagName) {

		var qlimitFlagName string
		if cmdPrefix == "" {
			qlimitFlagName = "qlimit"
		} else {
			qlimitFlagName = fmt.Sprintf("%v.qlimit", cmdPrefix)
		}

		qlimitFlagValue, err := cmd.Flags().GetInt64(qlimitFlagName)
		if err != nil {
			return err, false
		}
		m.Qlimit = &qlimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsQmaxFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	qmaxFlagName := fmt.Sprintf("%v.qmax", cmdPrefix)
	if cmd.Flags().Changed(qmaxFlagName) {

		var qmaxFlagName string
		if cmdPrefix == "" {
			qmaxFlagName = "qmax"
		} else {
			qmaxFlagName = fmt.Sprintf("%v.qmax", cmdPrefix)
		}

		qmaxFlagValue, err := cmd.Flags().GetInt64(qmaxFlagName)
		if err != nil {
			return err, false
		}
		m.Qmax = &qmaxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsQtimeFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	qtimeFlagName := fmt.Sprintf("%v.qtime", cmdPrefix)
	if cmd.Flags().Changed(qtimeFlagName) {

		var qtimeFlagName string
		if cmdPrefix == "" {
			qtimeFlagName = "qtime"
		} else {
			qtimeFlagName = fmt.Sprintf("%v.qtime", cmdPrefix)
		}

		qtimeFlagValue, err := cmd.Flags().GetInt64(qtimeFlagName)
		if err != nil {
			return err, false
		}
		m.Qtime = &qtimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsRateFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rateFlagName := fmt.Sprintf("%v.rate", cmdPrefix)
	if cmd.Flags().Changed(rateFlagName) {

		var rateFlagName string
		if cmdPrefix == "" {
			rateFlagName = "rate"
		} else {
			rateFlagName = fmt.Sprintf("%v.rate", cmdPrefix)
		}

		rateFlagValue, err := cmd.Flags().GetInt64(rateFlagName)
		if err != nil {
			return err, false
		}
		m.Rate = &rateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsRateLimFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rateLimFlagName := fmt.Sprintf("%v.rate_lim", cmdPrefix)
	if cmd.Flags().Changed(rateLimFlagName) {

		var rateLimFlagName string
		if cmdPrefix == "" {
			rateLimFlagName = "rate_lim"
		} else {
			rateLimFlagName = fmt.Sprintf("%v.rate_lim", cmdPrefix)
		}

		rateLimFlagValue, err := cmd.Flags().GetInt64(rateLimFlagName)
		if err != nil {
			return err, false
		}
		m.RateLim = &rateLimFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsRateMaxFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rateMaxFlagName := fmt.Sprintf("%v.rate_max", cmdPrefix)
	if cmd.Flags().Changed(rateMaxFlagName) {

		var rateMaxFlagName string
		if cmdPrefix == "" {
			rateMaxFlagName = "rate_max"
		} else {
			rateMaxFlagName = fmt.Sprintf("%v.rate_max", cmdPrefix)
		}

		rateMaxFlagValue, err := cmd.Flags().GetInt64(rateMaxFlagName)
		if err != nil {
			return err, false
		}
		m.RateMax = &rateMaxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsReqRateFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	reqRateFlagName := fmt.Sprintf("%v.req_rate", cmdPrefix)
	if cmd.Flags().Changed(reqRateFlagName) {

		var reqRateFlagName string
		if cmdPrefix == "" {
			reqRateFlagName = "req_rate"
		} else {
			reqRateFlagName = fmt.Sprintf("%v.req_rate", cmdPrefix)
		}

		reqRateFlagValue, err := cmd.Flags().GetInt64(reqRateFlagName)
		if err != nil {
			return err, false
		}
		m.ReqRate = &reqRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsReqRateMaxFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	reqRateMaxFlagName := fmt.Sprintf("%v.req_rate_max", cmdPrefix)
	if cmd.Flags().Changed(reqRateMaxFlagName) {

		var reqRateMaxFlagName string
		if cmdPrefix == "" {
			reqRateMaxFlagName = "req_rate_max"
		} else {
			reqRateMaxFlagName = fmt.Sprintf("%v.req_rate_max", cmdPrefix)
		}

		reqRateMaxFlagValue, err := cmd.Flags().GetInt64(reqRateMaxFlagName)
		if err != nil {
			return err, false
		}
		m.ReqRateMax = &reqRateMaxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsReqTotFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	reqTotFlagName := fmt.Sprintf("%v.req_tot", cmdPrefix)
	if cmd.Flags().Changed(reqTotFlagName) {

		var reqTotFlagName string
		if cmdPrefix == "" {
			reqTotFlagName = "req_tot"
		} else {
			reqTotFlagName = fmt.Sprintf("%v.req_tot", cmdPrefix)
		}

		reqTotFlagValue, err := cmd.Flags().GetInt64(reqTotFlagName)
		if err != nil {
			return err, false
		}
		m.ReqTot = &reqTotFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsRtimeFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rtimeFlagName := fmt.Sprintf("%v.rtime", cmdPrefix)
	if cmd.Flags().Changed(rtimeFlagName) {

		var rtimeFlagName string
		if cmdPrefix == "" {
			rtimeFlagName = "rtime"
		} else {
			rtimeFlagName = fmt.Sprintf("%v.rtime", cmdPrefix)
		}

		rtimeFlagValue, err := cmd.Flags().GetInt64(rtimeFlagName)
		if err != nil {
			return err, false
		}
		m.Rtime = &rtimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsScurFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scurFlagName := fmt.Sprintf("%v.scur", cmdPrefix)
	if cmd.Flags().Changed(scurFlagName) {

		var scurFlagName string
		if cmdPrefix == "" {
			scurFlagName = "scur"
		} else {
			scurFlagName = fmt.Sprintf("%v.scur", cmdPrefix)
		}

		scurFlagValue, err := cmd.Flags().GetInt64(scurFlagName)
		if err != nil {
			return err, false
		}
		m.Scur = &scurFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsSidFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sidFlagName := fmt.Sprintf("%v.sid", cmdPrefix)
	if cmd.Flags().Changed(sidFlagName) {

		var sidFlagName string
		if cmdPrefix == "" {
			sidFlagName = "sid"
		} else {
			sidFlagName = fmt.Sprintf("%v.sid", cmdPrefix)
		}

		sidFlagValue, err := cmd.Flags().GetInt64(sidFlagName)
		if err != nil {
			return err, false
		}
		m.Sid = &sidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsSlimFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slimFlagName := fmt.Sprintf("%v.slim", cmdPrefix)
	if cmd.Flags().Changed(slimFlagName) {

		var slimFlagName string
		if cmdPrefix == "" {
			slimFlagName = "slim"
		} else {
			slimFlagName = fmt.Sprintf("%v.slim", cmdPrefix)
		}

		slimFlagValue, err := cmd.Flags().GetInt64(slimFlagName)
		if err != nil {
			return err, false
		}
		m.Slim = &slimFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsSmaxFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	smaxFlagName := fmt.Sprintf("%v.smax", cmdPrefix)
	if cmd.Flags().Changed(smaxFlagName) {

		var smaxFlagName string
		if cmdPrefix == "" {
			smaxFlagName = "smax"
		} else {
			smaxFlagName = fmt.Sprintf("%v.smax", cmdPrefix)
		}

		smaxFlagValue, err := cmd.Flags().GetInt64(smaxFlagName)
		if err != nil {
			return err, false
		}
		m.Smax = &smaxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsSrvAbrtFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	srvAbrtFlagName := fmt.Sprintf("%v.srv_abrt", cmdPrefix)
	if cmd.Flags().Changed(srvAbrtFlagName) {

		var srvAbrtFlagName string
		if cmdPrefix == "" {
			srvAbrtFlagName = "srv_abrt"
		} else {
			srvAbrtFlagName = fmt.Sprintf("%v.srv_abrt", cmdPrefix)
		}

		srvAbrtFlagValue, err := cmd.Flags().GetInt64(srvAbrtFlagName)
		if err != nil {
			return err, false
		}
		m.SrvAbrt = &srvAbrtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsStatusFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsStotFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stotFlagName := fmt.Sprintf("%v.stot", cmdPrefix)
	if cmd.Flags().Changed(stotFlagName) {

		var stotFlagName string
		if cmdPrefix == "" {
			stotFlagName = "stot"
		} else {
			stotFlagName = fmt.Sprintf("%v.stot", cmdPrefix)
		}

		stotFlagValue, err := cmd.Flags().GetInt64(stotFlagName)
		if err != nil {
			return err, false
		}
		m.Stot = &stotFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsThrottleFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	throttleFlagName := fmt.Sprintf("%v.throttle", cmdPrefix)
	if cmd.Flags().Changed(throttleFlagName) {

		var throttleFlagName string
		if cmdPrefix == "" {
			throttleFlagName = "throttle"
		} else {
			throttleFlagName = fmt.Sprintf("%v.throttle", cmdPrefix)
		}

		throttleFlagValue, err := cmd.Flags().GetInt64(throttleFlagName)
		if err != nil {
			return err, false
		}
		m.Throttle = &throttleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsTrackedFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackedFlagName := fmt.Sprintf("%v.tracked", cmdPrefix)
	if cmd.Flags().Changed(trackedFlagName) {

		var trackedFlagName string
		if cmdPrefix == "" {
			trackedFlagName = "tracked"
		} else {
			trackedFlagName = fmt.Sprintf("%v.tracked", cmdPrefix)
		}

		trackedFlagValue, err := cmd.Flags().GetString(trackedFlagName)
		if err != nil {
			return err, false
		}
		m.Tracked = trackedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsTtimeFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ttimeFlagName := fmt.Sprintf("%v.ttime", cmdPrefix)
	if cmd.Flags().Changed(ttimeFlagName) {

		var ttimeFlagName string
		if cmdPrefix == "" {
			ttimeFlagName = "ttime"
		} else {
			ttimeFlagName = fmt.Sprintf("%v.ttime", cmdPrefix)
		}

		ttimeFlagValue, err := cmd.Flags().GetInt64(ttimeFlagName)
		if err != nil {
			return err, false
		}
		m.Ttime = &ttimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsWeightFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	weightFlagName := fmt.Sprintf("%v.weight", cmdPrefix)
	if cmd.Flags().Changed(weightFlagName) {

		var weightFlagName string
		if cmdPrefix == "" {
			weightFlagName = "weight"
		} else {
			weightFlagName = fmt.Sprintf("%v.weight", cmdPrefix)
		}

		weightFlagValue, err := cmd.Flags().GetInt64(weightFlagName)
		if err != nil {
			return err, false
		}
		m.Weight = &weightFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsWredisFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wredisFlagName := fmt.Sprintf("%v.wredis", cmdPrefix)
	if cmd.Flags().Changed(wredisFlagName) {

		var wredisFlagName string
		if cmdPrefix == "" {
			wredisFlagName = "wredis"
		} else {
			wredisFlagName = fmt.Sprintf("%v.wredis", cmdPrefix)
		}

		wredisFlagValue, err := cmd.Flags().GetInt64(wredisFlagName)
		if err != nil {
			return err, false
		}
		m.Wredis = &wredisFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatStatsWretrFlags(depth int, m *models.NativeStatStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wretrFlagName := fmt.Sprintf("%v.wretr", cmdPrefix)
	if cmd.Flags().Changed(wretrFlagName) {

		var wretrFlagName string
		if cmdPrefix == "" {
			wretrFlagName = "wretr"
		} else {
			wretrFlagName = fmt.Sprintf("%v.wretr", cmdPrefix)
		}

		wretrFlagValue, err := cmd.Flags().GetInt64(wretrFlagName)
		if err != nil {
			return err, false
		}
		m.Wretr = &wretrFlagValue

		retAdded = true
	}

	return nil, retAdded
}
