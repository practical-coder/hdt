// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/practical-coder/hdt/client/stick_table"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationStickTableSetStickTableEntriesCmd returns a cmd to handle operation setStickTableEntries
func makeOperationStickTableSetStickTableEntriesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "setStickTableEntries",
		Short: `Create or update a stick-table entry in the table.`,
		RunE:  runOperationStickTableSetStickTableEntries,
	}

	if err := registerOperationStickTableSetStickTableEntriesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationStickTableSetStickTableEntries uses cmd flags to call endpoint api
func runOperationStickTableSetStickTableEntries(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := stick_table.NewSetStickTableEntriesParams()
	if err, _ := retrieveOperationStickTableSetStickTableEntriesProcessFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStickTableSetStickTableEntriesStickTableFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStickTableSetStickTableEntriesStickTableEntryFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationStickTableSetStickTableEntriesResult(appCli.StickTable.SetStickTableEntries(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationStickTableSetStickTableEntriesParamFlags registers all flags needed to fill params
func registerOperationStickTableSetStickTableEntriesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationStickTableSetStickTableEntriesProcessParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStickTableSetStickTableEntriesStickTableParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStickTableSetStickTableEntriesStickTableEntryParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationStickTableSetStickTableEntriesProcessParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	processDescription := `Required. Process number if master-worker mode, if not only first process is returned`

	var processFlagName string
	if cmdPrefix == "" {
		processFlagName = "process"
	} else {
		processFlagName = fmt.Sprintf("%v.process", cmdPrefix)
	}

	var processFlagDefault int64

	_ = cmd.PersistentFlags().Int64(processFlagName, processFlagDefault, processDescription)

	return nil
}
func registerOperationStickTableSetStickTableEntriesStickTableParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	stickTableDescription := `Required. Stick table name`

	var stickTableFlagName string
	if cmdPrefix == "" {
		stickTableFlagName = "stick_table"
	} else {
		stickTableFlagName = fmt.Sprintf("%v.stick_table", cmdPrefix)
	}

	var stickTableFlagDefault string

	_ = cmd.PersistentFlags().String(stickTableFlagName, stickTableFlagDefault, stickTableDescription)

	return nil
}
func registerOperationStickTableSetStickTableEntriesStickTableEntryParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var stickTableEntryFlagName string
	if cmdPrefix == "" {
		stickTableEntryFlagName = "stick_table_entry"
	} else {
		stickTableEntryFlagName = fmt.Sprintf("%v.stick_table_entry", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(stickTableEntryFlagName, "", "Optional json string for [stick_table_entry]. Stick table entry")

	// add flags for body
	if err := registerModelSetStickTableEntriesBodyFlags(0, "setStickTableEntriesBody", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationStickTableSetStickTableEntriesProcessFlag(m *stick_table.SetStickTableEntriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("process") {

		var processFlagName string
		if cmdPrefix == "" {
			processFlagName = "process"
		} else {
			processFlagName = fmt.Sprintf("%v.process", cmdPrefix)
		}

		processFlagValue, err := cmd.Flags().GetInt64(processFlagName)
		if err != nil {
			return err, false
		}
		m.Process = processFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStickTableSetStickTableEntriesStickTableFlag(m *stick_table.SetStickTableEntriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stick_table") {

		var stickTableFlagName string
		if cmdPrefix == "" {
			stickTableFlagName = "stick_table"
		} else {
			stickTableFlagName = fmt.Sprintf("%v.stick_table", cmdPrefix)
		}

		stickTableFlagValue, err := cmd.Flags().GetString(stickTableFlagName)
		if err != nil {
			return err, false
		}
		m.StickTable = stickTableFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStickTableSetStickTableEntriesStickTableEntryFlag(m *stick_table.SetStickTableEntriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stick_table_entry") {
		// Read stick_table_entry string from cmd and unmarshal
		stickTableEntryValueStr, err := cmd.Flags().GetString("stick_table_entry")
		if err != nil {
			return err, false
		}

		stickTableEntryValue := stick_table.SetStickTableEntriesBody{}
		if err := json.Unmarshal([]byte(stickTableEntryValueStr), &stickTableEntryValue); err != nil {
			return fmt.Errorf("cannot unmarshal stick_table_entry string in SetStickTableEntriesBody: %v", err), false
		}
		m.StickTableEntry = stickTableEntryValue
	}
	stickTableEntryValueModel := m.StickTableEntry
	if swag.IsZero(stickTableEntryValueModel) {
		stickTableEntryValueModel = stick_table.SetStickTableEntriesBody{}
	}
	err, added := retrieveModelSetStickTableEntriesBodyFlags(0, &stickTableEntryValueModel, "setStickTableEntriesBody", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.StickTableEntry = stickTableEntryValueModel
	}
	if dryRun && debug {

		stickTableEntryValueDebugBytes, err := json.Marshal(m.StickTableEntry)
		if err != nil {
			return err, false
		}
		logDebugf("StickTableEntry dry-run payload: %v", string(stickTableEntryValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationStickTableSetStickTableEntriesResult parses request result and return the string content
func parseOperationStickTableSetStickTableEntriesResult(resp0 *stick_table.SetStickTableEntriesNoContent, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*stick_table.SetStickTableEntriesDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning setStickTableEntriesNoContent is not supported

		return "", respErr
	}

	// warning: non schema response setStickTableEntriesNoContent is not supported by go-swagger cli yet.

	return "", nil
}

// register flags to command
func registerModelSetStickTableEntriesBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSetStickTableEntriesBodyDataType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSetStickTableEntriesBodyKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSetStickTableEntriesBodyDataType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataTypeFlagName string
	if cmdPrefix == "" {
		dataTypeFlagName = "data_type"
	} else {
		dataTypeFlagName = fmt.Sprintf("%v.data_type", cmdPrefix)
	}

	if err := registerModelStickTableEntryFlags(depth+1, dataTypeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSetStickTableEntriesBodyKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keyDescription := `Required. `

	var keyFlagName string
	if cmdPrefix == "" {
		keyFlagName = "key"
	} else {
		keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
	}

	var keyFlagDefault string

	_ = cmd.PersistentFlags().String(keyFlagName, keyFlagDefault, keyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSetStickTableEntriesBodyFlags(depth int, m *stick_table.SetStickTableEntriesBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataTypeAdded := retrieveSetStickTableEntriesBodyDataTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataTypeAdded

	err, keyAdded := retrieveSetStickTableEntriesBodyKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyAdded

	return nil, retAdded
}

func retrieveSetStickTableEntriesBodyDataTypeFlags(depth int, m *stick_table.SetStickTableEntriesBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataTypeFlagName := fmt.Sprintf("%v.data_type", cmdPrefix)
	if cmd.Flags().Changed(dataTypeFlagName) {
		// info: complex object data_type models.StickTableEntry is retrieved outside this Changed() block
	}
	dataTypeFlagValue := m.DataType
	if swag.IsZero(dataTypeFlagValue) {
		dataTypeFlagValue = &models.StickTableEntry{}
	}

	err, dataTypeAdded := retrieveModelStickTableEntryFlags(depth+1, dataTypeFlagValue, dataTypeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataTypeAdded
	if dataTypeAdded {
		m.DataType = dataTypeFlagValue
	}

	return nil, retAdded
}

func retrieveSetStickTableEntriesBodyKeyFlags(depth int, m *stick_table.SetStickTableEntriesBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyFlagName := fmt.Sprintf("%v.key", cmdPrefix)
	if cmd.Flags().Changed(keyFlagName) {

		var keyFlagName string
		if cmdPrefix == "" {
			keyFlagName = "key"
		} else {
			keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
		}

		keyFlagValue, err := cmd.Flags().GetString(keyFlagName)
		if err != nil {
			return err, false
		}
		m.Key = &keyFlagValue

		retAdded = true
	}

	return nil, retAdded
}
