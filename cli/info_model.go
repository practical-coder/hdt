// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/haproxytech/models"

	"github.com/spf13/cobra"
)

// Schema cli for Info

// register flags to command
func registerModelInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInfoAPI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInfoSystem(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInfoAPI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var apiFlagName string
	if cmdPrefix == "" {
		apiFlagName = "api"
	} else {
		apiFlagName = fmt.Sprintf("%v.api", cmdPrefix)
	}

	if err := registerModelInfoAPIFlags(depth+1, apiFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerInfoSystem(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var systemFlagName string
	if cmdPrefix == "" {
		systemFlagName = "system"
	} else {
		systemFlagName = fmt.Sprintf("%v.system", cmdPrefix)
	}

	if err := registerModelInfoSystemFlags(depth+1, systemFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInfoFlags(depth int, m *models.Info, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, apiAdded := retrieveInfoAPIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apiAdded

	err, systemAdded := retrieveInfoSystemFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || systemAdded

	return nil, retAdded
}

func retrieveInfoAPIFlags(depth int, m *models.Info, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	apiFlagName := fmt.Sprintf("%v.api", cmdPrefix)
	if cmd.Flags().Changed(apiFlagName) {
		// info: complex object api InfoAPI is retrieved outside this Changed() block
	}
	apiFlagValue := m.API
	if swag.IsZero(apiFlagValue) {
		apiFlagValue = &models.InfoAPI{}
	}

	err, apiAdded := retrieveModelInfoAPIFlags(depth+1, apiFlagValue, apiFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apiAdded
	if apiAdded {
		m.API = apiFlagValue
	}

	return nil, retAdded
}

func retrieveInfoSystemFlags(depth int, m *models.Info, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	systemFlagName := fmt.Sprintf("%v.system", cmdPrefix)
	if cmd.Flags().Changed(systemFlagName) {
		// info: complex object system InfoSystem is retrieved outside this Changed() block
	}
	systemFlagValue := m.System
	if swag.IsZero(systemFlagValue) {
		systemFlagValue = &models.InfoSystem{}
	}

	err, systemAdded := retrieveModelInfoSystemFlags(depth+1, systemFlagValue, systemFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || systemAdded
	if systemAdded {
		m.System = systemFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for InfoAPI

// register flags to command
func registerModelInfoAPIFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInfoAPIBuildDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInfoAPIVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInfoAPIBuildDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	buildDateDescription := `HAProxy Dataplane API build date`

	var buildDateFlagName string
	if cmdPrefix == "" {
		buildDateFlagName = "build_date"
	} else {
		buildDateFlagName = fmt.Sprintf("%v.build_date", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(buildDateFlagName, "", buildDateDescription)

	return nil
}

func registerInfoAPIVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `HAProxy Dataplane API version string`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInfoAPIFlags(depth int, m *models.InfoAPI, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, buildDateAdded := retrieveInfoAPIBuildDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || buildDateAdded

	err, versionAdded := retrieveInfoAPIVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveInfoAPIBuildDateFlags(depth int, m *models.InfoAPI, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	buildDateFlagName := fmt.Sprintf("%v.build_date", cmdPrefix)
	if cmd.Flags().Changed(buildDateFlagName) {

		var buildDateFlagName string
		if cmdPrefix == "" {
			buildDateFlagName = "build_date"
		} else {
			buildDateFlagName = fmt.Sprintf("%v.build_date", cmdPrefix)
		}

		buildDateFlagValueStr, err := cmd.Flags().GetString(buildDateFlagName)
		if err != nil {
			return err, false
		}
		var buildDateFlagValue strfmt.DateTime
		if err := buildDateFlagValue.UnmarshalText([]byte(buildDateFlagValueStr)); err != nil {
			return err, false
		}
		m.BuildDate = buildDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInfoAPIVersionFlags(depth int, m *models.InfoAPI, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for InfoSystem

// register flags to command
func registerModelInfoSystemFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInfoSystemCPUInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInfoSystemHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInfoSystemMemInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInfoSystemOsString(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInfoSystemTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInfoSystemUptime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInfoSystemCPUInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var cpuInfoFlagName string
	if cmdPrefix == "" {
		cpuInfoFlagName = "cpu_info"
	} else {
		cpuInfoFlagName = fmt.Sprintf("%v.cpu_info", cmdPrefix)
	}

	if err := registerModelInfoSystemCPUInfoFlags(depth+1, cpuInfoFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerInfoSystemHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := `Hostname where the HAProxy is running`

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerInfoSystemMemInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var memInfoFlagName string
	if cmdPrefix == "" {
		memInfoFlagName = "mem_info"
	} else {
		memInfoFlagName = fmt.Sprintf("%v.mem_info", cmdPrefix)
	}

	if err := registerModelInfoSystemMemInfoFlags(depth+1, memInfoFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerInfoSystemOsString(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	osStringDescription := `OS string`

	var osStringFlagName string
	if cmdPrefix == "" {
		osStringFlagName = "os_string"
	} else {
		osStringFlagName = fmt.Sprintf("%v.os_string", cmdPrefix)
	}

	var osStringFlagDefault string

	_ = cmd.PersistentFlags().String(osStringFlagName, osStringFlagDefault, osStringDescription)

	return nil
}

func registerInfoSystemTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeDescription := `Current time in milliseconds since Epoch.`

	var timeFlagName string
	if cmdPrefix == "" {
		timeFlagName = "time"
	} else {
		timeFlagName = fmt.Sprintf("%v.time", cmdPrefix)
	}

	var timeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(timeFlagName, timeFlagDefault, timeDescription)

	return nil
}

func registerInfoSystemUptime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uptimeDescription := `System uptime`

	var uptimeFlagName string
	if cmdPrefix == "" {
		uptimeFlagName = "uptime"
	} else {
		uptimeFlagName = fmt.Sprintf("%v.uptime", cmdPrefix)
	}

	var uptimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(uptimeFlagName, uptimeFlagDefault, uptimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInfoSystemFlags(depth int, m *models.InfoSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cpuInfoAdded := retrieveInfoSystemCPUInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuInfoAdded

	err, hostnameAdded := retrieveInfoSystemHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, memInfoAdded := retrieveInfoSystemMemInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memInfoAdded

	err, osStringAdded := retrieveInfoSystemOsStringFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || osStringAdded

	err, timeAdded := retrieveInfoSystemTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeAdded

	err, uptimeAdded := retrieveInfoSystemUptimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uptimeAdded

	return nil, retAdded
}

func retrieveInfoSystemCPUInfoFlags(depth int, m *models.InfoSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpuInfoFlagName := fmt.Sprintf("%v.cpu_info", cmdPrefix)
	if cmd.Flags().Changed(cpuInfoFlagName) {
		// info: complex object cpu_info InfoSystemCPUInfo is retrieved outside this Changed() block
	}
	cpuInfoFlagValue := m.CPUInfo
	if swag.IsZero(cpuInfoFlagValue) {
		cpuInfoFlagValue = &models.InfoSystemCPUInfo{}
	}

	err, cpuInfoAdded := retrieveModelInfoSystemCPUInfoFlags(depth+1, cpuInfoFlagValue, cpuInfoFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuInfoAdded
	if cpuInfoAdded {
		m.CPUInfo = cpuInfoFlagValue
	}

	return nil, retAdded
}

func retrieveInfoSystemHostnameFlags(depth int, m *models.InfoSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInfoSystemMemInfoFlags(depth int, m *models.InfoSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	memInfoFlagName := fmt.Sprintf("%v.mem_info", cmdPrefix)
	if cmd.Flags().Changed(memInfoFlagName) {
		// info: complex object mem_info InfoSystemMemInfo is retrieved outside this Changed() block
	}
	memInfoFlagValue := m.MemInfo
	if swag.IsZero(memInfoFlagValue) {
		memInfoFlagValue = &models.InfoSystemMemInfo{}
	}

	err, memInfoAdded := retrieveModelInfoSystemMemInfoFlags(depth+1, memInfoFlagValue, memInfoFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memInfoAdded
	if memInfoAdded {
		m.MemInfo = memInfoFlagValue
	}

	return nil, retAdded
}

func retrieveInfoSystemOsStringFlags(depth int, m *models.InfoSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	osStringFlagName := fmt.Sprintf("%v.os_string", cmdPrefix)
	if cmd.Flags().Changed(osStringFlagName) {

		var osStringFlagName string
		if cmdPrefix == "" {
			osStringFlagName = "os_string"
		} else {
			osStringFlagName = fmt.Sprintf("%v.os_string", cmdPrefix)
		}

		osStringFlagValue, err := cmd.Flags().GetString(osStringFlagName)
		if err != nil {
			return err, false
		}
		m.OsString = osStringFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInfoSystemTimeFlags(depth int, m *models.InfoSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeFlagName := fmt.Sprintf("%v.time", cmdPrefix)
	if cmd.Flags().Changed(timeFlagName) {

		var timeFlagName string
		if cmdPrefix == "" {
			timeFlagName = "time"
		} else {
			timeFlagName = fmt.Sprintf("%v.time", cmdPrefix)
		}

		timeFlagValue, err := cmd.Flags().GetInt64(timeFlagName)
		if err != nil {
			return err, false
		}
		m.Time = timeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInfoSystemUptimeFlags(depth int, m *models.InfoSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uptimeFlagName := fmt.Sprintf("%v.uptime", cmdPrefix)
	if cmd.Flags().Changed(uptimeFlagName) {

		var uptimeFlagName string
		if cmdPrefix == "" {
			uptimeFlagName = "uptime"
		} else {
			uptimeFlagName = fmt.Sprintf("%v.uptime", cmdPrefix)
		}

		uptimeFlagValue, err := cmd.Flags().GetInt64(uptimeFlagName)
		if err != nil {
			return err, false
		}
		m.Uptime = &uptimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for InfoSystemCPUInfo

// register flags to command
func registerModelInfoSystemCPUInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInfoSystemCPUInfoModel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInfoSystemCPUInfoNumCpus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInfoSystemCPUInfoModel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modelDescription := ``

	var modelFlagName string
	if cmdPrefix == "" {
		modelFlagName = "model"
	} else {
		modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
	}

	var modelFlagDefault string

	_ = cmd.PersistentFlags().String(modelFlagName, modelFlagDefault, modelDescription)

	return nil
}

func registerInfoSystemCPUInfoNumCpus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numCpusDescription := `Number of logical CPUs`

	var numCpusFlagName string
	if cmdPrefix == "" {
		numCpusFlagName = "num_cpus"
	} else {
		numCpusFlagName = fmt.Sprintf("%v.num_cpus", cmdPrefix)
	}

	var numCpusFlagDefault int64

	_ = cmd.PersistentFlags().Int64(numCpusFlagName, numCpusFlagDefault, numCpusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInfoSystemCPUInfoFlags(depth int, m *models.InfoSystemCPUInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, modelAdded := retrieveInfoSystemCPUInfoModelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modelAdded

	err, numCpusAdded := retrieveInfoSystemCPUInfoNumCpusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numCpusAdded

	return nil, retAdded
}

func retrieveInfoSystemCPUInfoModelFlags(depth int, m *models.InfoSystemCPUInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modelFlagName := fmt.Sprintf("%v.model", cmdPrefix)
	if cmd.Flags().Changed(modelFlagName) {

		var modelFlagName string
		if cmdPrefix == "" {
			modelFlagName = "model"
		} else {
			modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
		}

		modelFlagValue, err := cmd.Flags().GetString(modelFlagName)
		if err != nil {
			return err, false
		}
		m.Model = modelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInfoSystemCPUInfoNumCpusFlags(depth int, m *models.InfoSystemCPUInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numCpusFlagName := fmt.Sprintf("%v.num_cpus", cmdPrefix)
	if cmd.Flags().Changed(numCpusFlagName) {

		var numCpusFlagName string
		if cmdPrefix == "" {
			numCpusFlagName = "num_cpus"
		} else {
			numCpusFlagName = fmt.Sprintf("%v.num_cpus", cmdPrefix)
		}

		numCpusFlagValue, err := cmd.Flags().GetInt64(numCpusFlagName)
		if err != nil {
			return err, false
		}
		m.NumCpus = numCpusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for InfoSystemMemInfo

// register flags to command
func registerModelInfoSystemMemInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInfoSystemMemInfoDataplaneapiMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInfoSystemMemInfoFreeMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInfoSystemMemInfoTotalMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInfoSystemMemInfoDataplaneapiMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataplaneapiMemoryDescription := ``

	var dataplaneapiMemoryFlagName string
	if cmdPrefix == "" {
		dataplaneapiMemoryFlagName = "dataplaneapi_memory"
	} else {
		dataplaneapiMemoryFlagName = fmt.Sprintf("%v.dataplaneapi_memory", cmdPrefix)
	}

	var dataplaneapiMemoryFlagDefault int64

	_ = cmd.PersistentFlags().Int64(dataplaneapiMemoryFlagName, dataplaneapiMemoryFlagDefault, dataplaneapiMemoryDescription)

	return nil
}

func registerInfoSystemMemInfoFreeMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	freeMemoryDescription := ``

	var freeMemoryFlagName string
	if cmdPrefix == "" {
		freeMemoryFlagName = "free_memory"
	} else {
		freeMemoryFlagName = fmt.Sprintf("%v.free_memory", cmdPrefix)
	}

	var freeMemoryFlagDefault int64

	_ = cmd.PersistentFlags().Int64(freeMemoryFlagName, freeMemoryFlagDefault, freeMemoryDescription)

	return nil
}

func registerInfoSystemMemInfoTotalMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalMemoryDescription := ``

	var totalMemoryFlagName string
	if cmdPrefix == "" {
		totalMemoryFlagName = "total_memory"
	} else {
		totalMemoryFlagName = fmt.Sprintf("%v.total_memory", cmdPrefix)
	}

	var totalMemoryFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalMemoryFlagName, totalMemoryFlagDefault, totalMemoryDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInfoSystemMemInfoFlags(depth int, m *models.InfoSystemMemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataplaneapiMemoryAdded := retrieveInfoSystemMemInfoDataplaneapiMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataplaneapiMemoryAdded

	err, freeMemoryAdded := retrieveInfoSystemMemInfoFreeMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || freeMemoryAdded

	err, totalMemoryAdded := retrieveInfoSystemMemInfoTotalMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalMemoryAdded

	return nil, retAdded
}

func retrieveInfoSystemMemInfoDataplaneapiMemoryFlags(depth int, m *models.InfoSystemMemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataplaneapiMemoryFlagName := fmt.Sprintf("%v.dataplaneapi_memory", cmdPrefix)
	if cmd.Flags().Changed(dataplaneapiMemoryFlagName) {

		var dataplaneapiMemoryFlagName string
		if cmdPrefix == "" {
			dataplaneapiMemoryFlagName = "dataplaneapi_memory"
		} else {
			dataplaneapiMemoryFlagName = fmt.Sprintf("%v.dataplaneapi_memory", cmdPrefix)
		}

		dataplaneapiMemoryFlagValue, err := cmd.Flags().GetInt64(dataplaneapiMemoryFlagName)
		if err != nil {
			return err, false
		}
		m.DataplaneapiMemory = dataplaneapiMemoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInfoSystemMemInfoFreeMemoryFlags(depth int, m *models.InfoSystemMemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	freeMemoryFlagName := fmt.Sprintf("%v.free_memory", cmdPrefix)
	if cmd.Flags().Changed(freeMemoryFlagName) {

		var freeMemoryFlagName string
		if cmdPrefix == "" {
			freeMemoryFlagName = "free_memory"
		} else {
			freeMemoryFlagName = fmt.Sprintf("%v.free_memory", cmdPrefix)
		}

		freeMemoryFlagValue, err := cmd.Flags().GetInt64(freeMemoryFlagName)
		if err != nil {
			return err, false
		}
		m.FreeMemory = freeMemoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInfoSystemMemInfoTotalMemoryFlags(depth int, m *models.InfoSystemMemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalMemoryFlagName := fmt.Sprintf("%v.total_memory", cmdPrefix)
	if cmd.Flags().Changed(totalMemoryFlagName) {

		var totalMemoryFlagName string
		if cmdPrefix == "" {
			totalMemoryFlagName = "total_memory"
		} else {
			totalMemoryFlagName = fmt.Sprintf("%v.total_memory", cmdPrefix)
		}

		totalMemoryFlagValue, err := cmd.Flags().GetInt64(totalMemoryFlagName)
		if err != nil {
			return err, false
		}
		m.TotalMemory = totalMemoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}
