// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for StickTable

// register flags to command
func registerModelStickTableFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStickTableFields(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableProcess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStickTableFields(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: fields []*StickTableField array type is not supported by go-swagger cli yet

	return nil
}

func registerStickTableName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerStickTableProcess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	processDescription := `Process number if master-worker mode`

	var processFlagName string
	if cmdPrefix == "" {
		processFlagName = "process"
	} else {
		processFlagName = fmt.Sprintf("%v.process", cmdPrefix)
	}

	var processFlagDefault int64

	_ = cmd.PersistentFlags().Int64(processFlagName, processFlagDefault, processDescription)

	return nil
}

func registerStickTableSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sizeDescription := ``

	var sizeFlagName string
	if cmdPrefix == "" {
		sizeFlagName = "size"
	} else {
		sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var sizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sizeFlagName, sizeFlagDefault, sizeDescription)

	return nil
}

func registerStickTableType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["ip","ipv6","integer","string","binary"]. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ip","ipv6","integer","string","binary"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerStickTableUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usedDescription := ``

	var usedFlagName string
	if cmdPrefix == "" {
		usedFlagName = "used"
	} else {
		usedFlagName = fmt.Sprintf("%v.used", cmdPrefix)
	}

	var usedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(usedFlagName, usedFlagDefault, usedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStickTableFlags(depth int, m *models.StickTable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, fieldsAdded := retrieveStickTableFieldsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fieldsAdded

	err, nameAdded := retrieveStickTableNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, processAdded := retrieveStickTableProcessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || processAdded

	err, sizeAdded := retrieveStickTableSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sizeAdded

	err, typeAdded := retrieveStickTableTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, usedAdded := retrieveStickTableUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usedAdded

	return nil, retAdded
}

func retrieveStickTableFieldsFlags(depth int, m *models.StickTable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fieldsFlagName := fmt.Sprintf("%v.fields", cmdPrefix)
	if cmd.Flags().Changed(fieldsFlagName) {
		// warning: fields array type []*StickTableField is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStickTableNameFlags(depth int, m *models.StickTable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableProcessFlags(depth int, m *models.StickTable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	processFlagName := fmt.Sprintf("%v.process", cmdPrefix)
	if cmd.Flags().Changed(processFlagName) {

		var processFlagName string
		if cmdPrefix == "" {
			processFlagName = "process"
		} else {
			processFlagName = fmt.Sprintf("%v.process", cmdPrefix)
		}

		processFlagValue, err := cmd.Flags().GetInt64(processFlagName)
		if err != nil {
			return err, false
		}
		m.Process = &processFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableSizeFlags(depth int, m *models.StickTable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sizeFlagName := fmt.Sprintf("%v.size", cmdPrefix)
	if cmd.Flags().Changed(sizeFlagName) {

		var sizeFlagName string
		if cmdPrefix == "" {
			sizeFlagName = "size"
		} else {
			sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		sizeFlagValue, err := cmd.Flags().GetInt64(sizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = &sizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableTypeFlags(depth int, m *models.StickTable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableUsedFlags(depth int, m *models.StickTable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usedFlagName := fmt.Sprintf("%v.used", cmdPrefix)
	if cmd.Flags().Changed(usedFlagName) {

		var usedFlagName string
		if cmdPrefix == "" {
			usedFlagName = "used"
		} else {
			usedFlagName = fmt.Sprintf("%v.used", cmdPrefix)
		}

		usedFlagValue, err := cmd.Flags().GetInt64(usedFlagName)
		if err != nil {
			return err, false
		}
		m.Used = &usedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for StickTableField

// register flags to command
func registerModelStickTableFieldFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStickTableFieldField(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableFieldPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableFieldType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStickTableFieldField(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fieldDescription := `Enum: ["server_id","gpc0","gpc0_rate","gpc1","gpc1_rate","gpt0","conn_cnt","conn_cur","conn_rate","sess_cnt","sess_rate","http_req_cnt","http_req_rate","http_err_cnt","http_err_rate","bytes_in_cnt","bytes_in_rate","bytes_out_cnt","bytes_out_rate"]. `

	var fieldFlagName string
	if cmdPrefix == "" {
		fieldFlagName = "field"
	} else {
		fieldFlagName = fmt.Sprintf("%v.field", cmdPrefix)
	}

	var fieldFlagDefault string

	_ = cmd.PersistentFlags().String(fieldFlagName, fieldFlagDefault, fieldDescription)

	if err := cmd.RegisterFlagCompletionFunc(fieldFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["server_id","gpc0","gpc0_rate","gpc1","gpc1_rate","gpt0","conn_cnt","conn_cur","conn_rate","sess_cnt","sess_rate","http_req_cnt","http_req_rate","http_err_cnt","http_err_rate","bytes_in_cnt","bytes_in_rate","bytes_out_cnt","bytes_out_rate"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerStickTableFieldPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	periodDescription := ``

	var periodFlagName string
	if cmdPrefix == "" {
		periodFlagName = "period"
	} else {
		periodFlagName = fmt.Sprintf("%v.period", cmdPrefix)
	}

	var periodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(periodFlagName, periodFlagDefault, periodDescription)

	return nil
}

func registerStickTableFieldType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["rate","counter"]. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["rate","counter"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStickTableFieldFlags(depth int, m *models.StickTableField, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, fieldAdded := retrieveStickTableFieldFieldFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fieldAdded

	err, periodAdded := retrieveStickTableFieldPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || periodAdded

	err, typeAdded := retrieveStickTableFieldTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveStickTableFieldFieldFlags(depth int, m *models.StickTableField, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fieldFlagName := fmt.Sprintf("%v.field", cmdPrefix)
	if cmd.Flags().Changed(fieldFlagName) {

		var fieldFlagName string
		if cmdPrefix == "" {
			fieldFlagName = "field"
		} else {
			fieldFlagName = fmt.Sprintf("%v.field", cmdPrefix)
		}

		fieldFlagValue, err := cmd.Flags().GetString(fieldFlagName)
		if err != nil {
			return err, false
		}
		m.Field = fieldFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableFieldPeriodFlags(depth int, m *models.StickTableField, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	periodFlagName := fmt.Sprintf("%v.period", cmdPrefix)
	if cmd.Flags().Changed(periodFlagName) {

		var periodFlagName string
		if cmdPrefix == "" {
			periodFlagName = "period"
		} else {
			periodFlagName = fmt.Sprintf("%v.period", cmdPrefix)
		}

		periodFlagValue, err := cmd.Flags().GetInt64(periodFlagName)
		if err != nil {
			return err, false
		}
		m.Period = periodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableFieldTypeFlags(depth int, m *models.StickTableField, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
