// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for BindParams

// register flags to command
func registerModelBindParamsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBindParamsAcceptNetscalerCip(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsAcceptProxy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsAllow0rtt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsAlpn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsBacklog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsCaIgnoreErr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsCaSignFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsCaSignPass(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsCaVerifyFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsCiphers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsCiphersuites(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsCrlFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsCrtIgnoreErr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsCrtList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsCurves(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsDeferAccept(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsEcdhe(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsExposeFdListeners(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsForceSslv3(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsForceTlsv10(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsForceTlsv11(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsForceTlsv12(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsForceTlsv13(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsGenerateCertificates(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsGid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsGroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsInterface(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsMaxconn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsMss(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsNice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsNoCaNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsNoSslv3(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsNoTLSTickets(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsNoTlsv10(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsNoTlsv11(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsNoTlsv12(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsNoTlsv13(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsNpn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsPreferClientCiphers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsProcess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsProto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsSeverityOutput(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsSsl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsSslCafile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsSslCertificate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsSslMaxVer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsSslMinVer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsStrictSni(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsTCPUserTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsTfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsTLSTicketKeys(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsTransparent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsV4v6(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsV6only(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBindParamsVerify(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBindParamsAcceptNetscalerCip(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	acceptNetscalerCipDescription := ``

	var acceptNetscalerCipFlagName string
	if cmdPrefix == "" {
		acceptNetscalerCipFlagName = "accept_netscaler_cip"
	} else {
		acceptNetscalerCipFlagName = fmt.Sprintf("%v.accept_netscaler_cip", cmdPrefix)
	}

	var acceptNetscalerCipFlagDefault int64

	_ = cmd.PersistentFlags().Int64(acceptNetscalerCipFlagName, acceptNetscalerCipFlagDefault, acceptNetscalerCipDescription)

	return nil
}

func registerBindParamsAcceptProxy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	acceptProxyDescription := ``

	var acceptProxyFlagName string
	if cmdPrefix == "" {
		acceptProxyFlagName = "accept_proxy"
	} else {
		acceptProxyFlagName = fmt.Sprintf("%v.accept_proxy", cmdPrefix)
	}

	var acceptProxyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(acceptProxyFlagName, acceptProxyFlagDefault, acceptProxyDescription)

	return nil
}

func registerBindParamsAllow0rtt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allow0rttDescription := ``

	var allow0rttFlagName string
	if cmdPrefix == "" {
		allow0rttFlagName = "allow_0rtt"
	} else {
		allow0rttFlagName = fmt.Sprintf("%v.allow_0rtt", cmdPrefix)
	}

	var allow0rttFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allow0rttFlagName, allow0rttFlagDefault, allow0rttDescription)

	return nil
}

func registerBindParamsAlpn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	alpnDescription := ``

	var alpnFlagName string
	if cmdPrefix == "" {
		alpnFlagName = "alpn"
	} else {
		alpnFlagName = fmt.Sprintf("%v.alpn", cmdPrefix)
	}

	var alpnFlagDefault string

	_ = cmd.PersistentFlags().String(alpnFlagName, alpnFlagDefault, alpnDescription)

	return nil
}

func registerBindParamsBacklog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	backlogDescription := ``

	var backlogFlagName string
	if cmdPrefix == "" {
		backlogFlagName = "backlog"
	} else {
		backlogFlagName = fmt.Sprintf("%v.backlog", cmdPrefix)
	}

	var backlogFlagDefault string

	_ = cmd.PersistentFlags().String(backlogFlagName, backlogFlagDefault, backlogDescription)

	return nil
}

func registerBindParamsCaIgnoreErr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	caIgnoreErrDescription := ``

	var caIgnoreErrFlagName string
	if cmdPrefix == "" {
		caIgnoreErrFlagName = "ca_ignore_err"
	} else {
		caIgnoreErrFlagName = fmt.Sprintf("%v.ca_ignore_err", cmdPrefix)
	}

	var caIgnoreErrFlagDefault string

	_ = cmd.PersistentFlags().String(caIgnoreErrFlagName, caIgnoreErrFlagDefault, caIgnoreErrDescription)

	return nil
}

func registerBindParamsCaSignFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	caSignFileDescription := ``

	var caSignFileFlagName string
	if cmdPrefix == "" {
		caSignFileFlagName = "ca_sign_file"
	} else {
		caSignFileFlagName = fmt.Sprintf("%v.ca_sign_file", cmdPrefix)
	}

	var caSignFileFlagDefault string

	_ = cmd.PersistentFlags().String(caSignFileFlagName, caSignFileFlagDefault, caSignFileDescription)

	return nil
}

func registerBindParamsCaSignPass(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	caSignPassDescription := ``

	var caSignPassFlagName string
	if cmdPrefix == "" {
		caSignPassFlagName = "ca_sign_pass"
	} else {
		caSignPassFlagName = fmt.Sprintf("%v.ca_sign_pass", cmdPrefix)
	}

	var caSignPassFlagDefault string

	_ = cmd.PersistentFlags().String(caSignPassFlagName, caSignPassFlagDefault, caSignPassDescription)

	return nil
}

func registerBindParamsCaVerifyFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	caVerifyFileDescription := ``

	var caVerifyFileFlagName string
	if cmdPrefix == "" {
		caVerifyFileFlagName = "ca_verify_file"
	} else {
		caVerifyFileFlagName = fmt.Sprintf("%v.ca_verify_file", cmdPrefix)
	}

	var caVerifyFileFlagDefault string

	_ = cmd.PersistentFlags().String(caVerifyFileFlagName, caVerifyFileFlagDefault, caVerifyFileDescription)

	return nil
}

func registerBindParamsCiphers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ciphersDescription := ``

	var ciphersFlagName string
	if cmdPrefix == "" {
		ciphersFlagName = "ciphers"
	} else {
		ciphersFlagName = fmt.Sprintf("%v.ciphers", cmdPrefix)
	}

	var ciphersFlagDefault string

	_ = cmd.PersistentFlags().String(ciphersFlagName, ciphersFlagDefault, ciphersDescription)

	return nil
}

func registerBindParamsCiphersuites(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ciphersuitesDescription := ``

	var ciphersuitesFlagName string
	if cmdPrefix == "" {
		ciphersuitesFlagName = "ciphersuites"
	} else {
		ciphersuitesFlagName = fmt.Sprintf("%v.ciphersuites", cmdPrefix)
	}

	var ciphersuitesFlagDefault string

	_ = cmd.PersistentFlags().String(ciphersuitesFlagName, ciphersuitesFlagDefault, ciphersuitesDescription)

	return nil
}

func registerBindParamsCrlFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	crlFileDescription := ``

	var crlFileFlagName string
	if cmdPrefix == "" {
		crlFileFlagName = "crl_file"
	} else {
		crlFileFlagName = fmt.Sprintf("%v.crl_file", cmdPrefix)
	}

	var crlFileFlagDefault string

	_ = cmd.PersistentFlags().String(crlFileFlagName, crlFileFlagDefault, crlFileDescription)

	return nil
}

func registerBindParamsCrtIgnoreErr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	crtIgnoreErrDescription := ``

	var crtIgnoreErrFlagName string
	if cmdPrefix == "" {
		crtIgnoreErrFlagName = "crt_ignore_err"
	} else {
		crtIgnoreErrFlagName = fmt.Sprintf("%v.crt_ignore_err", cmdPrefix)
	}

	var crtIgnoreErrFlagDefault string

	_ = cmd.PersistentFlags().String(crtIgnoreErrFlagName, crtIgnoreErrFlagDefault, crtIgnoreErrDescription)

	return nil
}

func registerBindParamsCrtList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	crtListDescription := ``

	var crtListFlagName string
	if cmdPrefix == "" {
		crtListFlagName = "crt_list"
	} else {
		crtListFlagName = fmt.Sprintf("%v.crt_list", cmdPrefix)
	}

	var crtListFlagDefault string

	_ = cmd.PersistentFlags().String(crtListFlagName, crtListFlagDefault, crtListDescription)

	return nil
}

func registerBindParamsCurves(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	curvesDescription := ``

	var curvesFlagName string
	if cmdPrefix == "" {
		curvesFlagName = "curves"
	} else {
		curvesFlagName = fmt.Sprintf("%v.curves", cmdPrefix)
	}

	var curvesFlagDefault string

	_ = cmd.PersistentFlags().String(curvesFlagName, curvesFlagDefault, curvesDescription)

	return nil
}

func registerBindParamsDeferAccept(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deferAcceptDescription := ``

	var deferAcceptFlagName string
	if cmdPrefix == "" {
		deferAcceptFlagName = "defer_accept"
	} else {
		deferAcceptFlagName = fmt.Sprintf("%v.defer_accept", cmdPrefix)
	}

	var deferAcceptFlagDefault bool

	_ = cmd.PersistentFlags().Bool(deferAcceptFlagName, deferAcceptFlagDefault, deferAcceptDescription)

	return nil
}

func registerBindParamsEcdhe(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ecdheDescription := ``

	var ecdheFlagName string
	if cmdPrefix == "" {
		ecdheFlagName = "ecdhe"
	} else {
		ecdheFlagName = fmt.Sprintf("%v.ecdhe", cmdPrefix)
	}

	var ecdheFlagDefault string

	_ = cmd.PersistentFlags().String(ecdheFlagName, ecdheFlagDefault, ecdheDescription)

	return nil
}

func registerBindParamsExposeFdListeners(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	exposeFdListenersDescription := ``

	var exposeFdListenersFlagName string
	if cmdPrefix == "" {
		exposeFdListenersFlagName = "expose_fd_listeners"
	} else {
		exposeFdListenersFlagName = fmt.Sprintf("%v.expose_fd_listeners", cmdPrefix)
	}

	var exposeFdListenersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(exposeFdListenersFlagName, exposeFdListenersFlagDefault, exposeFdListenersDescription)

	return nil
}

func registerBindParamsForceSslv3(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceSslv3Description := ``

	var forceSslv3FlagName string
	if cmdPrefix == "" {
		forceSslv3FlagName = "force_sslv3"
	} else {
		forceSslv3FlagName = fmt.Sprintf("%v.force_sslv3", cmdPrefix)
	}

	var forceSslv3FlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceSslv3FlagName, forceSslv3FlagDefault, forceSslv3Description)

	return nil
}

func registerBindParamsForceTlsv10(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceTlsv10Description := ``

	var forceTlsv10FlagName string
	if cmdPrefix == "" {
		forceTlsv10FlagName = "force_tlsv10"
	} else {
		forceTlsv10FlagName = fmt.Sprintf("%v.force_tlsv10", cmdPrefix)
	}

	var forceTlsv10FlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceTlsv10FlagName, forceTlsv10FlagDefault, forceTlsv10Description)

	return nil
}

func registerBindParamsForceTlsv11(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceTlsv11Description := ``

	var forceTlsv11FlagName string
	if cmdPrefix == "" {
		forceTlsv11FlagName = "force_tlsv11"
	} else {
		forceTlsv11FlagName = fmt.Sprintf("%v.force_tlsv11", cmdPrefix)
	}

	var forceTlsv11FlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceTlsv11FlagName, forceTlsv11FlagDefault, forceTlsv11Description)

	return nil
}

func registerBindParamsForceTlsv12(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceTlsv12Description := ``

	var forceTlsv12FlagName string
	if cmdPrefix == "" {
		forceTlsv12FlagName = "force_tlsv12"
	} else {
		forceTlsv12FlagName = fmt.Sprintf("%v.force_tlsv12", cmdPrefix)
	}

	var forceTlsv12FlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceTlsv12FlagName, forceTlsv12FlagDefault, forceTlsv12Description)

	return nil
}

func registerBindParamsForceTlsv13(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceTlsv13Description := ``

	var forceTlsv13FlagName string
	if cmdPrefix == "" {
		forceTlsv13FlagName = "force_tlsv13"
	} else {
		forceTlsv13FlagName = fmt.Sprintf("%v.force_tlsv13", cmdPrefix)
	}

	var forceTlsv13FlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceTlsv13FlagName, forceTlsv13FlagDefault, forceTlsv13Description)

	return nil
}

func registerBindParamsGenerateCertificates(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	generateCertificatesDescription := ``

	var generateCertificatesFlagName string
	if cmdPrefix == "" {
		generateCertificatesFlagName = "generate_certificates"
	} else {
		generateCertificatesFlagName = fmt.Sprintf("%v.generate_certificates", cmdPrefix)
	}

	var generateCertificatesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(generateCertificatesFlagName, generateCertificatesFlagDefault, generateCertificatesDescription)

	return nil
}

func registerBindParamsGid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gidDescription := ``

	var gidFlagName string
	if cmdPrefix == "" {
		gidFlagName = "gid"
	} else {
		gidFlagName = fmt.Sprintf("%v.gid", cmdPrefix)
	}

	var gidFlagDefault int64

	_ = cmd.PersistentFlags().Int64(gidFlagName, gidFlagDefault, gidDescription)

	return nil
}

func registerBindParamsGroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	groupDescription := ``

	var groupFlagName string
	if cmdPrefix == "" {
		groupFlagName = "group"
	} else {
		groupFlagName = fmt.Sprintf("%v.group", cmdPrefix)
	}

	var groupFlagDefault string

	_ = cmd.PersistentFlags().String(groupFlagName, groupFlagDefault, groupDescription)

	return nil
}

func registerBindParamsID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerBindParamsInterface(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	interfaceDescription := ``

	var interfaceFlagName string
	if cmdPrefix == "" {
		interfaceFlagName = "interface"
	} else {
		interfaceFlagName = fmt.Sprintf("%v.interface", cmdPrefix)
	}

	var interfaceFlagDefault string

	_ = cmd.PersistentFlags().String(interfaceFlagName, interfaceFlagDefault, interfaceDescription)

	return nil
}

func registerBindParamsLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	levelDescription := `Enum: ["user","operator","admin"]. `

	var levelFlagName string
	if cmdPrefix == "" {
		levelFlagName = "level"
	} else {
		levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
	}

	var levelFlagDefault string

	_ = cmd.PersistentFlags().String(levelFlagName, levelFlagDefault, levelDescription)

	if err := cmd.RegisterFlagCompletionFunc(levelFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["user","operator","admin"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBindParamsMaxconn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxconnDescription := ``

	var maxconnFlagName string
	if cmdPrefix == "" {
		maxconnFlagName = "maxconn"
	} else {
		maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
	}

	var maxconnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxconnFlagName, maxconnFlagDefault, maxconnDescription)

	return nil
}

func registerBindParamsMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := ``

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	return nil
}

func registerBindParamsMss(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mssDescription := ``

	var mssFlagName string
	if cmdPrefix == "" {
		mssFlagName = "mss"
	} else {
		mssFlagName = fmt.Sprintf("%v.mss", cmdPrefix)
	}

	var mssFlagDefault string

	_ = cmd.PersistentFlags().String(mssFlagName, mssFlagDefault, mssDescription)

	return nil
}

func registerBindParamsName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerBindParamsNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := ``

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func registerBindParamsNice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	niceDescription := ``

	var niceFlagName string
	if cmdPrefix == "" {
		niceFlagName = "nice"
	} else {
		niceFlagName = fmt.Sprintf("%v.nice", cmdPrefix)
	}

	var niceFlagDefault int64

	_ = cmd.PersistentFlags().Int64(niceFlagName, niceFlagDefault, niceDescription)

	return nil
}

func registerBindParamsNoCaNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noCaNamesDescription := ``

	var noCaNamesFlagName string
	if cmdPrefix == "" {
		noCaNamesFlagName = "no_ca_names"
	} else {
		noCaNamesFlagName = fmt.Sprintf("%v.no_ca_names", cmdPrefix)
	}

	var noCaNamesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(noCaNamesFlagName, noCaNamesFlagDefault, noCaNamesDescription)

	return nil
}

func registerBindParamsNoSslv3(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noSslv3Description := ``

	var noSslv3FlagName string
	if cmdPrefix == "" {
		noSslv3FlagName = "no_sslv3"
	} else {
		noSslv3FlagName = fmt.Sprintf("%v.no_sslv3", cmdPrefix)
	}

	var noSslv3FlagDefault bool

	_ = cmd.PersistentFlags().Bool(noSslv3FlagName, noSslv3FlagDefault, noSslv3Description)

	return nil
}

func registerBindParamsNoTLSTickets(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noTlsTicketsDescription := ``

	var noTlsTicketsFlagName string
	if cmdPrefix == "" {
		noTlsTicketsFlagName = "no_tls_tickets"
	} else {
		noTlsTicketsFlagName = fmt.Sprintf("%v.no_tls_tickets", cmdPrefix)
	}

	var noTlsTicketsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(noTlsTicketsFlagName, noTlsTicketsFlagDefault, noTlsTicketsDescription)

	return nil
}

func registerBindParamsNoTlsv10(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noTlsv10Description := ``

	var noTlsv10FlagName string
	if cmdPrefix == "" {
		noTlsv10FlagName = "no_tlsv10"
	} else {
		noTlsv10FlagName = fmt.Sprintf("%v.no_tlsv10", cmdPrefix)
	}

	var noTlsv10FlagDefault bool

	_ = cmd.PersistentFlags().Bool(noTlsv10FlagName, noTlsv10FlagDefault, noTlsv10Description)

	return nil
}

func registerBindParamsNoTlsv11(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noTlsv11Description := ``

	var noTlsv11FlagName string
	if cmdPrefix == "" {
		noTlsv11FlagName = "no_tlsv11"
	} else {
		noTlsv11FlagName = fmt.Sprintf("%v.no_tlsv11", cmdPrefix)
	}

	var noTlsv11FlagDefault bool

	_ = cmd.PersistentFlags().Bool(noTlsv11FlagName, noTlsv11FlagDefault, noTlsv11Description)

	return nil
}

func registerBindParamsNoTlsv12(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noTlsv12Description := ``

	var noTlsv12FlagName string
	if cmdPrefix == "" {
		noTlsv12FlagName = "no_tlsv12"
	} else {
		noTlsv12FlagName = fmt.Sprintf("%v.no_tlsv12", cmdPrefix)
	}

	var noTlsv12FlagDefault bool

	_ = cmd.PersistentFlags().Bool(noTlsv12FlagName, noTlsv12FlagDefault, noTlsv12Description)

	return nil
}

func registerBindParamsNoTlsv13(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noTlsv13Description := ``

	var noTlsv13FlagName string
	if cmdPrefix == "" {
		noTlsv13FlagName = "no_tlsv13"
	} else {
		noTlsv13FlagName = fmt.Sprintf("%v.no_tlsv13", cmdPrefix)
	}

	var noTlsv13FlagDefault bool

	_ = cmd.PersistentFlags().Bool(noTlsv13FlagName, noTlsv13FlagDefault, noTlsv13Description)

	return nil
}

func registerBindParamsNpn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	npnDescription := ``

	var npnFlagName string
	if cmdPrefix == "" {
		npnFlagName = "npn"
	} else {
		npnFlagName = fmt.Sprintf("%v.npn", cmdPrefix)
	}

	var npnFlagDefault string

	_ = cmd.PersistentFlags().String(npnFlagName, npnFlagDefault, npnDescription)

	return nil
}

func registerBindParamsPreferClientCiphers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	preferClientCiphersDescription := ``

	var preferClientCiphersFlagName string
	if cmdPrefix == "" {
		preferClientCiphersFlagName = "prefer_client_ciphers"
	} else {
		preferClientCiphersFlagName = fmt.Sprintf("%v.prefer_client_ciphers", cmdPrefix)
	}

	var preferClientCiphersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(preferClientCiphersFlagName, preferClientCiphersFlagDefault, preferClientCiphersDescription)

	return nil
}

func registerBindParamsProcess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	processDescription := ``

	var processFlagName string
	if cmdPrefix == "" {
		processFlagName = "process"
	} else {
		processFlagName = fmt.Sprintf("%v.process", cmdPrefix)
	}

	var processFlagDefault string

	_ = cmd.PersistentFlags().String(processFlagName, processFlagDefault, processDescription)

	return nil
}

func registerBindParamsProto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protoDescription := ``

	var protoFlagName string
	if cmdPrefix == "" {
		protoFlagName = "proto"
	} else {
		protoFlagName = fmt.Sprintf("%v.proto", cmdPrefix)
	}

	var protoFlagDefault string

	_ = cmd.PersistentFlags().String(protoFlagName, protoFlagDefault, protoDescription)

	return nil
}

func registerBindParamsSeverityOutput(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	severityOutputDescription := `Enum: ["none","number","string"]. `

	var severityOutputFlagName string
	if cmdPrefix == "" {
		severityOutputFlagName = "severity_output"
	} else {
		severityOutputFlagName = fmt.Sprintf("%v.severity_output", cmdPrefix)
	}

	var severityOutputFlagDefault string

	_ = cmd.PersistentFlags().String(severityOutputFlagName, severityOutputFlagDefault, severityOutputDescription)

	if err := cmd.RegisterFlagCompletionFunc(severityOutputFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["none","number","string"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBindParamsSsl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslDescription := ``

	var sslFlagName string
	if cmdPrefix == "" {
		sslFlagName = "ssl"
	} else {
		sslFlagName = fmt.Sprintf("%v.ssl", cmdPrefix)
	}

	var sslFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sslFlagName, sslFlagDefault, sslDescription)

	return nil
}

func registerBindParamsSslCafile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslCafileDescription := ``

	var sslCafileFlagName string
	if cmdPrefix == "" {
		sslCafileFlagName = "ssl_cafile"
	} else {
		sslCafileFlagName = fmt.Sprintf("%v.ssl_cafile", cmdPrefix)
	}

	var sslCafileFlagDefault string

	_ = cmd.PersistentFlags().String(sslCafileFlagName, sslCafileFlagDefault, sslCafileDescription)

	return nil
}

func registerBindParamsSslCertificate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslCertificateDescription := ``

	var sslCertificateFlagName string
	if cmdPrefix == "" {
		sslCertificateFlagName = "ssl_certificate"
	} else {
		sslCertificateFlagName = fmt.Sprintf("%v.ssl_certificate", cmdPrefix)
	}

	var sslCertificateFlagDefault string

	_ = cmd.PersistentFlags().String(sslCertificateFlagName, sslCertificateFlagDefault, sslCertificateDescription)

	return nil
}

func registerBindParamsSslMaxVer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslMaxVerDescription := `Enum: ["SSLv3","TLSv1.0","TLSv1.1","TLSv1.2","TLSv1.3"]. `

	var sslMaxVerFlagName string
	if cmdPrefix == "" {
		sslMaxVerFlagName = "ssl_max_ver"
	} else {
		sslMaxVerFlagName = fmt.Sprintf("%v.ssl_max_ver", cmdPrefix)
	}

	var sslMaxVerFlagDefault string

	_ = cmd.PersistentFlags().String(sslMaxVerFlagName, sslMaxVerFlagDefault, sslMaxVerDescription)

	if err := cmd.RegisterFlagCompletionFunc(sslMaxVerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["SSLv3","TLSv1.0","TLSv1.1","TLSv1.2","TLSv1.3"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBindParamsSslMinVer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslMinVerDescription := `Enum: ["SSLv3","TLSv1.0","TLSv1.1","TLSv1.2","TLSv1.3"]. `

	var sslMinVerFlagName string
	if cmdPrefix == "" {
		sslMinVerFlagName = "ssl_min_ver"
	} else {
		sslMinVerFlagName = fmt.Sprintf("%v.ssl_min_ver", cmdPrefix)
	}

	var sslMinVerFlagDefault string

	_ = cmd.PersistentFlags().String(sslMinVerFlagName, sslMinVerFlagDefault, sslMinVerDescription)

	if err := cmd.RegisterFlagCompletionFunc(sslMinVerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["SSLv3","TLSv1.0","TLSv1.1","TLSv1.2","TLSv1.3"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBindParamsStrictSni(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	strictSniDescription := ``

	var strictSniFlagName string
	if cmdPrefix == "" {
		strictSniFlagName = "strict_sni"
	} else {
		strictSniFlagName = fmt.Sprintf("%v.strict_sni", cmdPrefix)
	}

	var strictSniFlagDefault bool

	_ = cmd.PersistentFlags().Bool(strictSniFlagName, strictSniFlagDefault, strictSniDescription)

	return nil
}

func registerBindParamsTCPUserTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpUserTimeoutDescription := ``

	var tcpUserTimeoutFlagName string
	if cmdPrefix == "" {
		tcpUserTimeoutFlagName = "tcp_user_timeout"
	} else {
		tcpUserTimeoutFlagName = fmt.Sprintf("%v.tcp_user_timeout", cmdPrefix)
	}

	var tcpUserTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tcpUserTimeoutFlagName, tcpUserTimeoutFlagDefault, tcpUserTimeoutDescription)

	return nil
}

func registerBindParamsTfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tfoDescription := ``

	var tfoFlagName string
	if cmdPrefix == "" {
		tfoFlagName = "tfo"
	} else {
		tfoFlagName = fmt.Sprintf("%v.tfo", cmdPrefix)
	}

	var tfoFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tfoFlagName, tfoFlagDefault, tfoDescription)

	return nil
}

func registerBindParamsTLSTicketKeys(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsTicketKeysDescription := ``

	var tlsTicketKeysFlagName string
	if cmdPrefix == "" {
		tlsTicketKeysFlagName = "tls_ticket_keys"
	} else {
		tlsTicketKeysFlagName = fmt.Sprintf("%v.tls_ticket_keys", cmdPrefix)
	}

	var tlsTicketKeysFlagDefault string

	_ = cmd.PersistentFlags().String(tlsTicketKeysFlagName, tlsTicketKeysFlagDefault, tlsTicketKeysDescription)

	return nil
}

func registerBindParamsTransparent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transparentDescription := ``

	var transparentFlagName string
	if cmdPrefix == "" {
		transparentFlagName = "transparent"
	} else {
		transparentFlagName = fmt.Sprintf("%v.transparent", cmdPrefix)
	}

	var transparentFlagDefault bool

	_ = cmd.PersistentFlags().Bool(transparentFlagName, transparentFlagDefault, transparentDescription)

	return nil
}

func registerBindParamsUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uidDescription := ``

	var uidFlagName string
	if cmdPrefix == "" {
		uidFlagName = "uid"
	} else {
		uidFlagName = fmt.Sprintf("%v.uid", cmdPrefix)
	}

	var uidFlagDefault string

	_ = cmd.PersistentFlags().String(uidFlagName, uidFlagDefault, uidDescription)

	return nil
}

func registerBindParamsUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userDescription := ``

	var userFlagName string
	if cmdPrefix == "" {
		userFlagName = "user"
	} else {
		userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
	}

	var userFlagDefault string

	_ = cmd.PersistentFlags().String(userFlagName, userFlagDefault, userDescription)

	return nil
}

func registerBindParamsV4v6(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	v4v6Description := ``

	var v4v6FlagName string
	if cmdPrefix == "" {
		v4v6FlagName = "v4v6"
	} else {
		v4v6FlagName = fmt.Sprintf("%v.v4v6", cmdPrefix)
	}

	var v4v6FlagDefault bool

	_ = cmd.PersistentFlags().Bool(v4v6FlagName, v4v6FlagDefault, v4v6Description)

	return nil
}

func registerBindParamsV6only(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	v6onlyDescription := ``

	var v6onlyFlagName string
	if cmdPrefix == "" {
		v6onlyFlagName = "v6only"
	} else {
		v6onlyFlagName = fmt.Sprintf("%v.v6only", cmdPrefix)
	}

	var v6onlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(v6onlyFlagName, v6onlyFlagDefault, v6onlyDescription)

	return nil
}

func registerBindParamsVerify(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	verifyDescription := `Enum: ["none","optional","required"]. `

	var verifyFlagName string
	if cmdPrefix == "" {
		verifyFlagName = "verify"
	} else {
		verifyFlagName = fmt.Sprintf("%v.verify", cmdPrefix)
	}

	var verifyFlagDefault string

	_ = cmd.PersistentFlags().String(verifyFlagName, verifyFlagDefault, verifyDescription)

	if err := cmd.RegisterFlagCompletionFunc(verifyFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["none","optional","required"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBindParamsFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, acceptNetscalerCipAdded := retrieveBindParamsAcceptNetscalerCipFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || acceptNetscalerCipAdded

	err, acceptProxyAdded := retrieveBindParamsAcceptProxyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || acceptProxyAdded

	err, allow0rttAdded := retrieveBindParamsAllow0rttFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allow0rttAdded

	err, alpnAdded := retrieveBindParamsAlpnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || alpnAdded

	err, backlogAdded := retrieveBindParamsBacklogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || backlogAdded

	err, caIgnoreErrAdded := retrieveBindParamsCaIgnoreErrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || caIgnoreErrAdded

	err, caSignFileAdded := retrieveBindParamsCaSignFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || caSignFileAdded

	err, caSignPassAdded := retrieveBindParamsCaSignPassFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || caSignPassAdded

	err, caVerifyFileAdded := retrieveBindParamsCaVerifyFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || caVerifyFileAdded

	err, ciphersAdded := retrieveBindParamsCiphersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ciphersAdded

	err, ciphersuitesAdded := retrieveBindParamsCiphersuitesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ciphersuitesAdded

	err, crlFileAdded := retrieveBindParamsCrlFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || crlFileAdded

	err, crtIgnoreErrAdded := retrieveBindParamsCrtIgnoreErrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || crtIgnoreErrAdded

	err, crtListAdded := retrieveBindParamsCrtListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || crtListAdded

	err, curvesAdded := retrieveBindParamsCurvesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || curvesAdded

	err, deferAcceptAdded := retrieveBindParamsDeferAcceptFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deferAcceptAdded

	err, ecdheAdded := retrieveBindParamsEcdheFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ecdheAdded

	err, exposeFdListenersAdded := retrieveBindParamsExposeFdListenersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || exposeFdListenersAdded

	err, forceSslv3Added := retrieveBindParamsForceSslv3Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceSslv3Added

	err, forceTlsv10Added := retrieveBindParamsForceTlsv10Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceTlsv10Added

	err, forceTlsv11Added := retrieveBindParamsForceTlsv11Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceTlsv11Added

	err, forceTlsv12Added := retrieveBindParamsForceTlsv12Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceTlsv12Added

	err, forceTlsv13Added := retrieveBindParamsForceTlsv13Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceTlsv13Added

	err, generateCertificatesAdded := retrieveBindParamsGenerateCertificatesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || generateCertificatesAdded

	err, gidAdded := retrieveBindParamsGidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gidAdded

	err, groupAdded := retrieveBindParamsGroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || groupAdded

	err, idAdded := retrieveBindParamsIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, interfaceAdded := retrieveBindParamsInterfaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interfaceAdded

	err, levelAdded := retrieveBindParamsLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || levelAdded

	err, maxconnAdded := retrieveBindParamsMaxconnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxconnAdded

	err, modeAdded := retrieveBindParamsModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, mssAdded := retrieveBindParamsMssFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mssAdded

	err, nameAdded := retrieveBindParamsNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, namespaceAdded := retrieveBindParamsNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	err, niceAdded := retrieveBindParamsNiceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || niceAdded

	err, noCaNamesAdded := retrieveBindParamsNoCaNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noCaNamesAdded

	err, noSslv3Added := retrieveBindParamsNoSslv3Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noSslv3Added

	err, noTlsTicketsAdded := retrieveBindParamsNoTLSTicketsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noTlsTicketsAdded

	err, noTlsv10Added := retrieveBindParamsNoTlsv10Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noTlsv10Added

	err, noTlsv11Added := retrieveBindParamsNoTlsv11Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noTlsv11Added

	err, noTlsv12Added := retrieveBindParamsNoTlsv12Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noTlsv12Added

	err, noTlsv13Added := retrieveBindParamsNoTlsv13Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noTlsv13Added

	err, npnAdded := retrieveBindParamsNpnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || npnAdded

	err, preferClientCiphersAdded := retrieveBindParamsPreferClientCiphersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || preferClientCiphersAdded

	err, processAdded := retrieveBindParamsProcessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || processAdded

	err, protoAdded := retrieveBindParamsProtoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protoAdded

	err, severityOutputAdded := retrieveBindParamsSeverityOutputFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || severityOutputAdded

	err, sslAdded := retrieveBindParamsSslFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslAdded

	err, sslCafileAdded := retrieveBindParamsSslCafileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslCafileAdded

	err, sslCertificateAdded := retrieveBindParamsSslCertificateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslCertificateAdded

	err, sslMaxVerAdded := retrieveBindParamsSslMaxVerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslMaxVerAdded

	err, sslMinVerAdded := retrieveBindParamsSslMinVerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslMinVerAdded

	err, strictSniAdded := retrieveBindParamsStrictSniFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || strictSniAdded

	err, tcpUserTimeoutAdded := retrieveBindParamsTCPUserTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpUserTimeoutAdded

	err, tfoAdded := retrieveBindParamsTfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tfoAdded

	err, tlsTicketKeysAdded := retrieveBindParamsTLSTicketKeysFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsTicketKeysAdded

	err, transparentAdded := retrieveBindParamsTransparentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transparentAdded

	err, uidAdded := retrieveBindParamsUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uidAdded

	err, userAdded := retrieveBindParamsUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded

	err, v4v6Added := retrieveBindParamsV4v6Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || v4v6Added

	err, v6onlyAdded := retrieveBindParamsV6onlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || v6onlyAdded

	err, verifyAdded := retrieveBindParamsVerifyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || verifyAdded

	return nil, retAdded
}

func retrieveBindParamsAcceptNetscalerCipFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	acceptNetscalerCipFlagName := fmt.Sprintf("%v.accept_netscaler_cip", cmdPrefix)
	if cmd.Flags().Changed(acceptNetscalerCipFlagName) {

		var acceptNetscalerCipFlagName string
		if cmdPrefix == "" {
			acceptNetscalerCipFlagName = "accept_netscaler_cip"
		} else {
			acceptNetscalerCipFlagName = fmt.Sprintf("%v.accept_netscaler_cip", cmdPrefix)
		}

		acceptNetscalerCipFlagValue, err := cmd.Flags().GetInt64(acceptNetscalerCipFlagName)
		if err != nil {
			return err, false
		}
		m.AcceptNetscalerCip = acceptNetscalerCipFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsAcceptProxyFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	acceptProxyFlagName := fmt.Sprintf("%v.accept_proxy", cmdPrefix)
	if cmd.Flags().Changed(acceptProxyFlagName) {

		var acceptProxyFlagName string
		if cmdPrefix == "" {
			acceptProxyFlagName = "accept_proxy"
		} else {
			acceptProxyFlagName = fmt.Sprintf("%v.accept_proxy", cmdPrefix)
		}

		acceptProxyFlagValue, err := cmd.Flags().GetBool(acceptProxyFlagName)
		if err != nil {
			return err, false
		}
		m.AcceptProxy = acceptProxyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsAllow0rttFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allow0rttFlagName := fmt.Sprintf("%v.allow_0rtt", cmdPrefix)
	if cmd.Flags().Changed(allow0rttFlagName) {

		var allow0rttFlagName string
		if cmdPrefix == "" {
			allow0rttFlagName = "allow_0rtt"
		} else {
			allow0rttFlagName = fmt.Sprintf("%v.allow_0rtt", cmdPrefix)
		}

		allow0rttFlagValue, err := cmd.Flags().GetBool(allow0rttFlagName)
		if err != nil {
			return err, false
		}
		m.Allow0rtt = allow0rttFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsAlpnFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	alpnFlagName := fmt.Sprintf("%v.alpn", cmdPrefix)
	if cmd.Flags().Changed(alpnFlagName) {

		var alpnFlagName string
		if cmdPrefix == "" {
			alpnFlagName = "alpn"
		} else {
			alpnFlagName = fmt.Sprintf("%v.alpn", cmdPrefix)
		}

		alpnFlagValue, err := cmd.Flags().GetString(alpnFlagName)
		if err != nil {
			return err, false
		}
		m.Alpn = alpnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsBacklogFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	backlogFlagName := fmt.Sprintf("%v.backlog", cmdPrefix)
	if cmd.Flags().Changed(backlogFlagName) {

		var backlogFlagName string
		if cmdPrefix == "" {
			backlogFlagName = "backlog"
		} else {
			backlogFlagName = fmt.Sprintf("%v.backlog", cmdPrefix)
		}

		backlogFlagValue, err := cmd.Flags().GetString(backlogFlagName)
		if err != nil {
			return err, false
		}
		m.Backlog = backlogFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsCaIgnoreErrFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	caIgnoreErrFlagName := fmt.Sprintf("%v.ca_ignore_err", cmdPrefix)
	if cmd.Flags().Changed(caIgnoreErrFlagName) {

		var caIgnoreErrFlagName string
		if cmdPrefix == "" {
			caIgnoreErrFlagName = "ca_ignore_err"
		} else {
			caIgnoreErrFlagName = fmt.Sprintf("%v.ca_ignore_err", cmdPrefix)
		}

		caIgnoreErrFlagValue, err := cmd.Flags().GetString(caIgnoreErrFlagName)
		if err != nil {
			return err, false
		}
		m.CaIgnoreErr = caIgnoreErrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsCaSignFileFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	caSignFileFlagName := fmt.Sprintf("%v.ca_sign_file", cmdPrefix)
	if cmd.Flags().Changed(caSignFileFlagName) {

		var caSignFileFlagName string
		if cmdPrefix == "" {
			caSignFileFlagName = "ca_sign_file"
		} else {
			caSignFileFlagName = fmt.Sprintf("%v.ca_sign_file", cmdPrefix)
		}

		caSignFileFlagValue, err := cmd.Flags().GetString(caSignFileFlagName)
		if err != nil {
			return err, false
		}
		m.CaSignFile = caSignFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsCaSignPassFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	caSignPassFlagName := fmt.Sprintf("%v.ca_sign_pass", cmdPrefix)
	if cmd.Flags().Changed(caSignPassFlagName) {

		var caSignPassFlagName string
		if cmdPrefix == "" {
			caSignPassFlagName = "ca_sign_pass"
		} else {
			caSignPassFlagName = fmt.Sprintf("%v.ca_sign_pass", cmdPrefix)
		}

		caSignPassFlagValue, err := cmd.Flags().GetString(caSignPassFlagName)
		if err != nil {
			return err, false
		}
		m.CaSignPass = caSignPassFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsCaVerifyFileFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	caVerifyFileFlagName := fmt.Sprintf("%v.ca_verify_file", cmdPrefix)
	if cmd.Flags().Changed(caVerifyFileFlagName) {

		var caVerifyFileFlagName string
		if cmdPrefix == "" {
			caVerifyFileFlagName = "ca_verify_file"
		} else {
			caVerifyFileFlagName = fmt.Sprintf("%v.ca_verify_file", cmdPrefix)
		}

		caVerifyFileFlagValue, err := cmd.Flags().GetString(caVerifyFileFlagName)
		if err != nil {
			return err, false
		}
		m.CaVerifyFile = caVerifyFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsCiphersFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ciphersFlagName := fmt.Sprintf("%v.ciphers", cmdPrefix)
	if cmd.Flags().Changed(ciphersFlagName) {

		var ciphersFlagName string
		if cmdPrefix == "" {
			ciphersFlagName = "ciphers"
		} else {
			ciphersFlagName = fmt.Sprintf("%v.ciphers", cmdPrefix)
		}

		ciphersFlagValue, err := cmd.Flags().GetString(ciphersFlagName)
		if err != nil {
			return err, false
		}
		m.Ciphers = ciphersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsCiphersuitesFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ciphersuitesFlagName := fmt.Sprintf("%v.ciphersuites", cmdPrefix)
	if cmd.Flags().Changed(ciphersuitesFlagName) {

		var ciphersuitesFlagName string
		if cmdPrefix == "" {
			ciphersuitesFlagName = "ciphersuites"
		} else {
			ciphersuitesFlagName = fmt.Sprintf("%v.ciphersuites", cmdPrefix)
		}

		ciphersuitesFlagValue, err := cmd.Flags().GetString(ciphersuitesFlagName)
		if err != nil {
			return err, false
		}
		m.Ciphersuites = ciphersuitesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsCrlFileFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	crlFileFlagName := fmt.Sprintf("%v.crl_file", cmdPrefix)
	if cmd.Flags().Changed(crlFileFlagName) {

		var crlFileFlagName string
		if cmdPrefix == "" {
			crlFileFlagName = "crl_file"
		} else {
			crlFileFlagName = fmt.Sprintf("%v.crl_file", cmdPrefix)
		}

		crlFileFlagValue, err := cmd.Flags().GetString(crlFileFlagName)
		if err != nil {
			return err, false
		}
		m.CrlFile = crlFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsCrtIgnoreErrFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	crtIgnoreErrFlagName := fmt.Sprintf("%v.crt_ignore_err", cmdPrefix)
	if cmd.Flags().Changed(crtIgnoreErrFlagName) {

		var crtIgnoreErrFlagName string
		if cmdPrefix == "" {
			crtIgnoreErrFlagName = "crt_ignore_err"
		} else {
			crtIgnoreErrFlagName = fmt.Sprintf("%v.crt_ignore_err", cmdPrefix)
		}

		crtIgnoreErrFlagValue, err := cmd.Flags().GetString(crtIgnoreErrFlagName)
		if err != nil {
			return err, false
		}
		m.CrtIgnoreErr = crtIgnoreErrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsCrtListFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	crtListFlagName := fmt.Sprintf("%v.crt_list", cmdPrefix)
	if cmd.Flags().Changed(crtListFlagName) {

		var crtListFlagName string
		if cmdPrefix == "" {
			crtListFlagName = "crt_list"
		} else {
			crtListFlagName = fmt.Sprintf("%v.crt_list", cmdPrefix)
		}

		crtListFlagValue, err := cmd.Flags().GetString(crtListFlagName)
		if err != nil {
			return err, false
		}
		m.CrtList = crtListFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsCurvesFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	curvesFlagName := fmt.Sprintf("%v.curves", cmdPrefix)
	if cmd.Flags().Changed(curvesFlagName) {

		var curvesFlagName string
		if cmdPrefix == "" {
			curvesFlagName = "curves"
		} else {
			curvesFlagName = fmt.Sprintf("%v.curves", cmdPrefix)
		}

		curvesFlagValue, err := cmd.Flags().GetString(curvesFlagName)
		if err != nil {
			return err, false
		}
		m.Curves = curvesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsDeferAcceptFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deferAcceptFlagName := fmt.Sprintf("%v.defer_accept", cmdPrefix)
	if cmd.Flags().Changed(deferAcceptFlagName) {

		var deferAcceptFlagName string
		if cmdPrefix == "" {
			deferAcceptFlagName = "defer_accept"
		} else {
			deferAcceptFlagName = fmt.Sprintf("%v.defer_accept", cmdPrefix)
		}

		deferAcceptFlagValue, err := cmd.Flags().GetBool(deferAcceptFlagName)
		if err != nil {
			return err, false
		}
		m.DeferAccept = deferAcceptFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsEcdheFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ecdheFlagName := fmt.Sprintf("%v.ecdhe", cmdPrefix)
	if cmd.Flags().Changed(ecdheFlagName) {

		var ecdheFlagName string
		if cmdPrefix == "" {
			ecdheFlagName = "ecdhe"
		} else {
			ecdheFlagName = fmt.Sprintf("%v.ecdhe", cmdPrefix)
		}

		ecdheFlagValue, err := cmd.Flags().GetString(ecdheFlagName)
		if err != nil {
			return err, false
		}
		m.Ecdhe = ecdheFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsExposeFdListenersFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	exposeFdListenersFlagName := fmt.Sprintf("%v.expose_fd_listeners", cmdPrefix)
	if cmd.Flags().Changed(exposeFdListenersFlagName) {

		var exposeFdListenersFlagName string
		if cmdPrefix == "" {
			exposeFdListenersFlagName = "expose_fd_listeners"
		} else {
			exposeFdListenersFlagName = fmt.Sprintf("%v.expose_fd_listeners", cmdPrefix)
		}

		exposeFdListenersFlagValue, err := cmd.Flags().GetBool(exposeFdListenersFlagName)
		if err != nil {
			return err, false
		}
		m.ExposeFdListeners = exposeFdListenersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsForceSslv3Flags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceSslv3FlagName := fmt.Sprintf("%v.force_sslv3", cmdPrefix)
	if cmd.Flags().Changed(forceSslv3FlagName) {

		var forceSslv3FlagName string
		if cmdPrefix == "" {
			forceSslv3FlagName = "force_sslv3"
		} else {
			forceSslv3FlagName = fmt.Sprintf("%v.force_sslv3", cmdPrefix)
		}

		forceSslv3FlagValue, err := cmd.Flags().GetBool(forceSslv3FlagName)
		if err != nil {
			return err, false
		}
		m.ForceSslv3 = forceSslv3FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsForceTlsv10Flags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceTlsv10FlagName := fmt.Sprintf("%v.force_tlsv10", cmdPrefix)
	if cmd.Flags().Changed(forceTlsv10FlagName) {

		var forceTlsv10FlagName string
		if cmdPrefix == "" {
			forceTlsv10FlagName = "force_tlsv10"
		} else {
			forceTlsv10FlagName = fmt.Sprintf("%v.force_tlsv10", cmdPrefix)
		}

		forceTlsv10FlagValue, err := cmd.Flags().GetBool(forceTlsv10FlagName)
		if err != nil {
			return err, false
		}
		m.ForceTlsv10 = forceTlsv10FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsForceTlsv11Flags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceTlsv11FlagName := fmt.Sprintf("%v.force_tlsv11", cmdPrefix)
	if cmd.Flags().Changed(forceTlsv11FlagName) {

		var forceTlsv11FlagName string
		if cmdPrefix == "" {
			forceTlsv11FlagName = "force_tlsv11"
		} else {
			forceTlsv11FlagName = fmt.Sprintf("%v.force_tlsv11", cmdPrefix)
		}

		forceTlsv11FlagValue, err := cmd.Flags().GetBool(forceTlsv11FlagName)
		if err != nil {
			return err, false
		}
		m.ForceTlsv11 = forceTlsv11FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsForceTlsv12Flags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceTlsv12FlagName := fmt.Sprintf("%v.force_tlsv12", cmdPrefix)
	if cmd.Flags().Changed(forceTlsv12FlagName) {

		var forceTlsv12FlagName string
		if cmdPrefix == "" {
			forceTlsv12FlagName = "force_tlsv12"
		} else {
			forceTlsv12FlagName = fmt.Sprintf("%v.force_tlsv12", cmdPrefix)
		}

		forceTlsv12FlagValue, err := cmd.Flags().GetBool(forceTlsv12FlagName)
		if err != nil {
			return err, false
		}
		m.ForceTlsv12 = forceTlsv12FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsForceTlsv13Flags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceTlsv13FlagName := fmt.Sprintf("%v.force_tlsv13", cmdPrefix)
	if cmd.Flags().Changed(forceTlsv13FlagName) {

		var forceTlsv13FlagName string
		if cmdPrefix == "" {
			forceTlsv13FlagName = "force_tlsv13"
		} else {
			forceTlsv13FlagName = fmt.Sprintf("%v.force_tlsv13", cmdPrefix)
		}

		forceTlsv13FlagValue, err := cmd.Flags().GetBool(forceTlsv13FlagName)
		if err != nil {
			return err, false
		}
		m.ForceTlsv13 = forceTlsv13FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsGenerateCertificatesFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	generateCertificatesFlagName := fmt.Sprintf("%v.generate_certificates", cmdPrefix)
	if cmd.Flags().Changed(generateCertificatesFlagName) {

		var generateCertificatesFlagName string
		if cmdPrefix == "" {
			generateCertificatesFlagName = "generate_certificates"
		} else {
			generateCertificatesFlagName = fmt.Sprintf("%v.generate_certificates", cmdPrefix)
		}

		generateCertificatesFlagValue, err := cmd.Flags().GetBool(generateCertificatesFlagName)
		if err != nil {
			return err, false
		}
		m.GenerateCertificates = generateCertificatesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsGidFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gidFlagName := fmt.Sprintf("%v.gid", cmdPrefix)
	if cmd.Flags().Changed(gidFlagName) {

		var gidFlagName string
		if cmdPrefix == "" {
			gidFlagName = "gid"
		} else {
			gidFlagName = fmt.Sprintf("%v.gid", cmdPrefix)
		}

		gidFlagValue, err := cmd.Flags().GetInt64(gidFlagName)
		if err != nil {
			return err, false
		}
		m.Gid = gidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsGroupFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	groupFlagName := fmt.Sprintf("%v.group", cmdPrefix)
	if cmd.Flags().Changed(groupFlagName) {

		var groupFlagName string
		if cmdPrefix == "" {
			groupFlagName = "group"
		} else {
			groupFlagName = fmt.Sprintf("%v.group", cmdPrefix)
		}

		groupFlagValue, err := cmd.Flags().GetString(groupFlagName)
		if err != nil {
			return err, false
		}
		m.Group = groupFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsIDFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsInterfaceFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interfaceFlagName := fmt.Sprintf("%v.interface", cmdPrefix)
	if cmd.Flags().Changed(interfaceFlagName) {

		var interfaceFlagName string
		if cmdPrefix == "" {
			interfaceFlagName = "interface"
		} else {
			interfaceFlagName = fmt.Sprintf("%v.interface", cmdPrefix)
		}

		interfaceFlagValue, err := cmd.Flags().GetString(interfaceFlagName)
		if err != nil {
			return err, false
		}
		m.Interface = interfaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsLevelFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	levelFlagName := fmt.Sprintf("%v.level", cmdPrefix)
	if cmd.Flags().Changed(levelFlagName) {

		var levelFlagName string
		if cmdPrefix == "" {
			levelFlagName = "level"
		} else {
			levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
		}

		levelFlagValue, err := cmd.Flags().GetString(levelFlagName)
		if err != nil {
			return err, false
		}
		m.Level = levelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsMaxconnFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxconnFlagName := fmt.Sprintf("%v.maxconn", cmdPrefix)
	if cmd.Flags().Changed(maxconnFlagName) {

		var maxconnFlagName string
		if cmdPrefix == "" {
			maxconnFlagName = "maxconn"
		} else {
			maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
		}

		maxconnFlagValue, err := cmd.Flags().GetInt64(maxconnFlagName)
		if err != nil {
			return err, false
		}
		m.Maxconn = maxconnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsModeFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsMssFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mssFlagName := fmt.Sprintf("%v.mss", cmdPrefix)
	if cmd.Flags().Changed(mssFlagName) {

		var mssFlagName string
		if cmdPrefix == "" {
			mssFlagName = "mss"
		} else {
			mssFlagName = fmt.Sprintf("%v.mss", cmdPrefix)
		}

		mssFlagValue, err := cmd.Flags().GetString(mssFlagName)
		if err != nil {
			return err, false
		}
		m.Mss = mssFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsNameFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsNamespaceFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsNiceFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	niceFlagName := fmt.Sprintf("%v.nice", cmdPrefix)
	if cmd.Flags().Changed(niceFlagName) {

		var niceFlagName string
		if cmdPrefix == "" {
			niceFlagName = "nice"
		} else {
			niceFlagName = fmt.Sprintf("%v.nice", cmdPrefix)
		}

		niceFlagValue, err := cmd.Flags().GetInt64(niceFlagName)
		if err != nil {
			return err, false
		}
		m.Nice = niceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsNoCaNamesFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noCaNamesFlagName := fmt.Sprintf("%v.no_ca_names", cmdPrefix)
	if cmd.Flags().Changed(noCaNamesFlagName) {

		var noCaNamesFlagName string
		if cmdPrefix == "" {
			noCaNamesFlagName = "no_ca_names"
		} else {
			noCaNamesFlagName = fmt.Sprintf("%v.no_ca_names", cmdPrefix)
		}

		noCaNamesFlagValue, err := cmd.Flags().GetBool(noCaNamesFlagName)
		if err != nil {
			return err, false
		}
		m.NoCaNames = noCaNamesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsNoSslv3Flags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noSslv3FlagName := fmt.Sprintf("%v.no_sslv3", cmdPrefix)
	if cmd.Flags().Changed(noSslv3FlagName) {

		var noSslv3FlagName string
		if cmdPrefix == "" {
			noSslv3FlagName = "no_sslv3"
		} else {
			noSslv3FlagName = fmt.Sprintf("%v.no_sslv3", cmdPrefix)
		}

		noSslv3FlagValue, err := cmd.Flags().GetBool(noSslv3FlagName)
		if err != nil {
			return err, false
		}
		m.NoSslv3 = noSslv3FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsNoTLSTicketsFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noTlsTicketsFlagName := fmt.Sprintf("%v.no_tls_tickets", cmdPrefix)
	if cmd.Flags().Changed(noTlsTicketsFlagName) {

		var noTlsTicketsFlagName string
		if cmdPrefix == "" {
			noTlsTicketsFlagName = "no_tls_tickets"
		} else {
			noTlsTicketsFlagName = fmt.Sprintf("%v.no_tls_tickets", cmdPrefix)
		}

		noTlsTicketsFlagValue, err := cmd.Flags().GetBool(noTlsTicketsFlagName)
		if err != nil {
			return err, false
		}
		m.NoTLSTickets = noTlsTicketsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsNoTlsv10Flags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noTlsv10FlagName := fmt.Sprintf("%v.no_tlsv10", cmdPrefix)
	if cmd.Flags().Changed(noTlsv10FlagName) {

		var noTlsv10FlagName string
		if cmdPrefix == "" {
			noTlsv10FlagName = "no_tlsv10"
		} else {
			noTlsv10FlagName = fmt.Sprintf("%v.no_tlsv10", cmdPrefix)
		}

		noTlsv10FlagValue, err := cmd.Flags().GetBool(noTlsv10FlagName)
		if err != nil {
			return err, false
		}
		m.NoTlsv10 = noTlsv10FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsNoTlsv11Flags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noTlsv11FlagName := fmt.Sprintf("%v.no_tlsv11", cmdPrefix)
	if cmd.Flags().Changed(noTlsv11FlagName) {

		var noTlsv11FlagName string
		if cmdPrefix == "" {
			noTlsv11FlagName = "no_tlsv11"
		} else {
			noTlsv11FlagName = fmt.Sprintf("%v.no_tlsv11", cmdPrefix)
		}

		noTlsv11FlagValue, err := cmd.Flags().GetBool(noTlsv11FlagName)
		if err != nil {
			return err, false
		}
		m.NoTlsv11 = noTlsv11FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsNoTlsv12Flags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noTlsv12FlagName := fmt.Sprintf("%v.no_tlsv12", cmdPrefix)
	if cmd.Flags().Changed(noTlsv12FlagName) {

		var noTlsv12FlagName string
		if cmdPrefix == "" {
			noTlsv12FlagName = "no_tlsv12"
		} else {
			noTlsv12FlagName = fmt.Sprintf("%v.no_tlsv12", cmdPrefix)
		}

		noTlsv12FlagValue, err := cmd.Flags().GetBool(noTlsv12FlagName)
		if err != nil {
			return err, false
		}
		m.NoTlsv12 = noTlsv12FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsNoTlsv13Flags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noTlsv13FlagName := fmt.Sprintf("%v.no_tlsv13", cmdPrefix)
	if cmd.Flags().Changed(noTlsv13FlagName) {

		var noTlsv13FlagName string
		if cmdPrefix == "" {
			noTlsv13FlagName = "no_tlsv13"
		} else {
			noTlsv13FlagName = fmt.Sprintf("%v.no_tlsv13", cmdPrefix)
		}

		noTlsv13FlagValue, err := cmd.Flags().GetBool(noTlsv13FlagName)
		if err != nil {
			return err, false
		}
		m.NoTlsv13 = noTlsv13FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsNpnFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	npnFlagName := fmt.Sprintf("%v.npn", cmdPrefix)
	if cmd.Flags().Changed(npnFlagName) {

		var npnFlagName string
		if cmdPrefix == "" {
			npnFlagName = "npn"
		} else {
			npnFlagName = fmt.Sprintf("%v.npn", cmdPrefix)
		}

		npnFlagValue, err := cmd.Flags().GetString(npnFlagName)
		if err != nil {
			return err, false
		}
		m.Npn = npnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsPreferClientCiphersFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	preferClientCiphersFlagName := fmt.Sprintf("%v.prefer_client_ciphers", cmdPrefix)
	if cmd.Flags().Changed(preferClientCiphersFlagName) {

		var preferClientCiphersFlagName string
		if cmdPrefix == "" {
			preferClientCiphersFlagName = "prefer_client_ciphers"
		} else {
			preferClientCiphersFlagName = fmt.Sprintf("%v.prefer_client_ciphers", cmdPrefix)
		}

		preferClientCiphersFlagValue, err := cmd.Flags().GetBool(preferClientCiphersFlagName)
		if err != nil {
			return err, false
		}
		m.PreferClientCiphers = preferClientCiphersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsProcessFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	processFlagName := fmt.Sprintf("%v.process", cmdPrefix)
	if cmd.Flags().Changed(processFlagName) {

		var processFlagName string
		if cmdPrefix == "" {
			processFlagName = "process"
		} else {
			processFlagName = fmt.Sprintf("%v.process", cmdPrefix)
		}

		processFlagValue, err := cmd.Flags().GetString(processFlagName)
		if err != nil {
			return err, false
		}
		m.Process = processFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsProtoFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protoFlagName := fmt.Sprintf("%v.proto", cmdPrefix)
	if cmd.Flags().Changed(protoFlagName) {

		var protoFlagName string
		if cmdPrefix == "" {
			protoFlagName = "proto"
		} else {
			protoFlagName = fmt.Sprintf("%v.proto", cmdPrefix)
		}

		protoFlagValue, err := cmd.Flags().GetString(protoFlagName)
		if err != nil {
			return err, false
		}
		m.Proto = protoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsSeverityOutputFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	severityOutputFlagName := fmt.Sprintf("%v.severity_output", cmdPrefix)
	if cmd.Flags().Changed(severityOutputFlagName) {

		var severityOutputFlagName string
		if cmdPrefix == "" {
			severityOutputFlagName = "severity_output"
		} else {
			severityOutputFlagName = fmt.Sprintf("%v.severity_output", cmdPrefix)
		}

		severityOutputFlagValue, err := cmd.Flags().GetString(severityOutputFlagName)
		if err != nil {
			return err, false
		}
		m.SeverityOutput = severityOutputFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsSslFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslFlagName := fmt.Sprintf("%v.ssl", cmdPrefix)
	if cmd.Flags().Changed(sslFlagName) {

		var sslFlagName string
		if cmdPrefix == "" {
			sslFlagName = "ssl"
		} else {
			sslFlagName = fmt.Sprintf("%v.ssl", cmdPrefix)
		}

		sslFlagValue, err := cmd.Flags().GetBool(sslFlagName)
		if err != nil {
			return err, false
		}
		m.Ssl = sslFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsSslCafileFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslCafileFlagName := fmt.Sprintf("%v.ssl_cafile", cmdPrefix)
	if cmd.Flags().Changed(sslCafileFlagName) {

		var sslCafileFlagName string
		if cmdPrefix == "" {
			sslCafileFlagName = "ssl_cafile"
		} else {
			sslCafileFlagName = fmt.Sprintf("%v.ssl_cafile", cmdPrefix)
		}

		sslCafileFlagValue, err := cmd.Flags().GetString(sslCafileFlagName)
		if err != nil {
			return err, false
		}
		m.SslCafile = sslCafileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsSslCertificateFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslCertificateFlagName := fmt.Sprintf("%v.ssl_certificate", cmdPrefix)
	if cmd.Flags().Changed(sslCertificateFlagName) {

		var sslCertificateFlagName string
		if cmdPrefix == "" {
			sslCertificateFlagName = "ssl_certificate"
		} else {
			sslCertificateFlagName = fmt.Sprintf("%v.ssl_certificate", cmdPrefix)
		}

		sslCertificateFlagValue, err := cmd.Flags().GetString(sslCertificateFlagName)
		if err != nil {
			return err, false
		}
		m.SslCertificate = sslCertificateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsSslMaxVerFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslMaxVerFlagName := fmt.Sprintf("%v.ssl_max_ver", cmdPrefix)
	if cmd.Flags().Changed(sslMaxVerFlagName) {

		var sslMaxVerFlagName string
		if cmdPrefix == "" {
			sslMaxVerFlagName = "ssl_max_ver"
		} else {
			sslMaxVerFlagName = fmt.Sprintf("%v.ssl_max_ver", cmdPrefix)
		}

		sslMaxVerFlagValue, err := cmd.Flags().GetString(sslMaxVerFlagName)
		if err != nil {
			return err, false
		}
		m.SslMaxVer = sslMaxVerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsSslMinVerFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslMinVerFlagName := fmt.Sprintf("%v.ssl_min_ver", cmdPrefix)
	if cmd.Flags().Changed(sslMinVerFlagName) {

		var sslMinVerFlagName string
		if cmdPrefix == "" {
			sslMinVerFlagName = "ssl_min_ver"
		} else {
			sslMinVerFlagName = fmt.Sprintf("%v.ssl_min_ver", cmdPrefix)
		}

		sslMinVerFlagValue, err := cmd.Flags().GetString(sslMinVerFlagName)
		if err != nil {
			return err, false
		}
		m.SslMinVer = sslMinVerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsStrictSniFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	strictSniFlagName := fmt.Sprintf("%v.strict_sni", cmdPrefix)
	if cmd.Flags().Changed(strictSniFlagName) {

		var strictSniFlagName string
		if cmdPrefix == "" {
			strictSniFlagName = "strict_sni"
		} else {
			strictSniFlagName = fmt.Sprintf("%v.strict_sni", cmdPrefix)
		}

		strictSniFlagValue, err := cmd.Flags().GetBool(strictSniFlagName)
		if err != nil {
			return err, false
		}
		m.StrictSni = strictSniFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsTCPUserTimeoutFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpUserTimeoutFlagName := fmt.Sprintf("%v.tcp_user_timeout", cmdPrefix)
	if cmd.Flags().Changed(tcpUserTimeoutFlagName) {

		var tcpUserTimeoutFlagName string
		if cmdPrefix == "" {
			tcpUserTimeoutFlagName = "tcp_user_timeout"
		} else {
			tcpUserTimeoutFlagName = fmt.Sprintf("%v.tcp_user_timeout", cmdPrefix)
		}

		tcpUserTimeoutFlagValue, err := cmd.Flags().GetInt64(tcpUserTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.TCPUserTimeout = &tcpUserTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsTfoFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tfoFlagName := fmt.Sprintf("%v.tfo", cmdPrefix)
	if cmd.Flags().Changed(tfoFlagName) {

		var tfoFlagName string
		if cmdPrefix == "" {
			tfoFlagName = "tfo"
		} else {
			tfoFlagName = fmt.Sprintf("%v.tfo", cmdPrefix)
		}

		tfoFlagValue, err := cmd.Flags().GetBool(tfoFlagName)
		if err != nil {
			return err, false
		}
		m.Tfo = tfoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsTLSTicketKeysFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsTicketKeysFlagName := fmt.Sprintf("%v.tls_ticket_keys", cmdPrefix)
	if cmd.Flags().Changed(tlsTicketKeysFlagName) {

		var tlsTicketKeysFlagName string
		if cmdPrefix == "" {
			tlsTicketKeysFlagName = "tls_ticket_keys"
		} else {
			tlsTicketKeysFlagName = fmt.Sprintf("%v.tls_ticket_keys", cmdPrefix)
		}

		tlsTicketKeysFlagValue, err := cmd.Flags().GetString(tlsTicketKeysFlagName)
		if err != nil {
			return err, false
		}
		m.TLSTicketKeys = tlsTicketKeysFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsTransparentFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transparentFlagName := fmt.Sprintf("%v.transparent", cmdPrefix)
	if cmd.Flags().Changed(transparentFlagName) {

		var transparentFlagName string
		if cmdPrefix == "" {
			transparentFlagName = "transparent"
		} else {
			transparentFlagName = fmt.Sprintf("%v.transparent", cmdPrefix)
		}

		transparentFlagValue, err := cmd.Flags().GetBool(transparentFlagName)
		if err != nil {
			return err, false
		}
		m.Transparent = transparentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsUIDFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uidFlagName := fmt.Sprintf("%v.uid", cmdPrefix)
	if cmd.Flags().Changed(uidFlagName) {

		var uidFlagName string
		if cmdPrefix == "" {
			uidFlagName = "uid"
		} else {
			uidFlagName = fmt.Sprintf("%v.uid", cmdPrefix)
		}

		uidFlagValue, err := cmd.Flags().GetString(uidFlagName)
		if err != nil {
			return err, false
		}
		m.UID = uidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsUserFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userFlagName := fmt.Sprintf("%v.user", cmdPrefix)
	if cmd.Flags().Changed(userFlagName) {

		var userFlagName string
		if cmdPrefix == "" {
			userFlagName = "user"
		} else {
			userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
		}

		userFlagValue, err := cmd.Flags().GetString(userFlagName)
		if err != nil {
			return err, false
		}
		m.User = userFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsV4v6Flags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	v4v6FlagName := fmt.Sprintf("%v.v4v6", cmdPrefix)
	if cmd.Flags().Changed(v4v6FlagName) {

		var v4v6FlagName string
		if cmdPrefix == "" {
			v4v6FlagName = "v4v6"
		} else {
			v4v6FlagName = fmt.Sprintf("%v.v4v6", cmdPrefix)
		}

		v4v6FlagValue, err := cmd.Flags().GetBool(v4v6FlagName)
		if err != nil {
			return err, false
		}
		m.V4v6 = v4v6FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsV6onlyFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	v6onlyFlagName := fmt.Sprintf("%v.v6only", cmdPrefix)
	if cmd.Flags().Changed(v6onlyFlagName) {

		var v6onlyFlagName string
		if cmdPrefix == "" {
			v6onlyFlagName = "v6only"
		} else {
			v6onlyFlagName = fmt.Sprintf("%v.v6only", cmdPrefix)
		}

		v6onlyFlagValue, err := cmd.Flags().GetBool(v6onlyFlagName)
		if err != nil {
			return err, false
		}
		m.V6only = v6onlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBindParamsVerifyFlags(depth int, m *models.BindParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	verifyFlagName := fmt.Sprintf("%v.verify", cmdPrefix)
	if cmd.Flags().Changed(verifyFlagName) {

		var verifyFlagName string
		if cmdPrefix == "" {
			verifyFlagName = "verify"
		} else {
			verifyFlagName = fmt.Sprintf("%v.verify", cmdPrefix)
		}

		verifyFlagValue, err := cmd.Flags().GetString(verifyFlagName)
		if err != nil {
			return err, false
		}
		m.Verify = verifyFlagValue

		retAdded = true
	}

	return nil, retAdded
}
