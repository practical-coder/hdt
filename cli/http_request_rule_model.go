// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/models"
	"github.com/spf13/cobra"
)

// Schema cli for HTTPRequestRule

// register flags to command
func registerModelHTTPRequestRuleFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerHTTPRequestRuleReturnHeaders(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleACLFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleACLKeyfmt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleAuthRealm(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleCacheName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleCaptureID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleCaptureLen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleCaptureSample(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleCond(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleCondTest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleDenyStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleExpr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleHdrFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleHdrMatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleHdrMethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleHdrName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleHintFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleHintName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleLogLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleLuaAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleLuaParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleMapFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleMapKeyfmt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleMapValuefmt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleMarkValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleMethodFmt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleNiceValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleNormalizer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleNormalizerFull(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleNormalizerStrict(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRulePathFmt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRulePathMatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleProtocol(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleQueryFmt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleRedirCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleRedirOption(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleRedirType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleRedirValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleResolvers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleReturnContent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleReturnContentFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleReturnContentType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleReturnStatusCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleScExpr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleScID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleScInt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleServiceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleSpoeEngine(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleSpoeGroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleStrictMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleTimeoutType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleTosValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleTrackSc0Key(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleTrackSc0Table(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleTrackSc1Key(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleTrackSc1Table(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleTrackSc2Key(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleTrackSc2Table(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleURIFmt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleURIMatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleVarExpr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleVarFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleVarName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleVarScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleWaitAtLeast(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPRequestRuleWaitTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerHTTPRequestRuleReturnHeaders(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ReturnHeaders []*ReturnHeader array type is not supported by go-swagger cli yet

	return nil
}

func registerHTTPRequestRuleACLFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aclFileDescription := ``

	var aclFileFlagName string
	if cmdPrefix == "" {
		aclFileFlagName = "acl_file"
	} else {
		aclFileFlagName = fmt.Sprintf("%v.acl_file", cmdPrefix)
	}

	var aclFileFlagDefault string

	_ = cmd.PersistentFlags().String(aclFileFlagName, aclFileFlagDefault, aclFileDescription)

	return nil
}

func registerHTTPRequestRuleACLKeyfmt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aclKeyfmtDescription := ``

	var aclKeyfmtFlagName string
	if cmdPrefix == "" {
		aclKeyfmtFlagName = "acl_keyfmt"
	} else {
		aclKeyfmtFlagName = fmt.Sprintf("%v.acl_keyfmt", cmdPrefix)
	}

	var aclKeyfmtFlagDefault string

	_ = cmd.PersistentFlags().String(aclKeyfmtFlagName, aclKeyfmtFlagDefault, aclKeyfmtDescription)

	return nil
}

func registerHTTPRequestRuleAuthRealm(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authRealmDescription := ``

	var authRealmFlagName string
	if cmdPrefix == "" {
		authRealmFlagName = "auth_realm"
	} else {
		authRealmFlagName = fmt.Sprintf("%v.auth_realm", cmdPrefix)
	}

	var authRealmFlagDefault string

	_ = cmd.PersistentFlags().String(authRealmFlagName, authRealmFlagDefault, authRealmDescription)

	return nil
}

func registerHTTPRequestRuleCacheName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cacheNameDescription := ``

	var cacheNameFlagName string
	if cmdPrefix == "" {
		cacheNameFlagName = "cache_name"
	} else {
		cacheNameFlagName = fmt.Sprintf("%v.cache_name", cmdPrefix)
	}

	var cacheNameFlagDefault string

	_ = cmd.PersistentFlags().String(cacheNameFlagName, cacheNameFlagDefault, cacheNameDescription)

	return nil
}

func registerHTTPRequestRuleCaptureID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	captureIdDescription := ``

	var captureIdFlagName string
	if cmdPrefix == "" {
		captureIdFlagName = "capture_id"
	} else {
		captureIdFlagName = fmt.Sprintf("%v.capture_id", cmdPrefix)
	}

	var captureIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(captureIdFlagName, captureIdFlagDefault, captureIdDescription)

	return nil
}

func registerHTTPRequestRuleCaptureLen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	captureLenDescription := ``

	var captureLenFlagName string
	if cmdPrefix == "" {
		captureLenFlagName = "capture_len"
	} else {
		captureLenFlagName = fmt.Sprintf("%v.capture_len", cmdPrefix)
	}

	var captureLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(captureLenFlagName, captureLenFlagDefault, captureLenDescription)

	return nil
}

func registerHTTPRequestRuleCaptureSample(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	captureSampleDescription := ``

	var captureSampleFlagName string
	if cmdPrefix == "" {
		captureSampleFlagName = "capture_sample"
	} else {
		captureSampleFlagName = fmt.Sprintf("%v.capture_sample", cmdPrefix)
	}

	var captureSampleFlagDefault string

	_ = cmd.PersistentFlags().String(captureSampleFlagName, captureSampleFlagDefault, captureSampleDescription)

	return nil
}

func registerHTTPRequestRuleCond(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condDescription := `Enum: ["if","unless"]. `

	var condFlagName string
	if cmdPrefix == "" {
		condFlagName = "cond"
	} else {
		condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
	}

	var condFlagDefault string

	_ = cmd.PersistentFlags().String(condFlagName, condFlagDefault, condDescription)

	if err := cmd.RegisterFlagCompletionFunc(condFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["if","unless"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPRequestRuleCondTest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condTestDescription := ``

	var condTestFlagName string
	if cmdPrefix == "" {
		condTestFlagName = "cond_test"
	} else {
		condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
	}

	var condTestFlagDefault string

	_ = cmd.PersistentFlags().String(condTestFlagName, condTestFlagDefault, condTestDescription)

	return nil
}

func registerHTTPRequestRuleDenyStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	denyStatusDescription := ``

	var denyStatusFlagName string
	if cmdPrefix == "" {
		denyStatusFlagName = "deny_status"
	} else {
		denyStatusFlagName = fmt.Sprintf("%v.deny_status", cmdPrefix)
	}

	var denyStatusFlagDefault int64

	_ = cmd.PersistentFlags().Int64(denyStatusFlagName, denyStatusFlagDefault, denyStatusDescription)

	return nil
}

func registerHTTPRequestRuleExpr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	exprDescription := ``

	var exprFlagName string
	if cmdPrefix == "" {
		exprFlagName = "expr"
	} else {
		exprFlagName = fmt.Sprintf("%v.expr", cmdPrefix)
	}

	var exprFlagDefault string

	_ = cmd.PersistentFlags().String(exprFlagName, exprFlagDefault, exprDescription)

	return nil
}

func registerHTTPRequestRuleHdrFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrFormatDescription := ``

	var hdrFormatFlagName string
	if cmdPrefix == "" {
		hdrFormatFlagName = "hdr_format"
	} else {
		hdrFormatFlagName = fmt.Sprintf("%v.hdr_format", cmdPrefix)
	}

	var hdrFormatFlagDefault string

	_ = cmd.PersistentFlags().String(hdrFormatFlagName, hdrFormatFlagDefault, hdrFormatDescription)

	return nil
}

func registerHTTPRequestRuleHdrMatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrMatchDescription := ``

	var hdrMatchFlagName string
	if cmdPrefix == "" {
		hdrMatchFlagName = "hdr_match"
	} else {
		hdrMatchFlagName = fmt.Sprintf("%v.hdr_match", cmdPrefix)
	}

	var hdrMatchFlagDefault string

	_ = cmd.PersistentFlags().String(hdrMatchFlagName, hdrMatchFlagDefault, hdrMatchDescription)

	return nil
}

func registerHTTPRequestRuleHdrMethod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrMethodDescription := ``

	var hdrMethodFlagName string
	if cmdPrefix == "" {
		hdrMethodFlagName = "hdr_method"
	} else {
		hdrMethodFlagName = fmt.Sprintf("%v.hdr_method", cmdPrefix)
	}

	var hdrMethodFlagDefault string

	_ = cmd.PersistentFlags().String(hdrMethodFlagName, hdrMethodFlagDefault, hdrMethodDescription)

	return nil
}

func registerHTTPRequestRuleHdrName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrNameDescription := ``

	var hdrNameFlagName string
	if cmdPrefix == "" {
		hdrNameFlagName = "hdr_name"
	} else {
		hdrNameFlagName = fmt.Sprintf("%v.hdr_name", cmdPrefix)
	}

	var hdrNameFlagDefault string

	_ = cmd.PersistentFlags().String(hdrNameFlagName, hdrNameFlagDefault, hdrNameDescription)

	return nil
}

func registerHTTPRequestRuleHintFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hintFormatDescription := ``

	var hintFormatFlagName string
	if cmdPrefix == "" {
		hintFormatFlagName = "hint_format"
	} else {
		hintFormatFlagName = fmt.Sprintf("%v.hint_format", cmdPrefix)
	}

	var hintFormatFlagDefault string

	_ = cmd.PersistentFlags().String(hintFormatFlagName, hintFormatFlagDefault, hintFormatDescription)

	return nil
}

func registerHTTPRequestRuleHintName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hintNameDescription := ``

	var hintNameFlagName string
	if cmdPrefix == "" {
		hintNameFlagName = "hint_name"
	} else {
		hintNameFlagName = fmt.Sprintf("%v.hint_name", cmdPrefix)
	}

	var hintNameFlagDefault string

	_ = cmd.PersistentFlags().String(hintNameFlagName, hintNameFlagDefault, hintNameDescription)

	return nil
}

func registerHTTPRequestRuleIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	indexDescription := `Required. `

	var indexFlagName string
	if cmdPrefix == "" {
		indexFlagName = "index"
	} else {
		indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
	}

	var indexFlagDefault int64

	_ = cmd.PersistentFlags().Int64(indexFlagName, indexFlagDefault, indexDescription)

	return nil
}

func registerHTTPRequestRuleLogLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logLevelDescription := `Enum: ["emerg","alert","crit","err","warning","notice","info","debug","silent"]. `

	var logLevelFlagName string
	if cmdPrefix == "" {
		logLevelFlagName = "log_level"
	} else {
		logLevelFlagName = fmt.Sprintf("%v.log_level", cmdPrefix)
	}

	var logLevelFlagDefault string

	_ = cmd.PersistentFlags().String(logLevelFlagName, logLevelFlagDefault, logLevelDescription)

	if err := cmd.RegisterFlagCompletionFunc(logLevelFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["emerg","alert","crit","err","warning","notice","info","debug","silent"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPRequestRuleLuaAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaActionDescription := ``

	var luaActionFlagName string
	if cmdPrefix == "" {
		luaActionFlagName = "lua_action"
	} else {
		luaActionFlagName = fmt.Sprintf("%v.lua_action", cmdPrefix)
	}

	var luaActionFlagDefault string

	_ = cmd.PersistentFlags().String(luaActionFlagName, luaActionFlagDefault, luaActionDescription)

	return nil
}

func registerHTTPRequestRuleLuaParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaParamsDescription := ``

	var luaParamsFlagName string
	if cmdPrefix == "" {
		luaParamsFlagName = "lua_params"
	} else {
		luaParamsFlagName = fmt.Sprintf("%v.lua_params", cmdPrefix)
	}

	var luaParamsFlagDefault string

	_ = cmd.PersistentFlags().String(luaParamsFlagName, luaParamsFlagDefault, luaParamsDescription)

	return nil
}

func registerHTTPRequestRuleMapFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mapFileDescription := ``

	var mapFileFlagName string
	if cmdPrefix == "" {
		mapFileFlagName = "map_file"
	} else {
		mapFileFlagName = fmt.Sprintf("%v.map_file", cmdPrefix)
	}

	var mapFileFlagDefault string

	_ = cmd.PersistentFlags().String(mapFileFlagName, mapFileFlagDefault, mapFileDescription)

	return nil
}

func registerHTTPRequestRuleMapKeyfmt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mapKeyfmtDescription := ``

	var mapKeyfmtFlagName string
	if cmdPrefix == "" {
		mapKeyfmtFlagName = "map_keyfmt"
	} else {
		mapKeyfmtFlagName = fmt.Sprintf("%v.map_keyfmt", cmdPrefix)
	}

	var mapKeyfmtFlagDefault string

	_ = cmd.PersistentFlags().String(mapKeyfmtFlagName, mapKeyfmtFlagDefault, mapKeyfmtDescription)

	return nil
}

func registerHTTPRequestRuleMapValuefmt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mapValuefmtDescription := ``

	var mapValuefmtFlagName string
	if cmdPrefix == "" {
		mapValuefmtFlagName = "map_valuefmt"
	} else {
		mapValuefmtFlagName = fmt.Sprintf("%v.map_valuefmt", cmdPrefix)
	}

	var mapValuefmtFlagDefault string

	_ = cmd.PersistentFlags().String(mapValuefmtFlagName, mapValuefmtFlagDefault, mapValuefmtDescription)

	return nil
}

func registerHTTPRequestRuleMarkValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	markValueDescription := ``

	var markValueFlagName string
	if cmdPrefix == "" {
		markValueFlagName = "mark_value"
	} else {
		markValueFlagName = fmt.Sprintf("%v.mark_value", cmdPrefix)
	}

	var markValueFlagDefault string

	_ = cmd.PersistentFlags().String(markValueFlagName, markValueFlagDefault, markValueDescription)

	return nil
}

func registerHTTPRequestRuleMethodFmt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	methodFmtDescription := ``

	var methodFmtFlagName string
	if cmdPrefix == "" {
		methodFmtFlagName = "method_fmt"
	} else {
		methodFmtFlagName = fmt.Sprintf("%v.method_fmt", cmdPrefix)
	}

	var methodFmtFlagDefault string

	_ = cmd.PersistentFlags().String(methodFmtFlagName, methodFmtFlagDefault, methodFmtDescription)

	return nil
}

func registerHTTPRequestRuleNiceValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	niceValueDescription := ``

	var niceValueFlagName string
	if cmdPrefix == "" {
		niceValueFlagName = "nice_value"
	} else {
		niceValueFlagName = fmt.Sprintf("%v.nice_value", cmdPrefix)
	}

	var niceValueFlagDefault int64

	_ = cmd.PersistentFlags().Int64(niceValueFlagName, niceValueFlagDefault, niceValueDescription)

	return nil
}

func registerHTTPRequestRuleNormalizer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	normalizerDescription := `Enum: ["fragment-encode","fragment-strip","path-merge-slashes","path-strip-dot","path-strip-dotdot","percent-decode-unreserved","percent-to-upercase","query-sort-by-name"]. `

	var normalizerFlagName string
	if cmdPrefix == "" {
		normalizerFlagName = "normalizer"
	} else {
		normalizerFlagName = fmt.Sprintf("%v.normalizer", cmdPrefix)
	}

	var normalizerFlagDefault string

	_ = cmd.PersistentFlags().String(normalizerFlagName, normalizerFlagDefault, normalizerDescription)

	if err := cmd.RegisterFlagCompletionFunc(normalizerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["fragment-encode","fragment-strip","path-merge-slashes","path-strip-dot","path-strip-dotdot","percent-decode-unreserved","percent-to-upercase","query-sort-by-name"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPRequestRuleNormalizerFull(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	normalizerFullDescription := ``

	var normalizerFullFlagName string
	if cmdPrefix == "" {
		normalizerFullFlagName = "normalizer_full"
	} else {
		normalizerFullFlagName = fmt.Sprintf("%v.normalizer_full", cmdPrefix)
	}

	var normalizerFullFlagDefault bool

	_ = cmd.PersistentFlags().Bool(normalizerFullFlagName, normalizerFullFlagDefault, normalizerFullDescription)

	return nil
}

func registerHTTPRequestRuleNormalizerStrict(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	normalizerStrictDescription := ``

	var normalizerStrictFlagName string
	if cmdPrefix == "" {
		normalizerStrictFlagName = "normalizer_strict"
	} else {
		normalizerStrictFlagName = fmt.Sprintf("%v.normalizer_strict", cmdPrefix)
	}

	var normalizerStrictFlagDefault bool

	_ = cmd.PersistentFlags().Bool(normalizerStrictFlagName, normalizerStrictFlagDefault, normalizerStrictDescription)

	return nil
}

func registerHTTPRequestRulePathFmt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pathFmtDescription := ``

	var pathFmtFlagName string
	if cmdPrefix == "" {
		pathFmtFlagName = "path_fmt"
	} else {
		pathFmtFlagName = fmt.Sprintf("%v.path_fmt", cmdPrefix)
	}

	var pathFmtFlagDefault string

	_ = cmd.PersistentFlags().String(pathFmtFlagName, pathFmtFlagDefault, pathFmtDescription)

	return nil
}

func registerHTTPRequestRulePathMatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pathMatchDescription := ``

	var pathMatchFlagName string
	if cmdPrefix == "" {
		pathMatchFlagName = "path_match"
	} else {
		pathMatchFlagName = fmt.Sprintf("%v.path_match", cmdPrefix)
	}

	var pathMatchFlagDefault string

	_ = cmd.PersistentFlags().String(pathMatchFlagName, pathMatchFlagDefault, pathMatchDescription)

	return nil
}

func registerHTTPRequestRuleProtocol(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protocolDescription := `Enum: ["ipv4","ipv6"]. `

	var protocolFlagName string
	if cmdPrefix == "" {
		protocolFlagName = "protocol"
	} else {
		protocolFlagName = fmt.Sprintf("%v.protocol", cmdPrefix)
	}

	var protocolFlagDefault string

	_ = cmd.PersistentFlags().String(protocolFlagName, protocolFlagDefault, protocolDescription)

	if err := cmd.RegisterFlagCompletionFunc(protocolFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ipv4","ipv6"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPRequestRuleQueryFmt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	queryFmtDescription := ``

	var queryFmtFlagName string
	if cmdPrefix == "" {
		queryFmtFlagName = "query-fmt"
	} else {
		queryFmtFlagName = fmt.Sprintf("%v.query-fmt", cmdPrefix)
	}

	var queryFmtFlagDefault string

	_ = cmd.PersistentFlags().String(queryFmtFlagName, queryFmtFlagDefault, queryFmtDescription)

	return nil
}

func registerHTTPRequestRuleRedirCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	redirCodeDescription := `Enum: [301,302,303,307,308]. `

	var redirCodeFlagName string
	if cmdPrefix == "" {
		redirCodeFlagName = "redir_code"
	} else {
		redirCodeFlagName = fmt.Sprintf("%v.redir_code", cmdPrefix)
	}

	var redirCodeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(redirCodeFlagName, redirCodeFlagDefault, redirCodeDescription)

	if err := cmd.RegisterFlagCompletionFunc(redirCodeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[301,302,303,307,308]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPRequestRuleRedirOption(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	redirOptionDescription := ``

	var redirOptionFlagName string
	if cmdPrefix == "" {
		redirOptionFlagName = "redir_option"
	} else {
		redirOptionFlagName = fmt.Sprintf("%v.redir_option", cmdPrefix)
	}

	var redirOptionFlagDefault string

	_ = cmd.PersistentFlags().String(redirOptionFlagName, redirOptionFlagDefault, redirOptionDescription)

	return nil
}

func registerHTTPRequestRuleRedirType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	redirTypeDescription := `Enum: ["location","prefix","scheme"]. `

	var redirTypeFlagName string
	if cmdPrefix == "" {
		redirTypeFlagName = "redir_type"
	} else {
		redirTypeFlagName = fmt.Sprintf("%v.redir_type", cmdPrefix)
	}

	var redirTypeFlagDefault string

	_ = cmd.PersistentFlags().String(redirTypeFlagName, redirTypeFlagDefault, redirTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(redirTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["location","prefix","scheme"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPRequestRuleRedirValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	redirValueDescription := ``

	var redirValueFlagName string
	if cmdPrefix == "" {
		redirValueFlagName = "redir_value"
	} else {
		redirValueFlagName = fmt.Sprintf("%v.redir_value", cmdPrefix)
	}

	var redirValueFlagDefault string

	_ = cmd.PersistentFlags().String(redirValueFlagName, redirValueFlagDefault, redirValueDescription)

	return nil
}

func registerHTTPRequestRuleResolvers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resolversDescription := ``

	var resolversFlagName string
	if cmdPrefix == "" {
		resolversFlagName = "resolvers"
	} else {
		resolversFlagName = fmt.Sprintf("%v.resolvers", cmdPrefix)
	}

	var resolversFlagDefault string

	_ = cmd.PersistentFlags().String(resolversFlagName, resolversFlagDefault, resolversDescription)

	return nil
}

func registerHTTPRequestRuleReturnContent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	returnContentDescription := ``

	var returnContentFlagName string
	if cmdPrefix == "" {
		returnContentFlagName = "return_content"
	} else {
		returnContentFlagName = fmt.Sprintf("%v.return_content", cmdPrefix)
	}

	var returnContentFlagDefault string

	_ = cmd.PersistentFlags().String(returnContentFlagName, returnContentFlagDefault, returnContentDescription)

	return nil
}

func registerHTTPRequestRuleReturnContentFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	returnContentFormatDescription := `Enum: ["default-errorfile","errorfile","errorfiles","file","lf-file","string","lf-string"]. `

	var returnContentFormatFlagName string
	if cmdPrefix == "" {
		returnContentFormatFlagName = "return_content_format"
	} else {
		returnContentFormatFlagName = fmt.Sprintf("%v.return_content_format", cmdPrefix)
	}

	var returnContentFormatFlagDefault string

	_ = cmd.PersistentFlags().String(returnContentFormatFlagName, returnContentFormatFlagDefault, returnContentFormatDescription)

	if err := cmd.RegisterFlagCompletionFunc(returnContentFormatFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["default-errorfile","errorfile","errorfiles","file","lf-file","string","lf-string"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPRequestRuleReturnContentType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	returnContentTypeDescription := ``

	var returnContentTypeFlagName string
	if cmdPrefix == "" {
		returnContentTypeFlagName = "return_content_type"
	} else {
		returnContentTypeFlagName = fmt.Sprintf("%v.return_content_type", cmdPrefix)
	}

	var returnContentTypeFlagDefault string

	_ = cmd.PersistentFlags().String(returnContentTypeFlagName, returnContentTypeFlagDefault, returnContentTypeDescription)

	return nil
}

func registerHTTPRequestRuleReturnStatusCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	returnStatusCodeDescription := ``

	var returnStatusCodeFlagName string
	if cmdPrefix == "" {
		returnStatusCodeFlagName = "return_status_code"
	} else {
		returnStatusCodeFlagName = fmt.Sprintf("%v.return_status_code", cmdPrefix)
	}

	var returnStatusCodeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(returnStatusCodeFlagName, returnStatusCodeFlagDefault, returnStatusCodeDescription)

	return nil
}

func registerHTTPRequestRuleScExpr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scExprDescription := ``

	var scExprFlagName string
	if cmdPrefix == "" {
		scExprFlagName = "sc_expr"
	} else {
		scExprFlagName = fmt.Sprintf("%v.sc_expr", cmdPrefix)
	}

	var scExprFlagDefault string

	_ = cmd.PersistentFlags().String(scExprFlagName, scExprFlagDefault, scExprDescription)

	return nil
}

func registerHTTPRequestRuleScID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scIdDescription := ``

	var scIdFlagName string
	if cmdPrefix == "" {
		scIdFlagName = "sc_id"
	} else {
		scIdFlagName = fmt.Sprintf("%v.sc_id", cmdPrefix)
	}

	var scIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(scIdFlagName, scIdFlagDefault, scIdDescription)

	return nil
}

func registerHTTPRequestRuleScInt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scIntDescription := ``

	var scIntFlagName string
	if cmdPrefix == "" {
		scIntFlagName = "sc_int"
	} else {
		scIntFlagName = fmt.Sprintf("%v.sc_int", cmdPrefix)
	}

	var scIntFlagDefault int64

	_ = cmd.PersistentFlags().Int64(scIntFlagName, scIntFlagDefault, scIntDescription)

	return nil
}

func registerHTTPRequestRuleServiceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serviceNameDescription := ``

	var serviceNameFlagName string
	if cmdPrefix == "" {
		serviceNameFlagName = "service_name"
	} else {
		serviceNameFlagName = fmt.Sprintf("%v.service_name", cmdPrefix)
	}

	var serviceNameFlagDefault string

	_ = cmd.PersistentFlags().String(serviceNameFlagName, serviceNameFlagDefault, serviceNameDescription)

	return nil
}

func registerHTTPRequestRuleSpoeEngine(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spoeEngineDescription := ``

	var spoeEngineFlagName string
	if cmdPrefix == "" {
		spoeEngineFlagName = "spoe_engine"
	} else {
		spoeEngineFlagName = fmt.Sprintf("%v.spoe_engine", cmdPrefix)
	}

	var spoeEngineFlagDefault string

	_ = cmd.PersistentFlags().String(spoeEngineFlagName, spoeEngineFlagDefault, spoeEngineDescription)

	return nil
}

func registerHTTPRequestRuleSpoeGroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spoeGroupDescription := ``

	var spoeGroupFlagName string
	if cmdPrefix == "" {
		spoeGroupFlagName = "spoe_group"
	} else {
		spoeGroupFlagName = fmt.Sprintf("%v.spoe_group", cmdPrefix)
	}

	var spoeGroupFlagDefault string

	_ = cmd.PersistentFlags().String(spoeGroupFlagName, spoeGroupFlagDefault, spoeGroupDescription)

	return nil
}

func registerHTTPRequestRuleStrictMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	strictModeDescription := `Enum: ["on","off"]. `

	var strictModeFlagName string
	if cmdPrefix == "" {
		strictModeFlagName = "strict_mode"
	} else {
		strictModeFlagName = fmt.Sprintf("%v.strict_mode", cmdPrefix)
	}

	var strictModeFlagDefault string

	_ = cmd.PersistentFlags().String(strictModeFlagName, strictModeFlagDefault, strictModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(strictModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["on","off"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPRequestRuleTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeoutDescription := ``

	var timeoutFlagName string
	if cmdPrefix == "" {
		timeoutFlagName = "timeout"
	} else {
		timeoutFlagName = fmt.Sprintf("%v.timeout", cmdPrefix)
	}

	var timeoutFlagDefault string

	_ = cmd.PersistentFlags().String(timeoutFlagName, timeoutFlagDefault, timeoutDescription)

	return nil
}

func registerHTTPRequestRuleTimeoutType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeoutTypeDescription := `Enum: ["server","tunnel"]. `

	var timeoutTypeFlagName string
	if cmdPrefix == "" {
		timeoutTypeFlagName = "timeout_type"
	} else {
		timeoutTypeFlagName = fmt.Sprintf("%v.timeout_type", cmdPrefix)
	}

	var timeoutTypeFlagDefault string

	_ = cmd.PersistentFlags().String(timeoutTypeFlagName, timeoutTypeFlagDefault, timeoutTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(timeoutTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["server","tunnel"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPRequestRuleTosValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tosValueDescription := ``

	var tosValueFlagName string
	if cmdPrefix == "" {
		tosValueFlagName = "tos_value"
	} else {
		tosValueFlagName = fmt.Sprintf("%v.tos_value", cmdPrefix)
	}

	var tosValueFlagDefault string

	_ = cmd.PersistentFlags().String(tosValueFlagName, tosValueFlagDefault, tosValueDescription)

	return nil
}

func registerHTTPRequestRuleTrackSc0Key(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackSc0KeyDescription := ``

	var trackSc0KeyFlagName string
	if cmdPrefix == "" {
		trackSc0KeyFlagName = "track-sc0-key"
	} else {
		trackSc0KeyFlagName = fmt.Sprintf("%v.track-sc0-key", cmdPrefix)
	}

	var trackSc0KeyFlagDefault string

	_ = cmd.PersistentFlags().String(trackSc0KeyFlagName, trackSc0KeyFlagDefault, trackSc0KeyDescription)

	return nil
}

func registerHTTPRequestRuleTrackSc0Table(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackSc0TableDescription := ``

	var trackSc0TableFlagName string
	if cmdPrefix == "" {
		trackSc0TableFlagName = "track-sc0-table"
	} else {
		trackSc0TableFlagName = fmt.Sprintf("%v.track-sc0-table", cmdPrefix)
	}

	var trackSc0TableFlagDefault string

	_ = cmd.PersistentFlags().String(trackSc0TableFlagName, trackSc0TableFlagDefault, trackSc0TableDescription)

	return nil
}

func registerHTTPRequestRuleTrackSc1Key(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackSc1KeyDescription := ``

	var trackSc1KeyFlagName string
	if cmdPrefix == "" {
		trackSc1KeyFlagName = "track-sc1-key"
	} else {
		trackSc1KeyFlagName = fmt.Sprintf("%v.track-sc1-key", cmdPrefix)
	}

	var trackSc1KeyFlagDefault string

	_ = cmd.PersistentFlags().String(trackSc1KeyFlagName, trackSc1KeyFlagDefault, trackSc1KeyDescription)

	return nil
}

func registerHTTPRequestRuleTrackSc1Table(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackSc1TableDescription := ``

	var trackSc1TableFlagName string
	if cmdPrefix == "" {
		trackSc1TableFlagName = "track-sc1-table"
	} else {
		trackSc1TableFlagName = fmt.Sprintf("%v.track-sc1-table", cmdPrefix)
	}

	var trackSc1TableFlagDefault string

	_ = cmd.PersistentFlags().String(trackSc1TableFlagName, trackSc1TableFlagDefault, trackSc1TableDescription)

	return nil
}

func registerHTTPRequestRuleTrackSc2Key(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackSc2KeyDescription := ``

	var trackSc2KeyFlagName string
	if cmdPrefix == "" {
		trackSc2KeyFlagName = "track-sc2-key"
	} else {
		trackSc2KeyFlagName = fmt.Sprintf("%v.track-sc2-key", cmdPrefix)
	}

	var trackSc2KeyFlagDefault string

	_ = cmd.PersistentFlags().String(trackSc2KeyFlagName, trackSc2KeyFlagDefault, trackSc2KeyDescription)

	return nil
}

func registerHTTPRequestRuleTrackSc2Table(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackSc2TableDescription := ``

	var trackSc2TableFlagName string
	if cmdPrefix == "" {
		trackSc2TableFlagName = "track-sc2-table"
	} else {
		trackSc2TableFlagName = fmt.Sprintf("%v.track-sc2-table", cmdPrefix)
	}

	var trackSc2TableFlagDefault string

	_ = cmd.PersistentFlags().String(trackSc2TableFlagName, trackSc2TableFlagDefault, trackSc2TableDescription)

	return nil
}

func registerHTTPRequestRuleType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["add-acl","add-header","allow","auth","cache-use","capture","del-acl","del-header","del-map","deny","disable-l7-retry","do-resolve","early-hint","normalize-uri","redirect","reject","replace-header","replace-path","replace-pathq","replace-uri","replace-value","return","sc-inc-gpc0","sc-inc-gpc1","sc-set-gpt0","send-spoe-group","set-dst","set-dst-port","set-header","set-log-level","set-map","set-mark","set-method","set-nice","set-path","set-pathq","set-priority-class","set-priority-offset","set-query","set-src","set-src-port","set-timeout","set-tos","set-uri","set-var","silent-drop","strict-mode","tarpit","track-sc0","track-sc1","track-sc2","unset-var","use-service","wait-for-body","wait-for-handshake"]. Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["add-acl","add-header","allow","auth","cache-use","capture","del-acl","del-header","del-map","deny","disable-l7-retry","do-resolve","early-hint","normalize-uri","redirect","reject","replace-header","replace-path","replace-pathq","replace-uri","replace-value","return","sc-inc-gpc0","sc-inc-gpc1","sc-set-gpt0","send-spoe-group","set-dst","set-dst-port","set-header","set-log-level","set-map","set-mark","set-method","set-nice","set-path","set-pathq","set-priority-class","set-priority-offset","set-query","set-src","set-src-port","set-timeout","set-tos","set-uri","set-var","silent-drop","strict-mode","tarpit","track-sc0","track-sc1","track-sc2","unset-var","use-service","wait-for-body","wait-for-handshake"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPRequestRuleURIFmt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uriFmtDescription := ``

	var uriFmtFlagName string
	if cmdPrefix == "" {
		uriFmtFlagName = "uri-fmt"
	} else {
		uriFmtFlagName = fmt.Sprintf("%v.uri-fmt", cmdPrefix)
	}

	var uriFmtFlagDefault string

	_ = cmd.PersistentFlags().String(uriFmtFlagName, uriFmtFlagDefault, uriFmtDescription)

	return nil
}

func registerHTTPRequestRuleURIMatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uriMatchDescription := ``

	var uriMatchFlagName string
	if cmdPrefix == "" {
		uriMatchFlagName = "uri-match"
	} else {
		uriMatchFlagName = fmt.Sprintf("%v.uri-match", cmdPrefix)
	}

	var uriMatchFlagDefault string

	_ = cmd.PersistentFlags().String(uriMatchFlagName, uriMatchFlagDefault, uriMatchDescription)

	return nil
}

func registerHTTPRequestRuleVarExpr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varExprDescription := ``

	var varExprFlagName string
	if cmdPrefix == "" {
		varExprFlagName = "var_expr"
	} else {
		varExprFlagName = fmt.Sprintf("%v.var_expr", cmdPrefix)
	}

	var varExprFlagDefault string

	_ = cmd.PersistentFlags().String(varExprFlagName, varExprFlagDefault, varExprDescription)

	return nil
}

func registerHTTPRequestRuleVarFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varFormatDescription := ``

	var varFormatFlagName string
	if cmdPrefix == "" {
		varFormatFlagName = "var_format"
	} else {
		varFormatFlagName = fmt.Sprintf("%v.var_format", cmdPrefix)
	}

	var varFormatFlagDefault string

	_ = cmd.PersistentFlags().String(varFormatFlagName, varFormatFlagDefault, varFormatDescription)

	return nil
}

func registerHTTPRequestRuleVarName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varNameDescription := ``

	var varNameFlagName string
	if cmdPrefix == "" {
		varNameFlagName = "var_name"
	} else {
		varNameFlagName = fmt.Sprintf("%v.var_name", cmdPrefix)
	}

	var varNameFlagDefault string

	_ = cmd.PersistentFlags().String(varNameFlagName, varNameFlagDefault, varNameDescription)

	return nil
}

func registerHTTPRequestRuleVarScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varScopeDescription := ``

	var varScopeFlagName string
	if cmdPrefix == "" {
		varScopeFlagName = "var_scope"
	} else {
		varScopeFlagName = fmt.Sprintf("%v.var_scope", cmdPrefix)
	}

	var varScopeFlagDefault string

	_ = cmd.PersistentFlags().String(varScopeFlagName, varScopeFlagDefault, varScopeDescription)

	return nil
}

func registerHTTPRequestRuleWaitAtLeast(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	waitAtLeastDescription := ``

	var waitAtLeastFlagName string
	if cmdPrefix == "" {
		waitAtLeastFlagName = "wait_at_least"
	} else {
		waitAtLeastFlagName = fmt.Sprintf("%v.wait_at_least", cmdPrefix)
	}

	var waitAtLeastFlagDefault int64

	_ = cmd.PersistentFlags().Int64(waitAtLeastFlagName, waitAtLeastFlagDefault, waitAtLeastDescription)

	return nil
}

func registerHTTPRequestRuleWaitTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	waitTimeDescription := ``

	var waitTimeFlagName string
	if cmdPrefix == "" {
		waitTimeFlagName = "wait_time"
	} else {
		waitTimeFlagName = fmt.Sprintf("%v.wait_time", cmdPrefix)
	}

	var waitTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(waitTimeFlagName, waitTimeFlagDefault, waitTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHTTPRequestRuleFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, returnHeadersAdded := retrieveHTTPRequestRuleReturnHeadersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || returnHeadersAdded

	err, aclFileAdded := retrieveHTTPRequestRuleACLFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aclFileAdded

	err, aclKeyfmtAdded := retrieveHTTPRequestRuleACLKeyfmtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aclKeyfmtAdded

	err, authRealmAdded := retrieveHTTPRequestRuleAuthRealmFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authRealmAdded

	err, cacheNameAdded := retrieveHTTPRequestRuleCacheNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cacheNameAdded

	err, captureIdAdded := retrieveHTTPRequestRuleCaptureIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || captureIdAdded

	err, captureLenAdded := retrieveHTTPRequestRuleCaptureLenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || captureLenAdded

	err, captureSampleAdded := retrieveHTTPRequestRuleCaptureSampleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || captureSampleAdded

	err, condAdded := retrieveHTTPRequestRuleCondFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condAdded

	err, condTestAdded := retrieveHTTPRequestRuleCondTestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condTestAdded

	err, denyStatusAdded := retrieveHTTPRequestRuleDenyStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || denyStatusAdded

	err, exprAdded := retrieveHTTPRequestRuleExprFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || exprAdded

	err, hdrFormatAdded := retrieveHTTPRequestRuleHdrFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrFormatAdded

	err, hdrMatchAdded := retrieveHTTPRequestRuleHdrMatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrMatchAdded

	err, hdrMethodAdded := retrieveHTTPRequestRuleHdrMethodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrMethodAdded

	err, hdrNameAdded := retrieveHTTPRequestRuleHdrNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrNameAdded

	err, hintFormatAdded := retrieveHTTPRequestRuleHintFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hintFormatAdded

	err, hintNameAdded := retrieveHTTPRequestRuleHintNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hintNameAdded

	err, indexAdded := retrieveHTTPRequestRuleIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || indexAdded

	err, logLevelAdded := retrieveHTTPRequestRuleLogLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logLevelAdded

	err, luaActionAdded := retrieveHTTPRequestRuleLuaActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaActionAdded

	err, luaParamsAdded := retrieveHTTPRequestRuleLuaParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaParamsAdded

	err, mapFileAdded := retrieveHTTPRequestRuleMapFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mapFileAdded

	err, mapKeyfmtAdded := retrieveHTTPRequestRuleMapKeyfmtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mapKeyfmtAdded

	err, mapValuefmtAdded := retrieveHTTPRequestRuleMapValuefmtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mapValuefmtAdded

	err, markValueAdded := retrieveHTTPRequestRuleMarkValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || markValueAdded

	err, methodFmtAdded := retrieveHTTPRequestRuleMethodFmtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || methodFmtAdded

	err, niceValueAdded := retrieveHTTPRequestRuleNiceValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || niceValueAdded

	err, normalizerAdded := retrieveHTTPRequestRuleNormalizerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || normalizerAdded

	err, normalizerFullAdded := retrieveHTTPRequestRuleNormalizerFullFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || normalizerFullAdded

	err, normalizerStrictAdded := retrieveHTTPRequestRuleNormalizerStrictFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || normalizerStrictAdded

	err, pathFmtAdded := retrieveHTTPRequestRulePathFmtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pathFmtAdded

	err, pathMatchAdded := retrieveHTTPRequestRulePathMatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pathMatchAdded

	err, protocolAdded := retrieveHTTPRequestRuleProtocolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protocolAdded

	err, queryFmtAdded := retrieveHTTPRequestRuleQueryFmtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || queryFmtAdded

	err, redirCodeAdded := retrieveHTTPRequestRuleRedirCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redirCodeAdded

	err, redirOptionAdded := retrieveHTTPRequestRuleRedirOptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redirOptionAdded

	err, redirTypeAdded := retrieveHTTPRequestRuleRedirTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redirTypeAdded

	err, redirValueAdded := retrieveHTTPRequestRuleRedirValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redirValueAdded

	err, resolversAdded := retrieveHTTPRequestRuleResolversFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resolversAdded

	err, returnContentAdded := retrieveHTTPRequestRuleReturnContentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || returnContentAdded

	err, returnContentFormatAdded := retrieveHTTPRequestRuleReturnContentFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || returnContentFormatAdded

	err, returnContentTypeAdded := retrieveHTTPRequestRuleReturnContentTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || returnContentTypeAdded

	err, returnStatusCodeAdded := retrieveHTTPRequestRuleReturnStatusCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || returnStatusCodeAdded

	err, scExprAdded := retrieveHTTPRequestRuleScExprFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scExprAdded

	err, scIdAdded := retrieveHTTPRequestRuleScIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scIdAdded

	err, scIntAdded := retrieveHTTPRequestRuleScIntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scIntAdded

	err, serviceNameAdded := retrieveHTTPRequestRuleServiceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceNameAdded

	err, spoeEngineAdded := retrieveHTTPRequestRuleSpoeEngineFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spoeEngineAdded

	err, spoeGroupAdded := retrieveHTTPRequestRuleSpoeGroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spoeGroupAdded

	err, strictModeAdded := retrieveHTTPRequestRuleStrictModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || strictModeAdded

	err, timeoutAdded := retrieveHTTPRequestRuleTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeoutAdded

	err, timeoutTypeAdded := retrieveHTTPRequestRuleTimeoutTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeoutTypeAdded

	err, tosValueAdded := retrieveHTTPRequestRuleTosValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tosValueAdded

	err, trackSc0KeyAdded := retrieveHTTPRequestRuleTrackSc0KeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackSc0KeyAdded

	err, trackSc0TableAdded := retrieveHTTPRequestRuleTrackSc0TableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackSc0TableAdded

	err, trackSc1KeyAdded := retrieveHTTPRequestRuleTrackSc1KeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackSc1KeyAdded

	err, trackSc1TableAdded := retrieveHTTPRequestRuleTrackSc1TableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackSc1TableAdded

	err, trackSc2KeyAdded := retrieveHTTPRequestRuleTrackSc2KeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackSc2KeyAdded

	err, trackSc2TableAdded := retrieveHTTPRequestRuleTrackSc2TableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackSc2TableAdded

	err, typeAdded := retrieveHTTPRequestRuleTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, uriFmtAdded := retrieveHTTPRequestRuleURIFmtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uriFmtAdded

	err, uriMatchAdded := retrieveHTTPRequestRuleURIMatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uriMatchAdded

	err, varExprAdded := retrieveHTTPRequestRuleVarExprFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varExprAdded

	err, varFormatAdded := retrieveHTTPRequestRuleVarFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varFormatAdded

	err, varNameAdded := retrieveHTTPRequestRuleVarNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varNameAdded

	err, varScopeAdded := retrieveHTTPRequestRuleVarScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varScopeAdded

	err, waitAtLeastAdded := retrieveHTTPRequestRuleWaitAtLeastFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || waitAtLeastAdded

	err, waitTimeAdded := retrieveHTTPRequestRuleWaitTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || waitTimeAdded

	return nil, retAdded
}

func retrieveHTTPRequestRuleReturnHeadersFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	returnHeadersFlagName := fmt.Sprintf("%v.ReturnHeaders", cmdPrefix)
	if cmd.Flags().Changed(returnHeadersFlagName) {
		// warning: ReturnHeaders array type []*ReturnHeader is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleACLFileFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aclFileFlagName := fmt.Sprintf("%v.acl_file", cmdPrefix)
	if cmd.Flags().Changed(aclFileFlagName) {

		var aclFileFlagName string
		if cmdPrefix == "" {
			aclFileFlagName = "acl_file"
		} else {
			aclFileFlagName = fmt.Sprintf("%v.acl_file", cmdPrefix)
		}

		aclFileFlagValue, err := cmd.Flags().GetString(aclFileFlagName)
		if err != nil {
			return err, false
		}
		m.ACLFile = aclFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleACLKeyfmtFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aclKeyfmtFlagName := fmt.Sprintf("%v.acl_keyfmt", cmdPrefix)
	if cmd.Flags().Changed(aclKeyfmtFlagName) {

		var aclKeyfmtFlagName string
		if cmdPrefix == "" {
			aclKeyfmtFlagName = "acl_keyfmt"
		} else {
			aclKeyfmtFlagName = fmt.Sprintf("%v.acl_keyfmt", cmdPrefix)
		}

		aclKeyfmtFlagValue, err := cmd.Flags().GetString(aclKeyfmtFlagName)
		if err != nil {
			return err, false
		}
		m.ACLKeyfmt = aclKeyfmtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleAuthRealmFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authRealmFlagName := fmt.Sprintf("%v.auth_realm", cmdPrefix)
	if cmd.Flags().Changed(authRealmFlagName) {

		var authRealmFlagName string
		if cmdPrefix == "" {
			authRealmFlagName = "auth_realm"
		} else {
			authRealmFlagName = fmt.Sprintf("%v.auth_realm", cmdPrefix)
		}

		authRealmFlagValue, err := cmd.Flags().GetString(authRealmFlagName)
		if err != nil {
			return err, false
		}
		m.AuthRealm = authRealmFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleCacheNameFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cacheNameFlagName := fmt.Sprintf("%v.cache_name", cmdPrefix)
	if cmd.Flags().Changed(cacheNameFlagName) {

		var cacheNameFlagName string
		if cmdPrefix == "" {
			cacheNameFlagName = "cache_name"
		} else {
			cacheNameFlagName = fmt.Sprintf("%v.cache_name", cmdPrefix)
		}

		cacheNameFlagValue, err := cmd.Flags().GetString(cacheNameFlagName)
		if err != nil {
			return err, false
		}
		m.CacheName = cacheNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleCaptureIDFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	captureIdFlagName := fmt.Sprintf("%v.capture_id", cmdPrefix)
	if cmd.Flags().Changed(captureIdFlagName) {

		var captureIdFlagName string
		if cmdPrefix == "" {
			captureIdFlagName = "capture_id"
		} else {
			captureIdFlagName = fmt.Sprintf("%v.capture_id", cmdPrefix)
		}

		captureIdFlagValue, err := cmd.Flags().GetInt64(captureIdFlagName)
		if err != nil {
			return err, false
		}
		m.CaptureID = &captureIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleCaptureLenFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	captureLenFlagName := fmt.Sprintf("%v.capture_len", cmdPrefix)
	if cmd.Flags().Changed(captureLenFlagName) {

		var captureLenFlagName string
		if cmdPrefix == "" {
			captureLenFlagName = "capture_len"
		} else {
			captureLenFlagName = fmt.Sprintf("%v.capture_len", cmdPrefix)
		}

		captureLenFlagValue, err := cmd.Flags().GetInt64(captureLenFlagName)
		if err != nil {
			return err, false
		}
		m.CaptureLen = captureLenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleCaptureSampleFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	captureSampleFlagName := fmt.Sprintf("%v.capture_sample", cmdPrefix)
	if cmd.Flags().Changed(captureSampleFlagName) {

		var captureSampleFlagName string
		if cmdPrefix == "" {
			captureSampleFlagName = "capture_sample"
		} else {
			captureSampleFlagName = fmt.Sprintf("%v.capture_sample", cmdPrefix)
		}

		captureSampleFlagValue, err := cmd.Flags().GetString(captureSampleFlagName)
		if err != nil {
			return err, false
		}
		m.CaptureSample = captureSampleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleCondFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condFlagName := fmt.Sprintf("%v.cond", cmdPrefix)
	if cmd.Flags().Changed(condFlagName) {

		var condFlagName string
		if cmdPrefix == "" {
			condFlagName = "cond"
		} else {
			condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
		}

		condFlagValue, err := cmd.Flags().GetString(condFlagName)
		if err != nil {
			return err, false
		}
		m.Cond = condFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleCondTestFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condTestFlagName := fmt.Sprintf("%v.cond_test", cmdPrefix)
	if cmd.Flags().Changed(condTestFlagName) {

		var condTestFlagName string
		if cmdPrefix == "" {
			condTestFlagName = "cond_test"
		} else {
			condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
		}

		condTestFlagValue, err := cmd.Flags().GetString(condTestFlagName)
		if err != nil {
			return err, false
		}
		m.CondTest = condTestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleDenyStatusFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	denyStatusFlagName := fmt.Sprintf("%v.deny_status", cmdPrefix)
	if cmd.Flags().Changed(denyStatusFlagName) {

		var denyStatusFlagName string
		if cmdPrefix == "" {
			denyStatusFlagName = "deny_status"
		} else {
			denyStatusFlagName = fmt.Sprintf("%v.deny_status", cmdPrefix)
		}

		denyStatusFlagValue, err := cmd.Flags().GetInt64(denyStatusFlagName)
		if err != nil {
			return err, false
		}
		m.DenyStatus = &denyStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleExprFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	exprFlagName := fmt.Sprintf("%v.expr", cmdPrefix)
	if cmd.Flags().Changed(exprFlagName) {

		var exprFlagName string
		if cmdPrefix == "" {
			exprFlagName = "expr"
		} else {
			exprFlagName = fmt.Sprintf("%v.expr", cmdPrefix)
		}

		exprFlagValue, err := cmd.Flags().GetString(exprFlagName)
		if err != nil {
			return err, false
		}
		m.Expr = exprFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleHdrFormatFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrFormatFlagName := fmt.Sprintf("%v.hdr_format", cmdPrefix)
	if cmd.Flags().Changed(hdrFormatFlagName) {

		var hdrFormatFlagName string
		if cmdPrefix == "" {
			hdrFormatFlagName = "hdr_format"
		} else {
			hdrFormatFlagName = fmt.Sprintf("%v.hdr_format", cmdPrefix)
		}

		hdrFormatFlagValue, err := cmd.Flags().GetString(hdrFormatFlagName)
		if err != nil {
			return err, false
		}
		m.HdrFormat = hdrFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleHdrMatchFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrMatchFlagName := fmt.Sprintf("%v.hdr_match", cmdPrefix)
	if cmd.Flags().Changed(hdrMatchFlagName) {

		var hdrMatchFlagName string
		if cmdPrefix == "" {
			hdrMatchFlagName = "hdr_match"
		} else {
			hdrMatchFlagName = fmt.Sprintf("%v.hdr_match", cmdPrefix)
		}

		hdrMatchFlagValue, err := cmd.Flags().GetString(hdrMatchFlagName)
		if err != nil {
			return err, false
		}
		m.HdrMatch = hdrMatchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleHdrMethodFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrMethodFlagName := fmt.Sprintf("%v.hdr_method", cmdPrefix)
	if cmd.Flags().Changed(hdrMethodFlagName) {

		var hdrMethodFlagName string
		if cmdPrefix == "" {
			hdrMethodFlagName = "hdr_method"
		} else {
			hdrMethodFlagName = fmt.Sprintf("%v.hdr_method", cmdPrefix)
		}

		hdrMethodFlagValue, err := cmd.Flags().GetString(hdrMethodFlagName)
		if err != nil {
			return err, false
		}
		m.HdrMethod = hdrMethodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleHdrNameFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrNameFlagName := fmt.Sprintf("%v.hdr_name", cmdPrefix)
	if cmd.Flags().Changed(hdrNameFlagName) {

		var hdrNameFlagName string
		if cmdPrefix == "" {
			hdrNameFlagName = "hdr_name"
		} else {
			hdrNameFlagName = fmt.Sprintf("%v.hdr_name", cmdPrefix)
		}

		hdrNameFlagValue, err := cmd.Flags().GetString(hdrNameFlagName)
		if err != nil {
			return err, false
		}
		m.HdrName = hdrNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleHintFormatFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hintFormatFlagName := fmt.Sprintf("%v.hint_format", cmdPrefix)
	if cmd.Flags().Changed(hintFormatFlagName) {

		var hintFormatFlagName string
		if cmdPrefix == "" {
			hintFormatFlagName = "hint_format"
		} else {
			hintFormatFlagName = fmt.Sprintf("%v.hint_format", cmdPrefix)
		}

		hintFormatFlagValue, err := cmd.Flags().GetString(hintFormatFlagName)
		if err != nil {
			return err, false
		}
		m.HintFormat = hintFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleHintNameFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hintNameFlagName := fmt.Sprintf("%v.hint_name", cmdPrefix)
	if cmd.Flags().Changed(hintNameFlagName) {

		var hintNameFlagName string
		if cmdPrefix == "" {
			hintNameFlagName = "hint_name"
		} else {
			hintNameFlagName = fmt.Sprintf("%v.hint_name", cmdPrefix)
		}

		hintNameFlagValue, err := cmd.Flags().GetString(hintNameFlagName)
		if err != nil {
			return err, false
		}
		m.HintName = hintNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleIndexFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	indexFlagName := fmt.Sprintf("%v.index", cmdPrefix)
	if cmd.Flags().Changed(indexFlagName) {

		var indexFlagName string
		if cmdPrefix == "" {
			indexFlagName = "index"
		} else {
			indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
		}

		indexFlagValue, err := cmd.Flags().GetInt64(indexFlagName)
		if err != nil {
			return err, false
		}
		m.Index = &indexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleLogLevelFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logLevelFlagName := fmt.Sprintf("%v.log_level", cmdPrefix)
	if cmd.Flags().Changed(logLevelFlagName) {

		var logLevelFlagName string
		if cmdPrefix == "" {
			logLevelFlagName = "log_level"
		} else {
			logLevelFlagName = fmt.Sprintf("%v.log_level", cmdPrefix)
		}

		logLevelFlagValue, err := cmd.Flags().GetString(logLevelFlagName)
		if err != nil {
			return err, false
		}
		m.LogLevel = logLevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleLuaActionFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaActionFlagName := fmt.Sprintf("%v.lua_action", cmdPrefix)
	if cmd.Flags().Changed(luaActionFlagName) {

		var luaActionFlagName string
		if cmdPrefix == "" {
			luaActionFlagName = "lua_action"
		} else {
			luaActionFlagName = fmt.Sprintf("%v.lua_action", cmdPrefix)
		}

		luaActionFlagValue, err := cmd.Flags().GetString(luaActionFlagName)
		if err != nil {
			return err, false
		}
		m.LuaAction = luaActionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleLuaParamsFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaParamsFlagName := fmt.Sprintf("%v.lua_params", cmdPrefix)
	if cmd.Flags().Changed(luaParamsFlagName) {

		var luaParamsFlagName string
		if cmdPrefix == "" {
			luaParamsFlagName = "lua_params"
		} else {
			luaParamsFlagName = fmt.Sprintf("%v.lua_params", cmdPrefix)
		}

		luaParamsFlagValue, err := cmd.Flags().GetString(luaParamsFlagName)
		if err != nil {
			return err, false
		}
		m.LuaParams = luaParamsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleMapFileFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mapFileFlagName := fmt.Sprintf("%v.map_file", cmdPrefix)
	if cmd.Flags().Changed(mapFileFlagName) {

		var mapFileFlagName string
		if cmdPrefix == "" {
			mapFileFlagName = "map_file"
		} else {
			mapFileFlagName = fmt.Sprintf("%v.map_file", cmdPrefix)
		}

		mapFileFlagValue, err := cmd.Flags().GetString(mapFileFlagName)
		if err != nil {
			return err, false
		}
		m.MapFile = mapFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleMapKeyfmtFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mapKeyfmtFlagName := fmt.Sprintf("%v.map_keyfmt", cmdPrefix)
	if cmd.Flags().Changed(mapKeyfmtFlagName) {

		var mapKeyfmtFlagName string
		if cmdPrefix == "" {
			mapKeyfmtFlagName = "map_keyfmt"
		} else {
			mapKeyfmtFlagName = fmt.Sprintf("%v.map_keyfmt", cmdPrefix)
		}

		mapKeyfmtFlagValue, err := cmd.Flags().GetString(mapKeyfmtFlagName)
		if err != nil {
			return err, false
		}
		m.MapKeyfmt = mapKeyfmtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleMapValuefmtFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mapValuefmtFlagName := fmt.Sprintf("%v.map_valuefmt", cmdPrefix)
	if cmd.Flags().Changed(mapValuefmtFlagName) {

		var mapValuefmtFlagName string
		if cmdPrefix == "" {
			mapValuefmtFlagName = "map_valuefmt"
		} else {
			mapValuefmtFlagName = fmt.Sprintf("%v.map_valuefmt", cmdPrefix)
		}

		mapValuefmtFlagValue, err := cmd.Flags().GetString(mapValuefmtFlagName)
		if err != nil {
			return err, false
		}
		m.MapValuefmt = mapValuefmtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleMarkValueFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	markValueFlagName := fmt.Sprintf("%v.mark_value", cmdPrefix)
	if cmd.Flags().Changed(markValueFlagName) {

		var markValueFlagName string
		if cmdPrefix == "" {
			markValueFlagName = "mark_value"
		} else {
			markValueFlagName = fmt.Sprintf("%v.mark_value", cmdPrefix)
		}

		markValueFlagValue, err := cmd.Flags().GetString(markValueFlagName)
		if err != nil {
			return err, false
		}
		m.MarkValue = markValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleMethodFmtFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	methodFmtFlagName := fmt.Sprintf("%v.method_fmt", cmdPrefix)
	if cmd.Flags().Changed(methodFmtFlagName) {

		var methodFmtFlagName string
		if cmdPrefix == "" {
			methodFmtFlagName = "method_fmt"
		} else {
			methodFmtFlagName = fmt.Sprintf("%v.method_fmt", cmdPrefix)
		}

		methodFmtFlagValue, err := cmd.Flags().GetString(methodFmtFlagName)
		if err != nil {
			return err, false
		}
		m.MethodFmt = methodFmtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleNiceValueFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	niceValueFlagName := fmt.Sprintf("%v.nice_value", cmdPrefix)
	if cmd.Flags().Changed(niceValueFlagName) {

		var niceValueFlagName string
		if cmdPrefix == "" {
			niceValueFlagName = "nice_value"
		} else {
			niceValueFlagName = fmt.Sprintf("%v.nice_value", cmdPrefix)
		}

		niceValueFlagValue, err := cmd.Flags().GetInt64(niceValueFlagName)
		if err != nil {
			return err, false
		}
		m.NiceValue = niceValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleNormalizerFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	normalizerFlagName := fmt.Sprintf("%v.normalizer", cmdPrefix)
	if cmd.Flags().Changed(normalizerFlagName) {

		var normalizerFlagName string
		if cmdPrefix == "" {
			normalizerFlagName = "normalizer"
		} else {
			normalizerFlagName = fmt.Sprintf("%v.normalizer", cmdPrefix)
		}

		normalizerFlagValue, err := cmd.Flags().GetString(normalizerFlagName)
		if err != nil {
			return err, false
		}
		m.Normalizer = normalizerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleNormalizerFullFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	normalizerFullFlagName := fmt.Sprintf("%v.normalizer_full", cmdPrefix)
	if cmd.Flags().Changed(normalizerFullFlagName) {

		var normalizerFullFlagName string
		if cmdPrefix == "" {
			normalizerFullFlagName = "normalizer_full"
		} else {
			normalizerFullFlagName = fmt.Sprintf("%v.normalizer_full", cmdPrefix)
		}

		normalizerFullFlagValue, err := cmd.Flags().GetBool(normalizerFullFlagName)
		if err != nil {
			return err, false
		}
		m.NormalizerFull = normalizerFullFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleNormalizerStrictFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	normalizerStrictFlagName := fmt.Sprintf("%v.normalizer_strict", cmdPrefix)
	if cmd.Flags().Changed(normalizerStrictFlagName) {

		var normalizerStrictFlagName string
		if cmdPrefix == "" {
			normalizerStrictFlagName = "normalizer_strict"
		} else {
			normalizerStrictFlagName = fmt.Sprintf("%v.normalizer_strict", cmdPrefix)
		}

		normalizerStrictFlagValue, err := cmd.Flags().GetBool(normalizerStrictFlagName)
		if err != nil {
			return err, false
		}
		m.NormalizerStrict = normalizerStrictFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRulePathFmtFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pathFmtFlagName := fmt.Sprintf("%v.path_fmt", cmdPrefix)
	if cmd.Flags().Changed(pathFmtFlagName) {

		var pathFmtFlagName string
		if cmdPrefix == "" {
			pathFmtFlagName = "path_fmt"
		} else {
			pathFmtFlagName = fmt.Sprintf("%v.path_fmt", cmdPrefix)
		}

		pathFmtFlagValue, err := cmd.Flags().GetString(pathFmtFlagName)
		if err != nil {
			return err, false
		}
		m.PathFmt = pathFmtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRulePathMatchFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pathMatchFlagName := fmt.Sprintf("%v.path_match", cmdPrefix)
	if cmd.Flags().Changed(pathMatchFlagName) {

		var pathMatchFlagName string
		if cmdPrefix == "" {
			pathMatchFlagName = "path_match"
		} else {
			pathMatchFlagName = fmt.Sprintf("%v.path_match", cmdPrefix)
		}

		pathMatchFlagValue, err := cmd.Flags().GetString(pathMatchFlagName)
		if err != nil {
			return err, false
		}
		m.PathMatch = pathMatchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleProtocolFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protocolFlagName := fmt.Sprintf("%v.protocol", cmdPrefix)
	if cmd.Flags().Changed(protocolFlagName) {

		var protocolFlagName string
		if cmdPrefix == "" {
			protocolFlagName = "protocol"
		} else {
			protocolFlagName = fmt.Sprintf("%v.protocol", cmdPrefix)
		}

		protocolFlagValue, err := cmd.Flags().GetString(protocolFlagName)
		if err != nil {
			return err, false
		}
		m.Protocol = protocolFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleQueryFmtFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	queryFmtFlagName := fmt.Sprintf("%v.query-fmt", cmdPrefix)
	if cmd.Flags().Changed(queryFmtFlagName) {

		var queryFmtFlagName string
		if cmdPrefix == "" {
			queryFmtFlagName = "query-fmt"
		} else {
			queryFmtFlagName = fmt.Sprintf("%v.query-fmt", cmdPrefix)
		}

		queryFmtFlagValue, err := cmd.Flags().GetString(queryFmtFlagName)
		if err != nil {
			return err, false
		}
		m.QueryFmt = queryFmtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleRedirCodeFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redirCodeFlagName := fmt.Sprintf("%v.redir_code", cmdPrefix)
	if cmd.Flags().Changed(redirCodeFlagName) {

		var redirCodeFlagName string
		if cmdPrefix == "" {
			redirCodeFlagName = "redir_code"
		} else {
			redirCodeFlagName = fmt.Sprintf("%v.redir_code", cmdPrefix)
		}

		redirCodeFlagValue, err := cmd.Flags().GetInt64(redirCodeFlagName)
		if err != nil {
			return err, false
		}
		m.RedirCode = &redirCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleRedirOptionFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redirOptionFlagName := fmt.Sprintf("%v.redir_option", cmdPrefix)
	if cmd.Flags().Changed(redirOptionFlagName) {

		var redirOptionFlagName string
		if cmdPrefix == "" {
			redirOptionFlagName = "redir_option"
		} else {
			redirOptionFlagName = fmt.Sprintf("%v.redir_option", cmdPrefix)
		}

		redirOptionFlagValue, err := cmd.Flags().GetString(redirOptionFlagName)
		if err != nil {
			return err, false
		}
		m.RedirOption = redirOptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleRedirTypeFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redirTypeFlagName := fmt.Sprintf("%v.redir_type", cmdPrefix)
	if cmd.Flags().Changed(redirTypeFlagName) {

		var redirTypeFlagName string
		if cmdPrefix == "" {
			redirTypeFlagName = "redir_type"
		} else {
			redirTypeFlagName = fmt.Sprintf("%v.redir_type", cmdPrefix)
		}

		redirTypeFlagValue, err := cmd.Flags().GetString(redirTypeFlagName)
		if err != nil {
			return err, false
		}
		m.RedirType = redirTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleRedirValueFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redirValueFlagName := fmt.Sprintf("%v.redir_value", cmdPrefix)
	if cmd.Flags().Changed(redirValueFlagName) {

		var redirValueFlagName string
		if cmdPrefix == "" {
			redirValueFlagName = "redir_value"
		} else {
			redirValueFlagName = fmt.Sprintf("%v.redir_value", cmdPrefix)
		}

		redirValueFlagValue, err := cmd.Flags().GetString(redirValueFlagName)
		if err != nil {
			return err, false
		}
		m.RedirValue = redirValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleResolversFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resolversFlagName := fmt.Sprintf("%v.resolvers", cmdPrefix)
	if cmd.Flags().Changed(resolversFlagName) {

		var resolversFlagName string
		if cmdPrefix == "" {
			resolversFlagName = "resolvers"
		} else {
			resolversFlagName = fmt.Sprintf("%v.resolvers", cmdPrefix)
		}

		resolversFlagValue, err := cmd.Flags().GetString(resolversFlagName)
		if err != nil {
			return err, false
		}
		m.Resolvers = resolversFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleReturnContentFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	returnContentFlagName := fmt.Sprintf("%v.return_content", cmdPrefix)
	if cmd.Flags().Changed(returnContentFlagName) {

		var returnContentFlagName string
		if cmdPrefix == "" {
			returnContentFlagName = "return_content"
		} else {
			returnContentFlagName = fmt.Sprintf("%v.return_content", cmdPrefix)
		}

		returnContentFlagValue, err := cmd.Flags().GetString(returnContentFlagName)
		if err != nil {
			return err, false
		}
		m.ReturnContent = returnContentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleReturnContentFormatFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	returnContentFormatFlagName := fmt.Sprintf("%v.return_content_format", cmdPrefix)
	if cmd.Flags().Changed(returnContentFormatFlagName) {

		var returnContentFormatFlagName string
		if cmdPrefix == "" {
			returnContentFormatFlagName = "return_content_format"
		} else {
			returnContentFormatFlagName = fmt.Sprintf("%v.return_content_format", cmdPrefix)
		}

		returnContentFormatFlagValue, err := cmd.Flags().GetString(returnContentFormatFlagName)
		if err != nil {
			return err, false
		}
		m.ReturnContentFormat = returnContentFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleReturnContentTypeFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	returnContentTypeFlagName := fmt.Sprintf("%v.return_content_type", cmdPrefix)
	if cmd.Flags().Changed(returnContentTypeFlagName) {

		var returnContentTypeFlagName string
		if cmdPrefix == "" {
			returnContentTypeFlagName = "return_content_type"
		} else {
			returnContentTypeFlagName = fmt.Sprintf("%v.return_content_type", cmdPrefix)
		}

		returnContentTypeFlagValue, err := cmd.Flags().GetString(returnContentTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ReturnContentType = &returnContentTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleReturnStatusCodeFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	returnStatusCodeFlagName := fmt.Sprintf("%v.return_status_code", cmdPrefix)
	if cmd.Flags().Changed(returnStatusCodeFlagName) {

		var returnStatusCodeFlagName string
		if cmdPrefix == "" {
			returnStatusCodeFlagName = "return_status_code"
		} else {
			returnStatusCodeFlagName = fmt.Sprintf("%v.return_status_code", cmdPrefix)
		}

		returnStatusCodeFlagValue, err := cmd.Flags().GetInt64(returnStatusCodeFlagName)
		if err != nil {
			return err, false
		}
		m.ReturnStatusCode = &returnStatusCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleScExprFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scExprFlagName := fmt.Sprintf("%v.sc_expr", cmdPrefix)
	if cmd.Flags().Changed(scExprFlagName) {

		var scExprFlagName string
		if cmdPrefix == "" {
			scExprFlagName = "sc_expr"
		} else {
			scExprFlagName = fmt.Sprintf("%v.sc_expr", cmdPrefix)
		}

		scExprFlagValue, err := cmd.Flags().GetString(scExprFlagName)
		if err != nil {
			return err, false
		}
		m.ScExpr = scExprFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleScIDFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scIdFlagName := fmt.Sprintf("%v.sc_id", cmdPrefix)
	if cmd.Flags().Changed(scIdFlagName) {

		var scIdFlagName string
		if cmdPrefix == "" {
			scIdFlagName = "sc_id"
		} else {
			scIdFlagName = fmt.Sprintf("%v.sc_id", cmdPrefix)
		}

		scIdFlagValue, err := cmd.Flags().GetInt64(scIdFlagName)
		if err != nil {
			return err, false
		}
		m.ScID = scIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleScIntFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scIntFlagName := fmt.Sprintf("%v.sc_int", cmdPrefix)
	if cmd.Flags().Changed(scIntFlagName) {

		var scIntFlagName string
		if cmdPrefix == "" {
			scIntFlagName = "sc_int"
		} else {
			scIntFlagName = fmt.Sprintf("%v.sc_int", cmdPrefix)
		}

		scIntFlagValue, err := cmd.Flags().GetInt64(scIntFlagName)
		if err != nil {
			return err, false
		}
		m.ScInt = &scIntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleServiceNameFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceNameFlagName := fmt.Sprintf("%v.service_name", cmdPrefix)
	if cmd.Flags().Changed(serviceNameFlagName) {

		var serviceNameFlagName string
		if cmdPrefix == "" {
			serviceNameFlagName = "service_name"
		} else {
			serviceNameFlagName = fmt.Sprintf("%v.service_name", cmdPrefix)
		}

		serviceNameFlagValue, err := cmd.Flags().GetString(serviceNameFlagName)
		if err != nil {
			return err, false
		}
		m.ServiceName = serviceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleSpoeEngineFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spoeEngineFlagName := fmt.Sprintf("%v.spoe_engine", cmdPrefix)
	if cmd.Flags().Changed(spoeEngineFlagName) {

		var spoeEngineFlagName string
		if cmdPrefix == "" {
			spoeEngineFlagName = "spoe_engine"
		} else {
			spoeEngineFlagName = fmt.Sprintf("%v.spoe_engine", cmdPrefix)
		}

		spoeEngineFlagValue, err := cmd.Flags().GetString(spoeEngineFlagName)
		if err != nil {
			return err, false
		}
		m.SpoeEngine = spoeEngineFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleSpoeGroupFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spoeGroupFlagName := fmt.Sprintf("%v.spoe_group", cmdPrefix)
	if cmd.Flags().Changed(spoeGroupFlagName) {

		var spoeGroupFlagName string
		if cmdPrefix == "" {
			spoeGroupFlagName = "spoe_group"
		} else {
			spoeGroupFlagName = fmt.Sprintf("%v.spoe_group", cmdPrefix)
		}

		spoeGroupFlagValue, err := cmd.Flags().GetString(spoeGroupFlagName)
		if err != nil {
			return err, false
		}
		m.SpoeGroup = spoeGroupFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleStrictModeFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	strictModeFlagName := fmt.Sprintf("%v.strict_mode", cmdPrefix)
	if cmd.Flags().Changed(strictModeFlagName) {

		var strictModeFlagName string
		if cmdPrefix == "" {
			strictModeFlagName = "strict_mode"
		} else {
			strictModeFlagName = fmt.Sprintf("%v.strict_mode", cmdPrefix)
		}

		strictModeFlagValue, err := cmd.Flags().GetString(strictModeFlagName)
		if err != nil {
			return err, false
		}
		m.StrictMode = strictModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleTimeoutFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeoutFlagName := fmt.Sprintf("%v.timeout", cmdPrefix)
	if cmd.Flags().Changed(timeoutFlagName) {

		var timeoutFlagName string
		if cmdPrefix == "" {
			timeoutFlagName = "timeout"
		} else {
			timeoutFlagName = fmt.Sprintf("%v.timeout", cmdPrefix)
		}

		timeoutFlagValue, err := cmd.Flags().GetString(timeoutFlagName)
		if err != nil {
			return err, false
		}
		m.Timeout = timeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleTimeoutTypeFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeoutTypeFlagName := fmt.Sprintf("%v.timeout_type", cmdPrefix)
	if cmd.Flags().Changed(timeoutTypeFlagName) {

		var timeoutTypeFlagName string
		if cmdPrefix == "" {
			timeoutTypeFlagName = "timeout_type"
		} else {
			timeoutTypeFlagName = fmt.Sprintf("%v.timeout_type", cmdPrefix)
		}

		timeoutTypeFlagValue, err := cmd.Flags().GetString(timeoutTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TimeoutType = timeoutTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleTosValueFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tosValueFlagName := fmt.Sprintf("%v.tos_value", cmdPrefix)
	if cmd.Flags().Changed(tosValueFlagName) {

		var tosValueFlagName string
		if cmdPrefix == "" {
			tosValueFlagName = "tos_value"
		} else {
			tosValueFlagName = fmt.Sprintf("%v.tos_value", cmdPrefix)
		}

		tosValueFlagValue, err := cmd.Flags().GetString(tosValueFlagName)
		if err != nil {
			return err, false
		}
		m.TosValue = tosValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleTrackSc0KeyFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackSc0KeyFlagName := fmt.Sprintf("%v.track-sc0-key", cmdPrefix)
	if cmd.Flags().Changed(trackSc0KeyFlagName) {

		var trackSc0KeyFlagName string
		if cmdPrefix == "" {
			trackSc0KeyFlagName = "track-sc0-key"
		} else {
			trackSc0KeyFlagName = fmt.Sprintf("%v.track-sc0-key", cmdPrefix)
		}

		trackSc0KeyFlagValue, err := cmd.Flags().GetString(trackSc0KeyFlagName)
		if err != nil {
			return err, false
		}
		m.TrackSc0Key = trackSc0KeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleTrackSc0TableFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackSc0TableFlagName := fmt.Sprintf("%v.track-sc0-table", cmdPrefix)
	if cmd.Flags().Changed(trackSc0TableFlagName) {

		var trackSc0TableFlagName string
		if cmdPrefix == "" {
			trackSc0TableFlagName = "track-sc0-table"
		} else {
			trackSc0TableFlagName = fmt.Sprintf("%v.track-sc0-table", cmdPrefix)
		}

		trackSc0TableFlagValue, err := cmd.Flags().GetString(trackSc0TableFlagName)
		if err != nil {
			return err, false
		}
		m.TrackSc0Table = trackSc0TableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleTrackSc1KeyFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackSc1KeyFlagName := fmt.Sprintf("%v.track-sc1-key", cmdPrefix)
	if cmd.Flags().Changed(trackSc1KeyFlagName) {

		var trackSc1KeyFlagName string
		if cmdPrefix == "" {
			trackSc1KeyFlagName = "track-sc1-key"
		} else {
			trackSc1KeyFlagName = fmt.Sprintf("%v.track-sc1-key", cmdPrefix)
		}

		trackSc1KeyFlagValue, err := cmd.Flags().GetString(trackSc1KeyFlagName)
		if err != nil {
			return err, false
		}
		m.TrackSc1Key = trackSc1KeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleTrackSc1TableFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackSc1TableFlagName := fmt.Sprintf("%v.track-sc1-table", cmdPrefix)
	if cmd.Flags().Changed(trackSc1TableFlagName) {

		var trackSc1TableFlagName string
		if cmdPrefix == "" {
			trackSc1TableFlagName = "track-sc1-table"
		} else {
			trackSc1TableFlagName = fmt.Sprintf("%v.track-sc1-table", cmdPrefix)
		}

		trackSc1TableFlagValue, err := cmd.Flags().GetString(trackSc1TableFlagName)
		if err != nil {
			return err, false
		}
		m.TrackSc1Table = trackSc1TableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleTrackSc2KeyFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackSc2KeyFlagName := fmt.Sprintf("%v.track-sc2-key", cmdPrefix)
	if cmd.Flags().Changed(trackSc2KeyFlagName) {

		var trackSc2KeyFlagName string
		if cmdPrefix == "" {
			trackSc2KeyFlagName = "track-sc2-key"
		} else {
			trackSc2KeyFlagName = fmt.Sprintf("%v.track-sc2-key", cmdPrefix)
		}

		trackSc2KeyFlagValue, err := cmd.Flags().GetString(trackSc2KeyFlagName)
		if err != nil {
			return err, false
		}
		m.TrackSc2Key = trackSc2KeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleTrackSc2TableFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackSc2TableFlagName := fmt.Sprintf("%v.track-sc2-table", cmdPrefix)
	if cmd.Flags().Changed(trackSc2TableFlagName) {

		var trackSc2TableFlagName string
		if cmdPrefix == "" {
			trackSc2TableFlagName = "track-sc2-table"
		} else {
			trackSc2TableFlagName = fmt.Sprintf("%v.track-sc2-table", cmdPrefix)
		}

		trackSc2TableFlagValue, err := cmd.Flags().GetString(trackSc2TableFlagName)
		if err != nil {
			return err, false
		}
		m.TrackSc2Table = trackSc2TableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleTypeFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleURIFmtFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uriFmtFlagName := fmt.Sprintf("%v.uri-fmt", cmdPrefix)
	if cmd.Flags().Changed(uriFmtFlagName) {

		var uriFmtFlagName string
		if cmdPrefix == "" {
			uriFmtFlagName = "uri-fmt"
		} else {
			uriFmtFlagName = fmt.Sprintf("%v.uri-fmt", cmdPrefix)
		}

		uriFmtFlagValue, err := cmd.Flags().GetString(uriFmtFlagName)
		if err != nil {
			return err, false
		}
		m.URIFmt = uriFmtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleURIMatchFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uriMatchFlagName := fmt.Sprintf("%v.uri-match", cmdPrefix)
	if cmd.Flags().Changed(uriMatchFlagName) {

		var uriMatchFlagName string
		if cmdPrefix == "" {
			uriMatchFlagName = "uri-match"
		} else {
			uriMatchFlagName = fmt.Sprintf("%v.uri-match", cmdPrefix)
		}

		uriMatchFlagValue, err := cmd.Flags().GetString(uriMatchFlagName)
		if err != nil {
			return err, false
		}
		m.URIMatch = uriMatchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleVarExprFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varExprFlagName := fmt.Sprintf("%v.var_expr", cmdPrefix)
	if cmd.Flags().Changed(varExprFlagName) {

		var varExprFlagName string
		if cmdPrefix == "" {
			varExprFlagName = "var_expr"
		} else {
			varExprFlagName = fmt.Sprintf("%v.var_expr", cmdPrefix)
		}

		varExprFlagValue, err := cmd.Flags().GetString(varExprFlagName)
		if err != nil {
			return err, false
		}
		m.VarExpr = varExprFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleVarFormatFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varFormatFlagName := fmt.Sprintf("%v.var_format", cmdPrefix)
	if cmd.Flags().Changed(varFormatFlagName) {

		var varFormatFlagName string
		if cmdPrefix == "" {
			varFormatFlagName = "var_format"
		} else {
			varFormatFlagName = fmt.Sprintf("%v.var_format", cmdPrefix)
		}

		varFormatFlagValue, err := cmd.Flags().GetString(varFormatFlagName)
		if err != nil {
			return err, false
		}
		m.VarFormat = varFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleVarNameFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varNameFlagName := fmt.Sprintf("%v.var_name", cmdPrefix)
	if cmd.Flags().Changed(varNameFlagName) {

		var varNameFlagName string
		if cmdPrefix == "" {
			varNameFlagName = "var_name"
		} else {
			varNameFlagName = fmt.Sprintf("%v.var_name", cmdPrefix)
		}

		varNameFlagValue, err := cmd.Flags().GetString(varNameFlagName)
		if err != nil {
			return err, false
		}
		m.VarName = varNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleVarScopeFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varScopeFlagName := fmt.Sprintf("%v.var_scope", cmdPrefix)
	if cmd.Flags().Changed(varScopeFlagName) {

		var varScopeFlagName string
		if cmdPrefix == "" {
			varScopeFlagName = "var_scope"
		} else {
			varScopeFlagName = fmt.Sprintf("%v.var_scope", cmdPrefix)
		}

		varScopeFlagValue, err := cmd.Flags().GetString(varScopeFlagName)
		if err != nil {
			return err, false
		}
		m.VarScope = varScopeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleWaitAtLeastFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	waitAtLeastFlagName := fmt.Sprintf("%v.wait_at_least", cmdPrefix)
	if cmd.Flags().Changed(waitAtLeastFlagName) {

		var waitAtLeastFlagName string
		if cmdPrefix == "" {
			waitAtLeastFlagName = "wait_at_least"
		} else {
			waitAtLeastFlagName = fmt.Sprintf("%v.wait_at_least", cmdPrefix)
		}

		waitAtLeastFlagValue, err := cmd.Flags().GetInt64(waitAtLeastFlagName)
		if err != nil {
			return err, false
		}
		m.WaitAtLeast = &waitAtLeastFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPRequestRuleWaitTimeFlags(depth int, m *models.HTTPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	waitTimeFlagName := fmt.Sprintf("%v.wait_time", cmdPrefix)
	if cmd.Flags().Changed(waitTimeFlagName) {

		var waitTimeFlagName string
		if cmdPrefix == "" {
			waitTimeFlagName = "wait_time"
		} else {
			waitTimeFlagName = fmt.Sprintf("%v.wait_time", cmdPrefix)
		}

		waitTimeFlagValue, err := cmd.Flags().GetInt64(waitTimeFlagName)
		if err != nil {
			return err, false
		}
		m.WaitTime = &waitTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
