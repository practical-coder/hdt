// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/practical-coder/hdt/client/acl_runtime"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesCmd returns a cmd to handle operation postServicesHaproxyRuntimeAclFileEntries
func makeOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "PostServicesHaproxyRuntimeACLFileEntries",
		Short: `Adds an entry into the ACL file using the runtime socket.`,
		RunE:  runOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntries,
	}

	if err := registerOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntries uses cmd flags to call endpoint api
func runOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntries(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := acl_runtime.NewPostServicesHaproxyRuntimeACLFileEntriesParams()
	if err, _ := retrieveOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesACLIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesDataFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesResult(appCli.ACLRuntime.PostServicesHaproxyRuntimeACLFileEntries(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesParamFlags registers all flags needed to fill params
func registerOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesACLIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesDataParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesACLIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	aclIdDescription := `Required. ACL ID`

	var aclIdFlagName string
	if cmdPrefix == "" {
		aclIdFlagName = "acl_id"
	} else {
		aclIdFlagName = fmt.Sprintf("%v.acl_id", cmdPrefix)
	}

	var aclIdFlagDefault string

	_ = cmd.PersistentFlags().String(aclIdFlagName, aclIdFlagDefault, aclIdDescription)

	return nil
}
func registerOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(dataFlagName, "", "Optional json string for [data]. ")

	// add flags for body
	if err := registerModelACLFileEntryFlags(0, "aclFileEntry", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesACLIDFlag(m *acl_runtime.PostServicesHaproxyRuntimeACLFileEntriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("acl_id") {

		var aclIdFlagName string
		if cmdPrefix == "" {
			aclIdFlagName = "acl_id"
		} else {
			aclIdFlagName = fmt.Sprintf("%v.acl_id", cmdPrefix)
		}

		aclIdFlagValue, err := cmd.Flags().GetString(aclIdFlagName)
		if err != nil {
			return err, false
		}
		m.ACLID = aclIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesDataFlag(m *acl_runtime.PostServicesHaproxyRuntimeACLFileEntriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("data") {
		// Read data string from cmd and unmarshal
		dataValueStr, err := cmd.Flags().GetString("data")
		if err != nil {
			return err, false
		}

		dataValue := models.ACLFileEntry{}
		if err := json.Unmarshal([]byte(dataValueStr), &dataValue); err != nil {
			return fmt.Errorf("cannot unmarshal data string in models.ACLFileEntry: %v", err), false
		}
		m.Data = &dataValue
	}
	dataValueModel := m.Data
	if swag.IsZero(dataValueModel) {
		dataValueModel = &models.ACLFileEntry{}
	}
	err, added := retrieveModelACLFileEntryFlags(0, dataValueModel, "aclFileEntry", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Data = dataValueModel
	}
	if dryRun && debug {

		dataValueDebugBytes, err := json.Marshal(m.Data)
		if err != nil {
			return err, false
		}
		logDebugf("Data dry-run payload: %v", string(dataValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesResult parses request result and return the string content
func parseOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesResult(resp0 *acl_runtime.PostServicesHaproxyRuntimeACLFileEntriesCreated, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*acl_runtime.PostServicesHaproxyRuntimeACLFileEntriesDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*acl_runtime.PostServicesHaproxyRuntimeACLFileEntriesCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*acl_runtime.PostServicesHaproxyRuntimeACLFileEntriesBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*acl_runtime.PostServicesHaproxyRuntimeACLFileEntriesConflict)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
