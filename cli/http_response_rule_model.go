// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/models"
	"github.com/spf13/cobra"
)

// Schema cli for HTTPResponseRule

// register flags to command
func registerModelHTTPResponseRuleFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerHTTPResponseRuleReturnHeaders(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleACLFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleACLKeyfmt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleCacheName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleCaptureID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleCaptureSample(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleCond(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleCondTest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleDenyStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleHdrFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleHdrMatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleHdrMethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleHdrName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleLogLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleLuaAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleLuaParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleMapFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleMapKeyfmt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleMapValuefmt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleMarkValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleNiceValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleRedirCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleRedirOption(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleRedirType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleRedirValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleReturnContent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleReturnContentFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleReturnContentType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleReturnStatusCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleScExpr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleScID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleScInt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleSpoeEngine(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleSpoeGroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleStatusReason(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleStrictMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleTosValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleTrackSc0Key(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleTrackSc0Table(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleTrackSc1Key(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleTrackSc1Table(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleTrackSc2Key(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleTrackSc2Table(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleVarExpr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleVarFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleVarName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleVarScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleWaitAtLeast(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPResponseRuleWaitTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerHTTPResponseRuleReturnHeaders(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ReturnHeaders []*ReturnHeader array type is not supported by go-swagger cli yet

	return nil
}

func registerHTTPResponseRuleACLFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aclFileDescription := ``

	var aclFileFlagName string
	if cmdPrefix == "" {
		aclFileFlagName = "acl_file"
	} else {
		aclFileFlagName = fmt.Sprintf("%v.acl_file", cmdPrefix)
	}

	var aclFileFlagDefault string

	_ = cmd.PersistentFlags().String(aclFileFlagName, aclFileFlagDefault, aclFileDescription)

	return nil
}

func registerHTTPResponseRuleACLKeyfmt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aclKeyfmtDescription := ``

	var aclKeyfmtFlagName string
	if cmdPrefix == "" {
		aclKeyfmtFlagName = "acl_keyfmt"
	} else {
		aclKeyfmtFlagName = fmt.Sprintf("%v.acl_keyfmt", cmdPrefix)
	}

	var aclKeyfmtFlagDefault string

	_ = cmd.PersistentFlags().String(aclKeyfmtFlagName, aclKeyfmtFlagDefault, aclKeyfmtDescription)

	return nil
}

func registerHTTPResponseRuleCacheName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cacheNameDescription := ``

	var cacheNameFlagName string
	if cmdPrefix == "" {
		cacheNameFlagName = "cache_name"
	} else {
		cacheNameFlagName = fmt.Sprintf("%v.cache_name", cmdPrefix)
	}

	var cacheNameFlagDefault string

	_ = cmd.PersistentFlags().String(cacheNameFlagName, cacheNameFlagDefault, cacheNameDescription)

	return nil
}

func registerHTTPResponseRuleCaptureID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	captureIdDescription := ``

	var captureIdFlagName string
	if cmdPrefix == "" {
		captureIdFlagName = "capture_id"
	} else {
		captureIdFlagName = fmt.Sprintf("%v.capture_id", cmdPrefix)
	}

	var captureIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(captureIdFlagName, captureIdFlagDefault, captureIdDescription)

	return nil
}

func registerHTTPResponseRuleCaptureSample(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	captureSampleDescription := ``

	var captureSampleFlagName string
	if cmdPrefix == "" {
		captureSampleFlagName = "capture_sample"
	} else {
		captureSampleFlagName = fmt.Sprintf("%v.capture_sample", cmdPrefix)
	}

	var captureSampleFlagDefault string

	_ = cmd.PersistentFlags().String(captureSampleFlagName, captureSampleFlagDefault, captureSampleDescription)

	return nil
}

func registerHTTPResponseRuleCond(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condDescription := `Enum: ["if","unless"]. `

	var condFlagName string
	if cmdPrefix == "" {
		condFlagName = "cond"
	} else {
		condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
	}

	var condFlagDefault string

	_ = cmd.PersistentFlags().String(condFlagName, condFlagDefault, condDescription)

	if err := cmd.RegisterFlagCompletionFunc(condFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["if","unless"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPResponseRuleCondTest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condTestDescription := ``

	var condTestFlagName string
	if cmdPrefix == "" {
		condTestFlagName = "cond_test"
	} else {
		condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
	}

	var condTestFlagDefault string

	_ = cmd.PersistentFlags().String(condTestFlagName, condTestFlagDefault, condTestDescription)

	return nil
}

func registerHTTPResponseRuleDenyStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	denyStatusDescription := ``

	var denyStatusFlagName string
	if cmdPrefix == "" {
		denyStatusFlagName = "deny_status"
	} else {
		denyStatusFlagName = fmt.Sprintf("%v.deny_status", cmdPrefix)
	}

	var denyStatusFlagDefault int64

	_ = cmd.PersistentFlags().Int64(denyStatusFlagName, denyStatusFlagDefault, denyStatusDescription)

	return nil
}

func registerHTTPResponseRuleHdrFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrFormatDescription := ``

	var hdrFormatFlagName string
	if cmdPrefix == "" {
		hdrFormatFlagName = "hdr_format"
	} else {
		hdrFormatFlagName = fmt.Sprintf("%v.hdr_format", cmdPrefix)
	}

	var hdrFormatFlagDefault string

	_ = cmd.PersistentFlags().String(hdrFormatFlagName, hdrFormatFlagDefault, hdrFormatDescription)

	return nil
}

func registerHTTPResponseRuleHdrMatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrMatchDescription := ``

	var hdrMatchFlagName string
	if cmdPrefix == "" {
		hdrMatchFlagName = "hdr_match"
	} else {
		hdrMatchFlagName = fmt.Sprintf("%v.hdr_match", cmdPrefix)
	}

	var hdrMatchFlagDefault string

	_ = cmd.PersistentFlags().String(hdrMatchFlagName, hdrMatchFlagDefault, hdrMatchDescription)

	return nil
}

func registerHTTPResponseRuleHdrMethod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrMethodDescription := ``

	var hdrMethodFlagName string
	if cmdPrefix == "" {
		hdrMethodFlagName = "hdr_method"
	} else {
		hdrMethodFlagName = fmt.Sprintf("%v.hdr_method", cmdPrefix)
	}

	var hdrMethodFlagDefault string

	_ = cmd.PersistentFlags().String(hdrMethodFlagName, hdrMethodFlagDefault, hdrMethodDescription)

	return nil
}

func registerHTTPResponseRuleHdrName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrNameDescription := ``

	var hdrNameFlagName string
	if cmdPrefix == "" {
		hdrNameFlagName = "hdr_name"
	} else {
		hdrNameFlagName = fmt.Sprintf("%v.hdr_name", cmdPrefix)
	}

	var hdrNameFlagDefault string

	_ = cmd.PersistentFlags().String(hdrNameFlagName, hdrNameFlagDefault, hdrNameDescription)

	return nil
}

func registerHTTPResponseRuleIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	indexDescription := `Required. `

	var indexFlagName string
	if cmdPrefix == "" {
		indexFlagName = "index"
	} else {
		indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
	}

	var indexFlagDefault int64

	_ = cmd.PersistentFlags().Int64(indexFlagName, indexFlagDefault, indexDescription)

	return nil
}

func registerHTTPResponseRuleLogLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logLevelDescription := `Enum: ["emerg","alert","crit","err","warning","notice","info","debug","silent"]. `

	var logLevelFlagName string
	if cmdPrefix == "" {
		logLevelFlagName = "log_level"
	} else {
		logLevelFlagName = fmt.Sprintf("%v.log_level", cmdPrefix)
	}

	var logLevelFlagDefault string

	_ = cmd.PersistentFlags().String(logLevelFlagName, logLevelFlagDefault, logLevelDescription)

	if err := cmd.RegisterFlagCompletionFunc(logLevelFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["emerg","alert","crit","err","warning","notice","info","debug","silent"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPResponseRuleLuaAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaActionDescription := ``

	var luaActionFlagName string
	if cmdPrefix == "" {
		luaActionFlagName = "lua_action"
	} else {
		luaActionFlagName = fmt.Sprintf("%v.lua_action", cmdPrefix)
	}

	var luaActionFlagDefault string

	_ = cmd.PersistentFlags().String(luaActionFlagName, luaActionFlagDefault, luaActionDescription)

	return nil
}

func registerHTTPResponseRuleLuaParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaParamsDescription := ``

	var luaParamsFlagName string
	if cmdPrefix == "" {
		luaParamsFlagName = "lua_params"
	} else {
		luaParamsFlagName = fmt.Sprintf("%v.lua_params", cmdPrefix)
	}

	var luaParamsFlagDefault string

	_ = cmd.PersistentFlags().String(luaParamsFlagName, luaParamsFlagDefault, luaParamsDescription)

	return nil
}

func registerHTTPResponseRuleMapFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mapFileDescription := ``

	var mapFileFlagName string
	if cmdPrefix == "" {
		mapFileFlagName = "map_file"
	} else {
		mapFileFlagName = fmt.Sprintf("%v.map_file", cmdPrefix)
	}

	var mapFileFlagDefault string

	_ = cmd.PersistentFlags().String(mapFileFlagName, mapFileFlagDefault, mapFileDescription)

	return nil
}

func registerHTTPResponseRuleMapKeyfmt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mapKeyfmtDescription := ``

	var mapKeyfmtFlagName string
	if cmdPrefix == "" {
		mapKeyfmtFlagName = "map_keyfmt"
	} else {
		mapKeyfmtFlagName = fmt.Sprintf("%v.map_keyfmt", cmdPrefix)
	}

	var mapKeyfmtFlagDefault string

	_ = cmd.PersistentFlags().String(mapKeyfmtFlagName, mapKeyfmtFlagDefault, mapKeyfmtDescription)

	return nil
}

func registerHTTPResponseRuleMapValuefmt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mapValuefmtDescription := ``

	var mapValuefmtFlagName string
	if cmdPrefix == "" {
		mapValuefmtFlagName = "map_valuefmt"
	} else {
		mapValuefmtFlagName = fmt.Sprintf("%v.map_valuefmt", cmdPrefix)
	}

	var mapValuefmtFlagDefault string

	_ = cmd.PersistentFlags().String(mapValuefmtFlagName, mapValuefmtFlagDefault, mapValuefmtDescription)

	return nil
}

func registerHTTPResponseRuleMarkValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	markValueDescription := ``

	var markValueFlagName string
	if cmdPrefix == "" {
		markValueFlagName = "mark_value"
	} else {
		markValueFlagName = fmt.Sprintf("%v.mark_value", cmdPrefix)
	}

	var markValueFlagDefault string

	_ = cmd.PersistentFlags().String(markValueFlagName, markValueFlagDefault, markValueDescription)

	return nil
}

func registerHTTPResponseRuleNiceValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	niceValueDescription := ``

	var niceValueFlagName string
	if cmdPrefix == "" {
		niceValueFlagName = "nice_value"
	} else {
		niceValueFlagName = fmt.Sprintf("%v.nice_value", cmdPrefix)
	}

	var niceValueFlagDefault int64

	_ = cmd.PersistentFlags().Int64(niceValueFlagName, niceValueFlagDefault, niceValueDescription)

	return nil
}

func registerHTTPResponseRuleRedirCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	redirCodeDescription := `Enum: [301,302,303,307,308]. `

	var redirCodeFlagName string
	if cmdPrefix == "" {
		redirCodeFlagName = "redir_code"
	} else {
		redirCodeFlagName = fmt.Sprintf("%v.redir_code", cmdPrefix)
	}

	var redirCodeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(redirCodeFlagName, redirCodeFlagDefault, redirCodeDescription)

	if err := cmd.RegisterFlagCompletionFunc(redirCodeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[301,302,303,307,308]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPResponseRuleRedirOption(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	redirOptionDescription := ``

	var redirOptionFlagName string
	if cmdPrefix == "" {
		redirOptionFlagName = "redir_option"
	} else {
		redirOptionFlagName = fmt.Sprintf("%v.redir_option", cmdPrefix)
	}

	var redirOptionFlagDefault string

	_ = cmd.PersistentFlags().String(redirOptionFlagName, redirOptionFlagDefault, redirOptionDescription)

	return nil
}

func registerHTTPResponseRuleRedirType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	redirTypeDescription := `Enum: ["location","prefix","scheme"]. `

	var redirTypeFlagName string
	if cmdPrefix == "" {
		redirTypeFlagName = "redir_type"
	} else {
		redirTypeFlagName = fmt.Sprintf("%v.redir_type", cmdPrefix)
	}

	var redirTypeFlagDefault string

	_ = cmd.PersistentFlags().String(redirTypeFlagName, redirTypeFlagDefault, redirTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(redirTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["location","prefix","scheme"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPResponseRuleRedirValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	redirValueDescription := ``

	var redirValueFlagName string
	if cmdPrefix == "" {
		redirValueFlagName = "redir_value"
	} else {
		redirValueFlagName = fmt.Sprintf("%v.redir_value", cmdPrefix)
	}

	var redirValueFlagDefault string

	_ = cmd.PersistentFlags().String(redirValueFlagName, redirValueFlagDefault, redirValueDescription)

	return nil
}

func registerHTTPResponseRuleReturnContent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	returnContentDescription := ``

	var returnContentFlagName string
	if cmdPrefix == "" {
		returnContentFlagName = "return_content"
	} else {
		returnContentFlagName = fmt.Sprintf("%v.return_content", cmdPrefix)
	}

	var returnContentFlagDefault string

	_ = cmd.PersistentFlags().String(returnContentFlagName, returnContentFlagDefault, returnContentDescription)

	return nil
}

func registerHTTPResponseRuleReturnContentFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	returnContentFormatDescription := `Enum: ["default-errorfile","errorfile","errorfiles","file","lf-file","string","lf-string"]. `

	var returnContentFormatFlagName string
	if cmdPrefix == "" {
		returnContentFormatFlagName = "return_content_format"
	} else {
		returnContentFormatFlagName = fmt.Sprintf("%v.return_content_format", cmdPrefix)
	}

	var returnContentFormatFlagDefault string

	_ = cmd.PersistentFlags().String(returnContentFormatFlagName, returnContentFormatFlagDefault, returnContentFormatDescription)

	if err := cmd.RegisterFlagCompletionFunc(returnContentFormatFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["default-errorfile","errorfile","errorfiles","file","lf-file","string","lf-string"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPResponseRuleReturnContentType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	returnContentTypeDescription := ``

	var returnContentTypeFlagName string
	if cmdPrefix == "" {
		returnContentTypeFlagName = "return_content_type"
	} else {
		returnContentTypeFlagName = fmt.Sprintf("%v.return_content_type", cmdPrefix)
	}

	var returnContentTypeFlagDefault string

	_ = cmd.PersistentFlags().String(returnContentTypeFlagName, returnContentTypeFlagDefault, returnContentTypeDescription)

	return nil
}

func registerHTTPResponseRuleReturnStatusCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	returnStatusCodeDescription := ``

	var returnStatusCodeFlagName string
	if cmdPrefix == "" {
		returnStatusCodeFlagName = "return_status_code"
	} else {
		returnStatusCodeFlagName = fmt.Sprintf("%v.return_status_code", cmdPrefix)
	}

	var returnStatusCodeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(returnStatusCodeFlagName, returnStatusCodeFlagDefault, returnStatusCodeDescription)

	return nil
}

func registerHTTPResponseRuleScExpr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scExprDescription := ``

	var scExprFlagName string
	if cmdPrefix == "" {
		scExprFlagName = "sc_expr"
	} else {
		scExprFlagName = fmt.Sprintf("%v.sc_expr", cmdPrefix)
	}

	var scExprFlagDefault string

	_ = cmd.PersistentFlags().String(scExprFlagName, scExprFlagDefault, scExprDescription)

	return nil
}

func registerHTTPResponseRuleScID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scIdDescription := ``

	var scIdFlagName string
	if cmdPrefix == "" {
		scIdFlagName = "sc_id"
	} else {
		scIdFlagName = fmt.Sprintf("%v.sc_id", cmdPrefix)
	}

	var scIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(scIdFlagName, scIdFlagDefault, scIdDescription)

	return nil
}

func registerHTTPResponseRuleScInt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scIntDescription := ``

	var scIntFlagName string
	if cmdPrefix == "" {
		scIntFlagName = "sc_int"
	} else {
		scIntFlagName = fmt.Sprintf("%v.sc_int", cmdPrefix)
	}

	var scIntFlagDefault int64

	_ = cmd.PersistentFlags().Int64(scIntFlagName, scIntFlagDefault, scIntDescription)

	return nil
}

func registerHTTPResponseRuleSpoeEngine(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spoeEngineDescription := ``

	var spoeEngineFlagName string
	if cmdPrefix == "" {
		spoeEngineFlagName = "spoe_engine"
	} else {
		spoeEngineFlagName = fmt.Sprintf("%v.spoe_engine", cmdPrefix)
	}

	var spoeEngineFlagDefault string

	_ = cmd.PersistentFlags().String(spoeEngineFlagName, spoeEngineFlagDefault, spoeEngineDescription)

	return nil
}

func registerHTTPResponseRuleSpoeGroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spoeGroupDescription := ``

	var spoeGroupFlagName string
	if cmdPrefix == "" {
		spoeGroupFlagName = "spoe_group"
	} else {
		spoeGroupFlagName = fmt.Sprintf("%v.spoe_group", cmdPrefix)
	}

	var spoeGroupFlagDefault string

	_ = cmd.PersistentFlags().String(spoeGroupFlagName, spoeGroupFlagDefault, spoeGroupDescription)

	return nil
}

func registerHTTPResponseRuleStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := ``

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault int64

	_ = cmd.PersistentFlags().Int64(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerHTTPResponseRuleStatusReason(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusReasonDescription := ``

	var statusReasonFlagName string
	if cmdPrefix == "" {
		statusReasonFlagName = "status_reason"
	} else {
		statusReasonFlagName = fmt.Sprintf("%v.status_reason", cmdPrefix)
	}

	var statusReasonFlagDefault string

	_ = cmd.PersistentFlags().String(statusReasonFlagName, statusReasonFlagDefault, statusReasonDescription)

	return nil
}

func registerHTTPResponseRuleStrictMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	strictModeDescription := `Enum: ["on","off"]. `

	var strictModeFlagName string
	if cmdPrefix == "" {
		strictModeFlagName = "strict_mode"
	} else {
		strictModeFlagName = fmt.Sprintf("%v.strict_mode", cmdPrefix)
	}

	var strictModeFlagDefault string

	_ = cmd.PersistentFlags().String(strictModeFlagName, strictModeFlagDefault, strictModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(strictModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["on","off"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPResponseRuleTosValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tosValueDescription := ``

	var tosValueFlagName string
	if cmdPrefix == "" {
		tosValueFlagName = "tos_value"
	} else {
		tosValueFlagName = fmt.Sprintf("%v.tos_value", cmdPrefix)
	}

	var tosValueFlagDefault string

	_ = cmd.PersistentFlags().String(tosValueFlagName, tosValueFlagDefault, tosValueDescription)

	return nil
}

func registerHTTPResponseRuleTrackSc0Key(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackSc0KeyDescription := ``

	var trackSc0KeyFlagName string
	if cmdPrefix == "" {
		trackSc0KeyFlagName = "track-sc0-key"
	} else {
		trackSc0KeyFlagName = fmt.Sprintf("%v.track-sc0-key", cmdPrefix)
	}

	var trackSc0KeyFlagDefault string

	_ = cmd.PersistentFlags().String(trackSc0KeyFlagName, trackSc0KeyFlagDefault, trackSc0KeyDescription)

	return nil
}

func registerHTTPResponseRuleTrackSc0Table(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackSc0TableDescription := ``

	var trackSc0TableFlagName string
	if cmdPrefix == "" {
		trackSc0TableFlagName = "track-sc0-table"
	} else {
		trackSc0TableFlagName = fmt.Sprintf("%v.track-sc0-table", cmdPrefix)
	}

	var trackSc0TableFlagDefault string

	_ = cmd.PersistentFlags().String(trackSc0TableFlagName, trackSc0TableFlagDefault, trackSc0TableDescription)

	return nil
}

func registerHTTPResponseRuleTrackSc1Key(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackSc1KeyDescription := ``

	var trackSc1KeyFlagName string
	if cmdPrefix == "" {
		trackSc1KeyFlagName = "track-sc1-key"
	} else {
		trackSc1KeyFlagName = fmt.Sprintf("%v.track-sc1-key", cmdPrefix)
	}

	var trackSc1KeyFlagDefault string

	_ = cmd.PersistentFlags().String(trackSc1KeyFlagName, trackSc1KeyFlagDefault, trackSc1KeyDescription)

	return nil
}

func registerHTTPResponseRuleTrackSc1Table(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackSc1TableDescription := ``

	var trackSc1TableFlagName string
	if cmdPrefix == "" {
		trackSc1TableFlagName = "track-sc1-table"
	} else {
		trackSc1TableFlagName = fmt.Sprintf("%v.track-sc1-table", cmdPrefix)
	}

	var trackSc1TableFlagDefault string

	_ = cmd.PersistentFlags().String(trackSc1TableFlagName, trackSc1TableFlagDefault, trackSc1TableDescription)

	return nil
}

func registerHTTPResponseRuleTrackSc2Key(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackSc2KeyDescription := ``

	var trackSc2KeyFlagName string
	if cmdPrefix == "" {
		trackSc2KeyFlagName = "track-sc2-key"
	} else {
		trackSc2KeyFlagName = fmt.Sprintf("%v.track-sc2-key", cmdPrefix)
	}

	var trackSc2KeyFlagDefault string

	_ = cmd.PersistentFlags().String(trackSc2KeyFlagName, trackSc2KeyFlagDefault, trackSc2KeyDescription)

	return nil
}

func registerHTTPResponseRuleTrackSc2Table(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackSc2TableDescription := ``

	var trackSc2TableFlagName string
	if cmdPrefix == "" {
		trackSc2TableFlagName = "track-sc2-table"
	} else {
		trackSc2TableFlagName = fmt.Sprintf("%v.track-sc2-table", cmdPrefix)
	}

	var trackSc2TableFlagDefault string

	_ = cmd.PersistentFlags().String(trackSc2TableFlagName, trackSc2TableFlagDefault, trackSc2TableDescription)

	return nil
}

func registerHTTPResponseRuleType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["add-acl","add-header","allow","cache-store","capture","del-acl","del-header","del-map","deny","redirect","replace-header","replace-value","return","sc-inc-gpc0","sc-inc-gpc1","sc-set-gpt0","send-spoe-group","set-header","set-log-level","set-map","set-mark","set-nice","set-status","set-tos","set-var","set-var-fmt","silent-drop","strict-mode","track-sc0","track-sc1","track-sc2","unset-var","wait-for-body"]. Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["add-acl","add-header","allow","cache-store","capture","del-acl","del-header","del-map","deny","redirect","replace-header","replace-value","return","sc-inc-gpc0","sc-inc-gpc1","sc-set-gpt0","send-spoe-group","set-header","set-log-level","set-map","set-mark","set-nice","set-status","set-tos","set-var","set-var-fmt","silent-drop","strict-mode","track-sc0","track-sc1","track-sc2","unset-var","wait-for-body"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPResponseRuleVarExpr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varExprDescription := ``

	var varExprFlagName string
	if cmdPrefix == "" {
		varExprFlagName = "var_expr"
	} else {
		varExprFlagName = fmt.Sprintf("%v.var_expr", cmdPrefix)
	}

	var varExprFlagDefault string

	_ = cmd.PersistentFlags().String(varExprFlagName, varExprFlagDefault, varExprDescription)

	return nil
}

func registerHTTPResponseRuleVarFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varFormatDescription := ``

	var varFormatFlagName string
	if cmdPrefix == "" {
		varFormatFlagName = "var_format"
	} else {
		varFormatFlagName = fmt.Sprintf("%v.var_format", cmdPrefix)
	}

	var varFormatFlagDefault string

	_ = cmd.PersistentFlags().String(varFormatFlagName, varFormatFlagDefault, varFormatDescription)

	return nil
}

func registerHTTPResponseRuleVarName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varNameDescription := ``

	var varNameFlagName string
	if cmdPrefix == "" {
		varNameFlagName = "var_name"
	} else {
		varNameFlagName = fmt.Sprintf("%v.var_name", cmdPrefix)
	}

	var varNameFlagDefault string

	_ = cmd.PersistentFlags().String(varNameFlagName, varNameFlagDefault, varNameDescription)

	return nil
}

func registerHTTPResponseRuleVarScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varScopeDescription := ``

	var varScopeFlagName string
	if cmdPrefix == "" {
		varScopeFlagName = "var_scope"
	} else {
		varScopeFlagName = fmt.Sprintf("%v.var_scope", cmdPrefix)
	}

	var varScopeFlagDefault string

	_ = cmd.PersistentFlags().String(varScopeFlagName, varScopeFlagDefault, varScopeDescription)

	return nil
}

func registerHTTPResponseRuleWaitAtLeast(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	waitAtLeastDescription := ``

	var waitAtLeastFlagName string
	if cmdPrefix == "" {
		waitAtLeastFlagName = "wait_at_least"
	} else {
		waitAtLeastFlagName = fmt.Sprintf("%v.wait_at_least", cmdPrefix)
	}

	var waitAtLeastFlagDefault int64

	_ = cmd.PersistentFlags().Int64(waitAtLeastFlagName, waitAtLeastFlagDefault, waitAtLeastDescription)

	return nil
}

func registerHTTPResponseRuleWaitTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	waitTimeDescription := ``

	var waitTimeFlagName string
	if cmdPrefix == "" {
		waitTimeFlagName = "wait_time"
	} else {
		waitTimeFlagName = fmt.Sprintf("%v.wait_time", cmdPrefix)
	}

	var waitTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(waitTimeFlagName, waitTimeFlagDefault, waitTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHTTPResponseRuleFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, returnHeadersAdded := retrieveHTTPResponseRuleReturnHeadersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || returnHeadersAdded

	err, aclFileAdded := retrieveHTTPResponseRuleACLFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aclFileAdded

	err, aclKeyfmtAdded := retrieveHTTPResponseRuleACLKeyfmtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aclKeyfmtAdded

	err, cacheNameAdded := retrieveHTTPResponseRuleCacheNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cacheNameAdded

	err, captureIdAdded := retrieveHTTPResponseRuleCaptureIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || captureIdAdded

	err, captureSampleAdded := retrieveHTTPResponseRuleCaptureSampleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || captureSampleAdded

	err, condAdded := retrieveHTTPResponseRuleCondFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condAdded

	err, condTestAdded := retrieveHTTPResponseRuleCondTestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condTestAdded

	err, denyStatusAdded := retrieveHTTPResponseRuleDenyStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || denyStatusAdded

	err, hdrFormatAdded := retrieveHTTPResponseRuleHdrFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrFormatAdded

	err, hdrMatchAdded := retrieveHTTPResponseRuleHdrMatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrMatchAdded

	err, hdrMethodAdded := retrieveHTTPResponseRuleHdrMethodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrMethodAdded

	err, hdrNameAdded := retrieveHTTPResponseRuleHdrNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrNameAdded

	err, indexAdded := retrieveHTTPResponseRuleIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || indexAdded

	err, logLevelAdded := retrieveHTTPResponseRuleLogLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logLevelAdded

	err, luaActionAdded := retrieveHTTPResponseRuleLuaActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaActionAdded

	err, luaParamsAdded := retrieveHTTPResponseRuleLuaParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaParamsAdded

	err, mapFileAdded := retrieveHTTPResponseRuleMapFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mapFileAdded

	err, mapKeyfmtAdded := retrieveHTTPResponseRuleMapKeyfmtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mapKeyfmtAdded

	err, mapValuefmtAdded := retrieveHTTPResponseRuleMapValuefmtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mapValuefmtAdded

	err, markValueAdded := retrieveHTTPResponseRuleMarkValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || markValueAdded

	err, niceValueAdded := retrieveHTTPResponseRuleNiceValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || niceValueAdded

	err, redirCodeAdded := retrieveHTTPResponseRuleRedirCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redirCodeAdded

	err, redirOptionAdded := retrieveHTTPResponseRuleRedirOptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redirOptionAdded

	err, redirTypeAdded := retrieveHTTPResponseRuleRedirTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redirTypeAdded

	err, redirValueAdded := retrieveHTTPResponseRuleRedirValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redirValueAdded

	err, returnContentAdded := retrieveHTTPResponseRuleReturnContentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || returnContentAdded

	err, returnContentFormatAdded := retrieveHTTPResponseRuleReturnContentFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || returnContentFormatAdded

	err, returnContentTypeAdded := retrieveHTTPResponseRuleReturnContentTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || returnContentTypeAdded

	err, returnStatusCodeAdded := retrieveHTTPResponseRuleReturnStatusCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || returnStatusCodeAdded

	err, scExprAdded := retrieveHTTPResponseRuleScExprFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scExprAdded

	err, scIdAdded := retrieveHTTPResponseRuleScIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scIdAdded

	err, scIntAdded := retrieveHTTPResponseRuleScIntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scIntAdded

	err, spoeEngineAdded := retrieveHTTPResponseRuleSpoeEngineFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spoeEngineAdded

	err, spoeGroupAdded := retrieveHTTPResponseRuleSpoeGroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spoeGroupAdded

	err, statusAdded := retrieveHTTPResponseRuleStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, statusReasonAdded := retrieveHTTPResponseRuleStatusReasonFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusReasonAdded

	err, strictModeAdded := retrieveHTTPResponseRuleStrictModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || strictModeAdded

	err, tosValueAdded := retrieveHTTPResponseRuleTosValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tosValueAdded

	err, trackSc0KeyAdded := retrieveHTTPResponseRuleTrackSc0KeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackSc0KeyAdded

	err, trackSc0TableAdded := retrieveHTTPResponseRuleTrackSc0TableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackSc0TableAdded

	err, trackSc1KeyAdded := retrieveHTTPResponseRuleTrackSc1KeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackSc1KeyAdded

	err, trackSc1TableAdded := retrieveHTTPResponseRuleTrackSc1TableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackSc1TableAdded

	err, trackSc2KeyAdded := retrieveHTTPResponseRuleTrackSc2KeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackSc2KeyAdded

	err, trackSc2TableAdded := retrieveHTTPResponseRuleTrackSc2TableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackSc2TableAdded

	err, typeAdded := retrieveHTTPResponseRuleTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, varExprAdded := retrieveHTTPResponseRuleVarExprFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varExprAdded

	err, varFormatAdded := retrieveHTTPResponseRuleVarFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varFormatAdded

	err, varNameAdded := retrieveHTTPResponseRuleVarNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varNameAdded

	err, varScopeAdded := retrieveHTTPResponseRuleVarScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varScopeAdded

	err, waitAtLeastAdded := retrieveHTTPResponseRuleWaitAtLeastFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || waitAtLeastAdded

	err, waitTimeAdded := retrieveHTTPResponseRuleWaitTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || waitTimeAdded

	return nil, retAdded
}

func retrieveHTTPResponseRuleReturnHeadersFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	returnHeadersFlagName := fmt.Sprintf("%v.ReturnHeaders", cmdPrefix)
	if cmd.Flags().Changed(returnHeadersFlagName) {
		// warning: ReturnHeaders array type []*ReturnHeader is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleACLFileFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aclFileFlagName := fmt.Sprintf("%v.acl_file", cmdPrefix)
	if cmd.Flags().Changed(aclFileFlagName) {

		var aclFileFlagName string
		if cmdPrefix == "" {
			aclFileFlagName = "acl_file"
		} else {
			aclFileFlagName = fmt.Sprintf("%v.acl_file", cmdPrefix)
		}

		aclFileFlagValue, err := cmd.Flags().GetString(aclFileFlagName)
		if err != nil {
			return err, false
		}
		m.ACLFile = aclFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleACLKeyfmtFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aclKeyfmtFlagName := fmt.Sprintf("%v.acl_keyfmt", cmdPrefix)
	if cmd.Flags().Changed(aclKeyfmtFlagName) {

		var aclKeyfmtFlagName string
		if cmdPrefix == "" {
			aclKeyfmtFlagName = "acl_keyfmt"
		} else {
			aclKeyfmtFlagName = fmt.Sprintf("%v.acl_keyfmt", cmdPrefix)
		}

		aclKeyfmtFlagValue, err := cmd.Flags().GetString(aclKeyfmtFlagName)
		if err != nil {
			return err, false
		}
		m.ACLKeyfmt = aclKeyfmtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleCacheNameFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cacheNameFlagName := fmt.Sprintf("%v.cache_name", cmdPrefix)
	if cmd.Flags().Changed(cacheNameFlagName) {

		var cacheNameFlagName string
		if cmdPrefix == "" {
			cacheNameFlagName = "cache_name"
		} else {
			cacheNameFlagName = fmt.Sprintf("%v.cache_name", cmdPrefix)
		}

		cacheNameFlagValue, err := cmd.Flags().GetString(cacheNameFlagName)
		if err != nil {
			return err, false
		}
		m.CacheName = cacheNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleCaptureIDFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	captureIdFlagName := fmt.Sprintf("%v.capture_id", cmdPrefix)
	if cmd.Flags().Changed(captureIdFlagName) {

		var captureIdFlagName string
		if cmdPrefix == "" {
			captureIdFlagName = "capture_id"
		} else {
			captureIdFlagName = fmt.Sprintf("%v.capture_id", cmdPrefix)
		}

		captureIdFlagValue, err := cmd.Flags().GetInt64(captureIdFlagName)
		if err != nil {
			return err, false
		}
		m.CaptureID = &captureIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleCaptureSampleFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	captureSampleFlagName := fmt.Sprintf("%v.capture_sample", cmdPrefix)
	if cmd.Flags().Changed(captureSampleFlagName) {

		var captureSampleFlagName string
		if cmdPrefix == "" {
			captureSampleFlagName = "capture_sample"
		} else {
			captureSampleFlagName = fmt.Sprintf("%v.capture_sample", cmdPrefix)
		}

		captureSampleFlagValue, err := cmd.Flags().GetString(captureSampleFlagName)
		if err != nil {
			return err, false
		}
		m.CaptureSample = captureSampleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleCondFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condFlagName := fmt.Sprintf("%v.cond", cmdPrefix)
	if cmd.Flags().Changed(condFlagName) {

		var condFlagName string
		if cmdPrefix == "" {
			condFlagName = "cond"
		} else {
			condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
		}

		condFlagValue, err := cmd.Flags().GetString(condFlagName)
		if err != nil {
			return err, false
		}
		m.Cond = condFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleCondTestFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condTestFlagName := fmt.Sprintf("%v.cond_test", cmdPrefix)
	if cmd.Flags().Changed(condTestFlagName) {

		var condTestFlagName string
		if cmdPrefix == "" {
			condTestFlagName = "cond_test"
		} else {
			condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
		}

		condTestFlagValue, err := cmd.Flags().GetString(condTestFlagName)
		if err != nil {
			return err, false
		}
		m.CondTest = condTestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleDenyStatusFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	denyStatusFlagName := fmt.Sprintf("%v.deny_status", cmdPrefix)
	if cmd.Flags().Changed(denyStatusFlagName) {

		var denyStatusFlagName string
		if cmdPrefix == "" {
			denyStatusFlagName = "deny_status"
		} else {
			denyStatusFlagName = fmt.Sprintf("%v.deny_status", cmdPrefix)
		}

		denyStatusFlagValue, err := cmd.Flags().GetInt64(denyStatusFlagName)
		if err != nil {
			return err, false
		}
		m.DenyStatus = &denyStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleHdrFormatFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrFormatFlagName := fmt.Sprintf("%v.hdr_format", cmdPrefix)
	if cmd.Flags().Changed(hdrFormatFlagName) {

		var hdrFormatFlagName string
		if cmdPrefix == "" {
			hdrFormatFlagName = "hdr_format"
		} else {
			hdrFormatFlagName = fmt.Sprintf("%v.hdr_format", cmdPrefix)
		}

		hdrFormatFlagValue, err := cmd.Flags().GetString(hdrFormatFlagName)
		if err != nil {
			return err, false
		}
		m.HdrFormat = hdrFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleHdrMatchFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrMatchFlagName := fmt.Sprintf("%v.hdr_match", cmdPrefix)
	if cmd.Flags().Changed(hdrMatchFlagName) {

		var hdrMatchFlagName string
		if cmdPrefix == "" {
			hdrMatchFlagName = "hdr_match"
		} else {
			hdrMatchFlagName = fmt.Sprintf("%v.hdr_match", cmdPrefix)
		}

		hdrMatchFlagValue, err := cmd.Flags().GetString(hdrMatchFlagName)
		if err != nil {
			return err, false
		}
		m.HdrMatch = hdrMatchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleHdrMethodFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrMethodFlagName := fmt.Sprintf("%v.hdr_method", cmdPrefix)
	if cmd.Flags().Changed(hdrMethodFlagName) {

		var hdrMethodFlagName string
		if cmdPrefix == "" {
			hdrMethodFlagName = "hdr_method"
		} else {
			hdrMethodFlagName = fmt.Sprintf("%v.hdr_method", cmdPrefix)
		}

		hdrMethodFlagValue, err := cmd.Flags().GetString(hdrMethodFlagName)
		if err != nil {
			return err, false
		}
		m.HdrMethod = hdrMethodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleHdrNameFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrNameFlagName := fmt.Sprintf("%v.hdr_name", cmdPrefix)
	if cmd.Flags().Changed(hdrNameFlagName) {

		var hdrNameFlagName string
		if cmdPrefix == "" {
			hdrNameFlagName = "hdr_name"
		} else {
			hdrNameFlagName = fmt.Sprintf("%v.hdr_name", cmdPrefix)
		}

		hdrNameFlagValue, err := cmd.Flags().GetString(hdrNameFlagName)
		if err != nil {
			return err, false
		}
		m.HdrName = hdrNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleIndexFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	indexFlagName := fmt.Sprintf("%v.index", cmdPrefix)
	if cmd.Flags().Changed(indexFlagName) {

		var indexFlagName string
		if cmdPrefix == "" {
			indexFlagName = "index"
		} else {
			indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
		}

		indexFlagValue, err := cmd.Flags().GetInt64(indexFlagName)
		if err != nil {
			return err, false
		}
		m.Index = &indexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleLogLevelFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logLevelFlagName := fmt.Sprintf("%v.log_level", cmdPrefix)
	if cmd.Flags().Changed(logLevelFlagName) {

		var logLevelFlagName string
		if cmdPrefix == "" {
			logLevelFlagName = "log_level"
		} else {
			logLevelFlagName = fmt.Sprintf("%v.log_level", cmdPrefix)
		}

		logLevelFlagValue, err := cmd.Flags().GetString(logLevelFlagName)
		if err != nil {
			return err, false
		}
		m.LogLevel = logLevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleLuaActionFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaActionFlagName := fmt.Sprintf("%v.lua_action", cmdPrefix)
	if cmd.Flags().Changed(luaActionFlagName) {

		var luaActionFlagName string
		if cmdPrefix == "" {
			luaActionFlagName = "lua_action"
		} else {
			luaActionFlagName = fmt.Sprintf("%v.lua_action", cmdPrefix)
		}

		luaActionFlagValue, err := cmd.Flags().GetString(luaActionFlagName)
		if err != nil {
			return err, false
		}
		m.LuaAction = luaActionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleLuaParamsFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaParamsFlagName := fmt.Sprintf("%v.lua_params", cmdPrefix)
	if cmd.Flags().Changed(luaParamsFlagName) {

		var luaParamsFlagName string
		if cmdPrefix == "" {
			luaParamsFlagName = "lua_params"
		} else {
			luaParamsFlagName = fmt.Sprintf("%v.lua_params", cmdPrefix)
		}

		luaParamsFlagValue, err := cmd.Flags().GetString(luaParamsFlagName)
		if err != nil {
			return err, false
		}
		m.LuaParams = luaParamsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleMapFileFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mapFileFlagName := fmt.Sprintf("%v.map_file", cmdPrefix)
	if cmd.Flags().Changed(mapFileFlagName) {

		var mapFileFlagName string
		if cmdPrefix == "" {
			mapFileFlagName = "map_file"
		} else {
			mapFileFlagName = fmt.Sprintf("%v.map_file", cmdPrefix)
		}

		mapFileFlagValue, err := cmd.Flags().GetString(mapFileFlagName)
		if err != nil {
			return err, false
		}
		m.MapFile = mapFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleMapKeyfmtFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mapKeyfmtFlagName := fmt.Sprintf("%v.map_keyfmt", cmdPrefix)
	if cmd.Flags().Changed(mapKeyfmtFlagName) {

		var mapKeyfmtFlagName string
		if cmdPrefix == "" {
			mapKeyfmtFlagName = "map_keyfmt"
		} else {
			mapKeyfmtFlagName = fmt.Sprintf("%v.map_keyfmt", cmdPrefix)
		}

		mapKeyfmtFlagValue, err := cmd.Flags().GetString(mapKeyfmtFlagName)
		if err != nil {
			return err, false
		}
		m.MapKeyfmt = mapKeyfmtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleMapValuefmtFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mapValuefmtFlagName := fmt.Sprintf("%v.map_valuefmt", cmdPrefix)
	if cmd.Flags().Changed(mapValuefmtFlagName) {

		var mapValuefmtFlagName string
		if cmdPrefix == "" {
			mapValuefmtFlagName = "map_valuefmt"
		} else {
			mapValuefmtFlagName = fmt.Sprintf("%v.map_valuefmt", cmdPrefix)
		}

		mapValuefmtFlagValue, err := cmd.Flags().GetString(mapValuefmtFlagName)
		if err != nil {
			return err, false
		}
		m.MapValuefmt = mapValuefmtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleMarkValueFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	markValueFlagName := fmt.Sprintf("%v.mark_value", cmdPrefix)
	if cmd.Flags().Changed(markValueFlagName) {

		var markValueFlagName string
		if cmdPrefix == "" {
			markValueFlagName = "mark_value"
		} else {
			markValueFlagName = fmt.Sprintf("%v.mark_value", cmdPrefix)
		}

		markValueFlagValue, err := cmd.Flags().GetString(markValueFlagName)
		if err != nil {
			return err, false
		}
		m.MarkValue = markValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleNiceValueFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	niceValueFlagName := fmt.Sprintf("%v.nice_value", cmdPrefix)
	if cmd.Flags().Changed(niceValueFlagName) {

		var niceValueFlagName string
		if cmdPrefix == "" {
			niceValueFlagName = "nice_value"
		} else {
			niceValueFlagName = fmt.Sprintf("%v.nice_value", cmdPrefix)
		}

		niceValueFlagValue, err := cmd.Flags().GetInt64(niceValueFlagName)
		if err != nil {
			return err, false
		}
		m.NiceValue = niceValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleRedirCodeFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redirCodeFlagName := fmt.Sprintf("%v.redir_code", cmdPrefix)
	if cmd.Flags().Changed(redirCodeFlagName) {

		var redirCodeFlagName string
		if cmdPrefix == "" {
			redirCodeFlagName = "redir_code"
		} else {
			redirCodeFlagName = fmt.Sprintf("%v.redir_code", cmdPrefix)
		}

		redirCodeFlagValue, err := cmd.Flags().GetInt64(redirCodeFlagName)
		if err != nil {
			return err, false
		}
		m.RedirCode = &redirCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleRedirOptionFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redirOptionFlagName := fmt.Sprintf("%v.redir_option", cmdPrefix)
	if cmd.Flags().Changed(redirOptionFlagName) {

		var redirOptionFlagName string
		if cmdPrefix == "" {
			redirOptionFlagName = "redir_option"
		} else {
			redirOptionFlagName = fmt.Sprintf("%v.redir_option", cmdPrefix)
		}

		redirOptionFlagValue, err := cmd.Flags().GetString(redirOptionFlagName)
		if err != nil {
			return err, false
		}
		m.RedirOption = redirOptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleRedirTypeFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redirTypeFlagName := fmt.Sprintf("%v.redir_type", cmdPrefix)
	if cmd.Flags().Changed(redirTypeFlagName) {

		var redirTypeFlagName string
		if cmdPrefix == "" {
			redirTypeFlagName = "redir_type"
		} else {
			redirTypeFlagName = fmt.Sprintf("%v.redir_type", cmdPrefix)
		}

		redirTypeFlagValue, err := cmd.Flags().GetString(redirTypeFlagName)
		if err != nil {
			return err, false
		}
		m.RedirType = redirTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleRedirValueFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redirValueFlagName := fmt.Sprintf("%v.redir_value", cmdPrefix)
	if cmd.Flags().Changed(redirValueFlagName) {

		var redirValueFlagName string
		if cmdPrefix == "" {
			redirValueFlagName = "redir_value"
		} else {
			redirValueFlagName = fmt.Sprintf("%v.redir_value", cmdPrefix)
		}

		redirValueFlagValue, err := cmd.Flags().GetString(redirValueFlagName)
		if err != nil {
			return err, false
		}
		m.RedirValue = redirValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleReturnContentFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	returnContentFlagName := fmt.Sprintf("%v.return_content", cmdPrefix)
	if cmd.Flags().Changed(returnContentFlagName) {

		var returnContentFlagName string
		if cmdPrefix == "" {
			returnContentFlagName = "return_content"
		} else {
			returnContentFlagName = fmt.Sprintf("%v.return_content", cmdPrefix)
		}

		returnContentFlagValue, err := cmd.Flags().GetString(returnContentFlagName)
		if err != nil {
			return err, false
		}
		m.ReturnContent = returnContentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleReturnContentFormatFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	returnContentFormatFlagName := fmt.Sprintf("%v.return_content_format", cmdPrefix)
	if cmd.Flags().Changed(returnContentFormatFlagName) {

		var returnContentFormatFlagName string
		if cmdPrefix == "" {
			returnContentFormatFlagName = "return_content_format"
		} else {
			returnContentFormatFlagName = fmt.Sprintf("%v.return_content_format", cmdPrefix)
		}

		returnContentFormatFlagValue, err := cmd.Flags().GetString(returnContentFormatFlagName)
		if err != nil {
			return err, false
		}
		m.ReturnContentFormat = returnContentFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleReturnContentTypeFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	returnContentTypeFlagName := fmt.Sprintf("%v.return_content_type", cmdPrefix)
	if cmd.Flags().Changed(returnContentTypeFlagName) {

		var returnContentTypeFlagName string
		if cmdPrefix == "" {
			returnContentTypeFlagName = "return_content_type"
		} else {
			returnContentTypeFlagName = fmt.Sprintf("%v.return_content_type", cmdPrefix)
		}

		returnContentTypeFlagValue, err := cmd.Flags().GetString(returnContentTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ReturnContentType = &returnContentTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleReturnStatusCodeFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	returnStatusCodeFlagName := fmt.Sprintf("%v.return_status_code", cmdPrefix)
	if cmd.Flags().Changed(returnStatusCodeFlagName) {

		var returnStatusCodeFlagName string
		if cmdPrefix == "" {
			returnStatusCodeFlagName = "return_status_code"
		} else {
			returnStatusCodeFlagName = fmt.Sprintf("%v.return_status_code", cmdPrefix)
		}

		returnStatusCodeFlagValue, err := cmd.Flags().GetInt64(returnStatusCodeFlagName)
		if err != nil {
			return err, false
		}
		m.ReturnStatusCode = &returnStatusCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleScExprFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scExprFlagName := fmt.Sprintf("%v.sc_expr", cmdPrefix)
	if cmd.Flags().Changed(scExprFlagName) {

		var scExprFlagName string
		if cmdPrefix == "" {
			scExprFlagName = "sc_expr"
		} else {
			scExprFlagName = fmt.Sprintf("%v.sc_expr", cmdPrefix)
		}

		scExprFlagValue, err := cmd.Flags().GetString(scExprFlagName)
		if err != nil {
			return err, false
		}
		m.ScExpr = scExprFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleScIDFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scIdFlagName := fmt.Sprintf("%v.sc_id", cmdPrefix)
	if cmd.Flags().Changed(scIdFlagName) {

		var scIdFlagName string
		if cmdPrefix == "" {
			scIdFlagName = "sc_id"
		} else {
			scIdFlagName = fmt.Sprintf("%v.sc_id", cmdPrefix)
		}

		scIdFlagValue, err := cmd.Flags().GetInt64(scIdFlagName)
		if err != nil {
			return err, false
		}
		m.ScID = scIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleScIntFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scIntFlagName := fmt.Sprintf("%v.sc_int", cmdPrefix)
	if cmd.Flags().Changed(scIntFlagName) {

		var scIntFlagName string
		if cmdPrefix == "" {
			scIntFlagName = "sc_int"
		} else {
			scIntFlagName = fmt.Sprintf("%v.sc_int", cmdPrefix)
		}

		scIntFlagValue, err := cmd.Flags().GetInt64(scIntFlagName)
		if err != nil {
			return err, false
		}
		m.ScInt = &scIntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleSpoeEngineFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spoeEngineFlagName := fmt.Sprintf("%v.spoe_engine", cmdPrefix)
	if cmd.Flags().Changed(spoeEngineFlagName) {

		var spoeEngineFlagName string
		if cmdPrefix == "" {
			spoeEngineFlagName = "spoe_engine"
		} else {
			spoeEngineFlagName = fmt.Sprintf("%v.spoe_engine", cmdPrefix)
		}

		spoeEngineFlagValue, err := cmd.Flags().GetString(spoeEngineFlagName)
		if err != nil {
			return err, false
		}
		m.SpoeEngine = spoeEngineFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleSpoeGroupFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spoeGroupFlagName := fmt.Sprintf("%v.spoe_group", cmdPrefix)
	if cmd.Flags().Changed(spoeGroupFlagName) {

		var spoeGroupFlagName string
		if cmdPrefix == "" {
			spoeGroupFlagName = "spoe_group"
		} else {
			spoeGroupFlagName = fmt.Sprintf("%v.spoe_group", cmdPrefix)
		}

		spoeGroupFlagValue, err := cmd.Flags().GetString(spoeGroupFlagName)
		if err != nil {
			return err, false
		}
		m.SpoeGroup = spoeGroupFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleStatusFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetInt64(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleStatusReasonFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusReasonFlagName := fmt.Sprintf("%v.status_reason", cmdPrefix)
	if cmd.Flags().Changed(statusReasonFlagName) {

		var statusReasonFlagName string
		if cmdPrefix == "" {
			statusReasonFlagName = "status_reason"
		} else {
			statusReasonFlagName = fmt.Sprintf("%v.status_reason", cmdPrefix)
		}

		statusReasonFlagValue, err := cmd.Flags().GetString(statusReasonFlagName)
		if err != nil {
			return err, false
		}
		m.StatusReason = statusReasonFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleStrictModeFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	strictModeFlagName := fmt.Sprintf("%v.strict_mode", cmdPrefix)
	if cmd.Flags().Changed(strictModeFlagName) {

		var strictModeFlagName string
		if cmdPrefix == "" {
			strictModeFlagName = "strict_mode"
		} else {
			strictModeFlagName = fmt.Sprintf("%v.strict_mode", cmdPrefix)
		}

		strictModeFlagValue, err := cmd.Flags().GetString(strictModeFlagName)
		if err != nil {
			return err, false
		}
		m.StrictMode = strictModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleTosValueFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tosValueFlagName := fmt.Sprintf("%v.tos_value", cmdPrefix)
	if cmd.Flags().Changed(tosValueFlagName) {

		var tosValueFlagName string
		if cmdPrefix == "" {
			tosValueFlagName = "tos_value"
		} else {
			tosValueFlagName = fmt.Sprintf("%v.tos_value", cmdPrefix)
		}

		tosValueFlagValue, err := cmd.Flags().GetString(tosValueFlagName)
		if err != nil {
			return err, false
		}
		m.TosValue = tosValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleTrackSc0KeyFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackSc0KeyFlagName := fmt.Sprintf("%v.track-sc0-key", cmdPrefix)
	if cmd.Flags().Changed(trackSc0KeyFlagName) {

		var trackSc0KeyFlagName string
		if cmdPrefix == "" {
			trackSc0KeyFlagName = "track-sc0-key"
		} else {
			trackSc0KeyFlagName = fmt.Sprintf("%v.track-sc0-key", cmdPrefix)
		}

		trackSc0KeyFlagValue, err := cmd.Flags().GetString(trackSc0KeyFlagName)
		if err != nil {
			return err, false
		}
		m.TrackSc0Key = trackSc0KeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleTrackSc0TableFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackSc0TableFlagName := fmt.Sprintf("%v.track-sc0-table", cmdPrefix)
	if cmd.Flags().Changed(trackSc0TableFlagName) {

		var trackSc0TableFlagName string
		if cmdPrefix == "" {
			trackSc0TableFlagName = "track-sc0-table"
		} else {
			trackSc0TableFlagName = fmt.Sprintf("%v.track-sc0-table", cmdPrefix)
		}

		trackSc0TableFlagValue, err := cmd.Flags().GetString(trackSc0TableFlagName)
		if err != nil {
			return err, false
		}
		m.TrackSc0Table = trackSc0TableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleTrackSc1KeyFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackSc1KeyFlagName := fmt.Sprintf("%v.track-sc1-key", cmdPrefix)
	if cmd.Flags().Changed(trackSc1KeyFlagName) {

		var trackSc1KeyFlagName string
		if cmdPrefix == "" {
			trackSc1KeyFlagName = "track-sc1-key"
		} else {
			trackSc1KeyFlagName = fmt.Sprintf("%v.track-sc1-key", cmdPrefix)
		}

		trackSc1KeyFlagValue, err := cmd.Flags().GetString(trackSc1KeyFlagName)
		if err != nil {
			return err, false
		}
		m.TrackSc1Key = trackSc1KeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleTrackSc1TableFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackSc1TableFlagName := fmt.Sprintf("%v.track-sc1-table", cmdPrefix)
	if cmd.Flags().Changed(trackSc1TableFlagName) {

		var trackSc1TableFlagName string
		if cmdPrefix == "" {
			trackSc1TableFlagName = "track-sc1-table"
		} else {
			trackSc1TableFlagName = fmt.Sprintf("%v.track-sc1-table", cmdPrefix)
		}

		trackSc1TableFlagValue, err := cmd.Flags().GetString(trackSc1TableFlagName)
		if err != nil {
			return err, false
		}
		m.TrackSc1Table = trackSc1TableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleTrackSc2KeyFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackSc2KeyFlagName := fmt.Sprintf("%v.track-sc2-key", cmdPrefix)
	if cmd.Flags().Changed(trackSc2KeyFlagName) {

		var trackSc2KeyFlagName string
		if cmdPrefix == "" {
			trackSc2KeyFlagName = "track-sc2-key"
		} else {
			trackSc2KeyFlagName = fmt.Sprintf("%v.track-sc2-key", cmdPrefix)
		}

		trackSc2KeyFlagValue, err := cmd.Flags().GetString(trackSc2KeyFlagName)
		if err != nil {
			return err, false
		}
		m.TrackSc2Key = trackSc2KeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleTrackSc2TableFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackSc2TableFlagName := fmt.Sprintf("%v.track-sc2-table", cmdPrefix)
	if cmd.Flags().Changed(trackSc2TableFlagName) {

		var trackSc2TableFlagName string
		if cmdPrefix == "" {
			trackSc2TableFlagName = "track-sc2-table"
		} else {
			trackSc2TableFlagName = fmt.Sprintf("%v.track-sc2-table", cmdPrefix)
		}

		trackSc2TableFlagValue, err := cmd.Flags().GetString(trackSc2TableFlagName)
		if err != nil {
			return err, false
		}
		m.TrackSc2Table = trackSc2TableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleTypeFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleVarExprFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varExprFlagName := fmt.Sprintf("%v.var_expr", cmdPrefix)
	if cmd.Flags().Changed(varExprFlagName) {

		var varExprFlagName string
		if cmdPrefix == "" {
			varExprFlagName = "var_expr"
		} else {
			varExprFlagName = fmt.Sprintf("%v.var_expr", cmdPrefix)
		}

		varExprFlagValue, err := cmd.Flags().GetString(varExprFlagName)
		if err != nil {
			return err, false
		}
		m.VarExpr = varExprFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleVarFormatFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varFormatFlagName := fmt.Sprintf("%v.var_format", cmdPrefix)
	if cmd.Flags().Changed(varFormatFlagName) {

		var varFormatFlagName string
		if cmdPrefix == "" {
			varFormatFlagName = "var_format"
		} else {
			varFormatFlagName = fmt.Sprintf("%v.var_format", cmdPrefix)
		}

		varFormatFlagValue, err := cmd.Flags().GetString(varFormatFlagName)
		if err != nil {
			return err, false
		}
		m.VarFormat = varFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleVarNameFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varNameFlagName := fmt.Sprintf("%v.var_name", cmdPrefix)
	if cmd.Flags().Changed(varNameFlagName) {

		var varNameFlagName string
		if cmdPrefix == "" {
			varNameFlagName = "var_name"
		} else {
			varNameFlagName = fmt.Sprintf("%v.var_name", cmdPrefix)
		}

		varNameFlagValue, err := cmd.Flags().GetString(varNameFlagName)
		if err != nil {
			return err, false
		}
		m.VarName = varNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleVarScopeFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varScopeFlagName := fmt.Sprintf("%v.var_scope", cmdPrefix)
	if cmd.Flags().Changed(varScopeFlagName) {

		var varScopeFlagName string
		if cmdPrefix == "" {
			varScopeFlagName = "var_scope"
		} else {
			varScopeFlagName = fmt.Sprintf("%v.var_scope", cmdPrefix)
		}

		varScopeFlagValue, err := cmd.Flags().GetString(varScopeFlagName)
		if err != nil {
			return err, false
		}
		m.VarScope = varScopeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleWaitAtLeastFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	waitAtLeastFlagName := fmt.Sprintf("%v.wait_at_least", cmdPrefix)
	if cmd.Flags().Changed(waitAtLeastFlagName) {

		var waitAtLeastFlagName string
		if cmdPrefix == "" {
			waitAtLeastFlagName = "wait_at_least"
		} else {
			waitAtLeastFlagName = fmt.Sprintf("%v.wait_at_least", cmdPrefix)
		}

		waitAtLeastFlagValue, err := cmd.Flags().GetInt64(waitAtLeastFlagName)
		if err != nil {
			return err, false
		}
		m.WaitAtLeast = &waitAtLeastFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPResponseRuleWaitTimeFlags(depth int, m *models.HTTPResponseRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	waitTimeFlagName := fmt.Sprintf("%v.wait_time", cmdPrefix)
	if cmd.Flags().Changed(waitTimeFlagName) {

		var waitTimeFlagName string
		if cmdPrefix == "" {
			waitTimeFlagName = "wait_time"
		} else {
			waitTimeFlagName = fmt.Sprintf("%v.wait_time", cmdPrefix)
		}

		waitTimeFlagValue, err := cmd.Flags().GetInt64(waitTimeFlagName)
		if err != nil {
			return err, false
		}
		m.WaitTime = &waitTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
