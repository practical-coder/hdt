// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdt/client/cluster"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationClusterDeleteClusterCmd returns a cmd to handle operation deleteCluster
func makeOperationClusterDeleteClusterCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "deleteCluster",
		Short: `Delete cluster settings and move the node back to single mode`,
		RunE:  runOperationClusterDeleteCluster,
	}

	if err := registerOperationClusterDeleteClusterParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationClusterDeleteCluster uses cmd flags to call endpoint api
func runOperationClusterDeleteCluster(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := cluster.NewDeleteClusterParams()
	if err, _ := retrieveOperationClusterDeleteClusterConfigurationFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationClusterDeleteClusterVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationClusterDeleteClusterResult(appCli.Cluster.DeleteCluster(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationClusterDeleteClusterParamFlags registers all flags needed to fill params
func registerOperationClusterDeleteClusterParamFlags(cmd *cobra.Command) error {
	if err := registerOperationClusterDeleteClusterConfigurationParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationClusterDeleteClusterVersionParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationClusterDeleteClusterConfigurationParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	configurationDescription := `Enum: ["keep"]. In case of moving to single mode do we keep or clean configuration`

	var configurationFlagName string
	if cmdPrefix == "" {
		configurationFlagName = "configuration"
	} else {
		configurationFlagName = fmt.Sprintf("%v.configuration", cmdPrefix)
	}

	var configurationFlagDefault string

	_ = cmd.PersistentFlags().String(configurationFlagName, configurationFlagDefault, configurationDescription)

	if err := cmd.RegisterFlagCompletionFunc(configurationFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["keep"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}
func registerOperationClusterDeleteClusterVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	versionDescription := `Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func retrieveOperationClusterDeleteClusterConfigurationFlag(m *cluster.DeleteClusterParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("configuration") {

		var configurationFlagName string
		if cmdPrefix == "" {
			configurationFlagName = "configuration"
		} else {
			configurationFlagName = fmt.Sprintf("%v.configuration", cmdPrefix)
		}

		configurationFlagValue, err := cmd.Flags().GetString(configurationFlagName)
		if err != nil {
			return err, false
		}
		m.Configuration = &configurationFlagValue

	}
	return nil, retAdded
}
func retrieveOperationClusterDeleteClusterVersionFlag(m *cluster.DeleteClusterParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("version") {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

	}
	return nil, retAdded
}

// parseOperationClusterDeleteClusterResult parses request result and return the string content
func parseOperationClusterDeleteClusterResult(resp0 *cluster.DeleteClusterNoContent, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*cluster.DeleteClusterDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning deleteClusterNoContent is not supported

		return "", respErr
	}

	// warning: non schema response deleteClusterNoContent is not supported by go-swagger cli yet.

	return "", nil
}
