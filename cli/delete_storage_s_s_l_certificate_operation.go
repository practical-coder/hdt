// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdt/client/storage"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationStorageDeleteStorageSSLCertificateCmd returns a cmd to handle operation deleteStorageSSLCertificate
func makeOperationStorageDeleteStorageSSLCertificateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "deleteStorageSSLCertificate",
		Short: `Deletes SSL certificate from disk.`,
		RunE:  runOperationStorageDeleteStorageSSLCertificate,
	}

	if err := registerOperationStorageDeleteStorageSSLCertificateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationStorageDeleteStorageSSLCertificate uses cmd flags to call endpoint api
func runOperationStorageDeleteStorageSSLCertificate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := storage.NewDeleteStorageSSLCertificateParams()
	if err, _ := retrieveOperationStorageDeleteStorageSSLCertificateForceReloadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStorageDeleteStorageSSLCertificateNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStorageDeleteStorageSSLCertificateSkipReloadFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationStorageDeleteStorageSSLCertificateResult(appCli.Storage.DeleteStorageSSLCertificate(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationStorageDeleteStorageSSLCertificateParamFlags registers all flags needed to fill params
func registerOperationStorageDeleteStorageSSLCertificateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationStorageDeleteStorageSSLCertificateForceReloadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageDeleteStorageSSLCertificateNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageDeleteStorageSSLCertificateSkipReloadParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationStorageDeleteStorageSSLCertificateForceReloadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	forceReloadDescription := `If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.`

	var forceReloadFlagName string
	if cmdPrefix == "" {
		forceReloadFlagName = "force_reload"
	} else {
		forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
	}

	var forceReloadFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceReloadFlagName, forceReloadFlagDefault, forceReloadDescription)

	return nil
}
func registerOperationStorageDeleteStorageSSLCertificateNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `Required. SSL certificate name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}
func registerOperationStorageDeleteStorageSSLCertificateSkipReloadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	skipReloadDescription := `If set, no reload will be initiated after update`

	var skipReloadFlagName string
	if cmdPrefix == "" {
		skipReloadFlagName = "skip_reload"
	} else {
		skipReloadFlagName = fmt.Sprintf("%v.skip_reload", cmdPrefix)
	}

	var skipReloadFlagDefault bool

	_ = cmd.PersistentFlags().Bool(skipReloadFlagName, skipReloadFlagDefault, skipReloadDescription)

	return nil
}

func retrieveOperationStorageDeleteStorageSSLCertificateForceReloadFlag(m *storage.DeleteStorageSSLCertificateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("force_reload") {

		var forceReloadFlagName string
		if cmdPrefix == "" {
			forceReloadFlagName = "force_reload"
		} else {
			forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
		}

		forceReloadFlagValue, err := cmd.Flags().GetBool(forceReloadFlagName)
		if err != nil {
			return err, false
		}
		m.ForceReload = &forceReloadFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStorageDeleteStorageSSLCertificateNameFlag(m *storage.DeleteStorageSSLCertificateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStorageDeleteStorageSSLCertificateSkipReloadFlag(m *storage.DeleteStorageSSLCertificateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("skip_reload") {

		var skipReloadFlagName string
		if cmdPrefix == "" {
			skipReloadFlagName = "skip_reload"
		} else {
			skipReloadFlagName = fmt.Sprintf("%v.skip_reload", cmdPrefix)
		}

		skipReloadFlagValue, err := cmd.Flags().GetBool(skipReloadFlagName)
		if err != nil {
			return err, false
		}
		m.SkipReload = &skipReloadFlagValue

	}
	return nil, retAdded
}

// parseOperationStorageDeleteStorageSSLCertificateResult parses request result and return the string content
func parseOperationStorageDeleteStorageSSLCertificateResult(resp0 *storage.DeleteStorageSSLCertificateAccepted, resp1 *storage.DeleteStorageSSLCertificateNoContent, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*storage.DeleteStorageSSLCertificateDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning deleteStorageSSLCertificateAccepted is not supported

		// Non schema case: warning deleteStorageSSLCertificateNoContent is not supported

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*storage.DeleteStorageSSLCertificateNotFound)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response deleteStorageSSLCertificateAccepted is not supported by go-swagger cli yet.

	// warning: non schema response deleteStorageSSLCertificateNoContent is not supported by go-swagger cli yet.

	return "", nil
}
