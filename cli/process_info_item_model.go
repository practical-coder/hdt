// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/practical-coder/hdc/models"
	"github.com/spf13/cobra"
)

// Schema cli for ProcessInfoItem

// register flags to command
func registerModelProcessInfoItemFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProcessInfoItemActivePeers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemBusyPolling(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemBytesOutRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemCompressBpsIn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemCompressBpsOut(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemCompressBpsRateLim(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemConnRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemConnRateLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemConnectedPeers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemCumConns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemCumReq(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemCumSslConns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemCurrConns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemCurrSslConns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemDroppedLogs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemFailedResolutions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemHardMaxConn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemIdlePct(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemJobs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemListeners(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemMaxConn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemMaxConnRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemMaxPipes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemMaxSessRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemMaxSock(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemMaxSslConns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemMaxSslRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemMaxZlibMemUsage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemMemMaxMb(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemNbthread(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemNode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemPid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemPipesFree(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemPipesUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemPoolAllocMb(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemPoolFailed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemPoolUsedMb(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemProcessNum(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemProcesses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemReleaseDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemRunQueue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemSessRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemSessRateLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemSslBackendKeyRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemSslBackendMaxKeyRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemSslCacheLookups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemSslCacheMisses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemSslFrontendKeyRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemSslFrontendMaxKeyRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemSslFrontendSessionReuse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemSslRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemSslRateLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemStopping(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemTasks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemTotalBytesOut(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemUlimitn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemUnstoppable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemUptime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessInfoItemZlibMemUsage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProcessInfoItemActivePeers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	activePeersDescription := ``

	var activePeersFlagName string
	if cmdPrefix == "" {
		activePeersFlagName = "active_peers"
	} else {
		activePeersFlagName = fmt.Sprintf("%v.active_peers", cmdPrefix)
	}

	var activePeersFlagDefault int64

	_ = cmd.PersistentFlags().Int64(activePeersFlagName, activePeersFlagDefault, activePeersDescription)

	return nil
}

func registerProcessInfoItemBusyPolling(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	busyPollingDescription := ``

	var busyPollingFlagName string
	if cmdPrefix == "" {
		busyPollingFlagName = "busy_polling"
	} else {
		busyPollingFlagName = fmt.Sprintf("%v.busy_polling", cmdPrefix)
	}

	var busyPollingFlagDefault int64

	_ = cmd.PersistentFlags().Int64(busyPollingFlagName, busyPollingFlagDefault, busyPollingDescription)

	return nil
}

func registerProcessInfoItemBytesOutRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bytesOutRateDescription := ``

	var bytesOutRateFlagName string
	if cmdPrefix == "" {
		bytesOutRateFlagName = "bytes_out_rate"
	} else {
		bytesOutRateFlagName = fmt.Sprintf("%v.bytes_out_rate", cmdPrefix)
	}

	var bytesOutRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(bytesOutRateFlagName, bytesOutRateFlagDefault, bytesOutRateDescription)

	return nil
}

func registerProcessInfoItemCompressBpsIn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	compressBpsInDescription := ``

	var compressBpsInFlagName string
	if cmdPrefix == "" {
		compressBpsInFlagName = "compress_bps_in"
	} else {
		compressBpsInFlagName = fmt.Sprintf("%v.compress_bps_in", cmdPrefix)
	}

	var compressBpsInFlagDefault int64

	_ = cmd.PersistentFlags().Int64(compressBpsInFlagName, compressBpsInFlagDefault, compressBpsInDescription)

	return nil
}

func registerProcessInfoItemCompressBpsOut(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	compressBpsOutDescription := ``

	var compressBpsOutFlagName string
	if cmdPrefix == "" {
		compressBpsOutFlagName = "compress_bps_out"
	} else {
		compressBpsOutFlagName = fmt.Sprintf("%v.compress_bps_out", cmdPrefix)
	}

	var compressBpsOutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(compressBpsOutFlagName, compressBpsOutFlagDefault, compressBpsOutDescription)

	return nil
}

func registerProcessInfoItemCompressBpsRateLim(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	compressBpsRateLimDescription := ``

	var compressBpsRateLimFlagName string
	if cmdPrefix == "" {
		compressBpsRateLimFlagName = "compress_bps_rate_lim"
	} else {
		compressBpsRateLimFlagName = fmt.Sprintf("%v.compress_bps_rate_lim", cmdPrefix)
	}

	var compressBpsRateLimFlagDefault int64

	_ = cmd.PersistentFlags().Int64(compressBpsRateLimFlagName, compressBpsRateLimFlagDefault, compressBpsRateLimDescription)

	return nil
}

func registerProcessInfoItemConnRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connRateDescription := ``

	var connRateFlagName string
	if cmdPrefix == "" {
		connRateFlagName = "conn_rate"
	} else {
		connRateFlagName = fmt.Sprintf("%v.conn_rate", cmdPrefix)
	}

	var connRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(connRateFlagName, connRateFlagDefault, connRateDescription)

	return nil
}

func registerProcessInfoItemConnRateLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connRateLimitDescription := ``

	var connRateLimitFlagName string
	if cmdPrefix == "" {
		connRateLimitFlagName = "conn_rate_limit"
	} else {
		connRateLimitFlagName = fmt.Sprintf("%v.conn_rate_limit", cmdPrefix)
	}

	var connRateLimitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(connRateLimitFlagName, connRateLimitFlagDefault, connRateLimitDescription)

	return nil
}

func registerProcessInfoItemConnectedPeers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connectedPeersDescription := ``

	var connectedPeersFlagName string
	if cmdPrefix == "" {
		connectedPeersFlagName = "connected_peers"
	} else {
		connectedPeersFlagName = fmt.Sprintf("%v.connected_peers", cmdPrefix)
	}

	var connectedPeersFlagDefault int64

	_ = cmd.PersistentFlags().Int64(connectedPeersFlagName, connectedPeersFlagDefault, connectedPeersDescription)

	return nil
}

func registerProcessInfoItemCumConns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cumConnsDescription := ``

	var cumConnsFlagName string
	if cmdPrefix == "" {
		cumConnsFlagName = "cum_conns"
	} else {
		cumConnsFlagName = fmt.Sprintf("%v.cum_conns", cmdPrefix)
	}

	var cumConnsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cumConnsFlagName, cumConnsFlagDefault, cumConnsDescription)

	return nil
}

func registerProcessInfoItemCumReq(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cumReqDescription := ``

	var cumReqFlagName string
	if cmdPrefix == "" {
		cumReqFlagName = "cum_req"
	} else {
		cumReqFlagName = fmt.Sprintf("%v.cum_req", cmdPrefix)
	}

	var cumReqFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cumReqFlagName, cumReqFlagDefault, cumReqDescription)

	return nil
}

func registerProcessInfoItemCumSslConns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cumSslConnsDescription := ``

	var cumSslConnsFlagName string
	if cmdPrefix == "" {
		cumSslConnsFlagName = "cum_ssl_conns"
	} else {
		cumSslConnsFlagName = fmt.Sprintf("%v.cum_ssl_conns", cmdPrefix)
	}

	var cumSslConnsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cumSslConnsFlagName, cumSslConnsFlagDefault, cumSslConnsDescription)

	return nil
}

func registerProcessInfoItemCurrConns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	currConnsDescription := ``

	var currConnsFlagName string
	if cmdPrefix == "" {
		currConnsFlagName = "curr_conns"
	} else {
		currConnsFlagName = fmt.Sprintf("%v.curr_conns", cmdPrefix)
	}

	var currConnsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(currConnsFlagName, currConnsFlagDefault, currConnsDescription)

	return nil
}

func registerProcessInfoItemCurrSslConns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	currSslConnsDescription := ``

	var currSslConnsFlagName string
	if cmdPrefix == "" {
		currSslConnsFlagName = "curr_ssl_conns"
	} else {
		currSslConnsFlagName = fmt.Sprintf("%v.curr_ssl_conns", cmdPrefix)
	}

	var currSslConnsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(currSslConnsFlagName, currSslConnsFlagDefault, currSslConnsDescription)

	return nil
}

func registerProcessInfoItemDroppedLogs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	droppedLogsDescription := ``

	var droppedLogsFlagName string
	if cmdPrefix == "" {
		droppedLogsFlagName = "dropped_logs"
	} else {
		droppedLogsFlagName = fmt.Sprintf("%v.dropped_logs", cmdPrefix)
	}

	var droppedLogsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(droppedLogsFlagName, droppedLogsFlagDefault, droppedLogsDescription)

	return nil
}

func registerProcessInfoItemFailedResolutions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	failedResolutionsDescription := ``

	var failedResolutionsFlagName string
	if cmdPrefix == "" {
		failedResolutionsFlagName = "failed_resolutions"
	} else {
		failedResolutionsFlagName = fmt.Sprintf("%v.failed_resolutions", cmdPrefix)
	}

	var failedResolutionsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(failedResolutionsFlagName, failedResolutionsFlagDefault, failedResolutionsDescription)

	return nil
}

func registerProcessInfoItemHardMaxConn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hardMaxConnDescription := ``

	var hardMaxConnFlagName string
	if cmdPrefix == "" {
		hardMaxConnFlagName = "hard_max_conn"
	} else {
		hardMaxConnFlagName = fmt.Sprintf("%v.hard_max_conn", cmdPrefix)
	}

	var hardMaxConnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(hardMaxConnFlagName, hardMaxConnFlagDefault, hardMaxConnDescription)

	return nil
}

func registerProcessInfoItemIdlePct(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idlePctDescription := ``

	var idlePctFlagName string
	if cmdPrefix == "" {
		idlePctFlagName = "idle_pct"
	} else {
		idlePctFlagName = fmt.Sprintf("%v.idle_pct", cmdPrefix)
	}

	var idlePctFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idlePctFlagName, idlePctFlagDefault, idlePctDescription)

	return nil
}

func registerProcessInfoItemJobs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jobsDescription := ``

	var jobsFlagName string
	if cmdPrefix == "" {
		jobsFlagName = "jobs"
	} else {
		jobsFlagName = fmt.Sprintf("%v.jobs", cmdPrefix)
	}

	var jobsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(jobsFlagName, jobsFlagDefault, jobsDescription)

	return nil
}

func registerProcessInfoItemListeners(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	listenersDescription := ``

	var listenersFlagName string
	if cmdPrefix == "" {
		listenersFlagName = "listeners"
	} else {
		listenersFlagName = fmt.Sprintf("%v.listeners", cmdPrefix)
	}

	var listenersFlagDefault int64

	_ = cmd.PersistentFlags().Int64(listenersFlagName, listenersFlagDefault, listenersDescription)

	return nil
}

func registerProcessInfoItemMaxConn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxConnDescription := ``

	var maxConnFlagName string
	if cmdPrefix == "" {
		maxConnFlagName = "max_conn"
	} else {
		maxConnFlagName = fmt.Sprintf("%v.max_conn", cmdPrefix)
	}

	var maxConnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxConnFlagName, maxConnFlagDefault, maxConnDescription)

	return nil
}

func registerProcessInfoItemMaxConnRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxConnRateDescription := ``

	var maxConnRateFlagName string
	if cmdPrefix == "" {
		maxConnRateFlagName = "max_conn_rate"
	} else {
		maxConnRateFlagName = fmt.Sprintf("%v.max_conn_rate", cmdPrefix)
	}

	var maxConnRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxConnRateFlagName, maxConnRateFlagDefault, maxConnRateDescription)

	return nil
}

func registerProcessInfoItemMaxPipes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxPipesDescription := ``

	var maxPipesFlagName string
	if cmdPrefix == "" {
		maxPipesFlagName = "max_pipes"
	} else {
		maxPipesFlagName = fmt.Sprintf("%v.max_pipes", cmdPrefix)
	}

	var maxPipesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxPipesFlagName, maxPipesFlagDefault, maxPipesDescription)

	return nil
}

func registerProcessInfoItemMaxSessRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxSessRateDescription := ``

	var maxSessRateFlagName string
	if cmdPrefix == "" {
		maxSessRateFlagName = "max_sess_rate"
	} else {
		maxSessRateFlagName = fmt.Sprintf("%v.max_sess_rate", cmdPrefix)
	}

	var maxSessRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxSessRateFlagName, maxSessRateFlagDefault, maxSessRateDescription)

	return nil
}

func registerProcessInfoItemMaxSock(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxSockDescription := ``

	var maxSockFlagName string
	if cmdPrefix == "" {
		maxSockFlagName = "max_sock"
	} else {
		maxSockFlagName = fmt.Sprintf("%v.max_sock", cmdPrefix)
	}

	var maxSockFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxSockFlagName, maxSockFlagDefault, maxSockDescription)

	return nil
}

func registerProcessInfoItemMaxSslConns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxSslConnsDescription := ``

	var maxSslConnsFlagName string
	if cmdPrefix == "" {
		maxSslConnsFlagName = "max_ssl_conns"
	} else {
		maxSslConnsFlagName = fmt.Sprintf("%v.max_ssl_conns", cmdPrefix)
	}

	var maxSslConnsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxSslConnsFlagName, maxSslConnsFlagDefault, maxSslConnsDescription)

	return nil
}

func registerProcessInfoItemMaxSslRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxSslRateDescription := ``

	var maxSslRateFlagName string
	if cmdPrefix == "" {
		maxSslRateFlagName = "max_ssl_rate"
	} else {
		maxSslRateFlagName = fmt.Sprintf("%v.max_ssl_rate", cmdPrefix)
	}

	var maxSslRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxSslRateFlagName, maxSslRateFlagDefault, maxSslRateDescription)

	return nil
}

func registerProcessInfoItemMaxZlibMemUsage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxZlibMemUsageDescription := ``

	var maxZlibMemUsageFlagName string
	if cmdPrefix == "" {
		maxZlibMemUsageFlagName = "max_zlib_mem_usage"
	} else {
		maxZlibMemUsageFlagName = fmt.Sprintf("%v.max_zlib_mem_usage", cmdPrefix)
	}

	var maxZlibMemUsageFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxZlibMemUsageFlagName, maxZlibMemUsageFlagDefault, maxZlibMemUsageDescription)

	return nil
}

func registerProcessInfoItemMemMaxMb(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	memMaxMbDescription := ``

	var memMaxMbFlagName string
	if cmdPrefix == "" {
		memMaxMbFlagName = "mem_max_mb"
	} else {
		memMaxMbFlagName = fmt.Sprintf("%v.mem_max_mb", cmdPrefix)
	}

	var memMaxMbFlagDefault int64

	_ = cmd.PersistentFlags().Int64(memMaxMbFlagName, memMaxMbFlagDefault, memMaxMbDescription)

	return nil
}

func registerProcessInfoItemNbthread(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nbthreadDescription := `Number of threads`

	var nbthreadFlagName string
	if cmdPrefix == "" {
		nbthreadFlagName = "nbthread"
	} else {
		nbthreadFlagName = fmt.Sprintf("%v.nbthread", cmdPrefix)
	}

	var nbthreadFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nbthreadFlagName, nbthreadFlagDefault, nbthreadDescription)

	return nil
}

func registerProcessInfoItemNode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodeDescription := ``

	var nodeFlagName string
	if cmdPrefix == "" {
		nodeFlagName = "node"
	} else {
		nodeFlagName = fmt.Sprintf("%v.node", cmdPrefix)
	}

	var nodeFlagDefault string

	_ = cmd.PersistentFlags().String(nodeFlagName, nodeFlagDefault, nodeDescription)

	return nil
}

func registerProcessInfoItemPid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pidDescription := `Process id of the replying worker process`

	var pidFlagName string
	if cmdPrefix == "" {
		pidFlagName = "pid"
	} else {
		pidFlagName = fmt.Sprintf("%v.pid", cmdPrefix)
	}

	var pidFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pidFlagName, pidFlagDefault, pidDescription)

	return nil
}

func registerProcessInfoItemPipesFree(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pipesFreeDescription := ``

	var pipesFreeFlagName string
	if cmdPrefix == "" {
		pipesFreeFlagName = "pipes_free"
	} else {
		pipesFreeFlagName = fmt.Sprintf("%v.pipes_free", cmdPrefix)
	}

	var pipesFreeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pipesFreeFlagName, pipesFreeFlagDefault, pipesFreeDescription)

	return nil
}

func registerProcessInfoItemPipesUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pipesUsedDescription := ``

	var pipesUsedFlagName string
	if cmdPrefix == "" {
		pipesUsedFlagName = "pipes_used"
	} else {
		pipesUsedFlagName = fmt.Sprintf("%v.pipes_used", cmdPrefix)
	}

	var pipesUsedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pipesUsedFlagName, pipesUsedFlagDefault, pipesUsedDescription)

	return nil
}

func registerProcessInfoItemPoolAllocMb(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poolAllocMbDescription := ``

	var poolAllocMbFlagName string
	if cmdPrefix == "" {
		poolAllocMbFlagName = "pool_alloc_mb"
	} else {
		poolAllocMbFlagName = fmt.Sprintf("%v.pool_alloc_mb", cmdPrefix)
	}

	var poolAllocMbFlagDefault int64

	_ = cmd.PersistentFlags().Int64(poolAllocMbFlagName, poolAllocMbFlagDefault, poolAllocMbDescription)

	return nil
}

func registerProcessInfoItemPoolFailed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poolFailedDescription := ``

	var poolFailedFlagName string
	if cmdPrefix == "" {
		poolFailedFlagName = "pool_failed"
	} else {
		poolFailedFlagName = fmt.Sprintf("%v.pool_failed", cmdPrefix)
	}

	var poolFailedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(poolFailedFlagName, poolFailedFlagDefault, poolFailedDescription)

	return nil
}

func registerProcessInfoItemPoolUsedMb(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poolUsedMbDescription := ``

	var poolUsedMbFlagName string
	if cmdPrefix == "" {
		poolUsedMbFlagName = "pool_used_mb"
	} else {
		poolUsedMbFlagName = fmt.Sprintf("%v.pool_used_mb", cmdPrefix)
	}

	var poolUsedMbFlagDefault int64

	_ = cmd.PersistentFlags().Int64(poolUsedMbFlagName, poolUsedMbFlagDefault, poolUsedMbDescription)

	return nil
}

func registerProcessInfoItemProcessNum(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	processNumDescription := `Process number`

	var processNumFlagName string
	if cmdPrefix == "" {
		processNumFlagName = "process_num"
	} else {
		processNumFlagName = fmt.Sprintf("%v.process_num", cmdPrefix)
	}

	var processNumFlagDefault int64

	_ = cmd.PersistentFlags().Int64(processNumFlagName, processNumFlagDefault, processNumDescription)

	return nil
}

func registerProcessInfoItemProcesses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	processesDescription := `Number of spawned processes`

	var processesFlagName string
	if cmdPrefix == "" {
		processesFlagName = "processes"
	} else {
		processesFlagName = fmt.Sprintf("%v.processes", cmdPrefix)
	}

	var processesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(processesFlagName, processesFlagDefault, processesDescription)

	return nil
}

func registerProcessInfoItemReleaseDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive release_date strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerProcessInfoItemRunQueue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runQueueDescription := ``

	var runQueueFlagName string
	if cmdPrefix == "" {
		runQueueFlagName = "run_queue"
	} else {
		runQueueFlagName = fmt.Sprintf("%v.run_queue", cmdPrefix)
	}

	var runQueueFlagDefault int64

	_ = cmd.PersistentFlags().Int64(runQueueFlagName, runQueueFlagDefault, runQueueDescription)

	return nil
}

func registerProcessInfoItemSessRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sessRateDescription := ``

	var sessRateFlagName string
	if cmdPrefix == "" {
		sessRateFlagName = "sess_rate"
	} else {
		sessRateFlagName = fmt.Sprintf("%v.sess_rate", cmdPrefix)
	}

	var sessRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sessRateFlagName, sessRateFlagDefault, sessRateDescription)

	return nil
}

func registerProcessInfoItemSessRateLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sessRateLimitDescription := ``

	var sessRateLimitFlagName string
	if cmdPrefix == "" {
		sessRateLimitFlagName = "sess_rate_limit"
	} else {
		sessRateLimitFlagName = fmt.Sprintf("%v.sess_rate_limit", cmdPrefix)
	}

	var sessRateLimitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sessRateLimitFlagName, sessRateLimitFlagDefault, sessRateLimitDescription)

	return nil
}

func registerProcessInfoItemSslBackendKeyRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslBackendKeyRateDescription := ``

	var sslBackendKeyRateFlagName string
	if cmdPrefix == "" {
		sslBackendKeyRateFlagName = "ssl_backend_key_rate"
	} else {
		sslBackendKeyRateFlagName = fmt.Sprintf("%v.ssl_backend_key_rate", cmdPrefix)
	}

	var sslBackendKeyRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslBackendKeyRateFlagName, sslBackendKeyRateFlagDefault, sslBackendKeyRateDescription)

	return nil
}

func registerProcessInfoItemSslBackendMaxKeyRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslBackendMaxKeyRateDescription := ``

	var sslBackendMaxKeyRateFlagName string
	if cmdPrefix == "" {
		sslBackendMaxKeyRateFlagName = "ssl_backend_max_key_rate"
	} else {
		sslBackendMaxKeyRateFlagName = fmt.Sprintf("%v.ssl_backend_max_key_rate", cmdPrefix)
	}

	var sslBackendMaxKeyRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslBackendMaxKeyRateFlagName, sslBackendMaxKeyRateFlagDefault, sslBackendMaxKeyRateDescription)

	return nil
}

func registerProcessInfoItemSslCacheLookups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslCacheLookupsDescription := ``

	var sslCacheLookupsFlagName string
	if cmdPrefix == "" {
		sslCacheLookupsFlagName = "ssl_cache_lookups"
	} else {
		sslCacheLookupsFlagName = fmt.Sprintf("%v.ssl_cache_lookups", cmdPrefix)
	}

	var sslCacheLookupsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslCacheLookupsFlagName, sslCacheLookupsFlagDefault, sslCacheLookupsDescription)

	return nil
}

func registerProcessInfoItemSslCacheMisses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslCacheMissesDescription := ``

	var sslCacheMissesFlagName string
	if cmdPrefix == "" {
		sslCacheMissesFlagName = "ssl_cache_misses"
	} else {
		sslCacheMissesFlagName = fmt.Sprintf("%v.ssl_cache_misses", cmdPrefix)
	}

	var sslCacheMissesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslCacheMissesFlagName, sslCacheMissesFlagDefault, sslCacheMissesDescription)

	return nil
}

func registerProcessInfoItemSslFrontendKeyRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslFrontendKeyRateDescription := ``

	var sslFrontendKeyRateFlagName string
	if cmdPrefix == "" {
		sslFrontendKeyRateFlagName = "ssl_frontend_key_rate"
	} else {
		sslFrontendKeyRateFlagName = fmt.Sprintf("%v.ssl_frontend_key_rate", cmdPrefix)
	}

	var sslFrontendKeyRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslFrontendKeyRateFlagName, sslFrontendKeyRateFlagDefault, sslFrontendKeyRateDescription)

	return nil
}

func registerProcessInfoItemSslFrontendMaxKeyRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslFrontendMaxKeyRateDescription := ``

	var sslFrontendMaxKeyRateFlagName string
	if cmdPrefix == "" {
		sslFrontendMaxKeyRateFlagName = "ssl_frontend_max_key_rate"
	} else {
		sslFrontendMaxKeyRateFlagName = fmt.Sprintf("%v.ssl_frontend_max_key_rate", cmdPrefix)
	}

	var sslFrontendMaxKeyRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslFrontendMaxKeyRateFlagName, sslFrontendMaxKeyRateFlagDefault, sslFrontendMaxKeyRateDescription)

	return nil
}

func registerProcessInfoItemSslFrontendSessionReuse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslFrontendSessionReuseDescription := ``

	var sslFrontendSessionReuseFlagName string
	if cmdPrefix == "" {
		sslFrontendSessionReuseFlagName = "ssl_frontend_session_reuse"
	} else {
		sslFrontendSessionReuseFlagName = fmt.Sprintf("%v.ssl_frontend_session_reuse", cmdPrefix)
	}

	var sslFrontendSessionReuseFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslFrontendSessionReuseFlagName, sslFrontendSessionReuseFlagDefault, sslFrontendSessionReuseDescription)

	return nil
}

func registerProcessInfoItemSslRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslRateDescription := ``

	var sslRateFlagName string
	if cmdPrefix == "" {
		sslRateFlagName = "ssl_rate"
	} else {
		sslRateFlagName = fmt.Sprintf("%v.ssl_rate", cmdPrefix)
	}

	var sslRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslRateFlagName, sslRateFlagDefault, sslRateDescription)

	return nil
}

func registerProcessInfoItemSslRateLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslRateLimitDescription := ``

	var sslRateLimitFlagName string
	if cmdPrefix == "" {
		sslRateLimitFlagName = "ssl_rate_limit"
	} else {
		sslRateLimitFlagName = fmt.Sprintf("%v.ssl_rate_limit", cmdPrefix)
	}

	var sslRateLimitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslRateLimitFlagName, sslRateLimitFlagDefault, sslRateLimitDescription)

	return nil
}

func registerProcessInfoItemStopping(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stoppingDescription := ``

	var stoppingFlagName string
	if cmdPrefix == "" {
		stoppingFlagName = "stopping"
	} else {
		stoppingFlagName = fmt.Sprintf("%v.stopping", cmdPrefix)
	}

	var stoppingFlagDefault int64

	_ = cmd.PersistentFlags().Int64(stoppingFlagName, stoppingFlagDefault, stoppingDescription)

	return nil
}

func registerProcessInfoItemTasks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tasksDescription := ``

	var tasksFlagName string
	if cmdPrefix == "" {
		tasksFlagName = "tasks"
	} else {
		tasksFlagName = fmt.Sprintf("%v.tasks", cmdPrefix)
	}

	var tasksFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tasksFlagName, tasksFlagDefault, tasksDescription)

	return nil
}

func registerProcessInfoItemTotalBytesOut(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalBytesOutDescription := ``

	var totalBytesOutFlagName string
	if cmdPrefix == "" {
		totalBytesOutFlagName = "total_bytes_out"
	} else {
		totalBytesOutFlagName = fmt.Sprintf("%v.total_bytes_out", cmdPrefix)
	}

	var totalBytesOutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalBytesOutFlagName, totalBytesOutFlagDefault, totalBytesOutDescription)

	return nil
}

func registerProcessInfoItemUlimitn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ulimitNDescription := ``

	var ulimitNFlagName string
	if cmdPrefix == "" {
		ulimitNFlagName = "ulimit_n"
	} else {
		ulimitNFlagName = fmt.Sprintf("%v.ulimit_n", cmdPrefix)
	}

	var ulimitNFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ulimitNFlagName, ulimitNFlagDefault, ulimitNDescription)

	return nil
}

func registerProcessInfoItemUnstoppable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unstoppableDescription := ``

	var unstoppableFlagName string
	if cmdPrefix == "" {
		unstoppableFlagName = "unstoppable"
	} else {
		unstoppableFlagName = fmt.Sprintf("%v.unstoppable", cmdPrefix)
	}

	var unstoppableFlagDefault int64

	_ = cmd.PersistentFlags().Int64(unstoppableFlagName, unstoppableFlagDefault, unstoppableDescription)

	return nil
}

func registerProcessInfoItemUptime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uptimeDescription := `HAProxy uptime in s`

	var uptimeFlagName string
	if cmdPrefix == "" {
		uptimeFlagName = "uptime"
	} else {
		uptimeFlagName = fmt.Sprintf("%v.uptime", cmdPrefix)
	}

	var uptimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(uptimeFlagName, uptimeFlagDefault, uptimeDescription)

	return nil
}

func registerProcessInfoItemVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `HAProxy version string`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func registerProcessInfoItemZlibMemUsage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	zlibMemUsageDescription := ``

	var zlibMemUsageFlagName string
	if cmdPrefix == "" {
		zlibMemUsageFlagName = "zlib_mem_usage"
	} else {
		zlibMemUsageFlagName = fmt.Sprintf("%v.zlib_mem_usage", cmdPrefix)
	}

	var zlibMemUsageFlagDefault int64

	_ = cmd.PersistentFlags().Int64(zlibMemUsageFlagName, zlibMemUsageFlagDefault, zlibMemUsageDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProcessInfoItemFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, activePeersAdded := retrieveProcessInfoItemActivePeersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || activePeersAdded

	err, busyPollingAdded := retrieveProcessInfoItemBusyPollingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || busyPollingAdded

	err, bytesOutRateAdded := retrieveProcessInfoItemBytesOutRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bytesOutRateAdded

	err, compressBpsInAdded := retrieveProcessInfoItemCompressBpsInFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compressBpsInAdded

	err, compressBpsOutAdded := retrieveProcessInfoItemCompressBpsOutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compressBpsOutAdded

	err, compressBpsRateLimAdded := retrieveProcessInfoItemCompressBpsRateLimFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compressBpsRateLimAdded

	err, connRateAdded := retrieveProcessInfoItemConnRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connRateAdded

	err, connRateLimitAdded := retrieveProcessInfoItemConnRateLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connRateLimitAdded

	err, connectedPeersAdded := retrieveProcessInfoItemConnectedPeersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectedPeersAdded

	err, cumConnsAdded := retrieveProcessInfoItemCumConnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cumConnsAdded

	err, cumReqAdded := retrieveProcessInfoItemCumReqFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cumReqAdded

	err, cumSslConnsAdded := retrieveProcessInfoItemCumSslConnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cumSslConnsAdded

	err, currConnsAdded := retrieveProcessInfoItemCurrConnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || currConnsAdded

	err, currSslConnsAdded := retrieveProcessInfoItemCurrSslConnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || currSslConnsAdded

	err, droppedLogsAdded := retrieveProcessInfoItemDroppedLogsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || droppedLogsAdded

	err, failedResolutionsAdded := retrieveProcessInfoItemFailedResolutionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || failedResolutionsAdded

	err, hardMaxConnAdded := retrieveProcessInfoItemHardMaxConnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hardMaxConnAdded

	err, idlePctAdded := retrieveProcessInfoItemIdlePctFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idlePctAdded

	err, jobsAdded := retrieveProcessInfoItemJobsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jobsAdded

	err, listenersAdded := retrieveProcessInfoItemListenersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || listenersAdded

	err, maxConnAdded := retrieveProcessInfoItemMaxConnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxConnAdded

	err, maxConnRateAdded := retrieveProcessInfoItemMaxConnRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxConnRateAdded

	err, maxPipesAdded := retrieveProcessInfoItemMaxPipesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxPipesAdded

	err, maxSessRateAdded := retrieveProcessInfoItemMaxSessRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxSessRateAdded

	err, maxSockAdded := retrieveProcessInfoItemMaxSockFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxSockAdded

	err, maxSslConnsAdded := retrieveProcessInfoItemMaxSslConnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxSslConnsAdded

	err, maxSslRateAdded := retrieveProcessInfoItemMaxSslRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxSslRateAdded

	err, maxZlibMemUsageAdded := retrieveProcessInfoItemMaxZlibMemUsageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxZlibMemUsageAdded

	err, memMaxMbAdded := retrieveProcessInfoItemMemMaxMbFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memMaxMbAdded

	err, nbthreadAdded := retrieveProcessInfoItemNbthreadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nbthreadAdded

	err, nodeAdded := retrieveProcessInfoItemNodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodeAdded

	err, pidAdded := retrieveProcessInfoItemPidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pidAdded

	err, pipesFreeAdded := retrieveProcessInfoItemPipesFreeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pipesFreeAdded

	err, pipesUsedAdded := retrieveProcessInfoItemPipesUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pipesUsedAdded

	err, poolAllocMbAdded := retrieveProcessInfoItemPoolAllocMbFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poolAllocMbAdded

	err, poolFailedAdded := retrieveProcessInfoItemPoolFailedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poolFailedAdded

	err, poolUsedMbAdded := retrieveProcessInfoItemPoolUsedMbFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poolUsedMbAdded

	err, processNumAdded := retrieveProcessInfoItemProcessNumFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || processNumAdded

	err, processesAdded := retrieveProcessInfoItemProcessesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || processesAdded

	err, releaseDateAdded := retrieveProcessInfoItemReleaseDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || releaseDateAdded

	err, runQueueAdded := retrieveProcessInfoItemRunQueueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runQueueAdded

	err, sessRateAdded := retrieveProcessInfoItemSessRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sessRateAdded

	err, sessRateLimitAdded := retrieveProcessInfoItemSessRateLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sessRateLimitAdded

	err, sslBackendKeyRateAdded := retrieveProcessInfoItemSslBackendKeyRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslBackendKeyRateAdded

	err, sslBackendMaxKeyRateAdded := retrieveProcessInfoItemSslBackendMaxKeyRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslBackendMaxKeyRateAdded

	err, sslCacheLookupsAdded := retrieveProcessInfoItemSslCacheLookupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslCacheLookupsAdded

	err, sslCacheMissesAdded := retrieveProcessInfoItemSslCacheMissesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslCacheMissesAdded

	err, sslFrontendKeyRateAdded := retrieveProcessInfoItemSslFrontendKeyRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslFrontendKeyRateAdded

	err, sslFrontendMaxKeyRateAdded := retrieveProcessInfoItemSslFrontendMaxKeyRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslFrontendMaxKeyRateAdded

	err, sslFrontendSessionReuseAdded := retrieveProcessInfoItemSslFrontendSessionReuseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslFrontendSessionReuseAdded

	err, sslRateAdded := retrieveProcessInfoItemSslRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslRateAdded

	err, sslRateLimitAdded := retrieveProcessInfoItemSslRateLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslRateLimitAdded

	err, stoppingAdded := retrieveProcessInfoItemStoppingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stoppingAdded

	err, tasksAdded := retrieveProcessInfoItemTasksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tasksAdded

	err, totalBytesOutAdded := retrieveProcessInfoItemTotalBytesOutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalBytesOutAdded

	err, ulimitNAdded := retrieveProcessInfoItemUlimitnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ulimitNAdded

	err, unstoppableAdded := retrieveProcessInfoItemUnstoppableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unstoppableAdded

	err, uptimeAdded := retrieveProcessInfoItemUptimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uptimeAdded

	err, versionAdded := retrieveProcessInfoItemVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	err, zlibMemUsageAdded := retrieveProcessInfoItemZlibMemUsageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || zlibMemUsageAdded

	return nil, retAdded
}

func retrieveProcessInfoItemActivePeersFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	activePeersFlagName := fmt.Sprintf("%v.active_peers", cmdPrefix)
	if cmd.Flags().Changed(activePeersFlagName) {

		var activePeersFlagName string
		if cmdPrefix == "" {
			activePeersFlagName = "active_peers"
		} else {
			activePeersFlagName = fmt.Sprintf("%v.active_peers", cmdPrefix)
		}

		activePeersFlagValue, err := cmd.Flags().GetInt64(activePeersFlagName)
		if err != nil {
			return err, false
		}
		m.ActivePeers = &activePeersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemBusyPollingFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	busyPollingFlagName := fmt.Sprintf("%v.busy_polling", cmdPrefix)
	if cmd.Flags().Changed(busyPollingFlagName) {

		var busyPollingFlagName string
		if cmdPrefix == "" {
			busyPollingFlagName = "busy_polling"
		} else {
			busyPollingFlagName = fmt.Sprintf("%v.busy_polling", cmdPrefix)
		}

		busyPollingFlagValue, err := cmd.Flags().GetInt64(busyPollingFlagName)
		if err != nil {
			return err, false
		}
		m.BusyPolling = &busyPollingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemBytesOutRateFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bytesOutRateFlagName := fmt.Sprintf("%v.bytes_out_rate", cmdPrefix)
	if cmd.Flags().Changed(bytesOutRateFlagName) {

		var bytesOutRateFlagName string
		if cmdPrefix == "" {
			bytesOutRateFlagName = "bytes_out_rate"
		} else {
			bytesOutRateFlagName = fmt.Sprintf("%v.bytes_out_rate", cmdPrefix)
		}

		bytesOutRateFlagValue, err := cmd.Flags().GetInt64(bytesOutRateFlagName)
		if err != nil {
			return err, false
		}
		m.BytesOutRate = &bytesOutRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemCompressBpsInFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	compressBpsInFlagName := fmt.Sprintf("%v.compress_bps_in", cmdPrefix)
	if cmd.Flags().Changed(compressBpsInFlagName) {

		var compressBpsInFlagName string
		if cmdPrefix == "" {
			compressBpsInFlagName = "compress_bps_in"
		} else {
			compressBpsInFlagName = fmt.Sprintf("%v.compress_bps_in", cmdPrefix)
		}

		compressBpsInFlagValue, err := cmd.Flags().GetInt64(compressBpsInFlagName)
		if err != nil {
			return err, false
		}
		m.CompressBpsIn = &compressBpsInFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemCompressBpsOutFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	compressBpsOutFlagName := fmt.Sprintf("%v.compress_bps_out", cmdPrefix)
	if cmd.Flags().Changed(compressBpsOutFlagName) {

		var compressBpsOutFlagName string
		if cmdPrefix == "" {
			compressBpsOutFlagName = "compress_bps_out"
		} else {
			compressBpsOutFlagName = fmt.Sprintf("%v.compress_bps_out", cmdPrefix)
		}

		compressBpsOutFlagValue, err := cmd.Flags().GetInt64(compressBpsOutFlagName)
		if err != nil {
			return err, false
		}
		m.CompressBpsOut = &compressBpsOutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemCompressBpsRateLimFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	compressBpsRateLimFlagName := fmt.Sprintf("%v.compress_bps_rate_lim", cmdPrefix)
	if cmd.Flags().Changed(compressBpsRateLimFlagName) {

		var compressBpsRateLimFlagName string
		if cmdPrefix == "" {
			compressBpsRateLimFlagName = "compress_bps_rate_lim"
		} else {
			compressBpsRateLimFlagName = fmt.Sprintf("%v.compress_bps_rate_lim", cmdPrefix)
		}

		compressBpsRateLimFlagValue, err := cmd.Flags().GetInt64(compressBpsRateLimFlagName)
		if err != nil {
			return err, false
		}
		m.CompressBpsRateLim = &compressBpsRateLimFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemConnRateFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connRateFlagName := fmt.Sprintf("%v.conn_rate", cmdPrefix)
	if cmd.Flags().Changed(connRateFlagName) {

		var connRateFlagName string
		if cmdPrefix == "" {
			connRateFlagName = "conn_rate"
		} else {
			connRateFlagName = fmt.Sprintf("%v.conn_rate", cmdPrefix)
		}

		connRateFlagValue, err := cmd.Flags().GetInt64(connRateFlagName)
		if err != nil {
			return err, false
		}
		m.ConnRate = &connRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemConnRateLimitFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connRateLimitFlagName := fmt.Sprintf("%v.conn_rate_limit", cmdPrefix)
	if cmd.Flags().Changed(connRateLimitFlagName) {

		var connRateLimitFlagName string
		if cmdPrefix == "" {
			connRateLimitFlagName = "conn_rate_limit"
		} else {
			connRateLimitFlagName = fmt.Sprintf("%v.conn_rate_limit", cmdPrefix)
		}

		connRateLimitFlagValue, err := cmd.Flags().GetInt64(connRateLimitFlagName)
		if err != nil {
			return err, false
		}
		m.ConnRateLimit = &connRateLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemConnectedPeersFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectedPeersFlagName := fmt.Sprintf("%v.connected_peers", cmdPrefix)
	if cmd.Flags().Changed(connectedPeersFlagName) {

		var connectedPeersFlagName string
		if cmdPrefix == "" {
			connectedPeersFlagName = "connected_peers"
		} else {
			connectedPeersFlagName = fmt.Sprintf("%v.connected_peers", cmdPrefix)
		}

		connectedPeersFlagValue, err := cmd.Flags().GetInt64(connectedPeersFlagName)
		if err != nil {
			return err, false
		}
		m.ConnectedPeers = &connectedPeersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemCumConnsFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cumConnsFlagName := fmt.Sprintf("%v.cum_conns", cmdPrefix)
	if cmd.Flags().Changed(cumConnsFlagName) {

		var cumConnsFlagName string
		if cmdPrefix == "" {
			cumConnsFlagName = "cum_conns"
		} else {
			cumConnsFlagName = fmt.Sprintf("%v.cum_conns", cmdPrefix)
		}

		cumConnsFlagValue, err := cmd.Flags().GetInt64(cumConnsFlagName)
		if err != nil {
			return err, false
		}
		m.CumConns = &cumConnsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemCumReqFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cumReqFlagName := fmt.Sprintf("%v.cum_req", cmdPrefix)
	if cmd.Flags().Changed(cumReqFlagName) {

		var cumReqFlagName string
		if cmdPrefix == "" {
			cumReqFlagName = "cum_req"
		} else {
			cumReqFlagName = fmt.Sprintf("%v.cum_req", cmdPrefix)
		}

		cumReqFlagValue, err := cmd.Flags().GetInt64(cumReqFlagName)
		if err != nil {
			return err, false
		}
		m.CumReq = &cumReqFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemCumSslConnsFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cumSslConnsFlagName := fmt.Sprintf("%v.cum_ssl_conns", cmdPrefix)
	if cmd.Flags().Changed(cumSslConnsFlagName) {

		var cumSslConnsFlagName string
		if cmdPrefix == "" {
			cumSslConnsFlagName = "cum_ssl_conns"
		} else {
			cumSslConnsFlagName = fmt.Sprintf("%v.cum_ssl_conns", cmdPrefix)
		}

		cumSslConnsFlagValue, err := cmd.Flags().GetInt64(cumSslConnsFlagName)
		if err != nil {
			return err, false
		}
		m.CumSslConns = &cumSslConnsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemCurrConnsFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	currConnsFlagName := fmt.Sprintf("%v.curr_conns", cmdPrefix)
	if cmd.Flags().Changed(currConnsFlagName) {

		var currConnsFlagName string
		if cmdPrefix == "" {
			currConnsFlagName = "curr_conns"
		} else {
			currConnsFlagName = fmt.Sprintf("%v.curr_conns", cmdPrefix)
		}

		currConnsFlagValue, err := cmd.Flags().GetInt64(currConnsFlagName)
		if err != nil {
			return err, false
		}
		m.CurrConns = &currConnsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemCurrSslConnsFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	currSslConnsFlagName := fmt.Sprintf("%v.curr_ssl_conns", cmdPrefix)
	if cmd.Flags().Changed(currSslConnsFlagName) {

		var currSslConnsFlagName string
		if cmdPrefix == "" {
			currSslConnsFlagName = "curr_ssl_conns"
		} else {
			currSslConnsFlagName = fmt.Sprintf("%v.curr_ssl_conns", cmdPrefix)
		}

		currSslConnsFlagValue, err := cmd.Flags().GetInt64(currSslConnsFlagName)
		if err != nil {
			return err, false
		}
		m.CurrSslConns = &currSslConnsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemDroppedLogsFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	droppedLogsFlagName := fmt.Sprintf("%v.dropped_logs", cmdPrefix)
	if cmd.Flags().Changed(droppedLogsFlagName) {

		var droppedLogsFlagName string
		if cmdPrefix == "" {
			droppedLogsFlagName = "dropped_logs"
		} else {
			droppedLogsFlagName = fmt.Sprintf("%v.dropped_logs", cmdPrefix)
		}

		droppedLogsFlagValue, err := cmd.Flags().GetInt64(droppedLogsFlagName)
		if err != nil {
			return err, false
		}
		m.DroppedLogs = &droppedLogsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemFailedResolutionsFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	failedResolutionsFlagName := fmt.Sprintf("%v.failed_resolutions", cmdPrefix)
	if cmd.Flags().Changed(failedResolutionsFlagName) {

		var failedResolutionsFlagName string
		if cmdPrefix == "" {
			failedResolutionsFlagName = "failed_resolutions"
		} else {
			failedResolutionsFlagName = fmt.Sprintf("%v.failed_resolutions", cmdPrefix)
		}

		failedResolutionsFlagValue, err := cmd.Flags().GetInt64(failedResolutionsFlagName)
		if err != nil {
			return err, false
		}
		m.FailedResolutions = &failedResolutionsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemHardMaxConnFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hardMaxConnFlagName := fmt.Sprintf("%v.hard_max_conn", cmdPrefix)
	if cmd.Flags().Changed(hardMaxConnFlagName) {

		var hardMaxConnFlagName string
		if cmdPrefix == "" {
			hardMaxConnFlagName = "hard_max_conn"
		} else {
			hardMaxConnFlagName = fmt.Sprintf("%v.hard_max_conn", cmdPrefix)
		}

		hardMaxConnFlagValue, err := cmd.Flags().GetInt64(hardMaxConnFlagName)
		if err != nil {
			return err, false
		}
		m.HardMaxConn = &hardMaxConnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemIdlePctFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idlePctFlagName := fmt.Sprintf("%v.idle_pct", cmdPrefix)
	if cmd.Flags().Changed(idlePctFlagName) {

		var idlePctFlagName string
		if cmdPrefix == "" {
			idlePctFlagName = "idle_pct"
		} else {
			idlePctFlagName = fmt.Sprintf("%v.idle_pct", cmdPrefix)
		}

		idlePctFlagValue, err := cmd.Flags().GetInt64(idlePctFlagName)
		if err != nil {
			return err, false
		}
		m.IdlePct = &idlePctFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemJobsFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jobsFlagName := fmt.Sprintf("%v.jobs", cmdPrefix)
	if cmd.Flags().Changed(jobsFlagName) {

		var jobsFlagName string
		if cmdPrefix == "" {
			jobsFlagName = "jobs"
		} else {
			jobsFlagName = fmt.Sprintf("%v.jobs", cmdPrefix)
		}

		jobsFlagValue, err := cmd.Flags().GetInt64(jobsFlagName)
		if err != nil {
			return err, false
		}
		m.Jobs = &jobsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemListenersFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	listenersFlagName := fmt.Sprintf("%v.listeners", cmdPrefix)
	if cmd.Flags().Changed(listenersFlagName) {

		var listenersFlagName string
		if cmdPrefix == "" {
			listenersFlagName = "listeners"
		} else {
			listenersFlagName = fmt.Sprintf("%v.listeners", cmdPrefix)
		}

		listenersFlagValue, err := cmd.Flags().GetInt64(listenersFlagName)
		if err != nil {
			return err, false
		}
		m.Listeners = &listenersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemMaxConnFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxConnFlagName := fmt.Sprintf("%v.max_conn", cmdPrefix)
	if cmd.Flags().Changed(maxConnFlagName) {

		var maxConnFlagName string
		if cmdPrefix == "" {
			maxConnFlagName = "max_conn"
		} else {
			maxConnFlagName = fmt.Sprintf("%v.max_conn", cmdPrefix)
		}

		maxConnFlagValue, err := cmd.Flags().GetInt64(maxConnFlagName)
		if err != nil {
			return err, false
		}
		m.MaxConn = &maxConnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemMaxConnRateFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxConnRateFlagName := fmt.Sprintf("%v.max_conn_rate", cmdPrefix)
	if cmd.Flags().Changed(maxConnRateFlagName) {

		var maxConnRateFlagName string
		if cmdPrefix == "" {
			maxConnRateFlagName = "max_conn_rate"
		} else {
			maxConnRateFlagName = fmt.Sprintf("%v.max_conn_rate", cmdPrefix)
		}

		maxConnRateFlagValue, err := cmd.Flags().GetInt64(maxConnRateFlagName)
		if err != nil {
			return err, false
		}
		m.MaxConnRate = &maxConnRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemMaxPipesFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxPipesFlagName := fmt.Sprintf("%v.max_pipes", cmdPrefix)
	if cmd.Flags().Changed(maxPipesFlagName) {

		var maxPipesFlagName string
		if cmdPrefix == "" {
			maxPipesFlagName = "max_pipes"
		} else {
			maxPipesFlagName = fmt.Sprintf("%v.max_pipes", cmdPrefix)
		}

		maxPipesFlagValue, err := cmd.Flags().GetInt64(maxPipesFlagName)
		if err != nil {
			return err, false
		}
		m.MaxPipes = &maxPipesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemMaxSessRateFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxSessRateFlagName := fmt.Sprintf("%v.max_sess_rate", cmdPrefix)
	if cmd.Flags().Changed(maxSessRateFlagName) {

		var maxSessRateFlagName string
		if cmdPrefix == "" {
			maxSessRateFlagName = "max_sess_rate"
		} else {
			maxSessRateFlagName = fmt.Sprintf("%v.max_sess_rate", cmdPrefix)
		}

		maxSessRateFlagValue, err := cmd.Flags().GetInt64(maxSessRateFlagName)
		if err != nil {
			return err, false
		}
		m.MaxSessRate = &maxSessRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemMaxSockFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxSockFlagName := fmt.Sprintf("%v.max_sock", cmdPrefix)
	if cmd.Flags().Changed(maxSockFlagName) {

		var maxSockFlagName string
		if cmdPrefix == "" {
			maxSockFlagName = "max_sock"
		} else {
			maxSockFlagName = fmt.Sprintf("%v.max_sock", cmdPrefix)
		}

		maxSockFlagValue, err := cmd.Flags().GetInt64(maxSockFlagName)
		if err != nil {
			return err, false
		}
		m.MaxSock = &maxSockFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemMaxSslConnsFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxSslConnsFlagName := fmt.Sprintf("%v.max_ssl_conns", cmdPrefix)
	if cmd.Flags().Changed(maxSslConnsFlagName) {

		var maxSslConnsFlagName string
		if cmdPrefix == "" {
			maxSslConnsFlagName = "max_ssl_conns"
		} else {
			maxSslConnsFlagName = fmt.Sprintf("%v.max_ssl_conns", cmdPrefix)
		}

		maxSslConnsFlagValue, err := cmd.Flags().GetInt64(maxSslConnsFlagName)
		if err != nil {
			return err, false
		}
		m.MaxSslConns = &maxSslConnsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemMaxSslRateFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxSslRateFlagName := fmt.Sprintf("%v.max_ssl_rate", cmdPrefix)
	if cmd.Flags().Changed(maxSslRateFlagName) {

		var maxSslRateFlagName string
		if cmdPrefix == "" {
			maxSslRateFlagName = "max_ssl_rate"
		} else {
			maxSslRateFlagName = fmt.Sprintf("%v.max_ssl_rate", cmdPrefix)
		}

		maxSslRateFlagValue, err := cmd.Flags().GetInt64(maxSslRateFlagName)
		if err != nil {
			return err, false
		}
		m.MaxSslRate = &maxSslRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemMaxZlibMemUsageFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxZlibMemUsageFlagName := fmt.Sprintf("%v.max_zlib_mem_usage", cmdPrefix)
	if cmd.Flags().Changed(maxZlibMemUsageFlagName) {

		var maxZlibMemUsageFlagName string
		if cmdPrefix == "" {
			maxZlibMemUsageFlagName = "max_zlib_mem_usage"
		} else {
			maxZlibMemUsageFlagName = fmt.Sprintf("%v.max_zlib_mem_usage", cmdPrefix)
		}

		maxZlibMemUsageFlagValue, err := cmd.Flags().GetInt64(maxZlibMemUsageFlagName)
		if err != nil {
			return err, false
		}
		m.MaxZlibMemUsage = &maxZlibMemUsageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemMemMaxMbFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	memMaxMbFlagName := fmt.Sprintf("%v.mem_max_mb", cmdPrefix)
	if cmd.Flags().Changed(memMaxMbFlagName) {

		var memMaxMbFlagName string
		if cmdPrefix == "" {
			memMaxMbFlagName = "mem_max_mb"
		} else {
			memMaxMbFlagName = fmt.Sprintf("%v.mem_max_mb", cmdPrefix)
		}

		memMaxMbFlagValue, err := cmd.Flags().GetInt64(memMaxMbFlagName)
		if err != nil {
			return err, false
		}
		m.MemMaxMb = &memMaxMbFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemNbthreadFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nbthreadFlagName := fmt.Sprintf("%v.nbthread", cmdPrefix)
	if cmd.Flags().Changed(nbthreadFlagName) {

		var nbthreadFlagName string
		if cmdPrefix == "" {
			nbthreadFlagName = "nbthread"
		} else {
			nbthreadFlagName = fmt.Sprintf("%v.nbthread", cmdPrefix)
		}

		nbthreadFlagValue, err := cmd.Flags().GetInt64(nbthreadFlagName)
		if err != nil {
			return err, false
		}
		m.Nbthread = &nbthreadFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemNodeFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodeFlagName := fmt.Sprintf("%v.node", cmdPrefix)
	if cmd.Flags().Changed(nodeFlagName) {

		var nodeFlagName string
		if cmdPrefix == "" {
			nodeFlagName = "node"
		} else {
			nodeFlagName = fmt.Sprintf("%v.node", cmdPrefix)
		}

		nodeFlagValue, err := cmd.Flags().GetString(nodeFlagName)
		if err != nil {
			return err, false
		}
		m.Node = nodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemPidFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pidFlagName := fmt.Sprintf("%v.pid", cmdPrefix)
	if cmd.Flags().Changed(pidFlagName) {

		var pidFlagName string
		if cmdPrefix == "" {
			pidFlagName = "pid"
		} else {
			pidFlagName = fmt.Sprintf("%v.pid", cmdPrefix)
		}

		pidFlagValue, err := cmd.Flags().GetInt64(pidFlagName)
		if err != nil {
			return err, false
		}
		m.Pid = &pidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemPipesFreeFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pipesFreeFlagName := fmt.Sprintf("%v.pipes_free", cmdPrefix)
	if cmd.Flags().Changed(pipesFreeFlagName) {

		var pipesFreeFlagName string
		if cmdPrefix == "" {
			pipesFreeFlagName = "pipes_free"
		} else {
			pipesFreeFlagName = fmt.Sprintf("%v.pipes_free", cmdPrefix)
		}

		pipesFreeFlagValue, err := cmd.Flags().GetInt64(pipesFreeFlagName)
		if err != nil {
			return err, false
		}
		m.PipesFree = &pipesFreeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemPipesUsedFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pipesUsedFlagName := fmt.Sprintf("%v.pipes_used", cmdPrefix)
	if cmd.Flags().Changed(pipesUsedFlagName) {

		var pipesUsedFlagName string
		if cmdPrefix == "" {
			pipesUsedFlagName = "pipes_used"
		} else {
			pipesUsedFlagName = fmt.Sprintf("%v.pipes_used", cmdPrefix)
		}

		pipesUsedFlagValue, err := cmd.Flags().GetInt64(pipesUsedFlagName)
		if err != nil {
			return err, false
		}
		m.PipesUsed = &pipesUsedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemPoolAllocMbFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poolAllocMbFlagName := fmt.Sprintf("%v.pool_alloc_mb", cmdPrefix)
	if cmd.Flags().Changed(poolAllocMbFlagName) {

		var poolAllocMbFlagName string
		if cmdPrefix == "" {
			poolAllocMbFlagName = "pool_alloc_mb"
		} else {
			poolAllocMbFlagName = fmt.Sprintf("%v.pool_alloc_mb", cmdPrefix)
		}

		poolAllocMbFlagValue, err := cmd.Flags().GetInt64(poolAllocMbFlagName)
		if err != nil {
			return err, false
		}
		m.PoolAllocMb = &poolAllocMbFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemPoolFailedFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poolFailedFlagName := fmt.Sprintf("%v.pool_failed", cmdPrefix)
	if cmd.Flags().Changed(poolFailedFlagName) {

		var poolFailedFlagName string
		if cmdPrefix == "" {
			poolFailedFlagName = "pool_failed"
		} else {
			poolFailedFlagName = fmt.Sprintf("%v.pool_failed", cmdPrefix)
		}

		poolFailedFlagValue, err := cmd.Flags().GetInt64(poolFailedFlagName)
		if err != nil {
			return err, false
		}
		m.PoolFailed = &poolFailedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemPoolUsedMbFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poolUsedMbFlagName := fmt.Sprintf("%v.pool_used_mb", cmdPrefix)
	if cmd.Flags().Changed(poolUsedMbFlagName) {

		var poolUsedMbFlagName string
		if cmdPrefix == "" {
			poolUsedMbFlagName = "pool_used_mb"
		} else {
			poolUsedMbFlagName = fmt.Sprintf("%v.pool_used_mb", cmdPrefix)
		}

		poolUsedMbFlagValue, err := cmd.Flags().GetInt64(poolUsedMbFlagName)
		if err != nil {
			return err, false
		}
		m.PoolUsedMb = &poolUsedMbFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemProcessNumFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	processNumFlagName := fmt.Sprintf("%v.process_num", cmdPrefix)
	if cmd.Flags().Changed(processNumFlagName) {

		var processNumFlagName string
		if cmdPrefix == "" {
			processNumFlagName = "process_num"
		} else {
			processNumFlagName = fmt.Sprintf("%v.process_num", cmdPrefix)
		}

		processNumFlagValue, err := cmd.Flags().GetInt64(processNumFlagName)
		if err != nil {
			return err, false
		}
		m.ProcessNum = &processNumFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemProcessesFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	processesFlagName := fmt.Sprintf("%v.processes", cmdPrefix)
	if cmd.Flags().Changed(processesFlagName) {

		var processesFlagName string
		if cmdPrefix == "" {
			processesFlagName = "processes"
		} else {
			processesFlagName = fmt.Sprintf("%v.processes", cmdPrefix)
		}

		processesFlagValue, err := cmd.Flags().GetInt64(processesFlagName)
		if err != nil {
			return err, false
		}
		m.Processes = &processesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemReleaseDateFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	releaseDateFlagName := fmt.Sprintf("%v.release_date", cmdPrefix)
	if cmd.Flags().Changed(releaseDateFlagName) {

		// warning: primitive release_date strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemRunQueueFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runQueueFlagName := fmt.Sprintf("%v.run_queue", cmdPrefix)
	if cmd.Flags().Changed(runQueueFlagName) {

		var runQueueFlagName string
		if cmdPrefix == "" {
			runQueueFlagName = "run_queue"
		} else {
			runQueueFlagName = fmt.Sprintf("%v.run_queue", cmdPrefix)
		}

		runQueueFlagValue, err := cmd.Flags().GetInt64(runQueueFlagName)
		if err != nil {
			return err, false
		}
		m.RunQueue = &runQueueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemSessRateFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sessRateFlagName := fmt.Sprintf("%v.sess_rate", cmdPrefix)
	if cmd.Flags().Changed(sessRateFlagName) {

		var sessRateFlagName string
		if cmdPrefix == "" {
			sessRateFlagName = "sess_rate"
		} else {
			sessRateFlagName = fmt.Sprintf("%v.sess_rate", cmdPrefix)
		}

		sessRateFlagValue, err := cmd.Flags().GetInt64(sessRateFlagName)
		if err != nil {
			return err, false
		}
		m.SessRate = &sessRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemSessRateLimitFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sessRateLimitFlagName := fmt.Sprintf("%v.sess_rate_limit", cmdPrefix)
	if cmd.Flags().Changed(sessRateLimitFlagName) {

		var sessRateLimitFlagName string
		if cmdPrefix == "" {
			sessRateLimitFlagName = "sess_rate_limit"
		} else {
			sessRateLimitFlagName = fmt.Sprintf("%v.sess_rate_limit", cmdPrefix)
		}

		sessRateLimitFlagValue, err := cmd.Flags().GetInt64(sessRateLimitFlagName)
		if err != nil {
			return err, false
		}
		m.SessRateLimit = &sessRateLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemSslBackendKeyRateFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslBackendKeyRateFlagName := fmt.Sprintf("%v.ssl_backend_key_rate", cmdPrefix)
	if cmd.Flags().Changed(sslBackendKeyRateFlagName) {

		var sslBackendKeyRateFlagName string
		if cmdPrefix == "" {
			sslBackendKeyRateFlagName = "ssl_backend_key_rate"
		} else {
			sslBackendKeyRateFlagName = fmt.Sprintf("%v.ssl_backend_key_rate", cmdPrefix)
		}

		sslBackendKeyRateFlagValue, err := cmd.Flags().GetInt64(sslBackendKeyRateFlagName)
		if err != nil {
			return err, false
		}
		m.SslBackendKeyRate = &sslBackendKeyRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemSslBackendMaxKeyRateFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslBackendMaxKeyRateFlagName := fmt.Sprintf("%v.ssl_backend_max_key_rate", cmdPrefix)
	if cmd.Flags().Changed(sslBackendMaxKeyRateFlagName) {

		var sslBackendMaxKeyRateFlagName string
		if cmdPrefix == "" {
			sslBackendMaxKeyRateFlagName = "ssl_backend_max_key_rate"
		} else {
			sslBackendMaxKeyRateFlagName = fmt.Sprintf("%v.ssl_backend_max_key_rate", cmdPrefix)
		}

		sslBackendMaxKeyRateFlagValue, err := cmd.Flags().GetInt64(sslBackendMaxKeyRateFlagName)
		if err != nil {
			return err, false
		}
		m.SslBackendMaxKeyRate = &sslBackendMaxKeyRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemSslCacheLookupsFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslCacheLookupsFlagName := fmt.Sprintf("%v.ssl_cache_lookups", cmdPrefix)
	if cmd.Flags().Changed(sslCacheLookupsFlagName) {

		var sslCacheLookupsFlagName string
		if cmdPrefix == "" {
			sslCacheLookupsFlagName = "ssl_cache_lookups"
		} else {
			sslCacheLookupsFlagName = fmt.Sprintf("%v.ssl_cache_lookups", cmdPrefix)
		}

		sslCacheLookupsFlagValue, err := cmd.Flags().GetInt64(sslCacheLookupsFlagName)
		if err != nil {
			return err, false
		}
		m.SslCacheLookups = &sslCacheLookupsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemSslCacheMissesFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslCacheMissesFlagName := fmt.Sprintf("%v.ssl_cache_misses", cmdPrefix)
	if cmd.Flags().Changed(sslCacheMissesFlagName) {

		var sslCacheMissesFlagName string
		if cmdPrefix == "" {
			sslCacheMissesFlagName = "ssl_cache_misses"
		} else {
			sslCacheMissesFlagName = fmt.Sprintf("%v.ssl_cache_misses", cmdPrefix)
		}

		sslCacheMissesFlagValue, err := cmd.Flags().GetInt64(sslCacheMissesFlagName)
		if err != nil {
			return err, false
		}
		m.SslCacheMisses = &sslCacheMissesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemSslFrontendKeyRateFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslFrontendKeyRateFlagName := fmt.Sprintf("%v.ssl_frontend_key_rate", cmdPrefix)
	if cmd.Flags().Changed(sslFrontendKeyRateFlagName) {

		var sslFrontendKeyRateFlagName string
		if cmdPrefix == "" {
			sslFrontendKeyRateFlagName = "ssl_frontend_key_rate"
		} else {
			sslFrontendKeyRateFlagName = fmt.Sprintf("%v.ssl_frontend_key_rate", cmdPrefix)
		}

		sslFrontendKeyRateFlagValue, err := cmd.Flags().GetInt64(sslFrontendKeyRateFlagName)
		if err != nil {
			return err, false
		}
		m.SslFrontendKeyRate = &sslFrontendKeyRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemSslFrontendMaxKeyRateFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslFrontendMaxKeyRateFlagName := fmt.Sprintf("%v.ssl_frontend_max_key_rate", cmdPrefix)
	if cmd.Flags().Changed(sslFrontendMaxKeyRateFlagName) {

		var sslFrontendMaxKeyRateFlagName string
		if cmdPrefix == "" {
			sslFrontendMaxKeyRateFlagName = "ssl_frontend_max_key_rate"
		} else {
			sslFrontendMaxKeyRateFlagName = fmt.Sprintf("%v.ssl_frontend_max_key_rate", cmdPrefix)
		}

		sslFrontendMaxKeyRateFlagValue, err := cmd.Flags().GetInt64(sslFrontendMaxKeyRateFlagName)
		if err != nil {
			return err, false
		}
		m.SslFrontendMaxKeyRate = &sslFrontendMaxKeyRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemSslFrontendSessionReuseFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslFrontendSessionReuseFlagName := fmt.Sprintf("%v.ssl_frontend_session_reuse", cmdPrefix)
	if cmd.Flags().Changed(sslFrontendSessionReuseFlagName) {

		var sslFrontendSessionReuseFlagName string
		if cmdPrefix == "" {
			sslFrontendSessionReuseFlagName = "ssl_frontend_session_reuse"
		} else {
			sslFrontendSessionReuseFlagName = fmt.Sprintf("%v.ssl_frontend_session_reuse", cmdPrefix)
		}

		sslFrontendSessionReuseFlagValue, err := cmd.Flags().GetInt64(sslFrontendSessionReuseFlagName)
		if err != nil {
			return err, false
		}
		m.SslFrontendSessionReuse = &sslFrontendSessionReuseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemSslRateFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslRateFlagName := fmt.Sprintf("%v.ssl_rate", cmdPrefix)
	if cmd.Flags().Changed(sslRateFlagName) {

		var sslRateFlagName string
		if cmdPrefix == "" {
			sslRateFlagName = "ssl_rate"
		} else {
			sslRateFlagName = fmt.Sprintf("%v.ssl_rate", cmdPrefix)
		}

		sslRateFlagValue, err := cmd.Flags().GetInt64(sslRateFlagName)
		if err != nil {
			return err, false
		}
		m.SslRate = &sslRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemSslRateLimitFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslRateLimitFlagName := fmt.Sprintf("%v.ssl_rate_limit", cmdPrefix)
	if cmd.Flags().Changed(sslRateLimitFlagName) {

		var sslRateLimitFlagName string
		if cmdPrefix == "" {
			sslRateLimitFlagName = "ssl_rate_limit"
		} else {
			sslRateLimitFlagName = fmt.Sprintf("%v.ssl_rate_limit", cmdPrefix)
		}

		sslRateLimitFlagValue, err := cmd.Flags().GetInt64(sslRateLimitFlagName)
		if err != nil {
			return err, false
		}
		m.SslRateLimit = &sslRateLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemStoppingFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stoppingFlagName := fmt.Sprintf("%v.stopping", cmdPrefix)
	if cmd.Flags().Changed(stoppingFlagName) {

		var stoppingFlagName string
		if cmdPrefix == "" {
			stoppingFlagName = "stopping"
		} else {
			stoppingFlagName = fmt.Sprintf("%v.stopping", cmdPrefix)
		}

		stoppingFlagValue, err := cmd.Flags().GetInt64(stoppingFlagName)
		if err != nil {
			return err, false
		}
		m.Stopping = &stoppingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemTasksFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tasksFlagName := fmt.Sprintf("%v.tasks", cmdPrefix)
	if cmd.Flags().Changed(tasksFlagName) {

		var tasksFlagName string
		if cmdPrefix == "" {
			tasksFlagName = "tasks"
		} else {
			tasksFlagName = fmt.Sprintf("%v.tasks", cmdPrefix)
		}

		tasksFlagValue, err := cmd.Flags().GetInt64(tasksFlagName)
		if err != nil {
			return err, false
		}
		m.Tasks = &tasksFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemTotalBytesOutFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalBytesOutFlagName := fmt.Sprintf("%v.total_bytes_out", cmdPrefix)
	if cmd.Flags().Changed(totalBytesOutFlagName) {

		var totalBytesOutFlagName string
		if cmdPrefix == "" {
			totalBytesOutFlagName = "total_bytes_out"
		} else {
			totalBytesOutFlagName = fmt.Sprintf("%v.total_bytes_out", cmdPrefix)
		}

		totalBytesOutFlagValue, err := cmd.Flags().GetInt64(totalBytesOutFlagName)
		if err != nil {
			return err, false
		}
		m.TotalBytesOut = &totalBytesOutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemUlimitnFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ulimitNFlagName := fmt.Sprintf("%v.ulimit_n", cmdPrefix)
	if cmd.Flags().Changed(ulimitNFlagName) {

		var ulimitNFlagName string
		if cmdPrefix == "" {
			ulimitNFlagName = "ulimit_n"
		} else {
			ulimitNFlagName = fmt.Sprintf("%v.ulimit_n", cmdPrefix)
		}

		ulimitNFlagValue, err := cmd.Flags().GetInt64(ulimitNFlagName)
		if err != nil {
			return err, false
		}
		m.Ulimitn = &ulimitNFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemUnstoppableFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unstoppableFlagName := fmt.Sprintf("%v.unstoppable", cmdPrefix)
	if cmd.Flags().Changed(unstoppableFlagName) {

		var unstoppableFlagName string
		if cmdPrefix == "" {
			unstoppableFlagName = "unstoppable"
		} else {
			unstoppableFlagName = fmt.Sprintf("%v.unstoppable", cmdPrefix)
		}

		unstoppableFlagValue, err := cmd.Flags().GetInt64(unstoppableFlagName)
		if err != nil {
			return err, false
		}
		m.Unstoppable = &unstoppableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemUptimeFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uptimeFlagName := fmt.Sprintf("%v.uptime", cmdPrefix)
	if cmd.Flags().Changed(uptimeFlagName) {

		var uptimeFlagName string
		if cmdPrefix == "" {
			uptimeFlagName = "uptime"
		} else {
			uptimeFlagName = fmt.Sprintf("%v.uptime", cmdPrefix)
		}

		uptimeFlagValue, err := cmd.Flags().GetInt64(uptimeFlagName)
		if err != nil {
			return err, false
		}
		m.Uptime = &uptimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemVersionFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessInfoItemZlibMemUsageFlags(depth int, m *models.ProcessInfoItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	zlibMemUsageFlagName := fmt.Sprintf("%v.zlib_mem_usage", cmdPrefix)
	if cmd.Flags().Changed(zlibMemUsageFlagName) {

		var zlibMemUsageFlagName string
		if cmdPrefix == "" {
			zlibMemUsageFlagName = "zlib_mem_usage"
		} else {
			zlibMemUsageFlagName = fmt.Sprintf("%v.zlib_mem_usage", cmdPrefix)
		}

		zlibMemUsageFlagValue, err := cmd.Flags().GetInt64(zlibMemUsageFlagName)
		if err != nil {
			return err, false
		}
		m.ZlibMemUsage = &zlibMemUsageFlagValue

		retAdded = true
	}

	return nil, retAdded
}
