// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for StickTableEntry

// register flags to command
func registerModelStickTableEntryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStickTableEntryBytesInCnt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryBytesInRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryBytesOutCnt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryBytesOutRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryConnCnt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryConnCur(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryConnRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryExp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryGpc0(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryGpc0Rate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryGpc1(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryGpc1Rate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryGpt0(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryHTTPErrCnt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryHTTPErrRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryHTTPReqCnt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryHTTPReqRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryServerID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntrySessCnt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntrySessRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickTableEntryUse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStickTableEntryBytesInCnt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bytesInCntDescription := ``

	var bytesInCntFlagName string
	if cmdPrefix == "" {
		bytesInCntFlagName = "bytes_in_cnt"
	} else {
		bytesInCntFlagName = fmt.Sprintf("%v.bytes_in_cnt", cmdPrefix)
	}

	var bytesInCntFlagDefault int64

	_ = cmd.PersistentFlags().Int64(bytesInCntFlagName, bytesInCntFlagDefault, bytesInCntDescription)

	return nil
}

func registerStickTableEntryBytesInRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bytesInRateDescription := ``

	var bytesInRateFlagName string
	if cmdPrefix == "" {
		bytesInRateFlagName = "bytes_in_rate"
	} else {
		bytesInRateFlagName = fmt.Sprintf("%v.bytes_in_rate", cmdPrefix)
	}

	var bytesInRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(bytesInRateFlagName, bytesInRateFlagDefault, bytesInRateDescription)

	return nil
}

func registerStickTableEntryBytesOutCnt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bytesOutCntDescription := ``

	var bytesOutCntFlagName string
	if cmdPrefix == "" {
		bytesOutCntFlagName = "bytes_out_cnt"
	} else {
		bytesOutCntFlagName = fmt.Sprintf("%v.bytes_out_cnt", cmdPrefix)
	}

	var bytesOutCntFlagDefault int64

	_ = cmd.PersistentFlags().Int64(bytesOutCntFlagName, bytesOutCntFlagDefault, bytesOutCntDescription)

	return nil
}

func registerStickTableEntryBytesOutRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bytesOutRateDescription := ``

	var bytesOutRateFlagName string
	if cmdPrefix == "" {
		bytesOutRateFlagName = "bytes_out_rate"
	} else {
		bytesOutRateFlagName = fmt.Sprintf("%v.bytes_out_rate", cmdPrefix)
	}

	var bytesOutRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(bytesOutRateFlagName, bytesOutRateFlagDefault, bytesOutRateDescription)

	return nil
}

func registerStickTableEntryConnCnt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connCntDescription := ``

	var connCntFlagName string
	if cmdPrefix == "" {
		connCntFlagName = "conn_cnt"
	} else {
		connCntFlagName = fmt.Sprintf("%v.conn_cnt", cmdPrefix)
	}

	var connCntFlagDefault int64

	_ = cmd.PersistentFlags().Int64(connCntFlagName, connCntFlagDefault, connCntDescription)

	return nil
}

func registerStickTableEntryConnCur(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connCurDescription := ``

	var connCurFlagName string
	if cmdPrefix == "" {
		connCurFlagName = "conn_cur"
	} else {
		connCurFlagName = fmt.Sprintf("%v.conn_cur", cmdPrefix)
	}

	var connCurFlagDefault int64

	_ = cmd.PersistentFlags().Int64(connCurFlagName, connCurFlagDefault, connCurDescription)

	return nil
}

func registerStickTableEntryConnRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connRateDescription := ``

	var connRateFlagName string
	if cmdPrefix == "" {
		connRateFlagName = "conn_rate"
	} else {
		connRateFlagName = fmt.Sprintf("%v.conn_rate", cmdPrefix)
	}

	var connRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(connRateFlagName, connRateFlagDefault, connRateDescription)

	return nil
}

func registerStickTableEntryExp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	expDescription := ``

	var expFlagName string
	if cmdPrefix == "" {
		expFlagName = "exp"
	} else {
		expFlagName = fmt.Sprintf("%v.exp", cmdPrefix)
	}

	var expFlagDefault int64

	_ = cmd.PersistentFlags().Int64(expFlagName, expFlagDefault, expDescription)

	return nil
}

func registerStickTableEntryGpc0(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gpc0Description := ``

	var gpc0FlagName string
	if cmdPrefix == "" {
		gpc0FlagName = "gpc0"
	} else {
		gpc0FlagName = fmt.Sprintf("%v.gpc0", cmdPrefix)
	}

	var gpc0FlagDefault int64

	_ = cmd.PersistentFlags().Int64(gpc0FlagName, gpc0FlagDefault, gpc0Description)

	return nil
}

func registerStickTableEntryGpc0Rate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gpc0RateDescription := ``

	var gpc0RateFlagName string
	if cmdPrefix == "" {
		gpc0RateFlagName = "gpc0_rate"
	} else {
		gpc0RateFlagName = fmt.Sprintf("%v.gpc0_rate", cmdPrefix)
	}

	var gpc0RateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(gpc0RateFlagName, gpc0RateFlagDefault, gpc0RateDescription)

	return nil
}

func registerStickTableEntryGpc1(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gpc1Description := ``

	var gpc1FlagName string
	if cmdPrefix == "" {
		gpc1FlagName = "gpc1"
	} else {
		gpc1FlagName = fmt.Sprintf("%v.gpc1", cmdPrefix)
	}

	var gpc1FlagDefault int64

	_ = cmd.PersistentFlags().Int64(gpc1FlagName, gpc1FlagDefault, gpc1Description)

	return nil
}

func registerStickTableEntryGpc1Rate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gpc1RateDescription := ``

	var gpc1RateFlagName string
	if cmdPrefix == "" {
		gpc1RateFlagName = "gpc1_rate"
	} else {
		gpc1RateFlagName = fmt.Sprintf("%v.gpc1_rate", cmdPrefix)
	}

	var gpc1RateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(gpc1RateFlagName, gpc1RateFlagDefault, gpc1RateDescription)

	return nil
}

func registerStickTableEntryGpt0(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gpt0Description := ``

	var gpt0FlagName string
	if cmdPrefix == "" {
		gpt0FlagName = "gpt0"
	} else {
		gpt0FlagName = fmt.Sprintf("%v.gpt0", cmdPrefix)
	}

	var gpt0FlagDefault int64

	_ = cmd.PersistentFlags().Int64(gpt0FlagName, gpt0FlagDefault, gpt0Description)

	return nil
}

func registerStickTableEntryHTTPErrCnt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpErrCntDescription := ``

	var httpErrCntFlagName string
	if cmdPrefix == "" {
		httpErrCntFlagName = "http_err_cnt"
	} else {
		httpErrCntFlagName = fmt.Sprintf("%v.http_err_cnt", cmdPrefix)
	}

	var httpErrCntFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpErrCntFlagName, httpErrCntFlagDefault, httpErrCntDescription)

	return nil
}

func registerStickTableEntryHTTPErrRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpErrRateDescription := ``

	var httpErrRateFlagName string
	if cmdPrefix == "" {
		httpErrRateFlagName = "http_err_rate"
	} else {
		httpErrRateFlagName = fmt.Sprintf("%v.http_err_rate", cmdPrefix)
	}

	var httpErrRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpErrRateFlagName, httpErrRateFlagDefault, httpErrRateDescription)

	return nil
}

func registerStickTableEntryHTTPReqCnt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpReqCntDescription := ``

	var httpReqCntFlagName string
	if cmdPrefix == "" {
		httpReqCntFlagName = "http_req_cnt"
	} else {
		httpReqCntFlagName = fmt.Sprintf("%v.http_req_cnt", cmdPrefix)
	}

	var httpReqCntFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpReqCntFlagName, httpReqCntFlagDefault, httpReqCntDescription)

	return nil
}

func registerStickTableEntryHTTPReqRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpReqRateDescription := ``

	var httpReqRateFlagName string
	if cmdPrefix == "" {
		httpReqRateFlagName = "http_req_rate"
	} else {
		httpReqRateFlagName = fmt.Sprintf("%v.http_req_rate", cmdPrefix)
	}

	var httpReqRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpReqRateFlagName, httpReqRateFlagDefault, httpReqRateDescription)

	return nil
}

func registerStickTableEntryID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerStickTableEntryKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keyDescription := ``

	var keyFlagName string
	if cmdPrefix == "" {
		keyFlagName = "key"
	} else {
		keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
	}

	var keyFlagDefault string

	_ = cmd.PersistentFlags().String(keyFlagName, keyFlagDefault, keyDescription)

	return nil
}

func registerStickTableEntryServerID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverIdDescription := ``

	var serverIdFlagName string
	if cmdPrefix == "" {
		serverIdFlagName = "server_id"
	} else {
		serverIdFlagName = fmt.Sprintf("%v.server_id", cmdPrefix)
	}

	var serverIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(serverIdFlagName, serverIdFlagDefault, serverIdDescription)

	return nil
}

func registerStickTableEntrySessCnt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sessCntDescription := ``

	var sessCntFlagName string
	if cmdPrefix == "" {
		sessCntFlagName = "sess_cnt"
	} else {
		sessCntFlagName = fmt.Sprintf("%v.sess_cnt", cmdPrefix)
	}

	var sessCntFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sessCntFlagName, sessCntFlagDefault, sessCntDescription)

	return nil
}

func registerStickTableEntrySessRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sessRateDescription := ``

	var sessRateFlagName string
	if cmdPrefix == "" {
		sessRateFlagName = "sess_rate"
	} else {
		sessRateFlagName = fmt.Sprintf("%v.sess_rate", cmdPrefix)
	}

	var sessRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sessRateFlagName, sessRateFlagDefault, sessRateDescription)

	return nil
}

func registerStickTableEntryUse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useDescription := ``

	var useFlagName string
	if cmdPrefix == "" {
		useFlagName = "use"
	} else {
		useFlagName = fmt.Sprintf("%v.use", cmdPrefix)
	}

	var useFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useFlagName, useFlagDefault, useDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStickTableEntryFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, bytesInCntAdded := retrieveStickTableEntryBytesInCntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bytesInCntAdded

	err, bytesInRateAdded := retrieveStickTableEntryBytesInRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bytesInRateAdded

	err, bytesOutCntAdded := retrieveStickTableEntryBytesOutCntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bytesOutCntAdded

	err, bytesOutRateAdded := retrieveStickTableEntryBytesOutRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bytesOutRateAdded

	err, connCntAdded := retrieveStickTableEntryConnCntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connCntAdded

	err, connCurAdded := retrieveStickTableEntryConnCurFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connCurAdded

	err, connRateAdded := retrieveStickTableEntryConnRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connRateAdded

	err, expAdded := retrieveStickTableEntryExpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || expAdded

	err, gpc0Added := retrieveStickTableEntryGpc0Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gpc0Added

	err, gpc0RateAdded := retrieveStickTableEntryGpc0RateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gpc0RateAdded

	err, gpc1Added := retrieveStickTableEntryGpc1Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gpc1Added

	err, gpc1RateAdded := retrieveStickTableEntryGpc1RateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gpc1RateAdded

	err, gpt0Added := retrieveStickTableEntryGpt0Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gpt0Added

	err, httpErrCntAdded := retrieveStickTableEntryHTTPErrCntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpErrCntAdded

	err, httpErrRateAdded := retrieveStickTableEntryHTTPErrRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpErrRateAdded

	err, httpReqCntAdded := retrieveStickTableEntryHTTPReqCntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpReqCntAdded

	err, httpReqRateAdded := retrieveStickTableEntryHTTPReqRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpReqRateAdded

	err, idAdded := retrieveStickTableEntryIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, keyAdded := retrieveStickTableEntryKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyAdded

	err, serverIdAdded := retrieveStickTableEntryServerIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverIdAdded

	err, sessCntAdded := retrieveStickTableEntrySessCntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sessCntAdded

	err, sessRateAdded := retrieveStickTableEntrySessRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sessRateAdded

	err, useAdded := retrieveStickTableEntryUseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useAdded

	return nil, retAdded
}

func retrieveStickTableEntryBytesInCntFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bytesInCntFlagName := fmt.Sprintf("%v.bytes_in_cnt", cmdPrefix)
	if cmd.Flags().Changed(bytesInCntFlagName) {

		var bytesInCntFlagName string
		if cmdPrefix == "" {
			bytesInCntFlagName = "bytes_in_cnt"
		} else {
			bytesInCntFlagName = fmt.Sprintf("%v.bytes_in_cnt", cmdPrefix)
		}

		bytesInCntFlagValue, err := cmd.Flags().GetInt64(bytesInCntFlagName)
		if err != nil {
			return err, false
		}
		m.BytesInCnt = &bytesInCntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryBytesInRateFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bytesInRateFlagName := fmt.Sprintf("%v.bytes_in_rate", cmdPrefix)
	if cmd.Flags().Changed(bytesInRateFlagName) {

		var bytesInRateFlagName string
		if cmdPrefix == "" {
			bytesInRateFlagName = "bytes_in_rate"
		} else {
			bytesInRateFlagName = fmt.Sprintf("%v.bytes_in_rate", cmdPrefix)
		}

		bytesInRateFlagValue, err := cmd.Flags().GetInt64(bytesInRateFlagName)
		if err != nil {
			return err, false
		}
		m.BytesInRate = &bytesInRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryBytesOutCntFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bytesOutCntFlagName := fmt.Sprintf("%v.bytes_out_cnt", cmdPrefix)
	if cmd.Flags().Changed(bytesOutCntFlagName) {

		var bytesOutCntFlagName string
		if cmdPrefix == "" {
			bytesOutCntFlagName = "bytes_out_cnt"
		} else {
			bytesOutCntFlagName = fmt.Sprintf("%v.bytes_out_cnt", cmdPrefix)
		}

		bytesOutCntFlagValue, err := cmd.Flags().GetInt64(bytesOutCntFlagName)
		if err != nil {
			return err, false
		}
		m.BytesOutCnt = &bytesOutCntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryBytesOutRateFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bytesOutRateFlagName := fmt.Sprintf("%v.bytes_out_rate", cmdPrefix)
	if cmd.Flags().Changed(bytesOutRateFlagName) {

		var bytesOutRateFlagName string
		if cmdPrefix == "" {
			bytesOutRateFlagName = "bytes_out_rate"
		} else {
			bytesOutRateFlagName = fmt.Sprintf("%v.bytes_out_rate", cmdPrefix)
		}

		bytesOutRateFlagValue, err := cmd.Flags().GetInt64(bytesOutRateFlagName)
		if err != nil {
			return err, false
		}
		m.BytesOutRate = &bytesOutRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryConnCntFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connCntFlagName := fmt.Sprintf("%v.conn_cnt", cmdPrefix)
	if cmd.Flags().Changed(connCntFlagName) {

		var connCntFlagName string
		if cmdPrefix == "" {
			connCntFlagName = "conn_cnt"
		} else {
			connCntFlagName = fmt.Sprintf("%v.conn_cnt", cmdPrefix)
		}

		connCntFlagValue, err := cmd.Flags().GetInt64(connCntFlagName)
		if err != nil {
			return err, false
		}
		m.ConnCnt = &connCntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryConnCurFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connCurFlagName := fmt.Sprintf("%v.conn_cur", cmdPrefix)
	if cmd.Flags().Changed(connCurFlagName) {

		var connCurFlagName string
		if cmdPrefix == "" {
			connCurFlagName = "conn_cur"
		} else {
			connCurFlagName = fmt.Sprintf("%v.conn_cur", cmdPrefix)
		}

		connCurFlagValue, err := cmd.Flags().GetInt64(connCurFlagName)
		if err != nil {
			return err, false
		}
		m.ConnCur = &connCurFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryConnRateFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connRateFlagName := fmt.Sprintf("%v.conn_rate", cmdPrefix)
	if cmd.Flags().Changed(connRateFlagName) {

		var connRateFlagName string
		if cmdPrefix == "" {
			connRateFlagName = "conn_rate"
		} else {
			connRateFlagName = fmt.Sprintf("%v.conn_rate", cmdPrefix)
		}

		connRateFlagValue, err := cmd.Flags().GetInt64(connRateFlagName)
		if err != nil {
			return err, false
		}
		m.ConnRate = &connRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryExpFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	expFlagName := fmt.Sprintf("%v.exp", cmdPrefix)
	if cmd.Flags().Changed(expFlagName) {

		var expFlagName string
		if cmdPrefix == "" {
			expFlagName = "exp"
		} else {
			expFlagName = fmt.Sprintf("%v.exp", cmdPrefix)
		}

		expFlagValue, err := cmd.Flags().GetInt64(expFlagName)
		if err != nil {
			return err, false
		}
		m.Exp = &expFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryGpc0Flags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gpc0FlagName := fmt.Sprintf("%v.gpc0", cmdPrefix)
	if cmd.Flags().Changed(gpc0FlagName) {

		var gpc0FlagName string
		if cmdPrefix == "" {
			gpc0FlagName = "gpc0"
		} else {
			gpc0FlagName = fmt.Sprintf("%v.gpc0", cmdPrefix)
		}

		gpc0FlagValue, err := cmd.Flags().GetInt64(gpc0FlagName)
		if err != nil {
			return err, false
		}
		m.Gpc0 = &gpc0FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryGpc0RateFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gpc0RateFlagName := fmt.Sprintf("%v.gpc0_rate", cmdPrefix)
	if cmd.Flags().Changed(gpc0RateFlagName) {

		var gpc0RateFlagName string
		if cmdPrefix == "" {
			gpc0RateFlagName = "gpc0_rate"
		} else {
			gpc0RateFlagName = fmt.Sprintf("%v.gpc0_rate", cmdPrefix)
		}

		gpc0RateFlagValue, err := cmd.Flags().GetInt64(gpc0RateFlagName)
		if err != nil {
			return err, false
		}
		m.Gpc0Rate = &gpc0RateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryGpc1Flags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gpc1FlagName := fmt.Sprintf("%v.gpc1", cmdPrefix)
	if cmd.Flags().Changed(gpc1FlagName) {

		var gpc1FlagName string
		if cmdPrefix == "" {
			gpc1FlagName = "gpc1"
		} else {
			gpc1FlagName = fmt.Sprintf("%v.gpc1", cmdPrefix)
		}

		gpc1FlagValue, err := cmd.Flags().GetInt64(gpc1FlagName)
		if err != nil {
			return err, false
		}
		m.Gpc1 = &gpc1FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryGpc1RateFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gpc1RateFlagName := fmt.Sprintf("%v.gpc1_rate", cmdPrefix)
	if cmd.Flags().Changed(gpc1RateFlagName) {

		var gpc1RateFlagName string
		if cmdPrefix == "" {
			gpc1RateFlagName = "gpc1_rate"
		} else {
			gpc1RateFlagName = fmt.Sprintf("%v.gpc1_rate", cmdPrefix)
		}

		gpc1RateFlagValue, err := cmd.Flags().GetInt64(gpc1RateFlagName)
		if err != nil {
			return err, false
		}
		m.Gpc1Rate = &gpc1RateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryGpt0Flags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gpt0FlagName := fmt.Sprintf("%v.gpt0", cmdPrefix)
	if cmd.Flags().Changed(gpt0FlagName) {

		var gpt0FlagName string
		if cmdPrefix == "" {
			gpt0FlagName = "gpt0"
		} else {
			gpt0FlagName = fmt.Sprintf("%v.gpt0", cmdPrefix)
		}

		gpt0FlagValue, err := cmd.Flags().GetInt64(gpt0FlagName)
		if err != nil {
			return err, false
		}
		m.Gpt0 = &gpt0FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryHTTPErrCntFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpErrCntFlagName := fmt.Sprintf("%v.http_err_cnt", cmdPrefix)
	if cmd.Flags().Changed(httpErrCntFlagName) {

		var httpErrCntFlagName string
		if cmdPrefix == "" {
			httpErrCntFlagName = "http_err_cnt"
		} else {
			httpErrCntFlagName = fmt.Sprintf("%v.http_err_cnt", cmdPrefix)
		}

		httpErrCntFlagValue, err := cmd.Flags().GetInt64(httpErrCntFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPErrCnt = &httpErrCntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryHTTPErrRateFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpErrRateFlagName := fmt.Sprintf("%v.http_err_rate", cmdPrefix)
	if cmd.Flags().Changed(httpErrRateFlagName) {

		var httpErrRateFlagName string
		if cmdPrefix == "" {
			httpErrRateFlagName = "http_err_rate"
		} else {
			httpErrRateFlagName = fmt.Sprintf("%v.http_err_rate", cmdPrefix)
		}

		httpErrRateFlagValue, err := cmd.Flags().GetInt64(httpErrRateFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPErrRate = &httpErrRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryHTTPReqCntFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpReqCntFlagName := fmt.Sprintf("%v.http_req_cnt", cmdPrefix)
	if cmd.Flags().Changed(httpReqCntFlagName) {

		var httpReqCntFlagName string
		if cmdPrefix == "" {
			httpReqCntFlagName = "http_req_cnt"
		} else {
			httpReqCntFlagName = fmt.Sprintf("%v.http_req_cnt", cmdPrefix)
		}

		httpReqCntFlagValue, err := cmd.Flags().GetInt64(httpReqCntFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPReqCnt = &httpReqCntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryHTTPReqRateFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpReqRateFlagName := fmt.Sprintf("%v.http_req_rate", cmdPrefix)
	if cmd.Flags().Changed(httpReqRateFlagName) {

		var httpReqRateFlagName string
		if cmdPrefix == "" {
			httpReqRateFlagName = "http_req_rate"
		} else {
			httpReqRateFlagName = fmt.Sprintf("%v.http_req_rate", cmdPrefix)
		}

		httpReqRateFlagValue, err := cmd.Flags().GetInt64(httpReqRateFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPReqRate = &httpReqRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryIDFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryKeyFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyFlagName := fmt.Sprintf("%v.key", cmdPrefix)
	if cmd.Flags().Changed(keyFlagName) {

		var keyFlagName string
		if cmdPrefix == "" {
			keyFlagName = "key"
		} else {
			keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
		}

		keyFlagValue, err := cmd.Flags().GetString(keyFlagName)
		if err != nil {
			return err, false
		}
		m.Key = keyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryServerIDFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverIdFlagName := fmt.Sprintf("%v.server_id", cmdPrefix)
	if cmd.Flags().Changed(serverIdFlagName) {

		var serverIdFlagName string
		if cmdPrefix == "" {
			serverIdFlagName = "server_id"
		} else {
			serverIdFlagName = fmt.Sprintf("%v.server_id", cmdPrefix)
		}

		serverIdFlagValue, err := cmd.Flags().GetInt64(serverIdFlagName)
		if err != nil {
			return err, false
		}
		m.ServerID = &serverIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntrySessCntFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sessCntFlagName := fmt.Sprintf("%v.sess_cnt", cmdPrefix)
	if cmd.Flags().Changed(sessCntFlagName) {

		var sessCntFlagName string
		if cmdPrefix == "" {
			sessCntFlagName = "sess_cnt"
		} else {
			sessCntFlagName = fmt.Sprintf("%v.sess_cnt", cmdPrefix)
		}

		sessCntFlagValue, err := cmd.Flags().GetInt64(sessCntFlagName)
		if err != nil {
			return err, false
		}
		m.SessCnt = &sessCntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntrySessRateFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sessRateFlagName := fmt.Sprintf("%v.sess_rate", cmdPrefix)
	if cmd.Flags().Changed(sessRateFlagName) {

		var sessRateFlagName string
		if cmdPrefix == "" {
			sessRateFlagName = "sess_rate"
		} else {
			sessRateFlagName = fmt.Sprintf("%v.sess_rate", cmdPrefix)
		}

		sessRateFlagValue, err := cmd.Flags().GetInt64(sessRateFlagName)
		if err != nil {
			return err, false
		}
		m.SessRate = &sessRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickTableEntryUseFlags(depth int, m *models.StickTableEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useFlagName := fmt.Sprintf("%v.use", cmdPrefix)
	if cmd.Flags().Changed(useFlagName) {

		var useFlagName string
		if cmdPrefix == "" {
			useFlagName = "use"
		} else {
			useFlagName = fmt.Sprintf("%v.use", cmdPrefix)
		}

		useFlagValue, err := cmd.Flags().GetBool(useFlagName)
		if err != nil {
			return err, false
		}
		m.Use = useFlagValue

		retAdded = true
	}

	return nil, retAdded
}
