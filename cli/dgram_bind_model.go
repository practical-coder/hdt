// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for DgramBind

// register flags to command
func registerModelDgramBindFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDgramBindAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDgramBindInterface(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDgramBindName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDgramBindNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDgramBindPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDgramBindPortRangeEnd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDgramBindTransparent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDgramBindAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addressDescription := ``

	var addressFlagName string
	if cmdPrefix == "" {
		addressFlagName = "address"
	} else {
		addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
	}

	var addressFlagDefault string

	_ = cmd.PersistentFlags().String(addressFlagName, addressFlagDefault, addressDescription)

	return nil
}

func registerDgramBindInterface(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	interfaceDescription := ``

	var interfaceFlagName string
	if cmdPrefix == "" {
		interfaceFlagName = "interface"
	} else {
		interfaceFlagName = fmt.Sprintf("%v.interface", cmdPrefix)
	}

	var interfaceFlagDefault string

	_ = cmd.PersistentFlags().String(interfaceFlagName, interfaceFlagDefault, interfaceDescription)

	return nil
}

func registerDgramBindName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerDgramBindNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := ``

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func registerDgramBindPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := ``

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault int64

	_ = cmd.PersistentFlags().Int64(portFlagName, portFlagDefault, portDescription)

	return nil
}

func registerDgramBindPortRangeEnd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portRangeEndDescription := ``

	var portRangeEndFlagName string
	if cmdPrefix == "" {
		portRangeEndFlagName = "port-range-end"
	} else {
		portRangeEndFlagName = fmt.Sprintf("%v.port-range-end", cmdPrefix)
	}

	var portRangeEndFlagDefault int64

	_ = cmd.PersistentFlags().Int64(portRangeEndFlagName, portRangeEndFlagDefault, portRangeEndDescription)

	return nil
}

func registerDgramBindTransparent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transparentDescription := ``

	var transparentFlagName string
	if cmdPrefix == "" {
		transparentFlagName = "transparent"
	} else {
		transparentFlagName = fmt.Sprintf("%v.transparent", cmdPrefix)
	}

	var transparentFlagDefault bool

	_ = cmd.PersistentFlags().Bool(transparentFlagName, transparentFlagDefault, transparentDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDgramBindFlags(depth int, m *models.DgramBind, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressAdded := retrieveDgramBindAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressAdded

	err, interfaceAdded := retrieveDgramBindInterfaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interfaceAdded

	err, nameAdded := retrieveDgramBindNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, namespaceAdded := retrieveDgramBindNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	err, portAdded := retrieveDgramBindPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, portRangeEndAdded := retrieveDgramBindPortRangeEndFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portRangeEndAdded

	err, transparentAdded := retrieveDgramBindTransparentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transparentAdded

	return nil, retAdded
}

func retrieveDgramBindAddressFlags(depth int, m *models.DgramBind, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressFlagName := fmt.Sprintf("%v.address", cmdPrefix)
	if cmd.Flags().Changed(addressFlagName) {

		var addressFlagName string
		if cmdPrefix == "" {
			addressFlagName = "address"
		} else {
			addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
		}

		addressFlagValue, err := cmd.Flags().GetString(addressFlagName)
		if err != nil {
			return err, false
		}
		m.Address = addressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDgramBindInterfaceFlags(depth int, m *models.DgramBind, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interfaceFlagName := fmt.Sprintf("%v.interface", cmdPrefix)
	if cmd.Flags().Changed(interfaceFlagName) {

		var interfaceFlagName string
		if cmdPrefix == "" {
			interfaceFlagName = "interface"
		} else {
			interfaceFlagName = fmt.Sprintf("%v.interface", cmdPrefix)
		}

		interfaceFlagValue, err := cmd.Flags().GetString(interfaceFlagName)
		if err != nil {
			return err, false
		}
		m.Interface = interfaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDgramBindNameFlags(depth int, m *models.DgramBind, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDgramBindNamespaceFlags(depth int, m *models.DgramBind, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDgramBindPortFlags(depth int, m *models.DgramBind, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetInt64(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = &portFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDgramBindPortRangeEndFlags(depth int, m *models.DgramBind, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portRangeEndFlagName := fmt.Sprintf("%v.port-range-end", cmdPrefix)
	if cmd.Flags().Changed(portRangeEndFlagName) {

		var portRangeEndFlagName string
		if cmdPrefix == "" {
			portRangeEndFlagName = "port-range-end"
		} else {
			portRangeEndFlagName = fmt.Sprintf("%v.port-range-end", cmdPrefix)
		}

		portRangeEndFlagValue, err := cmd.Flags().GetInt64(portRangeEndFlagName)
		if err != nil {
			return err, false
		}
		m.PortRangeEnd = &portRangeEndFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDgramBindTransparentFlags(depth int, m *models.DgramBind, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transparentFlagName := fmt.Sprintf("%v.transparent", cmdPrefix)
	if cmd.Flags().Changed(transparentFlagName) {

		var transparentFlagName string
		if cmdPrefix == "" {
			transparentFlagName = "transparent"
		} else {
			transparentFlagName = fmt.Sprintf("%v.transparent", cmdPrefix)
		}

		transparentFlagValue, err := cmd.Flags().GetBool(transparentFlagName)
		if err != nil {
			return err, false
		}
		m.Transparent = transparentFlagValue

		retAdded = true
	}

	return nil, retAdded
}
