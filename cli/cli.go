// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"log"
	"os"
	"path"
	"path/filepath"

	"github.com/practical-coder/hdt/client"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	homedir "github.com/mitchellh/go-homedir"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// debug flag indicating that cli should output debug logs
var debug bool

// config file location
var configFile string

// dry run flag
var dryRun bool

// name of the executable
var exeName string = filepath.Base(os.Args[0])

// logDebugf writes debug log to stdout
func logDebugf(format string, v ...interface{}) {
	if !debug {
		return
	}
	log.Printf(format, v...)
}

// depth of recursion to construct model flags
var maxDepth int = 5

// makeClient constructs a client object
func makeClient(cmd *cobra.Command, args []string) (*client.HaproxyDataplaneTools, error) {
	hostname := viper.GetString("hostname")
	scheme := viper.GetString("scheme")

	r := httptransport.New(hostname, client.DefaultBasePath, []string{scheme})
	r.SetDebug(debug)
	// set custom producer and consumer to use the default ones

	r.Consumers["application/json"] = runtime.JSONConsumer()

	// warning: consumes multipart/form-data is not supported by go-swagger cli yet

	// warning: consumes text/plain is not supported by go-swagger cli yet

	// warning: produces application/octet-stream is not supported by go-swagger cli yet

	r.Producers["application/json"] = runtime.JSONProducer()

	auth, err := makeAuthInfoWriter(cmd)
	if err != nil {
		return nil, err
	}
	r.DefaultAuthentication = auth

	appCli := client.New(r, strfmt.Default)
	logDebugf("Server url: %v://%v", scheme, hostname)
	return appCli, nil
}

// MakeRootCmd returns the root cmd
func MakeRootCmd() (*cobra.Command, error) {
	cobra.OnInitialize(initViperConfigs)

	// Use executable name as the command name
	rootCmd := &cobra.Command{
		Use: exeName,
	}

	// register basic flags
	rootCmd.PersistentFlags().String("hostname", client.DefaultHost, "hostname of the service")
	viper.BindPFlag("hostname", rootCmd.PersistentFlags().Lookup("hostname"))
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))
	viper.BindPFlag("scheme", rootCmd.PersistentFlags().Lookup("scheme"))

	// configure debug flag
	rootCmd.PersistentFlags().BoolVar(&debug, "debug", false, "output debug logs")
	// configure config location
	rootCmd.PersistentFlags().StringVar(&configFile, "config", "", "config file path")
	// configure dry run flag
	rootCmd.PersistentFlags().BoolVar(&dryRun, "dry-run", false, "do not send the request to server")

	// register security flags
	if err := registerAuthInoWriterFlags(rootCmd); err != nil {
		return nil, err
	}
	// add all operation groups
	operationGroupACLCmd, err := makeOperationGroupACLCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupACLCmd)

	operationGroupACLRuntimeCmd, err := makeOperationGroupACLRuntimeCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupACLRuntimeCmd)

	operationGroupBackendCmd, err := makeOperationGroupBackendCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupBackendCmd)

	operationGroupBackendSwitchingRuleCmd, err := makeOperationGroupBackendSwitchingRuleCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupBackendSwitchingRuleCmd)

	operationGroupBindCmd, err := makeOperationGroupBindCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupBindCmd)

	operationGroupCacheCmd, err := makeOperationGroupCacheCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupCacheCmd)

	operationGroupClusterCmd, err := makeOperationGroupClusterCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupClusterCmd)

	operationGroupConfigurationCmd, err := makeOperationGroupConfigurationCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupConfigurationCmd)

	operationGroupDeclareCaptureCmd, err := makeOperationGroupDeclareCaptureCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupDeclareCaptureCmd)

	operationGroupDefaultsCmd, err := makeOperationGroupDefaultsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupDefaultsCmd)

	operationGroupDgramBindCmd, err := makeOperationGroupDgramBindCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupDgramBindCmd)

	operationGroupDiscoveryCmd, err := makeOperationGroupDiscoveryCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupDiscoveryCmd)

	operationGroupFilterCmd, err := makeOperationGroupFilterCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupFilterCmd)

	operationGroupFrontendCmd, err := makeOperationGroupFrontendCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupFrontendCmd)

	operationGroupGlobalCmd, err := makeOperationGroupGlobalCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupGlobalCmd)

	operationGroupGroupCmd, err := makeOperationGroupGroupCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupGroupCmd)

	operationGroupHealthCmd, err := makeOperationGroupHealthCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupHealthCmd)

	operationGroupHTTPAfterResponseRuleCmd, err := makeOperationGroupHTTPAfterResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupHTTPAfterResponseRuleCmd)

	operationGroupHTTPCheckCmd, err := makeOperationGroupHTTPCheckCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupHTTPCheckCmd)

	operationGroupHTTPRequestRuleCmd, err := makeOperationGroupHTTPRequestRuleCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupHTTPRequestRuleCmd)

	operationGroupHTTPResponseRuleCmd, err := makeOperationGroupHTTPResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupHTTPResponseRuleCmd)

	operationGroupInformationCmd, err := makeOperationGroupInformationCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupInformationCmd)

	operationGroupLogForwardCmd, err := makeOperationGroupLogForwardCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupLogForwardCmd)

	operationGroupLogTargetCmd, err := makeOperationGroupLogTargetCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupLogTargetCmd)

	operationGroupMapsCmd, err := makeOperationGroupMapsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupMapsCmd)

	operationGroupNameserverCmd, err := makeOperationGroupNameserverCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupNameserverCmd)

	operationGroupPeerCmd, err := makeOperationGroupPeerCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupPeerCmd)

	operationGroupPeerEntryCmd, err := makeOperationGroupPeerEntryCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupPeerEntryCmd)

	operationGroupReloadsCmd, err := makeOperationGroupReloadsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupReloadsCmd)

	operationGroupResolverCmd, err := makeOperationGroupResolverCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupResolverCmd)

	operationGroupRingCmd, err := makeOperationGroupRingCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupRingCmd)

	operationGroupServerCmd, err := makeOperationGroupServerCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupServerCmd)

	operationGroupServerSwitchingRuleCmd, err := makeOperationGroupServerSwitchingRuleCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupServerSwitchingRuleCmd)

	operationGroupServerTemplateCmd, err := makeOperationGroupServerTemplateCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupServerTemplateCmd)

	operationGroupServiceDiscoveryCmd, err := makeOperationGroupServiceDiscoveryCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupServiceDiscoveryCmd)

	operationGroupSitesCmd, err := makeOperationGroupSitesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSitesCmd)

	operationGroupSpecificationCmd, err := makeOperationGroupSpecificationCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSpecificationCmd)

	operationGroupSpecificationOpenapiv3Cmd, err := makeOperationGroupSpecificationOpenapiv3Cmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSpecificationOpenapiv3Cmd)

	operationGroupSpoeCmd, err := makeOperationGroupSpoeCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSpoeCmd)

	operationGroupSpoeTransactionsCmd, err := makeOperationGroupSpoeTransactionsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSpoeTransactionsCmd)

	operationGroupStatsCmd, err := makeOperationGroupStatsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupStatsCmd)

	operationGroupStickRuleCmd, err := makeOperationGroupStickRuleCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupStickRuleCmd)

	operationGroupStickTableCmd, err := makeOperationGroupStickTableCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupStickTableCmd)

	operationGroupStorageCmd, err := makeOperationGroupStorageCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupStorageCmd)

	operationGroupTCPCheckCmd, err := makeOperationGroupTCPCheckCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTCPCheckCmd)

	operationGroupTCPRequestRuleCmd, err := makeOperationGroupTCPRequestRuleCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTCPRequestRuleCmd)

	operationGroupTCPResponseRuleCmd, err := makeOperationGroupTCPResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTCPResponseRuleCmd)

	operationGroupTransactionsCmd, err := makeOperationGroupTransactionsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTransactionsCmd)

	operationGroupUserCmd, err := makeOperationGroupUserCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupUserCmd)

	operationGroupUserlistCmd, err := makeOperationGroupUserlistCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupUserlistCmd)

	// add cobra completion
	rootCmd.AddCommand(makeGenCompletionCmd())

	return rootCmd, nil
}

// initViperConfigs initialize viper config using config file in '$HOME/.config/<cli name>/config.<json|yaml...>'
// currently hostname, scheme and auth tokens can be specified in this config file.
func initViperConfigs() {
	if configFile != "" {
		// use user specified config file location
		viper.SetConfigFile(configFile)
	} else {
		// look for default config
		// Find home directory.
		home, err := homedir.Dir()
		cobra.CheckErr(err)

		// Search config in home directory with name ".cobra" (without extension).
		viper.AddConfigPath(path.Join(home, ".config", exeName))
		viper.SetConfigName("config")
	}

	if err := viper.ReadInConfig(); err != nil {
		logDebugf("Error: loading config file: %v", err)
		return
	}
	logDebugf("Using config file: %v", viper.ConfigFileUsed())
}

// registerAuthInoWriterFlags registers all flags needed to perform authentication
func registerAuthInoWriterFlags(cmd *cobra.Command) error {
	/* */
	cmd.PersistentFlags().String("username", "", "username for basic auth")
	viper.BindPFlag("username", cmd.PersistentFlags().Lookup("username"))
	cmd.PersistentFlags().String("password", "", "password for basic auth")
	viper.BindPFlag("password", cmd.PersistentFlags().Lookup("password"))
	return nil
}

// makeAuthInfoWriter retrieves cmd flags and construct an auth info writer
func makeAuthInfoWriter(cmd *cobra.Command) (runtime.ClientAuthInfoWriter, error) {
	auths := []runtime.ClientAuthInfoWriter{}
	/* */
	if viper.IsSet("username") {
		usr := viper.GetString("username")
		if !viper.IsSet("password") {
			return nil, fmt.Errorf("Basic Auth password for user [%v] is not provided.", usr)
		}
		pwd := viper.GetString("password")
		auths = append(auths, httptransport.BasicAuth(usr, pwd))
	}
	if len(auths) == 0 {
		logDebugf("Warning: No auth params detected.")
		return nil, nil
	}
	// compose all auths together
	return httptransport.Compose(auths...), nil
}

func makeOperationGroupACLCmd() (*cobra.Command, error) {
	operationGroupACLCmd := &cobra.Command{
		Use:  "acl",
		Long: ``,
	}

	operationCreateACLCmd, err := makeOperationACLCreateACLCmd()
	if err != nil {
		return nil, err
	}
	operationGroupACLCmd.AddCommand(operationCreateACLCmd)

	operationDeleteACLCmd, err := makeOperationACLDeleteACLCmd()
	if err != nil {
		return nil, err
	}
	operationGroupACLCmd.AddCommand(operationDeleteACLCmd)

	operationGetACLCmd, err := makeOperationACLGetACLCmd()
	if err != nil {
		return nil, err
	}
	operationGroupACLCmd.AddCommand(operationGetACLCmd)

	operationGetAclsCmd, err := makeOperationACLGetAclsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupACLCmd.AddCommand(operationGetAclsCmd)

	operationReplaceACLCmd, err := makeOperationACLReplaceACLCmd()
	if err != nil {
		return nil, err
	}
	operationGroupACLCmd.AddCommand(operationReplaceACLCmd)

	return operationGroupACLCmd, nil
}
func makeOperationGroupACLRuntimeCmd() (*cobra.Command, error) {
	operationGroupACLRuntimeCmd := &cobra.Command{
		Use:  "acl_runtime",
		Long: ``,
	}

	operationDeleteServicesHaproxyRuntimeACLFileEntriesIDCmd, err := makeOperationACLRuntimeDeleteServicesHaproxyRuntimeACLFileEntriesIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupACLRuntimeCmd.AddCommand(operationDeleteServicesHaproxyRuntimeACLFileEntriesIDCmd)

	operationGetServicesHaproxyRuntimeACLFileEntriesCmd, err := makeOperationACLRuntimeGetServicesHaproxyRuntimeACLFileEntriesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupACLRuntimeCmd.AddCommand(operationGetServicesHaproxyRuntimeACLFileEntriesCmd)

	operationGetServicesHaproxyRuntimeACLFileEntriesIDCmd, err := makeOperationACLRuntimeGetServicesHaproxyRuntimeACLFileEntriesIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupACLRuntimeCmd.AddCommand(operationGetServicesHaproxyRuntimeACLFileEntriesIDCmd)

	operationGetServicesHaproxyRuntimeAclsCmd, err := makeOperationACLRuntimeGetServicesHaproxyRuntimeAclsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupACLRuntimeCmd.AddCommand(operationGetServicesHaproxyRuntimeAclsCmd)

	operationGetServicesHaproxyRuntimeAclsIDCmd, err := makeOperationACLRuntimeGetServicesHaproxyRuntimeAclsIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupACLRuntimeCmd.AddCommand(operationGetServicesHaproxyRuntimeAclsIDCmd)

	operationPostServicesHaproxyRuntimeACLFileEntriesCmd, err := makeOperationACLRuntimePostServicesHaproxyRuntimeACLFileEntriesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupACLRuntimeCmd.AddCommand(operationPostServicesHaproxyRuntimeACLFileEntriesCmd)

	operationAddPayloadRuntimeACLCmd, err := makeOperationACLRuntimeAddPayloadRuntimeACLCmd()
	if err != nil {
		return nil, err
	}
	operationGroupACLRuntimeCmd.AddCommand(operationAddPayloadRuntimeACLCmd)

	return operationGroupACLRuntimeCmd, nil
}
func makeOperationGroupBackendCmd() (*cobra.Command, error) {
	operationGroupBackendCmd := &cobra.Command{
		Use:  "backend",
		Long: ``,
	}

	operationCreateBackendCmd, err := makeOperationBackendCreateBackendCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackendCmd.AddCommand(operationCreateBackendCmd)

	operationDeleteBackendCmd, err := makeOperationBackendDeleteBackendCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackendCmd.AddCommand(operationDeleteBackendCmd)

	operationGetBackendCmd, err := makeOperationBackendGetBackendCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackendCmd.AddCommand(operationGetBackendCmd)

	operationGetBackendsCmd, err := makeOperationBackendGetBackendsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackendCmd.AddCommand(operationGetBackendsCmd)

	operationReplaceBackendCmd, err := makeOperationBackendReplaceBackendCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackendCmd.AddCommand(operationReplaceBackendCmd)

	return operationGroupBackendCmd, nil
}
func makeOperationGroupBackendSwitchingRuleCmd() (*cobra.Command, error) {
	operationGroupBackendSwitchingRuleCmd := &cobra.Command{
		Use:  "backend_switching_rule",
		Long: ``,
	}

	operationCreateBackendSwitchingRuleCmd, err := makeOperationBackendSwitchingRuleCreateBackendSwitchingRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackendSwitchingRuleCmd.AddCommand(operationCreateBackendSwitchingRuleCmd)

	operationDeleteBackendSwitchingRuleCmd, err := makeOperationBackendSwitchingRuleDeleteBackendSwitchingRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackendSwitchingRuleCmd.AddCommand(operationDeleteBackendSwitchingRuleCmd)

	operationGetBackendSwitchingRuleCmd, err := makeOperationBackendSwitchingRuleGetBackendSwitchingRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackendSwitchingRuleCmd.AddCommand(operationGetBackendSwitchingRuleCmd)

	operationGetBackendSwitchingRulesCmd, err := makeOperationBackendSwitchingRuleGetBackendSwitchingRulesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackendSwitchingRuleCmd.AddCommand(operationGetBackendSwitchingRulesCmd)

	operationReplaceBackendSwitchingRuleCmd, err := makeOperationBackendSwitchingRuleReplaceBackendSwitchingRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackendSwitchingRuleCmd.AddCommand(operationReplaceBackendSwitchingRuleCmd)

	return operationGroupBackendSwitchingRuleCmd, nil
}
func makeOperationGroupBindCmd() (*cobra.Command, error) {
	operationGroupBindCmd := &cobra.Command{
		Use:  "bind",
		Long: ``,
	}

	operationCreateBindCmd, err := makeOperationBindCreateBindCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBindCmd.AddCommand(operationCreateBindCmd)

	operationDeleteBindCmd, err := makeOperationBindDeleteBindCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBindCmd.AddCommand(operationDeleteBindCmd)

	operationGetBindCmd, err := makeOperationBindGetBindCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBindCmd.AddCommand(operationGetBindCmd)

	operationGetBindsCmd, err := makeOperationBindGetBindsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBindCmd.AddCommand(operationGetBindsCmd)

	operationReplaceBindCmd, err := makeOperationBindReplaceBindCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBindCmd.AddCommand(operationReplaceBindCmd)

	return operationGroupBindCmd, nil
}
func makeOperationGroupCacheCmd() (*cobra.Command, error) {
	operationGroupCacheCmd := &cobra.Command{
		Use:  "cache",
		Long: ``,
	}

	operationCreateCacheCmd, err := makeOperationCacheCreateCacheCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCacheCmd.AddCommand(operationCreateCacheCmd)

	operationDeleteCacheCmd, err := makeOperationCacheDeleteCacheCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCacheCmd.AddCommand(operationDeleteCacheCmd)

	operationGetCacheCmd, err := makeOperationCacheGetCacheCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCacheCmd.AddCommand(operationGetCacheCmd)

	operationGetCachesCmd, err := makeOperationCacheGetCachesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCacheCmd.AddCommand(operationGetCachesCmd)

	operationReplaceCacheCmd, err := makeOperationCacheReplaceCacheCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCacheCmd.AddCommand(operationReplaceCacheCmd)

	return operationGroupCacheCmd, nil
}
func makeOperationGroupClusterCmd() (*cobra.Command, error) {
	operationGroupClusterCmd := &cobra.Command{
		Use:  "cluster",
		Long: ``,
	}

	operationDeleteClusterCmd, err := makeOperationClusterDeleteClusterCmd()
	if err != nil {
		return nil, err
	}
	operationGroupClusterCmd.AddCommand(operationDeleteClusterCmd)

	operationEditClusterCmd, err := makeOperationClusterEditClusterCmd()
	if err != nil {
		return nil, err
	}
	operationGroupClusterCmd.AddCommand(operationEditClusterCmd)

	operationGetClusterCmd, err := makeOperationClusterGetClusterCmd()
	if err != nil {
		return nil, err
	}
	operationGroupClusterCmd.AddCommand(operationGetClusterCmd)

	operationInitiateCertificateRefreshCmd, err := makeOperationClusterInitiateCertificateRefreshCmd()
	if err != nil {
		return nil, err
	}
	operationGroupClusterCmd.AddCommand(operationInitiateCertificateRefreshCmd)

	operationPostClusterCmd, err := makeOperationClusterPostClusterCmd()
	if err != nil {
		return nil, err
	}
	operationGroupClusterCmd.AddCommand(operationPostClusterCmd)

	return operationGroupClusterCmd, nil
}
func makeOperationGroupConfigurationCmd() (*cobra.Command, error) {
	operationGroupConfigurationCmd := &cobra.Command{
		Use:  "configuration",
		Long: ``,
	}

	operationGetConfigurationVersionCmd, err := makeOperationConfigurationGetConfigurationVersionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupConfigurationCmd.AddCommand(operationGetConfigurationVersionCmd)

	operationGetHAProxyConfigurationCmd, err := makeOperationConfigurationGetHAProxyConfigurationCmd()
	if err != nil {
		return nil, err
	}
	operationGroupConfigurationCmd.AddCommand(operationGetHAProxyConfigurationCmd)

	operationPostHAProxyConfigurationCmd, err := makeOperationConfigurationPostHAProxyConfigurationCmd()
	if err != nil {
		return nil, err
	}
	operationGroupConfigurationCmd.AddCommand(operationPostHAProxyConfigurationCmd)

	return operationGroupConfigurationCmd, nil
}
func makeOperationGroupDeclareCaptureCmd() (*cobra.Command, error) {
	operationGroupDeclareCaptureCmd := &cobra.Command{
		Use:  "declare_capture",
		Long: ``,
	}

	operationCreateDeclareCaptureCmd, err := makeOperationDeclareCaptureCreateDeclareCaptureCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDeclareCaptureCmd.AddCommand(operationCreateDeclareCaptureCmd)

	operationDeleteDeclareCaptureCmd, err := makeOperationDeclareCaptureDeleteDeclareCaptureCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDeclareCaptureCmd.AddCommand(operationDeleteDeclareCaptureCmd)

	operationGetDeclareCaptureCmd, err := makeOperationDeclareCaptureGetDeclareCaptureCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDeclareCaptureCmd.AddCommand(operationGetDeclareCaptureCmd)

	operationGetDeclareCapturesCmd, err := makeOperationDeclareCaptureGetDeclareCapturesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDeclareCaptureCmd.AddCommand(operationGetDeclareCapturesCmd)

	operationReplaceDeclareCaptureCmd, err := makeOperationDeclareCaptureReplaceDeclareCaptureCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDeclareCaptureCmd.AddCommand(operationReplaceDeclareCaptureCmd)

	return operationGroupDeclareCaptureCmd, nil
}
func makeOperationGroupDefaultsCmd() (*cobra.Command, error) {
	operationGroupDefaultsCmd := &cobra.Command{
		Use:  "defaults",
		Long: ``,
	}

	operationGetDefaultsCmd, err := makeOperationDefaultsGetDefaultsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDefaultsCmd.AddCommand(operationGetDefaultsCmd)

	operationReplaceDefaultsCmd, err := makeOperationDefaultsReplaceDefaultsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDefaultsCmd.AddCommand(operationReplaceDefaultsCmd)

	return operationGroupDefaultsCmd, nil
}
func makeOperationGroupDgramBindCmd() (*cobra.Command, error) {
	operationGroupDgramBindCmd := &cobra.Command{
		Use:  "dgram_bind",
		Long: ``,
	}

	operationCreateDgramBindCmd, err := makeOperationDgramBindCreateDgramBindCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDgramBindCmd.AddCommand(operationCreateDgramBindCmd)

	operationDeleteDgramBindCmd, err := makeOperationDgramBindDeleteDgramBindCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDgramBindCmd.AddCommand(operationDeleteDgramBindCmd)

	operationGetDgramBindCmd, err := makeOperationDgramBindGetDgramBindCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDgramBindCmd.AddCommand(operationGetDgramBindCmd)

	operationGetDgramBindsCmd, err := makeOperationDgramBindGetDgramBindsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDgramBindCmd.AddCommand(operationGetDgramBindsCmd)

	operationReplaceDgramBindCmd, err := makeOperationDgramBindReplaceDgramBindCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDgramBindCmd.AddCommand(operationReplaceDgramBindCmd)

	return operationGroupDgramBindCmd, nil
}
func makeOperationGroupDiscoveryCmd() (*cobra.Command, error) {
	operationGroupDiscoveryCmd := &cobra.Command{
		Use:  "discovery",
		Long: ``,
	}

	operationGetAPIEndpointsCmd, err := makeOperationDiscoveryGetAPIEndpointsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDiscoveryCmd.AddCommand(operationGetAPIEndpointsCmd)

	operationGetConfigurationEndpointsCmd, err := makeOperationDiscoveryGetConfigurationEndpointsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDiscoveryCmd.AddCommand(operationGetConfigurationEndpointsCmd)

	operationGetHaproxyEndpointsCmd, err := makeOperationDiscoveryGetHaproxyEndpointsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDiscoveryCmd.AddCommand(operationGetHaproxyEndpointsCmd)

	operationGetRuntimeEndpointsCmd, err := makeOperationDiscoveryGetRuntimeEndpointsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDiscoveryCmd.AddCommand(operationGetRuntimeEndpointsCmd)

	operationGetServicesEndpointsCmd, err := makeOperationDiscoveryGetServicesEndpointsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDiscoveryCmd.AddCommand(operationGetServicesEndpointsCmd)

	operationGetSpoeEndpointsCmd, err := makeOperationDiscoveryGetSpoeEndpointsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDiscoveryCmd.AddCommand(operationGetSpoeEndpointsCmd)

	operationGetStatsEndpointsCmd, err := makeOperationDiscoveryGetStatsEndpointsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDiscoveryCmd.AddCommand(operationGetStatsEndpointsCmd)

	operationGetStorageEndpointsCmd, err := makeOperationDiscoveryGetStorageEndpointsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDiscoveryCmd.AddCommand(operationGetStorageEndpointsCmd)

	return operationGroupDiscoveryCmd, nil
}
func makeOperationGroupFilterCmd() (*cobra.Command, error) {
	operationGroupFilterCmd := &cobra.Command{
		Use:  "filter",
		Long: ``,
	}

	operationCreateFilterCmd, err := makeOperationFilterCreateFilterCmd()
	if err != nil {
		return nil, err
	}
	operationGroupFilterCmd.AddCommand(operationCreateFilterCmd)

	operationDeleteFilterCmd, err := makeOperationFilterDeleteFilterCmd()
	if err != nil {
		return nil, err
	}
	operationGroupFilterCmd.AddCommand(operationDeleteFilterCmd)

	operationGetFilterCmd, err := makeOperationFilterGetFilterCmd()
	if err != nil {
		return nil, err
	}
	operationGroupFilterCmd.AddCommand(operationGetFilterCmd)

	operationGetFiltersCmd, err := makeOperationFilterGetFiltersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupFilterCmd.AddCommand(operationGetFiltersCmd)

	operationReplaceFilterCmd, err := makeOperationFilterReplaceFilterCmd()
	if err != nil {
		return nil, err
	}
	operationGroupFilterCmd.AddCommand(operationReplaceFilterCmd)

	return operationGroupFilterCmd, nil
}
func makeOperationGroupFrontendCmd() (*cobra.Command, error) {
	operationGroupFrontendCmd := &cobra.Command{
		Use:  "frontend",
		Long: ``,
	}

	operationCreateFrontendCmd, err := makeOperationFrontendCreateFrontendCmd()
	if err != nil {
		return nil, err
	}
	operationGroupFrontendCmd.AddCommand(operationCreateFrontendCmd)

	operationDeleteFrontendCmd, err := makeOperationFrontendDeleteFrontendCmd()
	if err != nil {
		return nil, err
	}
	operationGroupFrontendCmd.AddCommand(operationDeleteFrontendCmd)

	operationGetFrontendCmd, err := makeOperationFrontendGetFrontendCmd()
	if err != nil {
		return nil, err
	}
	operationGroupFrontendCmd.AddCommand(operationGetFrontendCmd)

	operationGetFrontendsCmd, err := makeOperationFrontendGetFrontendsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupFrontendCmd.AddCommand(operationGetFrontendsCmd)

	operationReplaceFrontendCmd, err := makeOperationFrontendReplaceFrontendCmd()
	if err != nil {
		return nil, err
	}
	operationGroupFrontendCmd.AddCommand(operationReplaceFrontendCmd)

	return operationGroupFrontendCmd, nil
}
func makeOperationGroupGlobalCmd() (*cobra.Command, error) {
	operationGroupGlobalCmd := &cobra.Command{
		Use:  "global",
		Long: ``,
	}

	operationGetGlobalCmd, err := makeOperationGlobalGetGlobalCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGlobalCmd.AddCommand(operationGetGlobalCmd)

	operationReplaceGlobalCmd, err := makeOperationGlobalReplaceGlobalCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGlobalCmd.AddCommand(operationReplaceGlobalCmd)

	return operationGroupGlobalCmd, nil
}
func makeOperationGroupGroupCmd() (*cobra.Command, error) {
	operationGroupGroupCmd := &cobra.Command{
		Use:  "group",
		Long: ``,
	}

	operationCreateGroupCmd, err := makeOperationGroupCreateGroupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGroupCmd.AddCommand(operationCreateGroupCmd)

	operationDeleteGroupCmd, err := makeOperationGroupDeleteGroupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGroupCmd.AddCommand(operationDeleteGroupCmd)

	operationGetGroupCmd, err := makeOperationGroupGetGroupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGroupCmd.AddCommand(operationGetGroupCmd)

	operationGetGroupsCmd, err := makeOperationGroupGetGroupsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGroupCmd.AddCommand(operationGetGroupsCmd)

	operationReplaceGroupCmd, err := makeOperationGroupReplaceGroupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGroupCmd.AddCommand(operationReplaceGroupCmd)

	return operationGroupGroupCmd, nil
}
func makeOperationGroupHealthCmd() (*cobra.Command, error) {
	operationGroupHealthCmd := &cobra.Command{
		Use:  "health",
		Long: ``,
	}

	operationGetHealthCmd, err := makeOperationHealthGetHealthCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHealthCmd.AddCommand(operationGetHealthCmd)

	return operationGroupHealthCmd, nil
}
func makeOperationGroupHTTPAfterResponseRuleCmd() (*cobra.Command, error) {
	operationGroupHTTPAfterResponseRuleCmd := &cobra.Command{
		Use:  "http_after_response_rule",
		Long: ``,
	}

	operationCreateHTTPAfterResponseRuleCmd, err := makeOperationHTTPAfterResponseRuleCreateHTTPAfterResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPAfterResponseRuleCmd.AddCommand(operationCreateHTTPAfterResponseRuleCmd)

	operationDeleteHTTPAfterResponseRuleCmd, err := makeOperationHTTPAfterResponseRuleDeleteHTTPAfterResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPAfterResponseRuleCmd.AddCommand(operationDeleteHTTPAfterResponseRuleCmd)

	operationGetHTTPAfterResponseRuleCmd, err := makeOperationHTTPAfterResponseRuleGetHTTPAfterResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPAfterResponseRuleCmd.AddCommand(operationGetHTTPAfterResponseRuleCmd)

	operationGetHTTPAfterResponseRulesCmd, err := makeOperationHTTPAfterResponseRuleGetHTTPAfterResponseRulesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPAfterResponseRuleCmd.AddCommand(operationGetHTTPAfterResponseRulesCmd)

	operationReplaceHTTPAfterResponseRuleCmd, err := makeOperationHTTPAfterResponseRuleReplaceHTTPAfterResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPAfterResponseRuleCmd.AddCommand(operationReplaceHTTPAfterResponseRuleCmd)

	return operationGroupHTTPAfterResponseRuleCmd, nil
}
func makeOperationGroupHTTPCheckCmd() (*cobra.Command, error) {
	operationGroupHTTPCheckCmd := &cobra.Command{
		Use:  "http_check",
		Long: ``,
	}

	operationCreateHTTPCheckCmd, err := makeOperationHTTPCheckCreateHTTPCheckCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPCheckCmd.AddCommand(operationCreateHTTPCheckCmd)

	operationDeleteHTTPCheckCmd, err := makeOperationHTTPCheckDeleteHTTPCheckCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPCheckCmd.AddCommand(operationDeleteHTTPCheckCmd)

	operationGetHTTPCheckCmd, err := makeOperationHTTPCheckGetHTTPCheckCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPCheckCmd.AddCommand(operationGetHTTPCheckCmd)

	operationGetHTTPChecksCmd, err := makeOperationHTTPCheckGetHTTPChecksCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPCheckCmd.AddCommand(operationGetHTTPChecksCmd)

	operationReplaceHTTPCheckCmd, err := makeOperationHTTPCheckReplaceHTTPCheckCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPCheckCmd.AddCommand(operationReplaceHTTPCheckCmd)

	return operationGroupHTTPCheckCmd, nil
}
func makeOperationGroupHTTPRequestRuleCmd() (*cobra.Command, error) {
	operationGroupHTTPRequestRuleCmd := &cobra.Command{
		Use:  "http_request_rule",
		Long: ``,
	}

	operationCreateHTTPRequestRuleCmd, err := makeOperationHTTPRequestRuleCreateHTTPRequestRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPRequestRuleCmd.AddCommand(operationCreateHTTPRequestRuleCmd)

	operationDeleteHTTPRequestRuleCmd, err := makeOperationHTTPRequestRuleDeleteHTTPRequestRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPRequestRuleCmd.AddCommand(operationDeleteHTTPRequestRuleCmd)

	operationGetHTTPRequestRuleCmd, err := makeOperationHTTPRequestRuleGetHTTPRequestRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPRequestRuleCmd.AddCommand(operationGetHTTPRequestRuleCmd)

	operationGetHTTPRequestRulesCmd, err := makeOperationHTTPRequestRuleGetHTTPRequestRulesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPRequestRuleCmd.AddCommand(operationGetHTTPRequestRulesCmd)

	operationReplaceHTTPRequestRuleCmd, err := makeOperationHTTPRequestRuleReplaceHTTPRequestRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPRequestRuleCmd.AddCommand(operationReplaceHTTPRequestRuleCmd)

	return operationGroupHTTPRequestRuleCmd, nil
}
func makeOperationGroupHTTPResponseRuleCmd() (*cobra.Command, error) {
	operationGroupHTTPResponseRuleCmd := &cobra.Command{
		Use:  "http_response_rule",
		Long: ``,
	}

	operationCreateHTTPResponseRuleCmd, err := makeOperationHTTPResponseRuleCreateHTTPResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPResponseRuleCmd.AddCommand(operationCreateHTTPResponseRuleCmd)

	operationDeleteHTTPResponseRuleCmd, err := makeOperationHTTPResponseRuleDeleteHTTPResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPResponseRuleCmd.AddCommand(operationDeleteHTTPResponseRuleCmd)

	operationGetHTTPResponseRuleCmd, err := makeOperationHTTPResponseRuleGetHTTPResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPResponseRuleCmd.AddCommand(operationGetHTTPResponseRuleCmd)

	operationGetHTTPResponseRulesCmd, err := makeOperationHTTPResponseRuleGetHTTPResponseRulesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPResponseRuleCmd.AddCommand(operationGetHTTPResponseRulesCmd)

	operationReplaceHTTPResponseRuleCmd, err := makeOperationHTTPResponseRuleReplaceHTTPResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHTTPResponseRuleCmd.AddCommand(operationReplaceHTTPResponseRuleCmd)

	return operationGroupHTTPResponseRuleCmd, nil
}
func makeOperationGroupInformationCmd() (*cobra.Command, error) {
	operationGroupInformationCmd := &cobra.Command{
		Use:  "information",
		Long: ``,
	}

	operationGetHaproxyProcessInfoCmd, err := makeOperationInformationGetHaproxyProcessInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupInformationCmd.AddCommand(operationGetHaproxyProcessInfoCmd)

	operationGetInfoCmd, err := makeOperationInformationGetInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupInformationCmd.AddCommand(operationGetInfoCmd)

	return operationGroupInformationCmd, nil
}
func makeOperationGroupLogForwardCmd() (*cobra.Command, error) {
	operationGroupLogForwardCmd := &cobra.Command{
		Use:  "log_forward",
		Long: ``,
	}

	operationCreateLogForwardCmd, err := makeOperationLogForwardCreateLogForwardCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogForwardCmd.AddCommand(operationCreateLogForwardCmd)

	operationDeleteLogForwardCmd, err := makeOperationLogForwardDeleteLogForwardCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogForwardCmd.AddCommand(operationDeleteLogForwardCmd)

	operationGetLogForwardCmd, err := makeOperationLogForwardGetLogForwardCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogForwardCmd.AddCommand(operationGetLogForwardCmd)

	operationGetLogForwardsCmd, err := makeOperationLogForwardGetLogForwardsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogForwardCmd.AddCommand(operationGetLogForwardsCmd)

	operationReplaceLogForwardCmd, err := makeOperationLogForwardReplaceLogForwardCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogForwardCmd.AddCommand(operationReplaceLogForwardCmd)

	return operationGroupLogForwardCmd, nil
}
func makeOperationGroupLogTargetCmd() (*cobra.Command, error) {
	operationGroupLogTargetCmd := &cobra.Command{
		Use:  "log_target",
		Long: ``,
	}

	operationCreateLogTargetCmd, err := makeOperationLogTargetCreateLogTargetCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogTargetCmd.AddCommand(operationCreateLogTargetCmd)

	operationDeleteLogTargetCmd, err := makeOperationLogTargetDeleteLogTargetCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogTargetCmd.AddCommand(operationDeleteLogTargetCmd)

	operationGetLogTargetCmd, err := makeOperationLogTargetGetLogTargetCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogTargetCmd.AddCommand(operationGetLogTargetCmd)

	operationGetLogTargetsCmd, err := makeOperationLogTargetGetLogTargetsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogTargetCmd.AddCommand(operationGetLogTargetsCmd)

	operationReplaceLogTargetCmd, err := makeOperationLogTargetReplaceLogTargetCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogTargetCmd.AddCommand(operationReplaceLogTargetCmd)

	return operationGroupLogTargetCmd, nil
}
func makeOperationGroupMapsCmd() (*cobra.Command, error) {
	operationGroupMapsCmd := &cobra.Command{
		Use:  "maps",
		Long: ``,
	}

	operationAddMapEntryCmd, err := makeOperationMapsAddMapEntryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMapsCmd.AddCommand(operationAddMapEntryCmd)

	operationAddPayloadRuntimeMapCmd, err := makeOperationMapsAddPayloadRuntimeMapCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMapsCmd.AddCommand(operationAddPayloadRuntimeMapCmd)

	operationClearRuntimeMapCmd, err := makeOperationMapsClearRuntimeMapCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMapsCmd.AddCommand(operationClearRuntimeMapCmd)

	operationDeleteRuntimeMapEntryCmd, err := makeOperationMapsDeleteRuntimeMapEntryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMapsCmd.AddCommand(operationDeleteRuntimeMapEntryCmd)

	operationGetAllRuntimeMapFilesCmd, err := makeOperationMapsGetAllRuntimeMapFilesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMapsCmd.AddCommand(operationGetAllRuntimeMapFilesCmd)

	operationGetOneRuntimeMapCmd, err := makeOperationMapsGetOneRuntimeMapCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMapsCmd.AddCommand(operationGetOneRuntimeMapCmd)

	operationGetRuntimeMapEntryCmd, err := makeOperationMapsGetRuntimeMapEntryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMapsCmd.AddCommand(operationGetRuntimeMapEntryCmd)

	operationReplaceRuntimeMapEntryCmd, err := makeOperationMapsReplaceRuntimeMapEntryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMapsCmd.AddCommand(operationReplaceRuntimeMapEntryCmd)

	operationShowRuntimeMapCmd, err := makeOperationMapsShowRuntimeMapCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMapsCmd.AddCommand(operationShowRuntimeMapCmd)

	return operationGroupMapsCmd, nil
}
func makeOperationGroupNameserverCmd() (*cobra.Command, error) {
	operationGroupNameserverCmd := &cobra.Command{
		Use:  "nameserver",
		Long: ``,
	}

	operationCreateNameserverCmd, err := makeOperationNameserverCreateNameserverCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNameserverCmd.AddCommand(operationCreateNameserverCmd)

	operationDeleteNameserverCmd, err := makeOperationNameserverDeleteNameserverCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNameserverCmd.AddCommand(operationDeleteNameserverCmd)

	operationGetNameserverCmd, err := makeOperationNameserverGetNameserverCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNameserverCmd.AddCommand(operationGetNameserverCmd)

	operationGetNameserversCmd, err := makeOperationNameserverGetNameserversCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNameserverCmd.AddCommand(operationGetNameserversCmd)

	operationReplaceNameserverCmd, err := makeOperationNameserverReplaceNameserverCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNameserverCmd.AddCommand(operationReplaceNameserverCmd)

	return operationGroupNameserverCmd, nil
}
func makeOperationGroupPeerCmd() (*cobra.Command, error) {
	operationGroupPeerCmd := &cobra.Command{
		Use:  "peer",
		Long: ``,
	}

	operationCreatePeerCmd, err := makeOperationPeerCreatePeerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPeerCmd.AddCommand(operationCreatePeerCmd)

	operationDeletePeerCmd, err := makeOperationPeerDeletePeerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPeerCmd.AddCommand(operationDeletePeerCmd)

	operationGetPeerSectionCmd, err := makeOperationPeerGetPeerSectionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPeerCmd.AddCommand(operationGetPeerSectionCmd)

	operationGetPeerSectionsCmd, err := makeOperationPeerGetPeerSectionsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPeerCmd.AddCommand(operationGetPeerSectionsCmd)

	return operationGroupPeerCmd, nil
}
func makeOperationGroupPeerEntryCmd() (*cobra.Command, error) {
	operationGroupPeerEntryCmd := &cobra.Command{
		Use:  "peer_entry",
		Long: ``,
	}

	operationCreatePeerEntryCmd, err := makeOperationPeerEntryCreatePeerEntryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPeerEntryCmd.AddCommand(operationCreatePeerEntryCmd)

	operationDeletePeerEntryCmd, err := makeOperationPeerEntryDeletePeerEntryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPeerEntryCmd.AddCommand(operationDeletePeerEntryCmd)

	operationGetPeerEntriesCmd, err := makeOperationPeerEntryGetPeerEntriesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPeerEntryCmd.AddCommand(operationGetPeerEntriesCmd)

	operationGetPeerEntryCmd, err := makeOperationPeerEntryGetPeerEntryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPeerEntryCmd.AddCommand(operationGetPeerEntryCmd)

	operationReplacePeerEntryCmd, err := makeOperationPeerEntryReplacePeerEntryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPeerEntryCmd.AddCommand(operationReplacePeerEntryCmd)

	return operationGroupPeerEntryCmd, nil
}
func makeOperationGroupReloadsCmd() (*cobra.Command, error) {
	operationGroupReloadsCmd := &cobra.Command{
		Use:  "reloads",
		Long: ``,
	}

	operationGetReloadCmd, err := makeOperationReloadsGetReloadCmd()
	if err != nil {
		return nil, err
	}
	operationGroupReloadsCmd.AddCommand(operationGetReloadCmd)

	operationGetReloadsCmd, err := makeOperationReloadsGetReloadsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupReloadsCmd.AddCommand(operationGetReloadsCmd)

	return operationGroupReloadsCmd, nil
}
func makeOperationGroupResolverCmd() (*cobra.Command, error) {
	operationGroupResolverCmd := &cobra.Command{
		Use:  "resolver",
		Long: ``,
	}

	operationCreateResolverCmd, err := makeOperationResolverCreateResolverCmd()
	if err != nil {
		return nil, err
	}
	operationGroupResolverCmd.AddCommand(operationCreateResolverCmd)

	operationDeleteResolverCmd, err := makeOperationResolverDeleteResolverCmd()
	if err != nil {
		return nil, err
	}
	operationGroupResolverCmd.AddCommand(operationDeleteResolverCmd)

	operationGetResolverCmd, err := makeOperationResolverGetResolverCmd()
	if err != nil {
		return nil, err
	}
	operationGroupResolverCmd.AddCommand(operationGetResolverCmd)

	operationGetResolversCmd, err := makeOperationResolverGetResolversCmd()
	if err != nil {
		return nil, err
	}
	operationGroupResolverCmd.AddCommand(operationGetResolversCmd)

	operationReplaceResolverCmd, err := makeOperationResolverReplaceResolverCmd()
	if err != nil {
		return nil, err
	}
	operationGroupResolverCmd.AddCommand(operationReplaceResolverCmd)

	return operationGroupResolverCmd, nil
}
func makeOperationGroupRingCmd() (*cobra.Command, error) {
	operationGroupRingCmd := &cobra.Command{
		Use:  "ring",
		Long: ``,
	}

	operationCreateRingCmd, err := makeOperationRingCreateRingCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRingCmd.AddCommand(operationCreateRingCmd)

	operationDeleteRingCmd, err := makeOperationRingDeleteRingCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRingCmd.AddCommand(operationDeleteRingCmd)

	operationGetRingCmd, err := makeOperationRingGetRingCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRingCmd.AddCommand(operationGetRingCmd)

	operationGetRingsCmd, err := makeOperationRingGetRingsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRingCmd.AddCommand(operationGetRingsCmd)

	operationReplaceRingCmd, err := makeOperationRingReplaceRingCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRingCmd.AddCommand(operationReplaceRingCmd)

	return operationGroupRingCmd, nil
}
func makeOperationGroupServerCmd() (*cobra.Command, error) {
	operationGroupServerCmd := &cobra.Command{
		Use:  "server",
		Long: ``,
	}

	operationCreateServerCmd, err := makeOperationServerCreateServerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerCmd.AddCommand(operationCreateServerCmd)

	operationDeleteServerCmd, err := makeOperationServerDeleteServerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerCmd.AddCommand(operationDeleteServerCmd)

	operationGetRuntimeServerCmd, err := makeOperationServerGetRuntimeServerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerCmd.AddCommand(operationGetRuntimeServerCmd)

	operationGetRuntimeServersCmd, err := makeOperationServerGetRuntimeServersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerCmd.AddCommand(operationGetRuntimeServersCmd)

	operationGetServerCmd, err := makeOperationServerGetServerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerCmd.AddCommand(operationGetServerCmd)

	operationGetServersCmd, err := makeOperationServerGetServersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerCmd.AddCommand(operationGetServersCmd)

	operationReplaceRuntimeServerCmd, err := makeOperationServerReplaceRuntimeServerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerCmd.AddCommand(operationReplaceRuntimeServerCmd)

	operationReplaceServerCmd, err := makeOperationServerReplaceServerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerCmd.AddCommand(operationReplaceServerCmd)

	return operationGroupServerCmd, nil
}
func makeOperationGroupServerSwitchingRuleCmd() (*cobra.Command, error) {
	operationGroupServerSwitchingRuleCmd := &cobra.Command{
		Use:  "server_switching_rule",
		Long: ``,
	}

	operationCreateServerSwitchingRuleCmd, err := makeOperationServerSwitchingRuleCreateServerSwitchingRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerSwitchingRuleCmd.AddCommand(operationCreateServerSwitchingRuleCmd)

	operationDeleteServerSwitchingRuleCmd, err := makeOperationServerSwitchingRuleDeleteServerSwitchingRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerSwitchingRuleCmd.AddCommand(operationDeleteServerSwitchingRuleCmd)

	operationGetServerSwitchingRuleCmd, err := makeOperationServerSwitchingRuleGetServerSwitchingRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerSwitchingRuleCmd.AddCommand(operationGetServerSwitchingRuleCmd)

	operationGetServerSwitchingRulesCmd, err := makeOperationServerSwitchingRuleGetServerSwitchingRulesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerSwitchingRuleCmd.AddCommand(operationGetServerSwitchingRulesCmd)

	operationReplaceServerSwitchingRuleCmd, err := makeOperationServerSwitchingRuleReplaceServerSwitchingRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerSwitchingRuleCmd.AddCommand(operationReplaceServerSwitchingRuleCmd)

	return operationGroupServerSwitchingRuleCmd, nil
}
func makeOperationGroupServerTemplateCmd() (*cobra.Command, error) {
	operationGroupServerTemplateCmd := &cobra.Command{
		Use:  "server_template",
		Long: ``,
	}

	operationCreateServerTemplateCmd, err := makeOperationServerTemplateCreateServerTemplateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerTemplateCmd.AddCommand(operationCreateServerTemplateCmd)

	operationDeleteServerTemplateCmd, err := makeOperationServerTemplateDeleteServerTemplateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerTemplateCmd.AddCommand(operationDeleteServerTemplateCmd)

	operationGetServerTemplateCmd, err := makeOperationServerTemplateGetServerTemplateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerTemplateCmd.AddCommand(operationGetServerTemplateCmd)

	operationGetServerTemplatesCmd, err := makeOperationServerTemplateGetServerTemplatesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerTemplateCmd.AddCommand(operationGetServerTemplatesCmd)

	operationReplaceServerTemplateCmd, err := makeOperationServerTemplateReplaceServerTemplateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServerTemplateCmd.AddCommand(operationReplaceServerTemplateCmd)

	return operationGroupServerTemplateCmd, nil
}
func makeOperationGroupServiceDiscoveryCmd() (*cobra.Command, error) {
	operationGroupServiceDiscoveryCmd := &cobra.Command{
		Use:  "service_discovery",
		Long: ``,
	}

	operationCreateAWSRegionCmd, err := makeOperationServiceDiscoveryCreateAWSRegionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceDiscoveryCmd.AddCommand(operationCreateAWSRegionCmd)

	operationCreateConsulCmd, err := makeOperationServiceDiscoveryCreateConsulCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceDiscoveryCmd.AddCommand(operationCreateConsulCmd)

	operationDeleteAWSRegionCmd, err := makeOperationServiceDiscoveryDeleteAWSRegionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceDiscoveryCmd.AddCommand(operationDeleteAWSRegionCmd)

	operationDeleteConsulCmd, err := makeOperationServiceDiscoveryDeleteConsulCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceDiscoveryCmd.AddCommand(operationDeleteConsulCmd)

	operationGetAWSRegionCmd, err := makeOperationServiceDiscoveryGetAWSRegionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceDiscoveryCmd.AddCommand(operationGetAWSRegionCmd)

	operationGetAWSRegionsCmd, err := makeOperationServiceDiscoveryGetAWSRegionsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceDiscoveryCmd.AddCommand(operationGetAWSRegionsCmd)

	operationGetConsulCmd, err := makeOperationServiceDiscoveryGetConsulCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceDiscoveryCmd.AddCommand(operationGetConsulCmd)

	operationGetConsulsCmd, err := makeOperationServiceDiscoveryGetConsulsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceDiscoveryCmd.AddCommand(operationGetConsulsCmd)

	operationReplaceAWSRegionCmd, err := makeOperationServiceDiscoveryReplaceAWSRegionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceDiscoveryCmd.AddCommand(operationReplaceAWSRegionCmd)

	operationReplaceConsulCmd, err := makeOperationServiceDiscoveryReplaceConsulCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceDiscoveryCmd.AddCommand(operationReplaceConsulCmd)

	return operationGroupServiceDiscoveryCmd, nil
}
func makeOperationGroupSitesCmd() (*cobra.Command, error) {
	operationGroupSitesCmd := &cobra.Command{
		Use:  "sites",
		Long: ``,
	}

	operationCreateSiteCmd, err := makeOperationSitesCreateSiteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSitesCmd.AddCommand(operationCreateSiteCmd)

	operationDeleteSiteCmd, err := makeOperationSitesDeleteSiteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSitesCmd.AddCommand(operationDeleteSiteCmd)

	operationGetSiteCmd, err := makeOperationSitesGetSiteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSitesCmd.AddCommand(operationGetSiteCmd)

	operationGetSitesCmd, err := makeOperationSitesGetSitesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSitesCmd.AddCommand(operationGetSitesCmd)

	operationReplaceSiteCmd, err := makeOperationSitesReplaceSiteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSitesCmd.AddCommand(operationReplaceSiteCmd)

	return operationGroupSitesCmd, nil
}
func makeOperationGroupSpecificationCmd() (*cobra.Command, error) {
	operationGroupSpecificationCmd := &cobra.Command{
		Use:  "specification",
		Long: ``,
	}

	operationGetSpecificationCmd, err := makeOperationSpecificationGetSpecificationCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpecificationCmd.AddCommand(operationGetSpecificationCmd)

	return operationGroupSpecificationCmd, nil
}
func makeOperationGroupSpecificationOpenapiv3Cmd() (*cobra.Command, error) {
	operationGroupSpecificationOpenapiv3Cmd := &cobra.Command{
		Use:  "specification_openapiv3",
		Long: ``,
	}

	operationGetOpenapiv3SpecificationCmd, err := makeOperationSpecificationOpenapiv3GetOpenapiv3SpecificationCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpecificationOpenapiv3Cmd.AddCommand(operationGetOpenapiv3SpecificationCmd)

	return operationGroupSpecificationOpenapiv3Cmd, nil
}
func makeOperationGroupSpoeCmd() (*cobra.Command, error) {
	operationGroupSpoeCmd := &cobra.Command{
		Use:  "spoe",
		Long: ``,
	}

	operationCreateSpoeCmd, err := makeOperationSpoeCreateSpoeCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationCreateSpoeCmd)

	operationCreateSpoeAgentCmd, err := makeOperationSpoeCreateSpoeAgentCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationCreateSpoeAgentCmd)

	operationCreateSpoeGroupCmd, err := makeOperationSpoeCreateSpoeGroupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationCreateSpoeGroupCmd)

	operationCreateSpoeMessageCmd, err := makeOperationSpoeCreateSpoeMessageCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationCreateSpoeMessageCmd)

	operationCreateSpoeScopeCmd, err := makeOperationSpoeCreateSpoeScopeCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationCreateSpoeScopeCmd)

	operationDeleteSpoeAgentCmd, err := makeOperationSpoeDeleteSpoeAgentCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationDeleteSpoeAgentCmd)

	operationDeleteSpoeFileCmd, err := makeOperationSpoeDeleteSpoeFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationDeleteSpoeFileCmd)

	operationDeleteSpoeGroupCmd, err := makeOperationSpoeDeleteSpoeGroupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationDeleteSpoeGroupCmd)

	operationDeleteSpoeMessageCmd, err := makeOperationSpoeDeleteSpoeMessageCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationDeleteSpoeMessageCmd)

	operationDeleteSpoeScopeCmd, err := makeOperationSpoeDeleteSpoeScopeCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationDeleteSpoeScopeCmd)

	operationGetAllSpoeFilesCmd, err := makeOperationSpoeGetAllSpoeFilesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationGetAllSpoeFilesCmd)

	operationGetOneSpoeFileCmd, err := makeOperationSpoeGetOneSpoeFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationGetOneSpoeFileCmd)

	operationGetSpoeAgentCmd, err := makeOperationSpoeGetSpoeAgentCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationGetSpoeAgentCmd)

	operationGetSpoeAgentsCmd, err := makeOperationSpoeGetSpoeAgentsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationGetSpoeAgentsCmd)

	operationGetSpoeConfigurationVersionCmd, err := makeOperationSpoeGetSpoeConfigurationVersionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationGetSpoeConfigurationVersionCmd)

	operationGetSpoeGroupCmd, err := makeOperationSpoeGetSpoeGroupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationGetSpoeGroupCmd)

	operationGetSpoeGroupsCmd, err := makeOperationSpoeGetSpoeGroupsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationGetSpoeGroupsCmd)

	operationGetSpoeMessageCmd, err := makeOperationSpoeGetSpoeMessageCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationGetSpoeMessageCmd)

	operationGetSpoeMessagesCmd, err := makeOperationSpoeGetSpoeMessagesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationGetSpoeMessagesCmd)

	operationGetSpoeScopeCmd, err := makeOperationSpoeGetSpoeScopeCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationGetSpoeScopeCmd)

	operationGetSpoeScopesCmd, err := makeOperationSpoeGetSpoeScopesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationGetSpoeScopesCmd)

	operationReplaceSpoeAgentCmd, err := makeOperationSpoeReplaceSpoeAgentCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationReplaceSpoeAgentCmd)

	operationReplaceSpoeGroupCmd, err := makeOperationSpoeReplaceSpoeGroupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationReplaceSpoeGroupCmd)

	operationReplaceSpoeMessageCmd, err := makeOperationSpoeReplaceSpoeMessageCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeCmd.AddCommand(operationReplaceSpoeMessageCmd)

	return operationGroupSpoeCmd, nil
}
func makeOperationGroupSpoeTransactionsCmd() (*cobra.Command, error) {
	operationGroupSpoeTransactionsCmd := &cobra.Command{
		Use:  "spoe_transactions",
		Long: ``,
	}

	operationCommitSpoeTransactionCmd, err := makeOperationSpoeTransactionsCommitSpoeTransactionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeTransactionsCmd.AddCommand(operationCommitSpoeTransactionCmd)

	operationDeleteSpoeTransactionCmd, err := makeOperationSpoeTransactionsDeleteSpoeTransactionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeTransactionsCmd.AddCommand(operationDeleteSpoeTransactionCmd)

	operationGetSpoeTransactionCmd, err := makeOperationSpoeTransactionsGetSpoeTransactionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeTransactionsCmd.AddCommand(operationGetSpoeTransactionCmd)

	operationGetSpoeTransactionsCmd, err := makeOperationSpoeTransactionsGetSpoeTransactionsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeTransactionsCmd.AddCommand(operationGetSpoeTransactionsCmd)

	operationStartSpoeTransactionCmd, err := makeOperationSpoeTransactionsStartSpoeTransactionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSpoeTransactionsCmd.AddCommand(operationStartSpoeTransactionCmd)

	return operationGroupSpoeTransactionsCmd, nil
}
func makeOperationGroupStatsCmd() (*cobra.Command, error) {
	operationGroupStatsCmd := &cobra.Command{
		Use:  "stats",
		Long: ``,
	}

	operationGetStatsCmd, err := makeOperationStatsGetStatsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStatsCmd.AddCommand(operationGetStatsCmd)

	return operationGroupStatsCmd, nil
}
func makeOperationGroupStickRuleCmd() (*cobra.Command, error) {
	operationGroupStickRuleCmd := &cobra.Command{
		Use:  "stick_rule",
		Long: ``,
	}

	operationCreateStickRuleCmd, err := makeOperationStickRuleCreateStickRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStickRuleCmd.AddCommand(operationCreateStickRuleCmd)

	operationDeleteStickRuleCmd, err := makeOperationStickRuleDeleteStickRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStickRuleCmd.AddCommand(operationDeleteStickRuleCmd)

	operationGetStickRuleCmd, err := makeOperationStickRuleGetStickRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStickRuleCmd.AddCommand(operationGetStickRuleCmd)

	operationGetStickRulesCmd, err := makeOperationStickRuleGetStickRulesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStickRuleCmd.AddCommand(operationGetStickRulesCmd)

	operationReplaceStickRuleCmd, err := makeOperationStickRuleReplaceStickRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStickRuleCmd.AddCommand(operationReplaceStickRuleCmd)

	return operationGroupStickRuleCmd, nil
}
func makeOperationGroupStickTableCmd() (*cobra.Command, error) {
	operationGroupStickTableCmd := &cobra.Command{
		Use:  "stick_table",
		Long: ``,
	}

	operationGetStickTableCmd, err := makeOperationStickTableGetStickTableCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStickTableCmd.AddCommand(operationGetStickTableCmd)

	operationGetStickTableEntriesCmd, err := makeOperationStickTableGetStickTableEntriesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStickTableCmd.AddCommand(operationGetStickTableEntriesCmd)

	operationGetStickTablesCmd, err := makeOperationStickTableGetStickTablesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStickTableCmd.AddCommand(operationGetStickTablesCmd)

	operationSetStickTableEntriesCmd, err := makeOperationStickTableSetStickTableEntriesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStickTableCmd.AddCommand(operationSetStickTableEntriesCmd)

	return operationGroupStickTableCmd, nil
}
func makeOperationGroupStorageCmd() (*cobra.Command, error) {
	operationGroupStorageCmd := &cobra.Command{
		Use:  "storage",
		Long: ``,
	}

	operationCreateStorageGeneralFileCmd, err := makeOperationStorageCreateStorageGeneralFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationCreateStorageGeneralFileCmd)

	operationCreateStorageMapFileCmd, err := makeOperationStorageCreateStorageMapFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationCreateStorageMapFileCmd)

	operationCreateStorageSSLCertificateCmd, err := makeOperationStorageCreateStorageSSLCertificateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationCreateStorageSSLCertificateCmd)

	operationDeleteStorageGeneralFileCmd, err := makeOperationStorageDeleteStorageGeneralFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationDeleteStorageGeneralFileCmd)

	operationDeleteStorageMapCmd, err := makeOperationStorageDeleteStorageMapCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationDeleteStorageMapCmd)

	operationDeleteStorageSSLCertificateCmd, err := makeOperationStorageDeleteStorageSSLCertificateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationDeleteStorageSSLCertificateCmd)

	operationGetAllStorageGeneralFilesCmd, err := makeOperationStorageGetAllStorageGeneralFilesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationGetAllStorageGeneralFilesCmd)

	operationGetAllStorageMapFilesCmd, err := makeOperationStorageGetAllStorageMapFilesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationGetAllStorageMapFilesCmd)

	operationGetAllStorageSSLCertificatesCmd, err := makeOperationStorageGetAllStorageSSLCertificatesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationGetAllStorageSSLCertificatesCmd)

	operationGetOneStorageGeneralFileCmd, err := makeOperationStorageGetOneStorageGeneralFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationGetOneStorageGeneralFileCmd)

	operationGetOneStorageMapCmd, err := makeOperationStorageGetOneStorageMapCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationGetOneStorageMapCmd)

	operationGetOneStorageSSLCertificateCmd, err := makeOperationStorageGetOneStorageSSLCertificateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationGetOneStorageSSLCertificateCmd)

	operationReplaceStorageGeneralFileCmd, err := makeOperationStorageReplaceStorageGeneralFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationReplaceStorageGeneralFileCmd)

	operationReplaceStorageMapFileCmd, err := makeOperationStorageReplaceStorageMapFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationReplaceStorageMapFileCmd)

	operationReplaceStorageSSLCertificateCmd, err := makeOperationStorageReplaceStorageSSLCertificateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStorageCmd.AddCommand(operationReplaceStorageSSLCertificateCmd)

	return operationGroupStorageCmd, nil
}
func makeOperationGroupTCPCheckCmd() (*cobra.Command, error) {
	operationGroupTCPCheckCmd := &cobra.Command{
		Use:  "tcp_check",
		Long: ``,
	}

	operationCreateTCPCheckCmd, err := makeOperationTCPCheckCreateTCPCheckCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPCheckCmd.AddCommand(operationCreateTCPCheckCmd)

	operationDeleteTCPCheckCmd, err := makeOperationTCPCheckDeleteTCPCheckCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPCheckCmd.AddCommand(operationDeleteTCPCheckCmd)

	operationGetTCPCheckCmd, err := makeOperationTCPCheckGetTCPCheckCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPCheckCmd.AddCommand(operationGetTCPCheckCmd)

	operationGetTCPChecksCmd, err := makeOperationTCPCheckGetTCPChecksCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPCheckCmd.AddCommand(operationGetTCPChecksCmd)

	operationReplaceTCPCheckCmd, err := makeOperationTCPCheckReplaceTCPCheckCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPCheckCmd.AddCommand(operationReplaceTCPCheckCmd)

	return operationGroupTCPCheckCmd, nil
}
func makeOperationGroupTCPRequestRuleCmd() (*cobra.Command, error) {
	operationGroupTCPRequestRuleCmd := &cobra.Command{
		Use:  "tcp_request_rule",
		Long: ``,
	}

	operationCreateTCPRequestRuleCmd, err := makeOperationTCPRequestRuleCreateTCPRequestRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPRequestRuleCmd.AddCommand(operationCreateTCPRequestRuleCmd)

	operationDeleteTCPRequestRuleCmd, err := makeOperationTCPRequestRuleDeleteTCPRequestRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPRequestRuleCmd.AddCommand(operationDeleteTCPRequestRuleCmd)

	operationGetTCPRequestRuleCmd, err := makeOperationTCPRequestRuleGetTCPRequestRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPRequestRuleCmd.AddCommand(operationGetTCPRequestRuleCmd)

	operationGetTCPRequestRulesCmd, err := makeOperationTCPRequestRuleGetTCPRequestRulesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPRequestRuleCmd.AddCommand(operationGetTCPRequestRulesCmd)

	operationReplaceTCPRequestRuleCmd, err := makeOperationTCPRequestRuleReplaceTCPRequestRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPRequestRuleCmd.AddCommand(operationReplaceTCPRequestRuleCmd)

	return operationGroupTCPRequestRuleCmd, nil
}
func makeOperationGroupTCPResponseRuleCmd() (*cobra.Command, error) {
	operationGroupTCPResponseRuleCmd := &cobra.Command{
		Use:  "tcp_response_rule",
		Long: ``,
	}

	operationCreateTCPResponseRuleCmd, err := makeOperationTCPResponseRuleCreateTCPResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPResponseRuleCmd.AddCommand(operationCreateTCPResponseRuleCmd)

	operationDeleteTCPResponseRuleCmd, err := makeOperationTCPResponseRuleDeleteTCPResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPResponseRuleCmd.AddCommand(operationDeleteTCPResponseRuleCmd)

	operationGetTCPResponseRuleCmd, err := makeOperationTCPResponseRuleGetTCPResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPResponseRuleCmd.AddCommand(operationGetTCPResponseRuleCmd)

	operationGetTCPResponseRulesCmd, err := makeOperationTCPResponseRuleGetTCPResponseRulesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPResponseRuleCmd.AddCommand(operationGetTCPResponseRulesCmd)

	operationReplaceTCPResponseRuleCmd, err := makeOperationTCPResponseRuleReplaceTCPResponseRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTCPResponseRuleCmd.AddCommand(operationReplaceTCPResponseRuleCmd)

	return operationGroupTCPResponseRuleCmd, nil
}
func makeOperationGroupTransactionsCmd() (*cobra.Command, error) {
	operationGroupTransactionsCmd := &cobra.Command{
		Use:  "transactions",
		Long: ``,
	}

	operationCommitTransactionCmd, err := makeOperationTransactionsCommitTransactionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTransactionsCmd.AddCommand(operationCommitTransactionCmd)

	operationDeleteTransactionCmd, err := makeOperationTransactionsDeleteTransactionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTransactionsCmd.AddCommand(operationDeleteTransactionCmd)

	operationGetTransactionCmd, err := makeOperationTransactionsGetTransactionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTransactionsCmd.AddCommand(operationGetTransactionCmd)

	operationGetTransactionsCmd, err := makeOperationTransactionsGetTransactionsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTransactionsCmd.AddCommand(operationGetTransactionsCmd)

	operationStartTransactionCmd, err := makeOperationTransactionsStartTransactionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTransactionsCmd.AddCommand(operationStartTransactionCmd)

	return operationGroupTransactionsCmd, nil
}
func makeOperationGroupUserCmd() (*cobra.Command, error) {
	operationGroupUserCmd := &cobra.Command{
		Use:  "user",
		Long: ``,
	}

	operationCreateUserCmd, err := makeOperationUserCreateUserCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationCreateUserCmd)

	operationDeleteUserCmd, err := makeOperationUserDeleteUserCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationDeleteUserCmd)

	operationGetUserCmd, err := makeOperationUserGetUserCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationGetUserCmd)

	operationGetUsersCmd, err := makeOperationUserGetUsersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationGetUsersCmd)

	operationReplaceUserCmd, err := makeOperationUserReplaceUserCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationReplaceUserCmd)

	return operationGroupUserCmd, nil
}
func makeOperationGroupUserlistCmd() (*cobra.Command, error) {
	operationGroupUserlistCmd := &cobra.Command{
		Use:  "userlist",
		Long: ``,
	}

	operationCreateUserlistCmd, err := makeOperationUserlistCreateUserlistCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserlistCmd.AddCommand(operationCreateUserlistCmd)

	operationDeleteUserlistCmd, err := makeOperationUserlistDeleteUserlistCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserlistCmd.AddCommand(operationDeleteUserlistCmd)

	operationGetUserlistCmd, err := makeOperationUserlistGetUserlistCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserlistCmd.AddCommand(operationGetUserlistCmd)

	operationGetUserlistsCmd, err := makeOperationUserlistGetUserlistsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserlistCmd.AddCommand(operationGetUserlistsCmd)

	return operationGroupUserlistCmd, nil
}
