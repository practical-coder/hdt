// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/haproxytech/models"

	"github.com/spf13/cobra"
)

// Schema cli for Site

// register flags to command
func registerModelSiteFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSiteFarms(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteService(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSiteFarms(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: farms []*SiteFarm array type is not supported by go-swagger cli yet

	return nil
}

func registerSiteName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerSiteService(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var serviceFlagName string
	if cmdPrefix == "" {
		serviceFlagName = "service"
	} else {
		serviceFlagName = fmt.Sprintf("%v.service", cmdPrefix)
	}

	if err := registerModelSiteServiceFlags(depth+1, serviceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSiteFlags(depth int, m *models.Site, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, farmsAdded := retrieveSiteFarmsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || farmsAdded

	err, nameAdded := retrieveSiteNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, serviceAdded := retrieveSiteServiceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceAdded

	return nil, retAdded
}

func retrieveSiteFarmsFlags(depth int, m *models.Site, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	farmsFlagName := fmt.Sprintf("%v.farms", cmdPrefix)
	if cmd.Flags().Changed(farmsFlagName) {
		// warning: farms array type []*SiteFarm is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSiteNameFlags(depth int, m *models.Site, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteServiceFlags(depth int, m *models.Site, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceFlagName := fmt.Sprintf("%v.service", cmdPrefix)
	if cmd.Flags().Changed(serviceFlagName) {
		// info: complex object service SiteService is retrieved outside this Changed() block
	}
	serviceFlagValue := m.Service
	if swag.IsZero(serviceFlagValue) {
		serviceFlagValue = &models.SiteService{}
	}

	err, serviceAdded := retrieveModelSiteServiceFlags(depth+1, serviceFlagValue, serviceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceAdded
	if serviceAdded {
		m.Service = serviceFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for SiteFarm

// register flags to command
func registerModelSiteFarmFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSiteFarmBalance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteFarmCond(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteFarmCondTest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteFarmForwardfor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteFarmMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteFarmName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteFarmServers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteFarmUseAs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSiteFarmBalance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var balanceFlagName string
	if cmdPrefix == "" {
		balanceFlagName = "balance"
	} else {
		balanceFlagName = fmt.Sprintf("%v.balance", cmdPrefix)
	}

	if err := registerModelBalanceFlags(depth+1, balanceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSiteFarmCond(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condDescription := `Enum: ["if","unless"]. `

	var condFlagName string
	if cmdPrefix == "" {
		condFlagName = "cond"
	} else {
		condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
	}

	var condFlagDefault string

	_ = cmd.PersistentFlags().String(condFlagName, condFlagDefault, condDescription)

	if err := cmd.RegisterFlagCompletionFunc(condFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["if","unless"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSiteFarmCondTest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condTestDescription := ``

	var condTestFlagName string
	if cmdPrefix == "" {
		condTestFlagName = "cond_test"
	} else {
		condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
	}

	var condTestFlagDefault string

	_ = cmd.PersistentFlags().String(condTestFlagName, condTestFlagDefault, condTestDescription)

	return nil
}

func registerSiteFarmForwardfor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var forwardforFlagName string
	if cmdPrefix == "" {
		forwardforFlagName = "forwardfor"
	} else {
		forwardforFlagName = fmt.Sprintf("%v.forwardfor", cmdPrefix)
	}

	if err := registerModelForwardforFlags(depth+1, forwardforFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSiteFarmMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `Enum: ["http","tcp"]. `

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	if err := cmd.RegisterFlagCompletionFunc(modeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["http","tcp"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSiteFarmName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerSiteFarmServers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: servers []*Server array type is not supported by go-swagger cli yet

	return nil
}

func registerSiteFarmUseAs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useAsDescription := `Enum: ["default","conditional"]. Required. `

	var useAsFlagName string
	if cmdPrefix == "" {
		useAsFlagName = "use_as"
	} else {
		useAsFlagName = fmt.Sprintf("%v.use_as", cmdPrefix)
	}

	var useAsFlagDefault string

	_ = cmd.PersistentFlags().String(useAsFlagName, useAsFlagDefault, useAsDescription)

	if err := cmd.RegisterFlagCompletionFunc(useAsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["default","conditional"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSiteFarmFlags(depth int, m *models.SiteFarm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, balanceAdded := retrieveSiteFarmBalanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || balanceAdded

	err, condAdded := retrieveSiteFarmCondFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condAdded

	err, condTestAdded := retrieveSiteFarmCondTestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condTestAdded

	err, forwardforAdded := retrieveSiteFarmForwardforFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forwardforAdded

	err, modeAdded := retrieveSiteFarmModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, nameAdded := retrieveSiteFarmNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, serversAdded := retrieveSiteFarmServersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serversAdded

	err, useAsAdded := retrieveSiteFarmUseAsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useAsAdded

	return nil, retAdded
}

func retrieveSiteFarmBalanceFlags(depth int, m *models.SiteFarm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	balanceFlagName := fmt.Sprintf("%v.balance", cmdPrefix)
	if cmd.Flags().Changed(balanceFlagName) {
		// info: complex object balance Balance is retrieved outside this Changed() block
	}
	balanceFlagValue := m.Balance
	if swag.IsZero(balanceFlagValue) {
		balanceFlagValue = &models.Balance{}
	}

	err, balanceAdded := retrieveModelBalanceFlags(depth+1, balanceFlagValue, balanceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || balanceAdded
	if balanceAdded {
		m.Balance = balanceFlagValue
	}

	return nil, retAdded
}

func retrieveSiteFarmCondFlags(depth int, m *models.SiteFarm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condFlagName := fmt.Sprintf("%v.cond", cmdPrefix)
	if cmd.Flags().Changed(condFlagName) {

		var condFlagName string
		if cmdPrefix == "" {
			condFlagName = "cond"
		} else {
			condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
		}

		condFlagValue, err := cmd.Flags().GetString(condFlagName)
		if err != nil {
			return err, false
		}
		m.Cond = condFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteFarmCondTestFlags(depth int, m *models.SiteFarm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condTestFlagName := fmt.Sprintf("%v.cond_test", cmdPrefix)
	if cmd.Flags().Changed(condTestFlagName) {

		var condTestFlagName string
		if cmdPrefix == "" {
			condTestFlagName = "cond_test"
		} else {
			condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
		}

		condTestFlagValue, err := cmd.Flags().GetString(condTestFlagName)
		if err != nil {
			return err, false
		}
		m.CondTest = condTestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteFarmForwardforFlags(depth int, m *models.SiteFarm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forwardforFlagName := fmt.Sprintf("%v.forwardfor", cmdPrefix)
	if cmd.Flags().Changed(forwardforFlagName) {
		// info: complex object forwardfor Forwardfor is retrieved outside this Changed() block
	}
	forwardforFlagValue := m.Forwardfor
	if swag.IsZero(forwardforFlagValue) {
		forwardforFlagValue = &models.Forwardfor{}
	}

	err, forwardforAdded := retrieveModelForwardforFlags(depth+1, forwardforFlagValue, forwardforFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forwardforAdded
	if forwardforAdded {
		m.Forwardfor = forwardforFlagValue
	}

	return nil, retAdded
}

func retrieveSiteFarmModeFlags(depth int, m *models.SiteFarm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteFarmNameFlags(depth int, m *models.SiteFarm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteFarmServersFlags(depth int, m *models.SiteFarm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serversFlagName := fmt.Sprintf("%v.servers", cmdPrefix)
	if cmd.Flags().Changed(serversFlagName) {
		// warning: servers array type []*Server is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSiteFarmUseAsFlags(depth int, m *models.SiteFarm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useAsFlagName := fmt.Sprintf("%v.use_as", cmdPrefix)
	if cmd.Flags().Changed(useAsFlagName) {

		var useAsFlagName string
		if cmdPrefix == "" {
			useAsFlagName = "use_as"
		} else {
			useAsFlagName = fmt.Sprintf("%v.use_as", cmdPrefix)
		}

		useAsFlagValue, err := cmd.Flags().GetString(useAsFlagName)
		if err != nil {
			return err, false
		}
		m.UseAs = useAsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SiteService

// register flags to command
func registerModelSiteServiceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSiteServiceHTTPConnectionMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteServiceListeners(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteServiceMaxconn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteServiceMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSiteServiceHTTPConnectionMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpConnectionModeDescription := `Enum: ["http-tunnel","httpclose","forced-close","http-server-close","http-keep-alive"]. `

	var httpConnectionModeFlagName string
	if cmdPrefix == "" {
		httpConnectionModeFlagName = "http_connection_mode"
	} else {
		httpConnectionModeFlagName = fmt.Sprintf("%v.http_connection_mode", cmdPrefix)
	}

	var httpConnectionModeFlagDefault string

	_ = cmd.PersistentFlags().String(httpConnectionModeFlagName, httpConnectionModeFlagDefault, httpConnectionModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpConnectionModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["http-tunnel","httpclose","forced-close","http-server-close","http-keep-alive"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSiteServiceListeners(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: listeners []*Bind array type is not supported by go-swagger cli yet

	return nil
}

func registerSiteServiceMaxconn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxconnDescription := ``

	var maxconnFlagName string
	if cmdPrefix == "" {
		maxconnFlagName = "maxconn"
	} else {
		maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
	}

	var maxconnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxconnFlagName, maxconnFlagDefault, maxconnDescription)

	return nil
}

func registerSiteServiceMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `Enum: ["http","tcp"]. `

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	if err := cmd.RegisterFlagCompletionFunc(modeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["http","tcp"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSiteServiceFlags(depth int, m *models.SiteService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, httpConnectionModeAdded := retrieveSiteServiceHTTPConnectionModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpConnectionModeAdded

	err, listenersAdded := retrieveSiteServiceListenersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || listenersAdded

	err, maxconnAdded := retrieveSiteServiceMaxconnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxconnAdded

	err, modeAdded := retrieveSiteServiceModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	return nil, retAdded
}

func retrieveSiteServiceHTTPConnectionModeFlags(depth int, m *models.SiteService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpConnectionModeFlagName := fmt.Sprintf("%v.http_connection_mode", cmdPrefix)
	if cmd.Flags().Changed(httpConnectionModeFlagName) {

		var httpConnectionModeFlagName string
		if cmdPrefix == "" {
			httpConnectionModeFlagName = "http_connection_mode"
		} else {
			httpConnectionModeFlagName = fmt.Sprintf("%v.http_connection_mode", cmdPrefix)
		}

		httpConnectionModeFlagValue, err := cmd.Flags().GetString(httpConnectionModeFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPConnectionMode = httpConnectionModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteServiceListenersFlags(depth int, m *models.SiteService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	listenersFlagName := fmt.Sprintf("%v.listeners", cmdPrefix)
	if cmd.Flags().Changed(listenersFlagName) {
		// warning: listeners array type []*Bind is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSiteServiceMaxconnFlags(depth int, m *models.SiteService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxconnFlagName := fmt.Sprintf("%v.maxconn", cmdPrefix)
	if cmd.Flags().Changed(maxconnFlagName) {

		var maxconnFlagName string
		if cmdPrefix == "" {
			maxconnFlagName = "maxconn"
		} else {
			maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
		}

		maxconnFlagValue, err := cmd.Flags().GetInt64(maxconnFlagName)
		if err != nil {
			return err, false
		}
		m.Maxconn = &maxconnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteServiceModeFlags(depth int, m *models.SiteService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
