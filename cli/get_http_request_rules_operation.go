// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdt/client/http_request_rule"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationHTTPRequestRuleGetHTTPRequestRulesCmd returns a cmd to handle operation getHttpRequestRules
func makeOperationHTTPRequestRuleGetHTTPRequestRulesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getHTTPRequestRules",
		Short: `Returns all HTTP Request Rules that are configured in specified parent.`,
		RunE:  runOperationHTTPRequestRuleGetHTTPRequestRules,
	}

	if err := registerOperationHTTPRequestRuleGetHTTPRequestRulesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationHTTPRequestRuleGetHTTPRequestRules uses cmd flags to call endpoint api
func runOperationHTTPRequestRuleGetHTTPRequestRules(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := http_request_rule.NewGetHTTPRequestRulesParams()
	if err, _ := retrieveOperationHTTPRequestRuleGetHTTPRequestRulesParentNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationHTTPRequestRuleGetHTTPRequestRulesParentTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationHTTPRequestRuleGetHTTPRequestRulesTransactionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationHTTPRequestRuleGetHTTPRequestRulesResult(appCli.HTTPRequestRule.GetHTTPRequestRules(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationHTTPRequestRuleGetHTTPRequestRulesParamFlags registers all flags needed to fill params
func registerOperationHTTPRequestRuleGetHTTPRequestRulesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationHTTPRequestRuleGetHTTPRequestRulesParentNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationHTTPRequestRuleGetHTTPRequestRulesParentTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationHTTPRequestRuleGetHTTPRequestRulesTransactionIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationHTTPRequestRuleGetHTTPRequestRulesParentNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	parentNameDescription := `Required. Parent name`

	var parentNameFlagName string
	if cmdPrefix == "" {
		parentNameFlagName = "parent_name"
	} else {
		parentNameFlagName = fmt.Sprintf("%v.parent_name", cmdPrefix)
	}

	var parentNameFlagDefault string

	_ = cmd.PersistentFlags().String(parentNameFlagName, parentNameFlagDefault, parentNameDescription)

	return nil
}
func registerOperationHTTPRequestRuleGetHTTPRequestRulesParentTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	parentTypeDescription := `Enum: ["frontend","backend"]. Required. Parent type`

	var parentTypeFlagName string
	if cmdPrefix == "" {
		parentTypeFlagName = "parent_type"
	} else {
		parentTypeFlagName = fmt.Sprintf("%v.parent_type", cmdPrefix)
	}

	var parentTypeFlagDefault string

	_ = cmd.PersistentFlags().String(parentTypeFlagName, parentTypeFlagDefault, parentTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(parentTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["frontend","backend"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}
func registerOperationHTTPRequestRuleGetHTTPRequestRulesTransactionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	transactionIdDescription := `ID of the transaction where we want to add the operation. Cannot be used when version is specified.`

	var transactionIdFlagName string
	if cmdPrefix == "" {
		transactionIdFlagName = "transaction_id"
	} else {
		transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
	}

	var transactionIdFlagDefault string

	_ = cmd.PersistentFlags().String(transactionIdFlagName, transactionIdFlagDefault, transactionIdDescription)

	return nil
}

func retrieveOperationHTTPRequestRuleGetHTTPRequestRulesParentNameFlag(m *http_request_rule.GetHTTPRequestRulesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("parent_name") {

		var parentNameFlagName string
		if cmdPrefix == "" {
			parentNameFlagName = "parent_name"
		} else {
			parentNameFlagName = fmt.Sprintf("%v.parent_name", cmdPrefix)
		}

		parentNameFlagValue, err := cmd.Flags().GetString(parentNameFlagName)
		if err != nil {
			return err, false
		}
		m.ParentName = parentNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationHTTPRequestRuleGetHTTPRequestRulesParentTypeFlag(m *http_request_rule.GetHTTPRequestRulesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("parent_type") {

		var parentTypeFlagName string
		if cmdPrefix == "" {
			parentTypeFlagName = "parent_type"
		} else {
			parentTypeFlagName = fmt.Sprintf("%v.parent_type", cmdPrefix)
		}

		parentTypeFlagValue, err := cmd.Flags().GetString(parentTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ParentType = parentTypeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationHTTPRequestRuleGetHTTPRequestRulesTransactionIDFlag(m *http_request_rule.GetHTTPRequestRulesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("transaction_id") {

		var transactionIdFlagName string
		if cmdPrefix == "" {
			transactionIdFlagName = "transaction_id"
		} else {
			transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
		}

		transactionIdFlagValue, err := cmd.Flags().GetString(transactionIdFlagName)
		if err != nil {
			return err, false
		}
		m.TransactionID = &transactionIdFlagValue

	}
	return nil, retAdded
}

// parseOperationHTTPRequestRuleGetHTTPRequestRulesResult parses request result and return the string content
func parseOperationHTTPRequestRuleGetHTTPRequestRulesResult(resp0 *http_request_rule.GetHTTPRequestRulesOK, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*http_request_rule.GetHTTPRequestRulesDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*http_request_rule.GetHTTPRequestRulesOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelGetHTTPRequestRulesOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGetHTTPRequestRulesOKBodyVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGetHTTPRequestRulesOKBodyData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGetHTTPRequestRulesOKBodyVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "_version"
	} else {
		versionFlagName = fmt.Sprintf("%v._version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func registerGetHTTPRequestRulesOKBodyData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: data models.HTTPRequestRules array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGetHTTPRequestRulesOKBodyFlags(depth int, m *http_request_rule.GetHTTPRequestRulesOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, versionAdded := retrieveGetHTTPRequestRulesOKBodyVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	err, dataAdded := retrieveGetHTTPRequestRulesOKBodyDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	return nil, retAdded
}

func retrieveGetHTTPRequestRulesOKBodyVersionFlags(depth int, m *http_request_rule.GetHTTPRequestRulesOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v._version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "_version"
		} else {
			versionFlagName = fmt.Sprintf("%v._version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGetHTTPRequestRulesOKBodyDataFlags(depth int, m *http_request_rule.GetHTTPRequestRulesOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {
		// warning: data array type models.HTTPRequestRules is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
