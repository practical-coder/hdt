// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdt/client/peer_entry"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationPeerEntryGetPeerEntriesCmd returns a cmd to handle operation getPeerEntries
func makeOperationPeerEntryGetPeerEntriesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getPeerEntries",
		Short: `Returns an array of all peer_entries that are configured in specified peer section.`,
		RunE:  runOperationPeerEntryGetPeerEntries,
	}

	if err := registerOperationPeerEntryGetPeerEntriesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPeerEntryGetPeerEntries uses cmd flags to call endpoint api
func runOperationPeerEntryGetPeerEntries(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := peer_entry.NewGetPeerEntriesParams()
	if err, _ := retrieveOperationPeerEntryGetPeerEntriesPeerSectionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPeerEntryGetPeerEntriesTransactionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationPeerEntryGetPeerEntriesResult(appCli.PeerEntry.GetPeerEntries(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationPeerEntryGetPeerEntriesParamFlags registers all flags needed to fill params
func registerOperationPeerEntryGetPeerEntriesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPeerEntryGetPeerEntriesPeerSectionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPeerEntryGetPeerEntriesTransactionIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPeerEntryGetPeerEntriesPeerSectionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	peerSectionDescription := `Required. Parent peer section name`

	var peerSectionFlagName string
	if cmdPrefix == "" {
		peerSectionFlagName = "peer_section"
	} else {
		peerSectionFlagName = fmt.Sprintf("%v.peer_section", cmdPrefix)
	}

	var peerSectionFlagDefault string

	_ = cmd.PersistentFlags().String(peerSectionFlagName, peerSectionFlagDefault, peerSectionDescription)

	return nil
}
func registerOperationPeerEntryGetPeerEntriesTransactionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	transactionIdDescription := `ID of the transaction where we want to add the operation. Cannot be used when version is specified.`

	var transactionIdFlagName string
	if cmdPrefix == "" {
		transactionIdFlagName = "transaction_id"
	} else {
		transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
	}

	var transactionIdFlagDefault string

	_ = cmd.PersistentFlags().String(transactionIdFlagName, transactionIdFlagDefault, transactionIdDescription)

	return nil
}

func retrieveOperationPeerEntryGetPeerEntriesPeerSectionFlag(m *peer_entry.GetPeerEntriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("peer_section") {

		var peerSectionFlagName string
		if cmdPrefix == "" {
			peerSectionFlagName = "peer_section"
		} else {
			peerSectionFlagName = fmt.Sprintf("%v.peer_section", cmdPrefix)
		}

		peerSectionFlagValue, err := cmd.Flags().GetString(peerSectionFlagName)
		if err != nil {
			return err, false
		}
		m.PeerSection = peerSectionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPeerEntryGetPeerEntriesTransactionIDFlag(m *peer_entry.GetPeerEntriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("transaction_id") {

		var transactionIdFlagName string
		if cmdPrefix == "" {
			transactionIdFlagName = "transaction_id"
		} else {
			transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
		}

		transactionIdFlagValue, err := cmd.Flags().GetString(transactionIdFlagName)
		if err != nil {
			return err, false
		}
		m.TransactionID = &transactionIdFlagValue

	}
	return nil, retAdded
}

// parseOperationPeerEntryGetPeerEntriesResult parses request result and return the string content
func parseOperationPeerEntryGetPeerEntriesResult(resp0 *peer_entry.GetPeerEntriesOK, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*peer_entry.GetPeerEntriesDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*peer_entry.GetPeerEntriesOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelGetPeerEntriesOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGetPeerEntriesOKBodyVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGetPeerEntriesOKBodyData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGetPeerEntriesOKBodyVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "_version"
	} else {
		versionFlagName = fmt.Sprintf("%v._version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func registerGetPeerEntriesOKBodyData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: data models.PeerEntries array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGetPeerEntriesOKBodyFlags(depth int, m *peer_entry.GetPeerEntriesOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, versionAdded := retrieveGetPeerEntriesOKBodyVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	err, dataAdded := retrieveGetPeerEntriesOKBodyDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	return nil, retAdded
}

func retrieveGetPeerEntriesOKBodyVersionFlags(depth int, m *peer_entry.GetPeerEntriesOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v._version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "_version"
		} else {
			versionFlagName = fmt.Sprintf("%v._version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGetPeerEntriesOKBodyDataFlags(depth int, m *peer_entry.GetPeerEntriesOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {
		// warning: data array type models.PeerEntries is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
