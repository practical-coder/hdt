// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/models"
	"github.com/spf13/cobra"
)

// Schema cli for TCPRequestRule

// register flags to command
func registerModelTCPRequestRuleFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTCPRequestRuleAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleCaptureLen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleCaptureSample(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleCond(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleCondTest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleExpr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleGptValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleLuaAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleLuaParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRulePriorityType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleResolveProtocol(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleResolveResolvers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleResolveVar(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleScIncID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleServiceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleSpoeEngineName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleSpoeGroupName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleTrackKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleTrackTable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleVarName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTCPRequestRuleVarScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTCPRequestRuleAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	actionDescription := `Enum: ["accept","capture","do-resolve","expect-netscaler-cip","expect-proxy","reject","sc-inc-gpc0","sc-inc-gpc1","sc-set-gpt0","send-spoe-group","set-dst-port","set-dst","set-priority","set-src","set-var","silent-drop","track-sc0","track-sc1","track-sc2","unset-var","use-service","lua"]. `

	var actionFlagName string
	if cmdPrefix == "" {
		actionFlagName = "action"
	} else {
		actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
	}

	var actionFlagDefault string

	_ = cmd.PersistentFlags().String(actionFlagName, actionFlagDefault, actionDescription)

	if err := cmd.RegisterFlagCompletionFunc(actionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["accept","capture","do-resolve","expect-netscaler-cip","expect-proxy","reject","sc-inc-gpc0","sc-inc-gpc1","sc-set-gpt0","send-spoe-group","set-dst-port","set-dst","set-priority","set-src","set-var","silent-drop","track-sc0","track-sc1","track-sc2","unset-var","use-service","lua"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTCPRequestRuleCaptureLen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	captureLenDescription := ``

	var captureLenFlagName string
	if cmdPrefix == "" {
		captureLenFlagName = "capture_len"
	} else {
		captureLenFlagName = fmt.Sprintf("%v.capture_len", cmdPrefix)
	}

	var captureLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(captureLenFlagName, captureLenFlagDefault, captureLenDescription)

	return nil
}

func registerTCPRequestRuleCaptureSample(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	captureSampleDescription := ``

	var captureSampleFlagName string
	if cmdPrefix == "" {
		captureSampleFlagName = "capture_sample"
	} else {
		captureSampleFlagName = fmt.Sprintf("%v.capture_sample", cmdPrefix)
	}

	var captureSampleFlagDefault string

	_ = cmd.PersistentFlags().String(captureSampleFlagName, captureSampleFlagDefault, captureSampleDescription)

	return nil
}

func registerTCPRequestRuleCond(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condDescription := `Enum: ["if","unless"]. `

	var condFlagName string
	if cmdPrefix == "" {
		condFlagName = "cond"
	} else {
		condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
	}

	var condFlagDefault string

	_ = cmd.PersistentFlags().String(condFlagName, condFlagDefault, condDescription)

	if err := cmd.RegisterFlagCompletionFunc(condFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["if","unless"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTCPRequestRuleCondTest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condTestDescription := ``

	var condTestFlagName string
	if cmdPrefix == "" {
		condTestFlagName = "cond_test"
	} else {
		condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
	}

	var condTestFlagDefault string

	_ = cmd.PersistentFlags().String(condTestFlagName, condTestFlagDefault, condTestDescription)

	return nil
}

func registerTCPRequestRuleExpr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	exprDescription := ``

	var exprFlagName string
	if cmdPrefix == "" {
		exprFlagName = "expr"
	} else {
		exprFlagName = fmt.Sprintf("%v.expr", cmdPrefix)
	}

	var exprFlagDefault string

	_ = cmd.PersistentFlags().String(exprFlagName, exprFlagDefault, exprDescription)

	return nil
}

func registerTCPRequestRuleGptValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gptValueDescription := ``

	var gptValueFlagName string
	if cmdPrefix == "" {
		gptValueFlagName = "gpt_value"
	} else {
		gptValueFlagName = fmt.Sprintf("%v.gpt_value", cmdPrefix)
	}

	var gptValueFlagDefault string

	_ = cmd.PersistentFlags().String(gptValueFlagName, gptValueFlagDefault, gptValueDescription)

	return nil
}

func registerTCPRequestRuleIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	indexDescription := `Required. `

	var indexFlagName string
	if cmdPrefix == "" {
		indexFlagName = "index"
	} else {
		indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
	}

	var indexFlagDefault int64

	_ = cmd.PersistentFlags().Int64(indexFlagName, indexFlagDefault, indexDescription)

	return nil
}

func registerTCPRequestRuleLuaAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaActionDescription := ``

	var luaActionFlagName string
	if cmdPrefix == "" {
		luaActionFlagName = "lua_action"
	} else {
		luaActionFlagName = fmt.Sprintf("%v.lua_action", cmdPrefix)
	}

	var luaActionFlagDefault string

	_ = cmd.PersistentFlags().String(luaActionFlagName, luaActionFlagDefault, luaActionDescription)

	return nil
}

func registerTCPRequestRuleLuaParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaParamsDescription := ``

	var luaParamsFlagName string
	if cmdPrefix == "" {
		luaParamsFlagName = "lua_params"
	} else {
		luaParamsFlagName = fmt.Sprintf("%v.lua_params", cmdPrefix)
	}

	var luaParamsFlagDefault string

	_ = cmd.PersistentFlags().String(luaParamsFlagName, luaParamsFlagDefault, luaParamsDescription)

	return nil
}

func registerTCPRequestRulePriorityType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	priorityTypeDescription := `Enum: ["class","offset"]. `

	var priorityTypeFlagName string
	if cmdPrefix == "" {
		priorityTypeFlagName = "priority_type"
	} else {
		priorityTypeFlagName = fmt.Sprintf("%v.priority_type", cmdPrefix)
	}

	var priorityTypeFlagDefault string

	_ = cmd.PersistentFlags().String(priorityTypeFlagName, priorityTypeFlagDefault, priorityTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(priorityTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["class","offset"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTCPRequestRuleResolveProtocol(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resolveProtocolDescription := `Enum: ["ipv4","ipv6"]. `

	var resolveProtocolFlagName string
	if cmdPrefix == "" {
		resolveProtocolFlagName = "resolve_protocol"
	} else {
		resolveProtocolFlagName = fmt.Sprintf("%v.resolve_protocol", cmdPrefix)
	}

	var resolveProtocolFlagDefault string

	_ = cmd.PersistentFlags().String(resolveProtocolFlagName, resolveProtocolFlagDefault, resolveProtocolDescription)

	if err := cmd.RegisterFlagCompletionFunc(resolveProtocolFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ipv4","ipv6"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTCPRequestRuleResolveResolvers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resolveResolversDescription := ``

	var resolveResolversFlagName string
	if cmdPrefix == "" {
		resolveResolversFlagName = "resolve_resolvers"
	} else {
		resolveResolversFlagName = fmt.Sprintf("%v.resolve_resolvers", cmdPrefix)
	}

	var resolveResolversFlagDefault string

	_ = cmd.PersistentFlags().String(resolveResolversFlagName, resolveResolversFlagDefault, resolveResolversDescription)

	return nil
}

func registerTCPRequestRuleResolveVar(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resolveVarDescription := ``

	var resolveVarFlagName string
	if cmdPrefix == "" {
		resolveVarFlagName = "resolve_var"
	} else {
		resolveVarFlagName = fmt.Sprintf("%v.resolve_var", cmdPrefix)
	}

	var resolveVarFlagDefault string

	_ = cmd.PersistentFlags().String(resolveVarFlagName, resolveVarFlagDefault, resolveVarDescription)

	return nil
}

func registerTCPRequestRuleScIncID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scIncIdDescription := ``

	var scIncIdFlagName string
	if cmdPrefix == "" {
		scIncIdFlagName = "sc_inc_id"
	} else {
		scIncIdFlagName = fmt.Sprintf("%v.sc_inc_id", cmdPrefix)
	}

	var scIncIdFlagDefault string

	_ = cmd.PersistentFlags().String(scIncIdFlagName, scIncIdFlagDefault, scIncIdDescription)

	return nil
}

func registerTCPRequestRuleServiceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serviceNameDescription := ``

	var serviceNameFlagName string
	if cmdPrefix == "" {
		serviceNameFlagName = "service_name"
	} else {
		serviceNameFlagName = fmt.Sprintf("%v.service_name", cmdPrefix)
	}

	var serviceNameFlagDefault string

	_ = cmd.PersistentFlags().String(serviceNameFlagName, serviceNameFlagDefault, serviceNameDescription)

	return nil
}

func registerTCPRequestRuleSpoeEngineName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spoeEngineNameDescription := ``

	var spoeEngineNameFlagName string
	if cmdPrefix == "" {
		spoeEngineNameFlagName = "spoe_engine_name"
	} else {
		spoeEngineNameFlagName = fmt.Sprintf("%v.spoe_engine_name", cmdPrefix)
	}

	var spoeEngineNameFlagDefault string

	_ = cmd.PersistentFlags().String(spoeEngineNameFlagName, spoeEngineNameFlagDefault, spoeEngineNameDescription)

	return nil
}

func registerTCPRequestRuleSpoeGroupName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spoeGroupNameDescription := ``

	var spoeGroupNameFlagName string
	if cmdPrefix == "" {
		spoeGroupNameFlagName = "spoe_group_name"
	} else {
		spoeGroupNameFlagName = fmt.Sprintf("%v.spoe_group_name", cmdPrefix)
	}

	var spoeGroupNameFlagDefault string

	_ = cmd.PersistentFlags().String(spoeGroupNameFlagName, spoeGroupNameFlagDefault, spoeGroupNameDescription)

	return nil
}

func registerTCPRequestRuleTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeoutDescription := ``

	var timeoutFlagName string
	if cmdPrefix == "" {
		timeoutFlagName = "timeout"
	} else {
		timeoutFlagName = fmt.Sprintf("%v.timeout", cmdPrefix)
	}

	var timeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(timeoutFlagName, timeoutFlagDefault, timeoutDescription)

	return nil
}

func registerTCPRequestRuleTrackKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackKeyDescription := ``

	var trackKeyFlagName string
	if cmdPrefix == "" {
		trackKeyFlagName = "track_key"
	} else {
		trackKeyFlagName = fmt.Sprintf("%v.track_key", cmdPrefix)
	}

	var trackKeyFlagDefault string

	_ = cmd.PersistentFlags().String(trackKeyFlagName, trackKeyFlagDefault, trackKeyDescription)

	return nil
}

func registerTCPRequestRuleTrackTable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackTableDescription := ``

	var trackTableFlagName string
	if cmdPrefix == "" {
		trackTableFlagName = "track_table"
	} else {
		trackTableFlagName = fmt.Sprintf("%v.track_table", cmdPrefix)
	}

	var trackTableFlagDefault string

	_ = cmd.PersistentFlags().String(trackTableFlagName, trackTableFlagDefault, trackTableDescription)

	return nil
}

func registerTCPRequestRuleType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["connection","content","inspect-delay","session"]. Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["connection","content","inspect-delay","session"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTCPRequestRuleVarName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varNameDescription := ``

	var varNameFlagName string
	if cmdPrefix == "" {
		varNameFlagName = "var_name"
	} else {
		varNameFlagName = fmt.Sprintf("%v.var_name", cmdPrefix)
	}

	var varNameFlagDefault string

	_ = cmd.PersistentFlags().String(varNameFlagName, varNameFlagDefault, varNameDescription)

	return nil
}

func registerTCPRequestRuleVarScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varScopeDescription := ``

	var varScopeFlagName string
	if cmdPrefix == "" {
		varScopeFlagName = "var_scope"
	} else {
		varScopeFlagName = fmt.Sprintf("%v.var_scope", cmdPrefix)
	}

	var varScopeFlagDefault string

	_ = cmd.PersistentFlags().String(varScopeFlagName, varScopeFlagDefault, varScopeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTCPRequestRuleFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, actionAdded := retrieveTCPRequestRuleActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || actionAdded

	err, captureLenAdded := retrieveTCPRequestRuleCaptureLenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || captureLenAdded

	err, captureSampleAdded := retrieveTCPRequestRuleCaptureSampleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || captureSampleAdded

	err, condAdded := retrieveTCPRequestRuleCondFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condAdded

	err, condTestAdded := retrieveTCPRequestRuleCondTestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condTestAdded

	err, exprAdded := retrieveTCPRequestRuleExprFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || exprAdded

	err, gptValueAdded := retrieveTCPRequestRuleGptValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gptValueAdded

	err, indexAdded := retrieveTCPRequestRuleIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || indexAdded

	err, luaActionAdded := retrieveTCPRequestRuleLuaActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaActionAdded

	err, luaParamsAdded := retrieveTCPRequestRuleLuaParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaParamsAdded

	err, priorityTypeAdded := retrieveTCPRequestRulePriorityTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || priorityTypeAdded

	err, resolveProtocolAdded := retrieveTCPRequestRuleResolveProtocolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resolveProtocolAdded

	err, resolveResolversAdded := retrieveTCPRequestRuleResolveResolversFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resolveResolversAdded

	err, resolveVarAdded := retrieveTCPRequestRuleResolveVarFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resolveVarAdded

	err, scIncIdAdded := retrieveTCPRequestRuleScIncIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scIncIdAdded

	err, serviceNameAdded := retrieveTCPRequestRuleServiceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceNameAdded

	err, spoeEngineNameAdded := retrieveTCPRequestRuleSpoeEngineNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spoeEngineNameAdded

	err, spoeGroupNameAdded := retrieveTCPRequestRuleSpoeGroupNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spoeGroupNameAdded

	err, timeoutAdded := retrieveTCPRequestRuleTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeoutAdded

	err, trackKeyAdded := retrieveTCPRequestRuleTrackKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackKeyAdded

	err, trackTableAdded := retrieveTCPRequestRuleTrackTableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackTableAdded

	err, typeAdded := retrieveTCPRequestRuleTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, varNameAdded := retrieveTCPRequestRuleVarNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varNameAdded

	err, varScopeAdded := retrieveTCPRequestRuleVarScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varScopeAdded

	return nil, retAdded
}

func retrieveTCPRequestRuleActionFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	actionFlagName := fmt.Sprintf("%v.action", cmdPrefix)
	if cmd.Flags().Changed(actionFlagName) {

		var actionFlagName string
		if cmdPrefix == "" {
			actionFlagName = "action"
		} else {
			actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
		}

		actionFlagValue, err := cmd.Flags().GetString(actionFlagName)
		if err != nil {
			return err, false
		}
		m.Action = actionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleCaptureLenFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	captureLenFlagName := fmt.Sprintf("%v.capture_len", cmdPrefix)
	if cmd.Flags().Changed(captureLenFlagName) {

		var captureLenFlagName string
		if cmdPrefix == "" {
			captureLenFlagName = "capture_len"
		} else {
			captureLenFlagName = fmt.Sprintf("%v.capture_len", cmdPrefix)
		}

		captureLenFlagValue, err := cmd.Flags().GetInt64(captureLenFlagName)
		if err != nil {
			return err, false
		}
		m.CaptureLen = captureLenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleCaptureSampleFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	captureSampleFlagName := fmt.Sprintf("%v.capture_sample", cmdPrefix)
	if cmd.Flags().Changed(captureSampleFlagName) {

		var captureSampleFlagName string
		if cmdPrefix == "" {
			captureSampleFlagName = "capture_sample"
		} else {
			captureSampleFlagName = fmt.Sprintf("%v.capture_sample", cmdPrefix)
		}

		captureSampleFlagValue, err := cmd.Flags().GetString(captureSampleFlagName)
		if err != nil {
			return err, false
		}
		m.CaptureSample = captureSampleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleCondFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condFlagName := fmt.Sprintf("%v.cond", cmdPrefix)
	if cmd.Flags().Changed(condFlagName) {

		var condFlagName string
		if cmdPrefix == "" {
			condFlagName = "cond"
		} else {
			condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
		}

		condFlagValue, err := cmd.Flags().GetString(condFlagName)
		if err != nil {
			return err, false
		}
		m.Cond = condFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleCondTestFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condTestFlagName := fmt.Sprintf("%v.cond_test", cmdPrefix)
	if cmd.Flags().Changed(condTestFlagName) {

		var condTestFlagName string
		if cmdPrefix == "" {
			condTestFlagName = "cond_test"
		} else {
			condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
		}

		condTestFlagValue, err := cmd.Flags().GetString(condTestFlagName)
		if err != nil {
			return err, false
		}
		m.CondTest = condTestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleExprFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	exprFlagName := fmt.Sprintf("%v.expr", cmdPrefix)
	if cmd.Flags().Changed(exprFlagName) {

		var exprFlagName string
		if cmdPrefix == "" {
			exprFlagName = "expr"
		} else {
			exprFlagName = fmt.Sprintf("%v.expr", cmdPrefix)
		}

		exprFlagValue, err := cmd.Flags().GetString(exprFlagName)
		if err != nil {
			return err, false
		}
		m.Expr = exprFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleGptValueFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gptValueFlagName := fmt.Sprintf("%v.gpt_value", cmdPrefix)
	if cmd.Flags().Changed(gptValueFlagName) {

		var gptValueFlagName string
		if cmdPrefix == "" {
			gptValueFlagName = "gpt_value"
		} else {
			gptValueFlagName = fmt.Sprintf("%v.gpt_value", cmdPrefix)
		}

		gptValueFlagValue, err := cmd.Flags().GetString(gptValueFlagName)
		if err != nil {
			return err, false
		}
		m.GptValue = gptValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleIndexFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	indexFlagName := fmt.Sprintf("%v.index", cmdPrefix)
	if cmd.Flags().Changed(indexFlagName) {

		var indexFlagName string
		if cmdPrefix == "" {
			indexFlagName = "index"
		} else {
			indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
		}

		indexFlagValue, err := cmd.Flags().GetInt64(indexFlagName)
		if err != nil {
			return err, false
		}
		m.Index = &indexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleLuaActionFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaActionFlagName := fmt.Sprintf("%v.lua_action", cmdPrefix)
	if cmd.Flags().Changed(luaActionFlagName) {

		var luaActionFlagName string
		if cmdPrefix == "" {
			luaActionFlagName = "lua_action"
		} else {
			luaActionFlagName = fmt.Sprintf("%v.lua_action", cmdPrefix)
		}

		luaActionFlagValue, err := cmd.Flags().GetString(luaActionFlagName)
		if err != nil {
			return err, false
		}
		m.LuaAction = luaActionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleLuaParamsFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaParamsFlagName := fmt.Sprintf("%v.lua_params", cmdPrefix)
	if cmd.Flags().Changed(luaParamsFlagName) {

		var luaParamsFlagName string
		if cmdPrefix == "" {
			luaParamsFlagName = "lua_params"
		} else {
			luaParamsFlagName = fmt.Sprintf("%v.lua_params", cmdPrefix)
		}

		luaParamsFlagValue, err := cmd.Flags().GetString(luaParamsFlagName)
		if err != nil {
			return err, false
		}
		m.LuaParams = luaParamsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRulePriorityTypeFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	priorityTypeFlagName := fmt.Sprintf("%v.priority_type", cmdPrefix)
	if cmd.Flags().Changed(priorityTypeFlagName) {

		var priorityTypeFlagName string
		if cmdPrefix == "" {
			priorityTypeFlagName = "priority_type"
		} else {
			priorityTypeFlagName = fmt.Sprintf("%v.priority_type", cmdPrefix)
		}

		priorityTypeFlagValue, err := cmd.Flags().GetString(priorityTypeFlagName)
		if err != nil {
			return err, false
		}
		m.PriorityType = priorityTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleResolveProtocolFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resolveProtocolFlagName := fmt.Sprintf("%v.resolve_protocol", cmdPrefix)
	if cmd.Flags().Changed(resolveProtocolFlagName) {

		var resolveProtocolFlagName string
		if cmdPrefix == "" {
			resolveProtocolFlagName = "resolve_protocol"
		} else {
			resolveProtocolFlagName = fmt.Sprintf("%v.resolve_protocol", cmdPrefix)
		}

		resolveProtocolFlagValue, err := cmd.Flags().GetString(resolveProtocolFlagName)
		if err != nil {
			return err, false
		}
		m.ResolveProtocol = resolveProtocolFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleResolveResolversFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resolveResolversFlagName := fmt.Sprintf("%v.resolve_resolvers", cmdPrefix)
	if cmd.Flags().Changed(resolveResolversFlagName) {

		var resolveResolversFlagName string
		if cmdPrefix == "" {
			resolveResolversFlagName = "resolve_resolvers"
		} else {
			resolveResolversFlagName = fmt.Sprintf("%v.resolve_resolvers", cmdPrefix)
		}

		resolveResolversFlagValue, err := cmd.Flags().GetString(resolveResolversFlagName)
		if err != nil {
			return err, false
		}
		m.ResolveResolvers = resolveResolversFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleResolveVarFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resolveVarFlagName := fmt.Sprintf("%v.resolve_var", cmdPrefix)
	if cmd.Flags().Changed(resolveVarFlagName) {

		var resolveVarFlagName string
		if cmdPrefix == "" {
			resolveVarFlagName = "resolve_var"
		} else {
			resolveVarFlagName = fmt.Sprintf("%v.resolve_var", cmdPrefix)
		}

		resolveVarFlagValue, err := cmd.Flags().GetString(resolveVarFlagName)
		if err != nil {
			return err, false
		}
		m.ResolveVar = resolveVarFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleScIncIDFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scIncIdFlagName := fmt.Sprintf("%v.sc_inc_id", cmdPrefix)
	if cmd.Flags().Changed(scIncIdFlagName) {

		var scIncIdFlagName string
		if cmdPrefix == "" {
			scIncIdFlagName = "sc_inc_id"
		} else {
			scIncIdFlagName = fmt.Sprintf("%v.sc_inc_id", cmdPrefix)
		}

		scIncIdFlagValue, err := cmd.Flags().GetString(scIncIdFlagName)
		if err != nil {
			return err, false
		}
		m.ScIncID = scIncIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleServiceNameFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceNameFlagName := fmt.Sprintf("%v.service_name", cmdPrefix)
	if cmd.Flags().Changed(serviceNameFlagName) {

		var serviceNameFlagName string
		if cmdPrefix == "" {
			serviceNameFlagName = "service_name"
		} else {
			serviceNameFlagName = fmt.Sprintf("%v.service_name", cmdPrefix)
		}

		serviceNameFlagValue, err := cmd.Flags().GetString(serviceNameFlagName)
		if err != nil {
			return err, false
		}
		m.ServiceName = serviceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleSpoeEngineNameFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spoeEngineNameFlagName := fmt.Sprintf("%v.spoe_engine_name", cmdPrefix)
	if cmd.Flags().Changed(spoeEngineNameFlagName) {

		var spoeEngineNameFlagName string
		if cmdPrefix == "" {
			spoeEngineNameFlagName = "spoe_engine_name"
		} else {
			spoeEngineNameFlagName = fmt.Sprintf("%v.spoe_engine_name", cmdPrefix)
		}

		spoeEngineNameFlagValue, err := cmd.Flags().GetString(spoeEngineNameFlagName)
		if err != nil {
			return err, false
		}
		m.SpoeEngineName = spoeEngineNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleSpoeGroupNameFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spoeGroupNameFlagName := fmt.Sprintf("%v.spoe_group_name", cmdPrefix)
	if cmd.Flags().Changed(spoeGroupNameFlagName) {

		var spoeGroupNameFlagName string
		if cmdPrefix == "" {
			spoeGroupNameFlagName = "spoe_group_name"
		} else {
			spoeGroupNameFlagName = fmt.Sprintf("%v.spoe_group_name", cmdPrefix)
		}

		spoeGroupNameFlagValue, err := cmd.Flags().GetString(spoeGroupNameFlagName)
		if err != nil {
			return err, false
		}
		m.SpoeGroupName = spoeGroupNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleTimeoutFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeoutFlagName := fmt.Sprintf("%v.timeout", cmdPrefix)
	if cmd.Flags().Changed(timeoutFlagName) {

		var timeoutFlagName string
		if cmdPrefix == "" {
			timeoutFlagName = "timeout"
		} else {
			timeoutFlagName = fmt.Sprintf("%v.timeout", cmdPrefix)
		}

		timeoutFlagValue, err := cmd.Flags().GetInt64(timeoutFlagName)
		if err != nil {
			return err, false
		}
		m.Timeout = &timeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleTrackKeyFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackKeyFlagName := fmt.Sprintf("%v.track_key", cmdPrefix)
	if cmd.Flags().Changed(trackKeyFlagName) {

		var trackKeyFlagName string
		if cmdPrefix == "" {
			trackKeyFlagName = "track_key"
		} else {
			trackKeyFlagName = fmt.Sprintf("%v.track_key", cmdPrefix)
		}

		trackKeyFlagValue, err := cmd.Flags().GetString(trackKeyFlagName)
		if err != nil {
			return err, false
		}
		m.TrackKey = trackKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleTrackTableFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackTableFlagName := fmt.Sprintf("%v.track_table", cmdPrefix)
	if cmd.Flags().Changed(trackTableFlagName) {

		var trackTableFlagName string
		if cmdPrefix == "" {
			trackTableFlagName = "track_table"
		} else {
			trackTableFlagName = fmt.Sprintf("%v.track_table", cmdPrefix)
		}

		trackTableFlagValue, err := cmd.Flags().GetString(trackTableFlagName)
		if err != nil {
			return err, false
		}
		m.TrackTable = trackTableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleTypeFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleVarNameFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varNameFlagName := fmt.Sprintf("%v.var_name", cmdPrefix)
	if cmd.Flags().Changed(varNameFlagName) {

		var varNameFlagName string
		if cmdPrefix == "" {
			varNameFlagName = "var_name"
		} else {
			varNameFlagName = fmt.Sprintf("%v.var_name", cmdPrefix)
		}

		varNameFlagValue, err := cmd.Flags().GetString(varNameFlagName)
		if err != nil {
			return err, false
		}
		m.VarName = varNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTCPRequestRuleVarScopeFlags(depth int, m *models.TCPRequestRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varScopeFlagName := fmt.Sprintf("%v.var_scope", cmdPrefix)
	if cmd.Flags().Changed(varScopeFlagName) {

		var varScopeFlagName string
		if cmdPrefix == "" {
			varScopeFlagName = "var_scope"
		} else {
			varScopeFlagName = fmt.Sprintf("%v.var_scope", cmdPrefix)
		}

		varScopeFlagValue, err := cmd.Flags().GetString(varScopeFlagName)
		if err != nil {
			return err, false
		}
		m.VarScope = varScopeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
