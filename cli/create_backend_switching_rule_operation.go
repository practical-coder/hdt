// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/practical-coder/hdt/client/backend_switching_rule"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationBackendSwitchingRuleCreateBackendSwitchingRuleCmd returns a cmd to handle operation createBackendSwitchingRule
func makeOperationBackendSwitchingRuleCreateBackendSwitchingRuleCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "createBackendSwitchingRule",
		Short: `Adds a new Backend Switching Rule of the specified type in the specified frontend.`,
		RunE:  runOperationBackendSwitchingRuleCreateBackendSwitchingRule,
	}

	if err := registerOperationBackendSwitchingRuleCreateBackendSwitchingRuleParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationBackendSwitchingRuleCreateBackendSwitchingRule uses cmd flags to call endpoint api
func runOperationBackendSwitchingRuleCreateBackendSwitchingRule(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := backend_switching_rule.NewCreateBackendSwitchingRuleParams()
	if err, _ := retrieveOperationBackendSwitchingRuleCreateBackendSwitchingRuleDataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBackendSwitchingRuleCreateBackendSwitchingRuleForceReloadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBackendSwitchingRuleCreateBackendSwitchingRuleFrontendFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBackendSwitchingRuleCreateBackendSwitchingRuleTransactionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBackendSwitchingRuleCreateBackendSwitchingRuleVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationBackendSwitchingRuleCreateBackendSwitchingRuleResult(appCli.BackendSwitchingRule.CreateBackendSwitchingRule(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationBackendSwitchingRuleCreateBackendSwitchingRuleParamFlags registers all flags needed to fill params
func registerOperationBackendSwitchingRuleCreateBackendSwitchingRuleParamFlags(cmd *cobra.Command) error {
	if err := registerOperationBackendSwitchingRuleCreateBackendSwitchingRuleDataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBackendSwitchingRuleCreateBackendSwitchingRuleForceReloadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBackendSwitchingRuleCreateBackendSwitchingRuleFrontendParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBackendSwitchingRuleCreateBackendSwitchingRuleTransactionIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBackendSwitchingRuleCreateBackendSwitchingRuleVersionParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationBackendSwitchingRuleCreateBackendSwitchingRuleDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(dataFlagName, "", "Optional json string for [data]. ")

	// add flags for body
	if err := registerModelBackendSwitchingRuleFlags(0, "backendSwitchingRule", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationBackendSwitchingRuleCreateBackendSwitchingRuleForceReloadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	forceReloadDescription := `If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.`

	var forceReloadFlagName string
	if cmdPrefix == "" {
		forceReloadFlagName = "force_reload"
	} else {
		forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
	}

	var forceReloadFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceReloadFlagName, forceReloadFlagDefault, forceReloadDescription)

	return nil
}
func registerOperationBackendSwitchingRuleCreateBackendSwitchingRuleFrontendParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	frontendDescription := `Required. Frontend name`

	var frontendFlagName string
	if cmdPrefix == "" {
		frontendFlagName = "frontend"
	} else {
		frontendFlagName = fmt.Sprintf("%v.frontend", cmdPrefix)
	}

	var frontendFlagDefault string

	_ = cmd.PersistentFlags().String(frontendFlagName, frontendFlagDefault, frontendDescription)

	return nil
}
func registerOperationBackendSwitchingRuleCreateBackendSwitchingRuleTransactionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	transactionIdDescription := `ID of the transaction where we want to add the operation. Cannot be used when version is specified.`

	var transactionIdFlagName string
	if cmdPrefix == "" {
		transactionIdFlagName = "transaction_id"
	} else {
		transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
	}

	var transactionIdFlagDefault string

	_ = cmd.PersistentFlags().String(transactionIdFlagName, transactionIdFlagDefault, transactionIdDescription)

	return nil
}
func registerOperationBackendSwitchingRuleCreateBackendSwitchingRuleVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	versionDescription := `Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func retrieveOperationBackendSwitchingRuleCreateBackendSwitchingRuleDataFlag(m *backend_switching_rule.CreateBackendSwitchingRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("data") {
		// Read data string from cmd and unmarshal
		dataValueStr, err := cmd.Flags().GetString("data")
		if err != nil {
			return err, false
		}

		dataValue := models.BackendSwitchingRule{}
		if err := json.Unmarshal([]byte(dataValueStr), &dataValue); err != nil {
			return fmt.Errorf("cannot unmarshal data string in models.BackendSwitchingRule: %v", err), false
		}
		m.Data = &dataValue
	}
	dataValueModel := m.Data
	if swag.IsZero(dataValueModel) {
		dataValueModel = &models.BackendSwitchingRule{}
	}
	err, added := retrieveModelBackendSwitchingRuleFlags(0, dataValueModel, "backendSwitchingRule", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Data = dataValueModel
	}
	if dryRun && debug {

		dataValueDebugBytes, err := json.Marshal(m.Data)
		if err != nil {
			return err, false
		}
		logDebugf("Data dry-run payload: %v", string(dataValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationBackendSwitchingRuleCreateBackendSwitchingRuleForceReloadFlag(m *backend_switching_rule.CreateBackendSwitchingRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("force_reload") {

		var forceReloadFlagName string
		if cmdPrefix == "" {
			forceReloadFlagName = "force_reload"
		} else {
			forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
		}

		forceReloadFlagValue, err := cmd.Flags().GetBool(forceReloadFlagName)
		if err != nil {
			return err, false
		}
		m.ForceReload = &forceReloadFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBackendSwitchingRuleCreateBackendSwitchingRuleFrontendFlag(m *backend_switching_rule.CreateBackendSwitchingRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("frontend") {

		var frontendFlagName string
		if cmdPrefix == "" {
			frontendFlagName = "frontend"
		} else {
			frontendFlagName = fmt.Sprintf("%v.frontend", cmdPrefix)
		}

		frontendFlagValue, err := cmd.Flags().GetString(frontendFlagName)
		if err != nil {
			return err, false
		}
		m.Frontend = frontendFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBackendSwitchingRuleCreateBackendSwitchingRuleTransactionIDFlag(m *backend_switching_rule.CreateBackendSwitchingRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("transaction_id") {

		var transactionIdFlagName string
		if cmdPrefix == "" {
			transactionIdFlagName = "transaction_id"
		} else {
			transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
		}

		transactionIdFlagValue, err := cmd.Flags().GetString(transactionIdFlagName)
		if err != nil {
			return err, false
		}
		m.TransactionID = &transactionIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBackendSwitchingRuleCreateBackendSwitchingRuleVersionFlag(m *backend_switching_rule.CreateBackendSwitchingRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("version") {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

	}
	return nil, retAdded
}

// parseOperationBackendSwitchingRuleCreateBackendSwitchingRuleResult parses request result and return the string content
func parseOperationBackendSwitchingRuleCreateBackendSwitchingRuleResult(resp0 *backend_switching_rule.CreateBackendSwitchingRuleCreated, resp1 *backend_switching_rule.CreateBackendSwitchingRuleAccepted, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*backend_switching_rule.CreateBackendSwitchingRuleDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*backend_switching_rule.CreateBackendSwitchingRuleCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*backend_switching_rule.CreateBackendSwitchingRuleAccepted)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*backend_switching_rule.CreateBackendSwitchingRuleBadRequest)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*backend_switching_rule.CreateBackendSwitchingRuleConflict)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
		msgStr, err := json.Marshal(resp1.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
