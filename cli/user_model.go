// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for User

// register flags to command
func registerModelUserFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUserGroups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserSecurePassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUserGroups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	groupsDescription := ``

	var groupsFlagName string
	if cmdPrefix == "" {
		groupsFlagName = "groups"
	} else {
		groupsFlagName = fmt.Sprintf("%v.groups", cmdPrefix)
	}

	var groupsFlagDefault string

	_ = cmd.PersistentFlags().String(groupsFlagName, groupsFlagDefault, groupsDescription)

	return nil
}

func registerUserPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := `Required. `

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerUserSecurePassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	securePasswordDescription := `Required. `

	var securePasswordFlagName string
	if cmdPrefix == "" {
		securePasswordFlagName = "secure_password"
	} else {
		securePasswordFlagName = fmt.Sprintf("%v.secure_password", cmdPrefix)
	}

	var securePasswordFlagDefault bool

	_ = cmd.PersistentFlags().Bool(securePasswordFlagName, securePasswordFlagDefault, securePasswordDescription)

	return nil
}

func registerUserUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `Required. `

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUserFlags(depth int, m *models.User, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, groupsAdded := retrieveUserGroupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || groupsAdded

	err, passwordAdded := retrieveUserPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, securePasswordAdded := retrieveUserSecurePasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || securePasswordAdded

	err, usernameAdded := retrieveUserUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveUserGroupsFlags(depth int, m *models.User, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	groupsFlagName := fmt.Sprintf("%v.groups", cmdPrefix)
	if cmd.Flags().Changed(groupsFlagName) {

		var groupsFlagName string
		if cmdPrefix == "" {
			groupsFlagName = "groups"
		} else {
			groupsFlagName = fmt.Sprintf("%v.groups", cmdPrefix)
		}

		groupsFlagValue, err := cmd.Flags().GetString(groupsFlagName)
		if err != nil {
			return err, false
		}
		m.Groups = groupsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserPasswordFlags(depth int, m *models.User, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserSecurePasswordFlags(depth int, m *models.User, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	securePasswordFlagName := fmt.Sprintf("%v.secure_password", cmdPrefix)
	if cmd.Flags().Changed(securePasswordFlagName) {

		var securePasswordFlagName string
		if cmdPrefix == "" {
			securePasswordFlagName = "secure_password"
		} else {
			securePasswordFlagName = fmt.Sprintf("%v.secure_password", cmdPrefix)
		}

		securePasswordFlagValue, err := cmd.Flags().GetBool(securePasswordFlagName)
		if err != nil {
			return err, false
		}
		m.SecurePassword = &securePasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserUsernameFlags(depth int, m *models.User, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
