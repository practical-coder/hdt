// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdt/client/spoe_transactions"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSpoeTransactionsCommitSpoeTransactionCmd returns a cmd to handle operation commitSpoeTransaction
func makeOperationSpoeTransactionsCommitSpoeTransactionCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "commitSpoeTransaction",
		Short: `Commit transaction, execute all operations in transaction and return msg`,
		RunE:  runOperationSpoeTransactionsCommitSpoeTransaction,
	}

	if err := registerOperationSpoeTransactionsCommitSpoeTransactionParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSpoeTransactionsCommitSpoeTransaction uses cmd flags to call endpoint api
func runOperationSpoeTransactionsCommitSpoeTransaction(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := spoe_transactions.NewCommitSpoeTransactionParams()
	if err, _ := retrieveOperationSpoeTransactionsCommitSpoeTransactionForceReloadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSpoeTransactionsCommitSpoeTransactionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSpoeTransactionsCommitSpoeTransactionSpoeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSpoeTransactionsCommitSpoeTransactionResult(appCli.SpoeTransactions.CommitSpoeTransaction(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSpoeTransactionsCommitSpoeTransactionParamFlags registers all flags needed to fill params
func registerOperationSpoeTransactionsCommitSpoeTransactionParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSpoeTransactionsCommitSpoeTransactionForceReloadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSpoeTransactionsCommitSpoeTransactionIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSpoeTransactionsCommitSpoeTransactionSpoeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSpoeTransactionsCommitSpoeTransactionForceReloadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	forceReloadDescription := `If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.`

	var forceReloadFlagName string
	if cmdPrefix == "" {
		forceReloadFlagName = "force_reload"
	} else {
		forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
	}

	var forceReloadFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceReloadFlagName, forceReloadFlagDefault, forceReloadDescription)

	return nil
}
func registerOperationSpoeTransactionsCommitSpoeTransactionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Transaction id`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationSpoeTransactionsCommitSpoeTransactionSpoeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	spoeDescription := `Required. Spoe file name`

	var spoeFlagName string
	if cmdPrefix == "" {
		spoeFlagName = "spoe"
	} else {
		spoeFlagName = fmt.Sprintf("%v.spoe", cmdPrefix)
	}

	var spoeFlagDefault string

	_ = cmd.PersistentFlags().String(spoeFlagName, spoeFlagDefault, spoeDescription)

	return nil
}

func retrieveOperationSpoeTransactionsCommitSpoeTransactionForceReloadFlag(m *spoe_transactions.CommitSpoeTransactionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("force_reload") {

		var forceReloadFlagName string
		if cmdPrefix == "" {
			forceReloadFlagName = "force_reload"
		} else {
			forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
		}

		forceReloadFlagValue, err := cmd.Flags().GetBool(forceReloadFlagName)
		if err != nil {
			return err, false
		}
		m.ForceReload = &forceReloadFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSpoeTransactionsCommitSpoeTransactionIDFlag(m *spoe_transactions.CommitSpoeTransactionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSpoeTransactionsCommitSpoeTransactionSpoeFlag(m *spoe_transactions.CommitSpoeTransactionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("spoe") {

		var spoeFlagName string
		if cmdPrefix == "" {
			spoeFlagName = "spoe"
		} else {
			spoeFlagName = fmt.Sprintf("%v.spoe", cmdPrefix)
		}

		spoeFlagValue, err := cmd.Flags().GetString(spoeFlagName)
		if err != nil {
			return err, false
		}
		m.Spoe = spoeFlagValue

	}
	return nil, retAdded
}

// parseOperationSpoeTransactionsCommitSpoeTransactionResult parses request result and return the string content
func parseOperationSpoeTransactionsCommitSpoeTransactionResult(resp0 *spoe_transactions.CommitSpoeTransactionOK, resp1 *spoe_transactions.CommitSpoeTransactionAccepted, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*spoe_transactions.CommitSpoeTransactionDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*spoe_transactions.CommitSpoeTransactionOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*spoe_transactions.CommitSpoeTransactionAccepted)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*spoe_transactions.CommitSpoeTransactionBadRequest)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*spoe_transactions.CommitSpoeTransactionNotFound)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
		msgStr, err := json.Marshal(resp1.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
