// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for ServerTemplate

// register flags to command
func registerModelServerTemplateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServerTemplateAgentAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateAgentCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateAgentInter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateAgentPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateAgentSend(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateAllow0rtt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateAlpn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateBackup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateCheckSendProxy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateCheckSni(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateCheckSsl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateCheckAlpn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateCheckProto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateCheckViaSocks4(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateCiphers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateCiphersuites(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateCookie(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateCrlFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateDowninter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateErrorLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateFall(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateFastinter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateForceSslv3(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateForceTlsv10(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateForceTlsv11(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateForceTlsv12(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateForceTlsv13(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateFqdn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateHealthCheckPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateInitAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateInter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateLogProto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateMaintenance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateMaxReuse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateMaxconn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateMaxqueue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateMinconn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateNoSslv3(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateNoTlsv10(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateNoTlsv11(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateNoTlsv12(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateNoTlsv13(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateNoVerifyhost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateNpn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateNumOrRange(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateObserve(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateOnError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateOnMarkedDown(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateOnMarkedUp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplatePoolLowConn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplatePoolMaxConn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplatePoolPurgeDelay(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplatePort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplatePrefix(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateProto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateProxyV2Options(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateRedir(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateResolveNet(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateResolvePrefer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateResolveOpts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateResolvers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateRise(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSendProxy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSendProxyV2(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSendProxyV2Ssl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSendProxyV2SslCn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSlowstart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSni(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSocks4(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSource(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSsl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSslCafile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSslCertificate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSslMaxVer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSslMinVer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateSslReuse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateStick(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateTCPUt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateTfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateTLSTickets(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateTrack(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateVerify(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateVerifyhost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateWeight(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerTemplateWs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateAgentAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentAddrDescription := ``

	var agentAddrFlagName string
	if cmdPrefix == "" {
		agentAddrFlagName = "agent-addr"
	} else {
		agentAddrFlagName = fmt.Sprintf("%v.agent-addr", cmdPrefix)
	}

	var agentAddrFlagDefault string

	_ = cmd.PersistentFlags().String(agentAddrFlagName, agentAddrFlagDefault, agentAddrDescription)

	return nil
}

func registerServerTemplateAgentCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentCheckDescription := `Enum: ["enabled","disabled"]. `

	var agentCheckFlagName string
	if cmdPrefix == "" {
		agentCheckFlagName = "agent-check"
	} else {
		agentCheckFlagName = fmt.Sprintf("%v.agent-check", cmdPrefix)
	}

	var agentCheckFlagDefault string

	_ = cmd.PersistentFlags().String(agentCheckFlagName, agentCheckFlagDefault, agentCheckDescription)

	if err := cmd.RegisterFlagCompletionFunc(agentCheckFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateAgentInter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentInterDescription := ``

	var agentInterFlagName string
	if cmdPrefix == "" {
		agentInterFlagName = "agent-inter"
	} else {
		agentInterFlagName = fmt.Sprintf("%v.agent-inter", cmdPrefix)
	}

	var agentInterFlagDefault int64

	_ = cmd.PersistentFlags().Int64(agentInterFlagName, agentInterFlagDefault, agentInterDescription)

	return nil
}

func registerServerTemplateAgentPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentPortDescription := ``

	var agentPortFlagName string
	if cmdPrefix == "" {
		agentPortFlagName = "agent-port"
	} else {
		agentPortFlagName = fmt.Sprintf("%v.agent-port", cmdPrefix)
	}

	var agentPortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(agentPortFlagName, agentPortFlagDefault, agentPortDescription)

	return nil
}

func registerServerTemplateAgentSend(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentSendDescription := ``

	var agentSendFlagName string
	if cmdPrefix == "" {
		agentSendFlagName = "agent-send"
	} else {
		agentSendFlagName = fmt.Sprintf("%v.agent-send", cmdPrefix)
	}

	var agentSendFlagDefault string

	_ = cmd.PersistentFlags().String(agentSendFlagName, agentSendFlagDefault, agentSendDescription)

	return nil
}

func registerServerTemplateAllow0rtt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allow0rttDescription := ``

	var allow0rttFlagName string
	if cmdPrefix == "" {
		allow0rttFlagName = "allow_0rtt"
	} else {
		allow0rttFlagName = fmt.Sprintf("%v.allow_0rtt", cmdPrefix)
	}

	var allow0rttFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allow0rttFlagName, allow0rttFlagDefault, allow0rttDescription)

	return nil
}

func registerServerTemplateAlpn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	alpnDescription := ``

	var alpnFlagName string
	if cmdPrefix == "" {
		alpnFlagName = "alpn"
	} else {
		alpnFlagName = fmt.Sprintf("%v.alpn", cmdPrefix)
	}

	var alpnFlagDefault string

	_ = cmd.PersistentFlags().String(alpnFlagName, alpnFlagDefault, alpnDescription)

	return nil
}

func registerServerTemplateBackup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	backupDescription := `Enum: ["enabled","disabled"]. `

	var backupFlagName string
	if cmdPrefix == "" {
		backupFlagName = "backup"
	} else {
		backupFlagName = fmt.Sprintf("%v.backup", cmdPrefix)
	}

	var backupFlagDefault string

	_ = cmd.PersistentFlags().String(backupFlagName, backupFlagDefault, backupDescription)

	if err := cmd.RegisterFlagCompletionFunc(backupFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkDescription := `Enum: ["enabled","disabled"]. `

	var checkFlagName string
	if cmdPrefix == "" {
		checkFlagName = "check"
	} else {
		checkFlagName = fmt.Sprintf("%v.check", cmdPrefix)
	}

	var checkFlagDefault string

	_ = cmd.PersistentFlags().String(checkFlagName, checkFlagDefault, checkDescription)

	if err := cmd.RegisterFlagCompletionFunc(checkFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateCheckSendProxy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkSendProxyDescription := `Enum: ["enabled","disabled"]. `

	var checkSendProxyFlagName string
	if cmdPrefix == "" {
		checkSendProxyFlagName = "check-send-proxy"
	} else {
		checkSendProxyFlagName = fmt.Sprintf("%v.check-send-proxy", cmdPrefix)
	}

	var checkSendProxyFlagDefault string

	_ = cmd.PersistentFlags().String(checkSendProxyFlagName, checkSendProxyFlagDefault, checkSendProxyDescription)

	if err := cmd.RegisterFlagCompletionFunc(checkSendProxyFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateCheckSni(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkSniDescription := ``

	var checkSniFlagName string
	if cmdPrefix == "" {
		checkSniFlagName = "check-sni"
	} else {
		checkSniFlagName = fmt.Sprintf("%v.check-sni", cmdPrefix)
	}

	var checkSniFlagDefault string

	_ = cmd.PersistentFlags().String(checkSniFlagName, checkSniFlagDefault, checkSniDescription)

	return nil
}

func registerServerTemplateCheckSsl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkSslDescription := `Enum: ["enabled","disabled"]. `

	var checkSslFlagName string
	if cmdPrefix == "" {
		checkSslFlagName = "check-ssl"
	} else {
		checkSslFlagName = fmt.Sprintf("%v.check-ssl", cmdPrefix)
	}

	var checkSslFlagDefault string

	_ = cmd.PersistentFlags().String(checkSslFlagName, checkSslFlagDefault, checkSslDescription)

	if err := cmd.RegisterFlagCompletionFunc(checkSslFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateCheckAlpn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkAlpnDescription := ``

	var checkAlpnFlagName string
	if cmdPrefix == "" {
		checkAlpnFlagName = "check_alpn"
	} else {
		checkAlpnFlagName = fmt.Sprintf("%v.check_alpn", cmdPrefix)
	}

	var checkAlpnFlagDefault string

	_ = cmd.PersistentFlags().String(checkAlpnFlagName, checkAlpnFlagDefault, checkAlpnDescription)

	return nil
}

func registerServerTemplateCheckProto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkProtoDescription := ``

	var checkProtoFlagName string
	if cmdPrefix == "" {
		checkProtoFlagName = "check_proto"
	} else {
		checkProtoFlagName = fmt.Sprintf("%v.check_proto", cmdPrefix)
	}

	var checkProtoFlagDefault string

	_ = cmd.PersistentFlags().String(checkProtoFlagName, checkProtoFlagDefault, checkProtoDescription)

	return nil
}

func registerServerTemplateCheckViaSocks4(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkViaSocks4Description := `Enum: ["enabled","disabled"]. `

	var checkViaSocks4FlagName string
	if cmdPrefix == "" {
		checkViaSocks4FlagName = "check_via_socks4"
	} else {
		checkViaSocks4FlagName = fmt.Sprintf("%v.check_via_socks4", cmdPrefix)
	}

	var checkViaSocks4FlagDefault string

	_ = cmd.PersistentFlags().String(checkViaSocks4FlagName, checkViaSocks4FlagDefault, checkViaSocks4Description)

	if err := cmd.RegisterFlagCompletionFunc(checkViaSocks4FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateCiphers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ciphersDescription := ``

	var ciphersFlagName string
	if cmdPrefix == "" {
		ciphersFlagName = "ciphers"
	} else {
		ciphersFlagName = fmt.Sprintf("%v.ciphers", cmdPrefix)
	}

	var ciphersFlagDefault string

	_ = cmd.PersistentFlags().String(ciphersFlagName, ciphersFlagDefault, ciphersDescription)

	return nil
}

func registerServerTemplateCiphersuites(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ciphersuitesDescription := ``

	var ciphersuitesFlagName string
	if cmdPrefix == "" {
		ciphersuitesFlagName = "ciphersuites"
	} else {
		ciphersuitesFlagName = fmt.Sprintf("%v.ciphersuites", cmdPrefix)
	}

	var ciphersuitesFlagDefault string

	_ = cmd.PersistentFlags().String(ciphersuitesFlagName, ciphersuitesFlagDefault, ciphersuitesDescription)

	return nil
}

func registerServerTemplateCookie(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cookieDescription := ``

	var cookieFlagName string
	if cmdPrefix == "" {
		cookieFlagName = "cookie"
	} else {
		cookieFlagName = fmt.Sprintf("%v.cookie", cmdPrefix)
	}

	var cookieFlagDefault string

	_ = cmd.PersistentFlags().String(cookieFlagName, cookieFlagDefault, cookieDescription)

	return nil
}

func registerServerTemplateCrlFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	crlFileDescription := ``

	var crlFileFlagName string
	if cmdPrefix == "" {
		crlFileFlagName = "crl_file"
	} else {
		crlFileFlagName = fmt.Sprintf("%v.crl_file", cmdPrefix)
	}

	var crlFileFlagDefault string

	_ = cmd.PersistentFlags().String(crlFileFlagName, crlFileFlagDefault, crlFileDescription)

	return nil
}

func registerServerTemplateDowninter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	downinterDescription := ``

	var downinterFlagName string
	if cmdPrefix == "" {
		downinterFlagName = "downinter"
	} else {
		downinterFlagName = fmt.Sprintf("%v.downinter", cmdPrefix)
	}

	var downinterFlagDefault int64

	_ = cmd.PersistentFlags().Int64(downinterFlagName, downinterFlagDefault, downinterDescription)

	return nil
}

func registerServerTemplateErrorLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorLimitDescription := ``

	var errorLimitFlagName string
	if cmdPrefix == "" {
		errorLimitFlagName = "error_limit"
	} else {
		errorLimitFlagName = fmt.Sprintf("%v.error_limit", cmdPrefix)
	}

	var errorLimitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(errorLimitFlagName, errorLimitFlagDefault, errorLimitDescription)

	return nil
}

func registerServerTemplateFall(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fallDescription := ``

	var fallFlagName string
	if cmdPrefix == "" {
		fallFlagName = "fall"
	} else {
		fallFlagName = fmt.Sprintf("%v.fall", cmdPrefix)
	}

	var fallFlagDefault int64

	_ = cmd.PersistentFlags().Int64(fallFlagName, fallFlagDefault, fallDescription)

	return nil
}

func registerServerTemplateFastinter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fastinterDescription := ``

	var fastinterFlagName string
	if cmdPrefix == "" {
		fastinterFlagName = "fastinter"
	} else {
		fastinterFlagName = fmt.Sprintf("%v.fastinter", cmdPrefix)
	}

	var fastinterFlagDefault int64

	_ = cmd.PersistentFlags().Int64(fastinterFlagName, fastinterFlagDefault, fastinterDescription)

	return nil
}

func registerServerTemplateForceSslv3(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceSslv3Description := `Enum: ["enabled","disabled"]. `

	var forceSslv3FlagName string
	if cmdPrefix == "" {
		forceSslv3FlagName = "force_sslv3"
	} else {
		forceSslv3FlagName = fmt.Sprintf("%v.force_sslv3", cmdPrefix)
	}

	var forceSslv3FlagDefault string

	_ = cmd.PersistentFlags().String(forceSslv3FlagName, forceSslv3FlagDefault, forceSslv3Description)

	if err := cmd.RegisterFlagCompletionFunc(forceSslv3FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateForceTlsv10(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceTlsv10Description := `Enum: ["enabled","disabled"]. `

	var forceTlsv10FlagName string
	if cmdPrefix == "" {
		forceTlsv10FlagName = "force_tlsv10"
	} else {
		forceTlsv10FlagName = fmt.Sprintf("%v.force_tlsv10", cmdPrefix)
	}

	var forceTlsv10FlagDefault string

	_ = cmd.PersistentFlags().String(forceTlsv10FlagName, forceTlsv10FlagDefault, forceTlsv10Description)

	if err := cmd.RegisterFlagCompletionFunc(forceTlsv10FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateForceTlsv11(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceTlsv11Description := `Enum: ["enabled","disabled"]. `

	var forceTlsv11FlagName string
	if cmdPrefix == "" {
		forceTlsv11FlagName = "force_tlsv11"
	} else {
		forceTlsv11FlagName = fmt.Sprintf("%v.force_tlsv11", cmdPrefix)
	}

	var forceTlsv11FlagDefault string

	_ = cmd.PersistentFlags().String(forceTlsv11FlagName, forceTlsv11FlagDefault, forceTlsv11Description)

	if err := cmd.RegisterFlagCompletionFunc(forceTlsv11FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateForceTlsv12(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceTlsv12Description := `Enum: ["enabled","disabled"]. `

	var forceTlsv12FlagName string
	if cmdPrefix == "" {
		forceTlsv12FlagName = "force_tlsv12"
	} else {
		forceTlsv12FlagName = fmt.Sprintf("%v.force_tlsv12", cmdPrefix)
	}

	var forceTlsv12FlagDefault string

	_ = cmd.PersistentFlags().String(forceTlsv12FlagName, forceTlsv12FlagDefault, forceTlsv12Description)

	if err := cmd.RegisterFlagCompletionFunc(forceTlsv12FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateForceTlsv13(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceTlsv13Description := `Enum: ["enabled","disabled"]. `

	var forceTlsv13FlagName string
	if cmdPrefix == "" {
		forceTlsv13FlagName = "force_tlsv13"
	} else {
		forceTlsv13FlagName = fmt.Sprintf("%v.force_tlsv13", cmdPrefix)
	}

	var forceTlsv13FlagDefault string

	_ = cmd.PersistentFlags().String(forceTlsv13FlagName, forceTlsv13FlagDefault, forceTlsv13Description)

	if err := cmd.RegisterFlagCompletionFunc(forceTlsv13FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateFqdn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fqdnDescription := `Required. `

	var fqdnFlagName string
	if cmdPrefix == "" {
		fqdnFlagName = "fqdn"
	} else {
		fqdnFlagName = fmt.Sprintf("%v.fqdn", cmdPrefix)
	}

	var fqdnFlagDefault string

	_ = cmd.PersistentFlags().String(fqdnFlagName, fqdnFlagDefault, fqdnDescription)

	return nil
}

func registerServerTemplateHealthCheckPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	healthCheckPortDescription := ``

	var healthCheckPortFlagName string
	if cmdPrefix == "" {
		healthCheckPortFlagName = "health_check_port"
	} else {
		healthCheckPortFlagName = fmt.Sprintf("%v.health_check_port", cmdPrefix)
	}

	var healthCheckPortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(healthCheckPortFlagName, healthCheckPortFlagDefault, healthCheckPortDescription)

	return nil
}

func registerServerTemplateID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerServerTemplateInitAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	initAddrDescription := ``

	var initAddrFlagName string
	if cmdPrefix == "" {
		initAddrFlagName = "init-addr"
	} else {
		initAddrFlagName = fmt.Sprintf("%v.init-addr", cmdPrefix)
	}

	var initAddrFlagDefault string

	_ = cmd.PersistentFlags().String(initAddrFlagName, initAddrFlagDefault, initAddrDescription)

	return nil
}

func registerServerTemplateInter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	interDescription := ``

	var interFlagName string
	if cmdPrefix == "" {
		interFlagName = "inter"
	} else {
		interFlagName = fmt.Sprintf("%v.inter", cmdPrefix)
	}

	var interFlagDefault int64

	_ = cmd.PersistentFlags().Int64(interFlagName, interFlagDefault, interDescription)

	return nil
}

func registerServerTemplateLogProto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logProtoDescription := `Enum: ["legacy","octet-count"]. `

	var logProtoFlagName string
	if cmdPrefix == "" {
		logProtoFlagName = "log_proto"
	} else {
		logProtoFlagName = fmt.Sprintf("%v.log_proto", cmdPrefix)
	}

	var logProtoFlagDefault string

	_ = cmd.PersistentFlags().String(logProtoFlagName, logProtoFlagDefault, logProtoDescription)

	if err := cmd.RegisterFlagCompletionFunc(logProtoFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["legacy","octet-count"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateMaintenance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maintenanceDescription := `Enum: ["enabled","disabled"]. `

	var maintenanceFlagName string
	if cmdPrefix == "" {
		maintenanceFlagName = "maintenance"
	} else {
		maintenanceFlagName = fmt.Sprintf("%v.maintenance", cmdPrefix)
	}

	var maintenanceFlagDefault string

	_ = cmd.PersistentFlags().String(maintenanceFlagName, maintenanceFlagDefault, maintenanceDescription)

	if err := cmd.RegisterFlagCompletionFunc(maintenanceFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateMaxReuse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxReuseDescription := ``

	var maxReuseFlagName string
	if cmdPrefix == "" {
		maxReuseFlagName = "max_reuse"
	} else {
		maxReuseFlagName = fmt.Sprintf("%v.max_reuse", cmdPrefix)
	}

	var maxReuseFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxReuseFlagName, maxReuseFlagDefault, maxReuseDescription)

	return nil
}

func registerServerTemplateMaxconn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxconnDescription := ``

	var maxconnFlagName string
	if cmdPrefix == "" {
		maxconnFlagName = "maxconn"
	} else {
		maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
	}

	var maxconnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxconnFlagName, maxconnFlagDefault, maxconnDescription)

	return nil
}

func registerServerTemplateMaxqueue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxqueueDescription := ``

	var maxqueueFlagName string
	if cmdPrefix == "" {
		maxqueueFlagName = "maxqueue"
	} else {
		maxqueueFlagName = fmt.Sprintf("%v.maxqueue", cmdPrefix)
	}

	var maxqueueFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxqueueFlagName, maxqueueFlagDefault, maxqueueDescription)

	return nil
}

func registerServerTemplateMinconn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minconnDescription := ``

	var minconnFlagName string
	if cmdPrefix == "" {
		minconnFlagName = "minconn"
	} else {
		minconnFlagName = fmt.Sprintf("%v.minconn", cmdPrefix)
	}

	var minconnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(minconnFlagName, minconnFlagDefault, minconnDescription)

	return nil
}

func registerServerTemplateNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := ``

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func registerServerTemplateNoSslv3(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noSslv3Description := `Enum: ["enabled","disabled"]. `

	var noSslv3FlagName string
	if cmdPrefix == "" {
		noSslv3FlagName = "no_sslv3"
	} else {
		noSslv3FlagName = fmt.Sprintf("%v.no_sslv3", cmdPrefix)
	}

	var noSslv3FlagDefault string

	_ = cmd.PersistentFlags().String(noSslv3FlagName, noSslv3FlagDefault, noSslv3Description)

	if err := cmd.RegisterFlagCompletionFunc(noSslv3FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateNoTlsv10(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noTlsv10Description := `Enum: ["enabled","disabled"]. `

	var noTlsv10FlagName string
	if cmdPrefix == "" {
		noTlsv10FlagName = "no_tlsv10"
	} else {
		noTlsv10FlagName = fmt.Sprintf("%v.no_tlsv10", cmdPrefix)
	}

	var noTlsv10FlagDefault string

	_ = cmd.PersistentFlags().String(noTlsv10FlagName, noTlsv10FlagDefault, noTlsv10Description)

	if err := cmd.RegisterFlagCompletionFunc(noTlsv10FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateNoTlsv11(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noTlsv11Description := `Enum: ["enabled","disabled"]. `

	var noTlsv11FlagName string
	if cmdPrefix == "" {
		noTlsv11FlagName = "no_tlsv11"
	} else {
		noTlsv11FlagName = fmt.Sprintf("%v.no_tlsv11", cmdPrefix)
	}

	var noTlsv11FlagDefault string

	_ = cmd.PersistentFlags().String(noTlsv11FlagName, noTlsv11FlagDefault, noTlsv11Description)

	if err := cmd.RegisterFlagCompletionFunc(noTlsv11FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateNoTlsv12(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noTlsv12Description := `Enum: ["enabled","disabled"]. `

	var noTlsv12FlagName string
	if cmdPrefix == "" {
		noTlsv12FlagName = "no_tlsv12"
	} else {
		noTlsv12FlagName = fmt.Sprintf("%v.no_tlsv12", cmdPrefix)
	}

	var noTlsv12FlagDefault string

	_ = cmd.PersistentFlags().String(noTlsv12FlagName, noTlsv12FlagDefault, noTlsv12Description)

	if err := cmd.RegisterFlagCompletionFunc(noTlsv12FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateNoTlsv13(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noTlsv13Description := `Enum: ["enabled","disabled"]. `

	var noTlsv13FlagName string
	if cmdPrefix == "" {
		noTlsv13FlagName = "no_tlsv13"
	} else {
		noTlsv13FlagName = fmt.Sprintf("%v.no_tlsv13", cmdPrefix)
	}

	var noTlsv13FlagDefault string

	_ = cmd.PersistentFlags().String(noTlsv13FlagName, noTlsv13FlagDefault, noTlsv13Description)

	if err := cmd.RegisterFlagCompletionFunc(noTlsv13FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateNoVerifyhost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noVerifyhostDescription := `Enum: ["enabled","disabled"]. `

	var noVerifyhostFlagName string
	if cmdPrefix == "" {
		noVerifyhostFlagName = "no_verifyhost"
	} else {
		noVerifyhostFlagName = fmt.Sprintf("%v.no_verifyhost", cmdPrefix)
	}

	var noVerifyhostFlagDefault string

	_ = cmd.PersistentFlags().String(noVerifyhostFlagName, noVerifyhostFlagDefault, noVerifyhostDescription)

	if err := cmd.RegisterFlagCompletionFunc(noVerifyhostFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateNpn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	npnDescription := ``

	var npnFlagName string
	if cmdPrefix == "" {
		npnFlagName = "npn"
	} else {
		npnFlagName = fmt.Sprintf("%v.npn", cmdPrefix)
	}

	var npnFlagDefault string

	_ = cmd.PersistentFlags().String(npnFlagName, npnFlagDefault, npnDescription)

	return nil
}

func registerServerTemplateNumOrRange(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numOrRangeDescription := `Required. `

	var numOrRangeFlagName string
	if cmdPrefix == "" {
		numOrRangeFlagName = "num_or_range"
	} else {
		numOrRangeFlagName = fmt.Sprintf("%v.num_or_range", cmdPrefix)
	}

	var numOrRangeFlagDefault string

	_ = cmd.PersistentFlags().String(numOrRangeFlagName, numOrRangeFlagDefault, numOrRangeDescription)

	return nil
}

func registerServerTemplateObserve(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	observeDescription := `Enum: ["layer4","layer7"]. `

	var observeFlagName string
	if cmdPrefix == "" {
		observeFlagName = "observe"
	} else {
		observeFlagName = fmt.Sprintf("%v.observe", cmdPrefix)
	}

	var observeFlagDefault string

	_ = cmd.PersistentFlags().String(observeFlagName, observeFlagDefault, observeDescription)

	if err := cmd.RegisterFlagCompletionFunc(observeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["layer4","layer7"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateOnError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	onErrorDescription := `Enum: ["fastinter","fail-check","sudden-death","mark-down"]. `

	var onErrorFlagName string
	if cmdPrefix == "" {
		onErrorFlagName = "on-error"
	} else {
		onErrorFlagName = fmt.Sprintf("%v.on-error", cmdPrefix)
	}

	var onErrorFlagDefault string

	_ = cmd.PersistentFlags().String(onErrorFlagName, onErrorFlagDefault, onErrorDescription)

	if err := cmd.RegisterFlagCompletionFunc(onErrorFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["fastinter","fail-check","sudden-death","mark-down"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateOnMarkedDown(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	onMarkedDownDescription := `Enum: ["shutdown-sessions"]. `

	var onMarkedDownFlagName string
	if cmdPrefix == "" {
		onMarkedDownFlagName = "on-marked-down"
	} else {
		onMarkedDownFlagName = fmt.Sprintf("%v.on-marked-down", cmdPrefix)
	}

	var onMarkedDownFlagDefault string

	_ = cmd.PersistentFlags().String(onMarkedDownFlagName, onMarkedDownFlagDefault, onMarkedDownDescription)

	if err := cmd.RegisterFlagCompletionFunc(onMarkedDownFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["shutdown-sessions"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateOnMarkedUp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	onMarkedUpDescription := `Enum: ["shutdown-backup-sessions"]. `

	var onMarkedUpFlagName string
	if cmdPrefix == "" {
		onMarkedUpFlagName = "on-marked-up"
	} else {
		onMarkedUpFlagName = fmt.Sprintf("%v.on-marked-up", cmdPrefix)
	}

	var onMarkedUpFlagDefault string

	_ = cmd.PersistentFlags().String(onMarkedUpFlagName, onMarkedUpFlagDefault, onMarkedUpDescription)

	if err := cmd.RegisterFlagCompletionFunc(onMarkedUpFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["shutdown-backup-sessions"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplatePoolLowConn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poolLowConnDescription := ``

	var poolLowConnFlagName string
	if cmdPrefix == "" {
		poolLowConnFlagName = "pool_low_conn"
	} else {
		poolLowConnFlagName = fmt.Sprintf("%v.pool_low_conn", cmdPrefix)
	}

	var poolLowConnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(poolLowConnFlagName, poolLowConnFlagDefault, poolLowConnDescription)

	return nil
}

func registerServerTemplatePoolMaxConn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poolMaxConnDescription := ``

	var poolMaxConnFlagName string
	if cmdPrefix == "" {
		poolMaxConnFlagName = "pool_max_conn"
	} else {
		poolMaxConnFlagName = fmt.Sprintf("%v.pool_max_conn", cmdPrefix)
	}

	var poolMaxConnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(poolMaxConnFlagName, poolMaxConnFlagDefault, poolMaxConnDescription)

	return nil
}

func registerServerTemplatePoolPurgeDelay(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poolPurgeDelayDescription := ``

	var poolPurgeDelayFlagName string
	if cmdPrefix == "" {
		poolPurgeDelayFlagName = "pool_purge_delay"
	} else {
		poolPurgeDelayFlagName = fmt.Sprintf("%v.pool_purge_delay", cmdPrefix)
	}

	var poolPurgeDelayFlagDefault int64

	_ = cmd.PersistentFlags().Int64(poolPurgeDelayFlagName, poolPurgeDelayFlagDefault, poolPurgeDelayDescription)

	return nil
}

func registerServerTemplatePort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := ``

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault int64

	_ = cmd.PersistentFlags().Int64(portFlagName, portFlagDefault, portDescription)

	return nil
}

func registerServerTemplatePrefix(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	prefixDescription := `Required. `

	var prefixFlagName string
	if cmdPrefix == "" {
		prefixFlagName = "prefix"
	} else {
		prefixFlagName = fmt.Sprintf("%v.prefix", cmdPrefix)
	}

	var prefixFlagDefault string

	_ = cmd.PersistentFlags().String(prefixFlagName, prefixFlagDefault, prefixDescription)

	return nil
}

func registerServerTemplateProto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protoDescription := ``

	var protoFlagName string
	if cmdPrefix == "" {
		protoFlagName = "proto"
	} else {
		protoFlagName = fmt.Sprintf("%v.proto", cmdPrefix)
	}

	var protoFlagDefault string

	_ = cmd.PersistentFlags().String(protoFlagName, protoFlagDefault, protoDescription)

	return nil
}

func registerServerTemplateProxyV2Options(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: proxy-v2-options []string array type is not supported by go-swagger cli yet

	return nil
}

func registerServerTemplateRedir(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	redirDescription := ``

	var redirFlagName string
	if cmdPrefix == "" {
		redirFlagName = "redir"
	} else {
		redirFlagName = fmt.Sprintf("%v.redir", cmdPrefix)
	}

	var redirFlagDefault string

	_ = cmd.PersistentFlags().String(redirFlagName, redirFlagDefault, redirDescription)

	return nil
}

func registerServerTemplateResolveNet(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resolveNetDescription := ``

	var resolveNetFlagName string
	if cmdPrefix == "" {
		resolveNetFlagName = "resolve-net"
	} else {
		resolveNetFlagName = fmt.Sprintf("%v.resolve-net", cmdPrefix)
	}

	var resolveNetFlagDefault string

	_ = cmd.PersistentFlags().String(resolveNetFlagName, resolveNetFlagDefault, resolveNetDescription)

	return nil
}

func registerServerTemplateResolvePrefer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resolvePreferDescription := `Enum: ["ipv4","ipv6"]. `

	var resolvePreferFlagName string
	if cmdPrefix == "" {
		resolvePreferFlagName = "resolve-prefer"
	} else {
		resolvePreferFlagName = fmt.Sprintf("%v.resolve-prefer", cmdPrefix)
	}

	var resolvePreferFlagDefault string

	_ = cmd.PersistentFlags().String(resolvePreferFlagName, resolvePreferFlagDefault, resolvePreferDescription)

	if err := cmd.RegisterFlagCompletionFunc(resolvePreferFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ipv4","ipv6"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateResolveOpts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resolveOptsDescription := ``

	var resolveOptsFlagName string
	if cmdPrefix == "" {
		resolveOptsFlagName = "resolve_opts"
	} else {
		resolveOptsFlagName = fmt.Sprintf("%v.resolve_opts", cmdPrefix)
	}

	var resolveOptsFlagDefault string

	_ = cmd.PersistentFlags().String(resolveOptsFlagName, resolveOptsFlagDefault, resolveOptsDescription)

	return nil
}

func registerServerTemplateResolvers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resolversDescription := ``

	var resolversFlagName string
	if cmdPrefix == "" {
		resolversFlagName = "resolvers"
	} else {
		resolversFlagName = fmt.Sprintf("%v.resolvers", cmdPrefix)
	}

	var resolversFlagDefault string

	_ = cmd.PersistentFlags().String(resolversFlagName, resolversFlagDefault, resolversDescription)

	return nil
}

func registerServerTemplateRise(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	riseDescription := ``

	var riseFlagName string
	if cmdPrefix == "" {
		riseFlagName = "rise"
	} else {
		riseFlagName = fmt.Sprintf("%v.rise", cmdPrefix)
	}

	var riseFlagDefault int64

	_ = cmd.PersistentFlags().Int64(riseFlagName, riseFlagDefault, riseDescription)

	return nil
}

func registerServerTemplateSendProxy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sendProxyDescription := `Enum: ["enabled","disabled"]. `

	var sendProxyFlagName string
	if cmdPrefix == "" {
		sendProxyFlagName = "send-proxy"
	} else {
		sendProxyFlagName = fmt.Sprintf("%v.send-proxy", cmdPrefix)
	}

	var sendProxyFlagDefault string

	_ = cmd.PersistentFlags().String(sendProxyFlagName, sendProxyFlagDefault, sendProxyDescription)

	if err := cmd.RegisterFlagCompletionFunc(sendProxyFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateSendProxyV2(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sendProxyV2Description := `Enum: ["enabled","disabled"]. `

	var sendProxyV2FlagName string
	if cmdPrefix == "" {
		sendProxyV2FlagName = "send-proxy-v2"
	} else {
		sendProxyV2FlagName = fmt.Sprintf("%v.send-proxy-v2", cmdPrefix)
	}

	var sendProxyV2FlagDefault string

	_ = cmd.PersistentFlags().String(sendProxyV2FlagName, sendProxyV2FlagDefault, sendProxyV2Description)

	if err := cmd.RegisterFlagCompletionFunc(sendProxyV2FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateSendProxyV2Ssl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sendProxyV2SslDescription := `Enum: ["enabled","disabled"]. `

	var sendProxyV2SslFlagName string
	if cmdPrefix == "" {
		sendProxyV2SslFlagName = "send_proxy_v2_ssl"
	} else {
		sendProxyV2SslFlagName = fmt.Sprintf("%v.send_proxy_v2_ssl", cmdPrefix)
	}

	var sendProxyV2SslFlagDefault string

	_ = cmd.PersistentFlags().String(sendProxyV2SslFlagName, sendProxyV2SslFlagDefault, sendProxyV2SslDescription)

	if err := cmd.RegisterFlagCompletionFunc(sendProxyV2SslFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateSendProxyV2SslCn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sendProxyV2SslCnDescription := `Enum: ["enabled","disabled"]. `

	var sendProxyV2SslCnFlagName string
	if cmdPrefix == "" {
		sendProxyV2SslCnFlagName = "send_proxy_v2_ssl_cn"
	} else {
		sendProxyV2SslCnFlagName = fmt.Sprintf("%v.send_proxy_v2_ssl_cn", cmdPrefix)
	}

	var sendProxyV2SslCnFlagDefault string

	_ = cmd.PersistentFlags().String(sendProxyV2SslCnFlagName, sendProxyV2SslCnFlagDefault, sendProxyV2SslCnDescription)

	if err := cmd.RegisterFlagCompletionFunc(sendProxyV2SslCnFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateSlowstart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slowstartDescription := ``

	var slowstartFlagName string
	if cmdPrefix == "" {
		slowstartFlagName = "slowstart"
	} else {
		slowstartFlagName = fmt.Sprintf("%v.slowstart", cmdPrefix)
	}

	var slowstartFlagDefault int64

	_ = cmd.PersistentFlags().Int64(slowstartFlagName, slowstartFlagDefault, slowstartDescription)

	return nil
}

func registerServerTemplateSni(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sniDescription := ``

	var sniFlagName string
	if cmdPrefix == "" {
		sniFlagName = "sni"
	} else {
		sniFlagName = fmt.Sprintf("%v.sni", cmdPrefix)
	}

	var sniFlagDefault string

	_ = cmd.PersistentFlags().String(sniFlagName, sniFlagDefault, sniDescription)

	return nil
}

func registerServerTemplateSocks4(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	socks4Description := ``

	var socks4FlagName string
	if cmdPrefix == "" {
		socks4FlagName = "socks4"
	} else {
		socks4FlagName = fmt.Sprintf("%v.socks4", cmdPrefix)
	}

	var socks4FlagDefault string

	_ = cmd.PersistentFlags().String(socks4FlagName, socks4FlagDefault, socks4Description)

	return nil
}

func registerServerTemplateSource(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sourceDescription := ``

	var sourceFlagName string
	if cmdPrefix == "" {
		sourceFlagName = "source"
	} else {
		sourceFlagName = fmt.Sprintf("%v.source", cmdPrefix)
	}

	var sourceFlagDefault string

	_ = cmd.PersistentFlags().String(sourceFlagName, sourceFlagDefault, sourceDescription)

	return nil
}

func registerServerTemplateSsl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslDescription := `Enum: ["enabled","disabled"]. `

	var sslFlagName string
	if cmdPrefix == "" {
		sslFlagName = "ssl"
	} else {
		sslFlagName = fmt.Sprintf("%v.ssl", cmdPrefix)
	}

	var sslFlagDefault string

	_ = cmd.PersistentFlags().String(sslFlagName, sslFlagDefault, sslDescription)

	if err := cmd.RegisterFlagCompletionFunc(sslFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateSslCafile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslCafileDescription := ``

	var sslCafileFlagName string
	if cmdPrefix == "" {
		sslCafileFlagName = "ssl_cafile"
	} else {
		sslCafileFlagName = fmt.Sprintf("%v.ssl_cafile", cmdPrefix)
	}

	var sslCafileFlagDefault string

	_ = cmd.PersistentFlags().String(sslCafileFlagName, sslCafileFlagDefault, sslCafileDescription)

	return nil
}

func registerServerTemplateSslCertificate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslCertificateDescription := ``

	var sslCertificateFlagName string
	if cmdPrefix == "" {
		sslCertificateFlagName = "ssl_certificate"
	} else {
		sslCertificateFlagName = fmt.Sprintf("%v.ssl_certificate", cmdPrefix)
	}

	var sslCertificateFlagDefault string

	_ = cmd.PersistentFlags().String(sslCertificateFlagName, sslCertificateFlagDefault, sslCertificateDescription)

	return nil
}

func registerServerTemplateSslMaxVer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslMaxVerDescription := `Enum: ["SSLv3","TLSv1.0","TLSv1.1","TLSv1.2","TLSv1.3"]. `

	var sslMaxVerFlagName string
	if cmdPrefix == "" {
		sslMaxVerFlagName = "ssl_max_ver"
	} else {
		sslMaxVerFlagName = fmt.Sprintf("%v.ssl_max_ver", cmdPrefix)
	}

	var sslMaxVerFlagDefault string

	_ = cmd.PersistentFlags().String(sslMaxVerFlagName, sslMaxVerFlagDefault, sslMaxVerDescription)

	if err := cmd.RegisterFlagCompletionFunc(sslMaxVerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["SSLv3","TLSv1.0","TLSv1.1","TLSv1.2","TLSv1.3"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateSslMinVer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslMinVerDescription := `Enum: ["SSLv3","TLSv1.0","TLSv1.1","TLSv1.2","TLSv1.3"]. `

	var sslMinVerFlagName string
	if cmdPrefix == "" {
		sslMinVerFlagName = "ssl_min_ver"
	} else {
		sslMinVerFlagName = fmt.Sprintf("%v.ssl_min_ver", cmdPrefix)
	}

	var sslMinVerFlagDefault string

	_ = cmd.PersistentFlags().String(sslMinVerFlagName, sslMinVerFlagDefault, sslMinVerDescription)

	if err := cmd.RegisterFlagCompletionFunc(sslMinVerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["SSLv3","TLSv1.0","TLSv1.1","TLSv1.2","TLSv1.3"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateSslReuse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslReuseDescription := `Enum: ["enabled","disabled"]. `

	var sslReuseFlagName string
	if cmdPrefix == "" {
		sslReuseFlagName = "ssl_reuse"
	} else {
		sslReuseFlagName = fmt.Sprintf("%v.ssl_reuse", cmdPrefix)
	}

	var sslReuseFlagDefault string

	_ = cmd.PersistentFlags().String(sslReuseFlagName, sslReuseFlagDefault, sslReuseDescription)

	if err := cmd.RegisterFlagCompletionFunc(sslReuseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateStick(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stickDescription := `Enum: ["enabled","disabled"]. `

	var stickFlagName string
	if cmdPrefix == "" {
		stickFlagName = "stick"
	} else {
		stickFlagName = fmt.Sprintf("%v.stick", cmdPrefix)
	}

	var stickFlagDefault string

	_ = cmd.PersistentFlags().String(stickFlagName, stickFlagDefault, stickDescription)

	if err := cmd.RegisterFlagCompletionFunc(stickFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateTCPUt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpUtDescription := ``

	var tcpUtFlagName string
	if cmdPrefix == "" {
		tcpUtFlagName = "tcp_ut"
	} else {
		tcpUtFlagName = fmt.Sprintf("%v.tcp_ut", cmdPrefix)
	}

	var tcpUtFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tcpUtFlagName, tcpUtFlagDefault, tcpUtDescription)

	return nil
}

func registerServerTemplateTfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tfoDescription := `Enum: ["enabled","disabled"]. `

	var tfoFlagName string
	if cmdPrefix == "" {
		tfoFlagName = "tfo"
	} else {
		tfoFlagName = fmt.Sprintf("%v.tfo", cmdPrefix)
	}

	var tfoFlagDefault string

	_ = cmd.PersistentFlags().String(tfoFlagName, tfoFlagDefault, tfoDescription)

	if err := cmd.RegisterFlagCompletionFunc(tfoFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateTLSTickets(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsTicketsDescription := `Enum: ["enabled","disabled"]. `

	var tlsTicketsFlagName string
	if cmdPrefix == "" {
		tlsTicketsFlagName = "tls_tickets"
	} else {
		tlsTicketsFlagName = fmt.Sprintf("%v.tls_tickets", cmdPrefix)
	}

	var tlsTicketsFlagDefault string

	_ = cmd.PersistentFlags().String(tlsTicketsFlagName, tlsTicketsFlagDefault, tlsTicketsDescription)

	if err := cmd.RegisterFlagCompletionFunc(tlsTicketsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateTrack(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trackDescription := ``

	var trackFlagName string
	if cmdPrefix == "" {
		trackFlagName = "track"
	} else {
		trackFlagName = fmt.Sprintf("%v.track", cmdPrefix)
	}

	var trackFlagDefault string

	_ = cmd.PersistentFlags().String(trackFlagName, trackFlagDefault, trackDescription)

	return nil
}

func registerServerTemplateVerify(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	verifyDescription := `Enum: ["none","required"]. `

	var verifyFlagName string
	if cmdPrefix == "" {
		verifyFlagName = "verify"
	} else {
		verifyFlagName = fmt.Sprintf("%v.verify", cmdPrefix)
	}

	var verifyFlagDefault string

	_ = cmd.PersistentFlags().String(verifyFlagName, verifyFlagDefault, verifyDescription)

	if err := cmd.RegisterFlagCompletionFunc(verifyFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["none","required"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerTemplateVerifyhost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	verifyhostDescription := ``

	var verifyhostFlagName string
	if cmdPrefix == "" {
		verifyhostFlagName = "verifyhost"
	} else {
		verifyhostFlagName = fmt.Sprintf("%v.verifyhost", cmdPrefix)
	}

	var verifyhostFlagDefault string

	_ = cmd.PersistentFlags().String(verifyhostFlagName, verifyhostFlagDefault, verifyhostDescription)

	return nil
}

func registerServerTemplateWeight(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	weightDescription := ``

	var weightFlagName string
	if cmdPrefix == "" {
		weightFlagName = "weight"
	} else {
		weightFlagName = fmt.Sprintf("%v.weight", cmdPrefix)
	}

	var weightFlagDefault int64

	_ = cmd.PersistentFlags().Int64(weightFlagName, weightFlagDefault, weightDescription)

	return nil
}

func registerServerTemplateWs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wsDescription := `Enum: ["auto","h1","h2"]. `

	var wsFlagName string
	if cmdPrefix == "" {
		wsFlagName = "ws"
	} else {
		wsFlagName = fmt.Sprintf("%v.ws", cmdPrefix)
	}

	var wsFlagDefault string

	_ = cmd.PersistentFlags().String(wsFlagName, wsFlagDefault, wsDescription)

	if err := cmd.RegisterFlagCompletionFunc(wsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["auto","h1","h2"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServerTemplateFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, agentAddrAdded := retrieveServerTemplateAgentAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentAddrAdded

	err, agentCheckAdded := retrieveServerTemplateAgentCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentCheckAdded

	err, agentInterAdded := retrieveServerTemplateAgentInterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentInterAdded

	err, agentPortAdded := retrieveServerTemplateAgentPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentPortAdded

	err, agentSendAdded := retrieveServerTemplateAgentSendFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentSendAdded

	err, allow0rttAdded := retrieveServerTemplateAllow0rttFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allow0rttAdded

	err, alpnAdded := retrieveServerTemplateAlpnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || alpnAdded

	err, backupAdded := retrieveServerTemplateBackupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || backupAdded

	err, checkAdded := retrieveServerTemplateCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkAdded

	err, checkSendProxyAdded := retrieveServerTemplateCheckSendProxyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkSendProxyAdded

	err, checkSniAdded := retrieveServerTemplateCheckSniFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkSniAdded

	err, checkSslAdded := retrieveServerTemplateCheckSslFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkSslAdded

	err, checkAlpnAdded := retrieveServerTemplateCheckAlpnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkAlpnAdded

	err, checkProtoAdded := retrieveServerTemplateCheckProtoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkProtoAdded

	err, checkViaSocks4Added := retrieveServerTemplateCheckViaSocks4Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkViaSocks4Added

	err, ciphersAdded := retrieveServerTemplateCiphersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ciphersAdded

	err, ciphersuitesAdded := retrieveServerTemplateCiphersuitesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ciphersuitesAdded

	err, cookieAdded := retrieveServerTemplateCookieFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cookieAdded

	err, crlFileAdded := retrieveServerTemplateCrlFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || crlFileAdded

	err, downinterAdded := retrieveServerTemplateDowninterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || downinterAdded

	err, errorLimitAdded := retrieveServerTemplateErrorLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorLimitAdded

	err, fallAdded := retrieveServerTemplateFallFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fallAdded

	err, fastinterAdded := retrieveServerTemplateFastinterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fastinterAdded

	err, forceSslv3Added := retrieveServerTemplateForceSslv3Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceSslv3Added

	err, forceTlsv10Added := retrieveServerTemplateForceTlsv10Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceTlsv10Added

	err, forceTlsv11Added := retrieveServerTemplateForceTlsv11Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceTlsv11Added

	err, forceTlsv12Added := retrieveServerTemplateForceTlsv12Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceTlsv12Added

	err, forceTlsv13Added := retrieveServerTemplateForceTlsv13Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceTlsv13Added

	err, fqdnAdded := retrieveServerTemplateFqdnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fqdnAdded

	err, healthCheckPortAdded := retrieveServerTemplateHealthCheckPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || healthCheckPortAdded

	err, idAdded := retrieveServerTemplateIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, initAddrAdded := retrieveServerTemplateInitAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || initAddrAdded

	err, interAdded := retrieveServerTemplateInterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interAdded

	err, logProtoAdded := retrieveServerTemplateLogProtoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logProtoAdded

	err, maintenanceAdded := retrieveServerTemplateMaintenanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maintenanceAdded

	err, maxReuseAdded := retrieveServerTemplateMaxReuseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxReuseAdded

	err, maxconnAdded := retrieveServerTemplateMaxconnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxconnAdded

	err, maxqueueAdded := retrieveServerTemplateMaxqueueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxqueueAdded

	err, minconnAdded := retrieveServerTemplateMinconnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minconnAdded

	err, namespaceAdded := retrieveServerTemplateNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	err, noSslv3Added := retrieveServerTemplateNoSslv3Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noSslv3Added

	err, noTlsv10Added := retrieveServerTemplateNoTlsv10Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noTlsv10Added

	err, noTlsv11Added := retrieveServerTemplateNoTlsv11Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noTlsv11Added

	err, noTlsv12Added := retrieveServerTemplateNoTlsv12Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noTlsv12Added

	err, noTlsv13Added := retrieveServerTemplateNoTlsv13Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noTlsv13Added

	err, noVerifyhostAdded := retrieveServerTemplateNoVerifyhostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noVerifyhostAdded

	err, npnAdded := retrieveServerTemplateNpnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || npnAdded

	err, numOrRangeAdded := retrieveServerTemplateNumOrRangeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numOrRangeAdded

	err, observeAdded := retrieveServerTemplateObserveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || observeAdded

	err, onErrorAdded := retrieveServerTemplateOnErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || onErrorAdded

	err, onMarkedDownAdded := retrieveServerTemplateOnMarkedDownFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || onMarkedDownAdded

	err, onMarkedUpAdded := retrieveServerTemplateOnMarkedUpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || onMarkedUpAdded

	err, poolLowConnAdded := retrieveServerTemplatePoolLowConnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poolLowConnAdded

	err, poolMaxConnAdded := retrieveServerTemplatePoolMaxConnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poolMaxConnAdded

	err, poolPurgeDelayAdded := retrieveServerTemplatePoolPurgeDelayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poolPurgeDelayAdded

	err, portAdded := retrieveServerTemplatePortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, prefixAdded := retrieveServerTemplatePrefixFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || prefixAdded

	err, protoAdded := retrieveServerTemplateProtoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protoAdded

	err, proxyV2OptionsAdded := retrieveServerTemplateProxyV2OptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || proxyV2OptionsAdded

	err, redirAdded := retrieveServerTemplateRedirFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redirAdded

	err, resolveNetAdded := retrieveServerTemplateResolveNetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resolveNetAdded

	err, resolvePreferAdded := retrieveServerTemplateResolvePreferFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resolvePreferAdded

	err, resolveOptsAdded := retrieveServerTemplateResolveOptsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resolveOptsAdded

	err, resolversAdded := retrieveServerTemplateResolversFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resolversAdded

	err, riseAdded := retrieveServerTemplateRiseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || riseAdded

	err, sendProxyAdded := retrieveServerTemplateSendProxyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sendProxyAdded

	err, sendProxyV2Added := retrieveServerTemplateSendProxyV2Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sendProxyV2Added

	err, sendProxyV2SslAdded := retrieveServerTemplateSendProxyV2SslFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sendProxyV2SslAdded

	err, sendProxyV2SslCnAdded := retrieveServerTemplateSendProxyV2SslCnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sendProxyV2SslCnAdded

	err, slowstartAdded := retrieveServerTemplateSlowstartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slowstartAdded

	err, sniAdded := retrieveServerTemplateSniFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sniAdded

	err, socks4Added := retrieveServerTemplateSocks4Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || socks4Added

	err, sourceAdded := retrieveServerTemplateSourceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sourceAdded

	err, sslAdded := retrieveServerTemplateSslFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslAdded

	err, sslCafileAdded := retrieveServerTemplateSslCafileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslCafileAdded

	err, sslCertificateAdded := retrieveServerTemplateSslCertificateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslCertificateAdded

	err, sslMaxVerAdded := retrieveServerTemplateSslMaxVerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslMaxVerAdded

	err, sslMinVerAdded := retrieveServerTemplateSslMinVerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslMinVerAdded

	err, sslReuseAdded := retrieveServerTemplateSslReuseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslReuseAdded

	err, stickAdded := retrieveServerTemplateStickFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stickAdded

	err, tcpUtAdded := retrieveServerTemplateTCPUtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpUtAdded

	err, tfoAdded := retrieveServerTemplateTfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tfoAdded

	err, tlsTicketsAdded := retrieveServerTemplateTLSTicketsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsTicketsAdded

	err, trackAdded := retrieveServerTemplateTrackFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trackAdded

	err, verifyAdded := retrieveServerTemplateVerifyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || verifyAdded

	err, verifyhostAdded := retrieveServerTemplateVerifyhostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || verifyhostAdded

	err, weightAdded := retrieveServerTemplateWeightFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || weightAdded

	err, wsAdded := retrieveServerTemplateWsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wsAdded

	return nil, retAdded
}

func retrieveServerTemplateAgentAddrFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentAddrFlagName := fmt.Sprintf("%v.agent-addr", cmdPrefix)
	if cmd.Flags().Changed(agentAddrFlagName) {

		var agentAddrFlagName string
		if cmdPrefix == "" {
			agentAddrFlagName = "agent-addr"
		} else {
			agentAddrFlagName = fmt.Sprintf("%v.agent-addr", cmdPrefix)
		}

		agentAddrFlagValue, err := cmd.Flags().GetString(agentAddrFlagName)
		if err != nil {
			return err, false
		}
		m.AgentAddr = agentAddrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateAgentCheckFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentCheckFlagName := fmt.Sprintf("%v.agent-check", cmdPrefix)
	if cmd.Flags().Changed(agentCheckFlagName) {

		var agentCheckFlagName string
		if cmdPrefix == "" {
			agentCheckFlagName = "agent-check"
		} else {
			agentCheckFlagName = fmt.Sprintf("%v.agent-check", cmdPrefix)
		}

		agentCheckFlagValue, err := cmd.Flags().GetString(agentCheckFlagName)
		if err != nil {
			return err, false
		}
		m.AgentCheck = agentCheckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateAgentInterFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentInterFlagName := fmt.Sprintf("%v.agent-inter", cmdPrefix)
	if cmd.Flags().Changed(agentInterFlagName) {

		var agentInterFlagName string
		if cmdPrefix == "" {
			agentInterFlagName = "agent-inter"
		} else {
			agentInterFlagName = fmt.Sprintf("%v.agent-inter", cmdPrefix)
		}

		agentInterFlagValue, err := cmd.Flags().GetInt64(agentInterFlagName)
		if err != nil {
			return err, false
		}
		m.AgentInter = &agentInterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateAgentPortFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentPortFlagName := fmt.Sprintf("%v.agent-port", cmdPrefix)
	if cmd.Flags().Changed(agentPortFlagName) {

		var agentPortFlagName string
		if cmdPrefix == "" {
			agentPortFlagName = "agent-port"
		} else {
			agentPortFlagName = fmt.Sprintf("%v.agent-port", cmdPrefix)
		}

		agentPortFlagValue, err := cmd.Flags().GetInt64(agentPortFlagName)
		if err != nil {
			return err, false
		}
		m.AgentPort = &agentPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateAgentSendFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentSendFlagName := fmt.Sprintf("%v.agent-send", cmdPrefix)
	if cmd.Flags().Changed(agentSendFlagName) {

		var agentSendFlagName string
		if cmdPrefix == "" {
			agentSendFlagName = "agent-send"
		} else {
			agentSendFlagName = fmt.Sprintf("%v.agent-send", cmdPrefix)
		}

		agentSendFlagValue, err := cmd.Flags().GetString(agentSendFlagName)
		if err != nil {
			return err, false
		}
		m.AgentSend = agentSendFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateAllow0rttFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allow0rttFlagName := fmt.Sprintf("%v.allow_0rtt", cmdPrefix)
	if cmd.Flags().Changed(allow0rttFlagName) {

		var allow0rttFlagName string
		if cmdPrefix == "" {
			allow0rttFlagName = "allow_0rtt"
		} else {
			allow0rttFlagName = fmt.Sprintf("%v.allow_0rtt", cmdPrefix)
		}

		allow0rttFlagValue, err := cmd.Flags().GetBool(allow0rttFlagName)
		if err != nil {
			return err, false
		}
		m.Allow0rtt = allow0rttFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateAlpnFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	alpnFlagName := fmt.Sprintf("%v.alpn", cmdPrefix)
	if cmd.Flags().Changed(alpnFlagName) {

		var alpnFlagName string
		if cmdPrefix == "" {
			alpnFlagName = "alpn"
		} else {
			alpnFlagName = fmt.Sprintf("%v.alpn", cmdPrefix)
		}

		alpnFlagValue, err := cmd.Flags().GetString(alpnFlagName)
		if err != nil {
			return err, false
		}
		m.Alpn = alpnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateBackupFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	backupFlagName := fmt.Sprintf("%v.backup", cmdPrefix)
	if cmd.Flags().Changed(backupFlagName) {

		var backupFlagName string
		if cmdPrefix == "" {
			backupFlagName = "backup"
		} else {
			backupFlagName = fmt.Sprintf("%v.backup", cmdPrefix)
		}

		backupFlagValue, err := cmd.Flags().GetString(backupFlagName)
		if err != nil {
			return err, false
		}
		m.Backup = backupFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateCheckFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkFlagName := fmt.Sprintf("%v.check", cmdPrefix)
	if cmd.Flags().Changed(checkFlagName) {

		var checkFlagName string
		if cmdPrefix == "" {
			checkFlagName = "check"
		} else {
			checkFlagName = fmt.Sprintf("%v.check", cmdPrefix)
		}

		checkFlagValue, err := cmd.Flags().GetString(checkFlagName)
		if err != nil {
			return err, false
		}
		m.Check = checkFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateCheckSendProxyFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkSendProxyFlagName := fmt.Sprintf("%v.check-send-proxy", cmdPrefix)
	if cmd.Flags().Changed(checkSendProxyFlagName) {

		var checkSendProxyFlagName string
		if cmdPrefix == "" {
			checkSendProxyFlagName = "check-send-proxy"
		} else {
			checkSendProxyFlagName = fmt.Sprintf("%v.check-send-proxy", cmdPrefix)
		}

		checkSendProxyFlagValue, err := cmd.Flags().GetString(checkSendProxyFlagName)
		if err != nil {
			return err, false
		}
		m.CheckSendProxy = checkSendProxyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateCheckSniFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkSniFlagName := fmt.Sprintf("%v.check-sni", cmdPrefix)
	if cmd.Flags().Changed(checkSniFlagName) {

		var checkSniFlagName string
		if cmdPrefix == "" {
			checkSniFlagName = "check-sni"
		} else {
			checkSniFlagName = fmt.Sprintf("%v.check-sni", cmdPrefix)
		}

		checkSniFlagValue, err := cmd.Flags().GetString(checkSniFlagName)
		if err != nil {
			return err, false
		}
		m.CheckSni = checkSniFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateCheckSslFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkSslFlagName := fmt.Sprintf("%v.check-ssl", cmdPrefix)
	if cmd.Flags().Changed(checkSslFlagName) {

		var checkSslFlagName string
		if cmdPrefix == "" {
			checkSslFlagName = "check-ssl"
		} else {
			checkSslFlagName = fmt.Sprintf("%v.check-ssl", cmdPrefix)
		}

		checkSslFlagValue, err := cmd.Flags().GetString(checkSslFlagName)
		if err != nil {
			return err, false
		}
		m.CheckSsl = checkSslFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateCheckAlpnFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkAlpnFlagName := fmt.Sprintf("%v.check_alpn", cmdPrefix)
	if cmd.Flags().Changed(checkAlpnFlagName) {

		var checkAlpnFlagName string
		if cmdPrefix == "" {
			checkAlpnFlagName = "check_alpn"
		} else {
			checkAlpnFlagName = fmt.Sprintf("%v.check_alpn", cmdPrefix)
		}

		checkAlpnFlagValue, err := cmd.Flags().GetString(checkAlpnFlagName)
		if err != nil {
			return err, false
		}
		m.CheckAlpn = checkAlpnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateCheckProtoFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkProtoFlagName := fmt.Sprintf("%v.check_proto", cmdPrefix)
	if cmd.Flags().Changed(checkProtoFlagName) {

		var checkProtoFlagName string
		if cmdPrefix == "" {
			checkProtoFlagName = "check_proto"
		} else {
			checkProtoFlagName = fmt.Sprintf("%v.check_proto", cmdPrefix)
		}

		checkProtoFlagValue, err := cmd.Flags().GetString(checkProtoFlagName)
		if err != nil {
			return err, false
		}
		m.CheckProto = checkProtoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateCheckViaSocks4Flags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkViaSocks4FlagName := fmt.Sprintf("%v.check_via_socks4", cmdPrefix)
	if cmd.Flags().Changed(checkViaSocks4FlagName) {

		var checkViaSocks4FlagName string
		if cmdPrefix == "" {
			checkViaSocks4FlagName = "check_via_socks4"
		} else {
			checkViaSocks4FlagName = fmt.Sprintf("%v.check_via_socks4", cmdPrefix)
		}

		checkViaSocks4FlagValue, err := cmd.Flags().GetString(checkViaSocks4FlagName)
		if err != nil {
			return err, false
		}
		m.CheckViaSocks4 = checkViaSocks4FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateCiphersFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ciphersFlagName := fmt.Sprintf("%v.ciphers", cmdPrefix)
	if cmd.Flags().Changed(ciphersFlagName) {

		var ciphersFlagName string
		if cmdPrefix == "" {
			ciphersFlagName = "ciphers"
		} else {
			ciphersFlagName = fmt.Sprintf("%v.ciphers", cmdPrefix)
		}

		ciphersFlagValue, err := cmd.Flags().GetString(ciphersFlagName)
		if err != nil {
			return err, false
		}
		m.Ciphers = ciphersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateCiphersuitesFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ciphersuitesFlagName := fmt.Sprintf("%v.ciphersuites", cmdPrefix)
	if cmd.Flags().Changed(ciphersuitesFlagName) {

		var ciphersuitesFlagName string
		if cmdPrefix == "" {
			ciphersuitesFlagName = "ciphersuites"
		} else {
			ciphersuitesFlagName = fmt.Sprintf("%v.ciphersuites", cmdPrefix)
		}

		ciphersuitesFlagValue, err := cmd.Flags().GetString(ciphersuitesFlagName)
		if err != nil {
			return err, false
		}
		m.Ciphersuites = ciphersuitesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateCookieFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cookieFlagName := fmt.Sprintf("%v.cookie", cmdPrefix)
	if cmd.Flags().Changed(cookieFlagName) {

		var cookieFlagName string
		if cmdPrefix == "" {
			cookieFlagName = "cookie"
		} else {
			cookieFlagName = fmt.Sprintf("%v.cookie", cmdPrefix)
		}

		cookieFlagValue, err := cmd.Flags().GetString(cookieFlagName)
		if err != nil {
			return err, false
		}
		m.Cookie = cookieFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateCrlFileFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	crlFileFlagName := fmt.Sprintf("%v.crl_file", cmdPrefix)
	if cmd.Flags().Changed(crlFileFlagName) {

		var crlFileFlagName string
		if cmdPrefix == "" {
			crlFileFlagName = "crl_file"
		} else {
			crlFileFlagName = fmt.Sprintf("%v.crl_file", cmdPrefix)
		}

		crlFileFlagValue, err := cmd.Flags().GetString(crlFileFlagName)
		if err != nil {
			return err, false
		}
		m.CrlFile = crlFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateDowninterFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	downinterFlagName := fmt.Sprintf("%v.downinter", cmdPrefix)
	if cmd.Flags().Changed(downinterFlagName) {

		var downinterFlagName string
		if cmdPrefix == "" {
			downinterFlagName = "downinter"
		} else {
			downinterFlagName = fmt.Sprintf("%v.downinter", cmdPrefix)
		}

		downinterFlagValue, err := cmd.Flags().GetInt64(downinterFlagName)
		if err != nil {
			return err, false
		}
		m.Downinter = &downinterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateErrorLimitFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorLimitFlagName := fmt.Sprintf("%v.error_limit", cmdPrefix)
	if cmd.Flags().Changed(errorLimitFlagName) {

		var errorLimitFlagName string
		if cmdPrefix == "" {
			errorLimitFlagName = "error_limit"
		} else {
			errorLimitFlagName = fmt.Sprintf("%v.error_limit", cmdPrefix)
		}

		errorLimitFlagValue, err := cmd.Flags().GetInt64(errorLimitFlagName)
		if err != nil {
			return err, false
		}
		m.ErrorLimit = errorLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateFallFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fallFlagName := fmt.Sprintf("%v.fall", cmdPrefix)
	if cmd.Flags().Changed(fallFlagName) {

		var fallFlagName string
		if cmdPrefix == "" {
			fallFlagName = "fall"
		} else {
			fallFlagName = fmt.Sprintf("%v.fall", cmdPrefix)
		}

		fallFlagValue, err := cmd.Flags().GetInt64(fallFlagName)
		if err != nil {
			return err, false
		}
		m.Fall = &fallFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateFastinterFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fastinterFlagName := fmt.Sprintf("%v.fastinter", cmdPrefix)
	if cmd.Flags().Changed(fastinterFlagName) {

		var fastinterFlagName string
		if cmdPrefix == "" {
			fastinterFlagName = "fastinter"
		} else {
			fastinterFlagName = fmt.Sprintf("%v.fastinter", cmdPrefix)
		}

		fastinterFlagValue, err := cmd.Flags().GetInt64(fastinterFlagName)
		if err != nil {
			return err, false
		}
		m.Fastinter = &fastinterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateForceSslv3Flags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceSslv3FlagName := fmt.Sprintf("%v.force_sslv3", cmdPrefix)
	if cmd.Flags().Changed(forceSslv3FlagName) {

		var forceSslv3FlagName string
		if cmdPrefix == "" {
			forceSslv3FlagName = "force_sslv3"
		} else {
			forceSslv3FlagName = fmt.Sprintf("%v.force_sslv3", cmdPrefix)
		}

		forceSslv3FlagValue, err := cmd.Flags().GetString(forceSslv3FlagName)
		if err != nil {
			return err, false
		}
		m.ForceSslv3 = forceSslv3FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateForceTlsv10Flags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceTlsv10FlagName := fmt.Sprintf("%v.force_tlsv10", cmdPrefix)
	if cmd.Flags().Changed(forceTlsv10FlagName) {

		var forceTlsv10FlagName string
		if cmdPrefix == "" {
			forceTlsv10FlagName = "force_tlsv10"
		} else {
			forceTlsv10FlagName = fmt.Sprintf("%v.force_tlsv10", cmdPrefix)
		}

		forceTlsv10FlagValue, err := cmd.Flags().GetString(forceTlsv10FlagName)
		if err != nil {
			return err, false
		}
		m.ForceTlsv10 = forceTlsv10FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateForceTlsv11Flags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceTlsv11FlagName := fmt.Sprintf("%v.force_tlsv11", cmdPrefix)
	if cmd.Flags().Changed(forceTlsv11FlagName) {

		var forceTlsv11FlagName string
		if cmdPrefix == "" {
			forceTlsv11FlagName = "force_tlsv11"
		} else {
			forceTlsv11FlagName = fmt.Sprintf("%v.force_tlsv11", cmdPrefix)
		}

		forceTlsv11FlagValue, err := cmd.Flags().GetString(forceTlsv11FlagName)
		if err != nil {
			return err, false
		}
		m.ForceTlsv11 = forceTlsv11FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateForceTlsv12Flags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceTlsv12FlagName := fmt.Sprintf("%v.force_tlsv12", cmdPrefix)
	if cmd.Flags().Changed(forceTlsv12FlagName) {

		var forceTlsv12FlagName string
		if cmdPrefix == "" {
			forceTlsv12FlagName = "force_tlsv12"
		} else {
			forceTlsv12FlagName = fmt.Sprintf("%v.force_tlsv12", cmdPrefix)
		}

		forceTlsv12FlagValue, err := cmd.Flags().GetString(forceTlsv12FlagName)
		if err != nil {
			return err, false
		}
		m.ForceTlsv12 = forceTlsv12FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateForceTlsv13Flags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceTlsv13FlagName := fmt.Sprintf("%v.force_tlsv13", cmdPrefix)
	if cmd.Flags().Changed(forceTlsv13FlagName) {

		var forceTlsv13FlagName string
		if cmdPrefix == "" {
			forceTlsv13FlagName = "force_tlsv13"
		} else {
			forceTlsv13FlagName = fmt.Sprintf("%v.force_tlsv13", cmdPrefix)
		}

		forceTlsv13FlagValue, err := cmd.Flags().GetString(forceTlsv13FlagName)
		if err != nil {
			return err, false
		}
		m.ForceTlsv13 = forceTlsv13FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateFqdnFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fqdnFlagName := fmt.Sprintf("%v.fqdn", cmdPrefix)
	if cmd.Flags().Changed(fqdnFlagName) {

		var fqdnFlagName string
		if cmdPrefix == "" {
			fqdnFlagName = "fqdn"
		} else {
			fqdnFlagName = fmt.Sprintf("%v.fqdn", cmdPrefix)
		}

		fqdnFlagValue, err := cmd.Flags().GetString(fqdnFlagName)
		if err != nil {
			return err, false
		}
		m.Fqdn = fqdnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateHealthCheckPortFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	healthCheckPortFlagName := fmt.Sprintf("%v.health_check_port", cmdPrefix)
	if cmd.Flags().Changed(healthCheckPortFlagName) {

		var healthCheckPortFlagName string
		if cmdPrefix == "" {
			healthCheckPortFlagName = "health_check_port"
		} else {
			healthCheckPortFlagName = fmt.Sprintf("%v.health_check_port", cmdPrefix)
		}

		healthCheckPortFlagValue, err := cmd.Flags().GetInt64(healthCheckPortFlagName)
		if err != nil {
			return err, false
		}
		m.HealthCheckPort = &healthCheckPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateIDFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateInitAddrFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	initAddrFlagName := fmt.Sprintf("%v.init-addr", cmdPrefix)
	if cmd.Flags().Changed(initAddrFlagName) {

		var initAddrFlagName string
		if cmdPrefix == "" {
			initAddrFlagName = "init-addr"
		} else {
			initAddrFlagName = fmt.Sprintf("%v.init-addr", cmdPrefix)
		}

		initAddrFlagValue, err := cmd.Flags().GetString(initAddrFlagName)
		if err != nil {
			return err, false
		}
		m.InitAddr = &initAddrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateInterFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interFlagName := fmt.Sprintf("%v.inter", cmdPrefix)
	if cmd.Flags().Changed(interFlagName) {

		var interFlagName string
		if cmdPrefix == "" {
			interFlagName = "inter"
		} else {
			interFlagName = fmt.Sprintf("%v.inter", cmdPrefix)
		}

		interFlagValue, err := cmd.Flags().GetInt64(interFlagName)
		if err != nil {
			return err, false
		}
		m.Inter = &interFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateLogProtoFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logProtoFlagName := fmt.Sprintf("%v.log_proto", cmdPrefix)
	if cmd.Flags().Changed(logProtoFlagName) {

		var logProtoFlagName string
		if cmdPrefix == "" {
			logProtoFlagName = "log_proto"
		} else {
			logProtoFlagName = fmt.Sprintf("%v.log_proto", cmdPrefix)
		}

		logProtoFlagValue, err := cmd.Flags().GetString(logProtoFlagName)
		if err != nil {
			return err, false
		}
		m.LogProto = logProtoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateMaintenanceFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maintenanceFlagName := fmt.Sprintf("%v.maintenance", cmdPrefix)
	if cmd.Flags().Changed(maintenanceFlagName) {

		var maintenanceFlagName string
		if cmdPrefix == "" {
			maintenanceFlagName = "maintenance"
		} else {
			maintenanceFlagName = fmt.Sprintf("%v.maintenance", cmdPrefix)
		}

		maintenanceFlagValue, err := cmd.Flags().GetString(maintenanceFlagName)
		if err != nil {
			return err, false
		}
		m.Maintenance = maintenanceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateMaxReuseFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxReuseFlagName := fmt.Sprintf("%v.max_reuse", cmdPrefix)
	if cmd.Flags().Changed(maxReuseFlagName) {

		var maxReuseFlagName string
		if cmdPrefix == "" {
			maxReuseFlagName = "max_reuse"
		} else {
			maxReuseFlagName = fmt.Sprintf("%v.max_reuse", cmdPrefix)
		}

		maxReuseFlagValue, err := cmd.Flags().GetInt64(maxReuseFlagName)
		if err != nil {
			return err, false
		}
		m.MaxReuse = &maxReuseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateMaxconnFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxconnFlagName := fmt.Sprintf("%v.maxconn", cmdPrefix)
	if cmd.Flags().Changed(maxconnFlagName) {

		var maxconnFlagName string
		if cmdPrefix == "" {
			maxconnFlagName = "maxconn"
		} else {
			maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
		}

		maxconnFlagValue, err := cmd.Flags().GetInt64(maxconnFlagName)
		if err != nil {
			return err, false
		}
		m.Maxconn = &maxconnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateMaxqueueFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxqueueFlagName := fmt.Sprintf("%v.maxqueue", cmdPrefix)
	if cmd.Flags().Changed(maxqueueFlagName) {

		var maxqueueFlagName string
		if cmdPrefix == "" {
			maxqueueFlagName = "maxqueue"
		} else {
			maxqueueFlagName = fmt.Sprintf("%v.maxqueue", cmdPrefix)
		}

		maxqueueFlagValue, err := cmd.Flags().GetInt64(maxqueueFlagName)
		if err != nil {
			return err, false
		}
		m.Maxqueue = &maxqueueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateMinconnFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minconnFlagName := fmt.Sprintf("%v.minconn", cmdPrefix)
	if cmd.Flags().Changed(minconnFlagName) {

		var minconnFlagName string
		if cmdPrefix == "" {
			minconnFlagName = "minconn"
		} else {
			minconnFlagName = fmt.Sprintf("%v.minconn", cmdPrefix)
		}

		minconnFlagValue, err := cmd.Flags().GetInt64(minconnFlagName)
		if err != nil {
			return err, false
		}
		m.Minconn = &minconnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateNamespaceFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateNoSslv3Flags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noSslv3FlagName := fmt.Sprintf("%v.no_sslv3", cmdPrefix)
	if cmd.Flags().Changed(noSslv3FlagName) {

		var noSslv3FlagName string
		if cmdPrefix == "" {
			noSslv3FlagName = "no_sslv3"
		} else {
			noSslv3FlagName = fmt.Sprintf("%v.no_sslv3", cmdPrefix)
		}

		noSslv3FlagValue, err := cmd.Flags().GetString(noSslv3FlagName)
		if err != nil {
			return err, false
		}
		m.NoSslv3 = noSslv3FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateNoTlsv10Flags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noTlsv10FlagName := fmt.Sprintf("%v.no_tlsv10", cmdPrefix)
	if cmd.Flags().Changed(noTlsv10FlagName) {

		var noTlsv10FlagName string
		if cmdPrefix == "" {
			noTlsv10FlagName = "no_tlsv10"
		} else {
			noTlsv10FlagName = fmt.Sprintf("%v.no_tlsv10", cmdPrefix)
		}

		noTlsv10FlagValue, err := cmd.Flags().GetString(noTlsv10FlagName)
		if err != nil {
			return err, false
		}
		m.NoTlsv10 = noTlsv10FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateNoTlsv11Flags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noTlsv11FlagName := fmt.Sprintf("%v.no_tlsv11", cmdPrefix)
	if cmd.Flags().Changed(noTlsv11FlagName) {

		var noTlsv11FlagName string
		if cmdPrefix == "" {
			noTlsv11FlagName = "no_tlsv11"
		} else {
			noTlsv11FlagName = fmt.Sprintf("%v.no_tlsv11", cmdPrefix)
		}

		noTlsv11FlagValue, err := cmd.Flags().GetString(noTlsv11FlagName)
		if err != nil {
			return err, false
		}
		m.NoTlsv11 = noTlsv11FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateNoTlsv12Flags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noTlsv12FlagName := fmt.Sprintf("%v.no_tlsv12", cmdPrefix)
	if cmd.Flags().Changed(noTlsv12FlagName) {

		var noTlsv12FlagName string
		if cmdPrefix == "" {
			noTlsv12FlagName = "no_tlsv12"
		} else {
			noTlsv12FlagName = fmt.Sprintf("%v.no_tlsv12", cmdPrefix)
		}

		noTlsv12FlagValue, err := cmd.Flags().GetString(noTlsv12FlagName)
		if err != nil {
			return err, false
		}
		m.NoTlsv12 = noTlsv12FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateNoTlsv13Flags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noTlsv13FlagName := fmt.Sprintf("%v.no_tlsv13", cmdPrefix)
	if cmd.Flags().Changed(noTlsv13FlagName) {

		var noTlsv13FlagName string
		if cmdPrefix == "" {
			noTlsv13FlagName = "no_tlsv13"
		} else {
			noTlsv13FlagName = fmt.Sprintf("%v.no_tlsv13", cmdPrefix)
		}

		noTlsv13FlagValue, err := cmd.Flags().GetString(noTlsv13FlagName)
		if err != nil {
			return err, false
		}
		m.NoTlsv13 = noTlsv13FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateNoVerifyhostFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noVerifyhostFlagName := fmt.Sprintf("%v.no_verifyhost", cmdPrefix)
	if cmd.Flags().Changed(noVerifyhostFlagName) {

		var noVerifyhostFlagName string
		if cmdPrefix == "" {
			noVerifyhostFlagName = "no_verifyhost"
		} else {
			noVerifyhostFlagName = fmt.Sprintf("%v.no_verifyhost", cmdPrefix)
		}

		noVerifyhostFlagValue, err := cmd.Flags().GetString(noVerifyhostFlagName)
		if err != nil {
			return err, false
		}
		m.NoVerifyhost = noVerifyhostFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateNpnFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	npnFlagName := fmt.Sprintf("%v.npn", cmdPrefix)
	if cmd.Flags().Changed(npnFlagName) {

		var npnFlagName string
		if cmdPrefix == "" {
			npnFlagName = "npn"
		} else {
			npnFlagName = fmt.Sprintf("%v.npn", cmdPrefix)
		}

		npnFlagValue, err := cmd.Flags().GetString(npnFlagName)
		if err != nil {
			return err, false
		}
		m.Npn = npnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateNumOrRangeFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numOrRangeFlagName := fmt.Sprintf("%v.num_or_range", cmdPrefix)
	if cmd.Flags().Changed(numOrRangeFlagName) {

		var numOrRangeFlagName string
		if cmdPrefix == "" {
			numOrRangeFlagName = "num_or_range"
		} else {
			numOrRangeFlagName = fmt.Sprintf("%v.num_or_range", cmdPrefix)
		}

		numOrRangeFlagValue, err := cmd.Flags().GetString(numOrRangeFlagName)
		if err != nil {
			return err, false
		}
		m.NumOrRange = numOrRangeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateObserveFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	observeFlagName := fmt.Sprintf("%v.observe", cmdPrefix)
	if cmd.Flags().Changed(observeFlagName) {

		var observeFlagName string
		if cmdPrefix == "" {
			observeFlagName = "observe"
		} else {
			observeFlagName = fmt.Sprintf("%v.observe", cmdPrefix)
		}

		observeFlagValue, err := cmd.Flags().GetString(observeFlagName)
		if err != nil {
			return err, false
		}
		m.Observe = observeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateOnErrorFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	onErrorFlagName := fmt.Sprintf("%v.on-error", cmdPrefix)
	if cmd.Flags().Changed(onErrorFlagName) {

		var onErrorFlagName string
		if cmdPrefix == "" {
			onErrorFlagName = "on-error"
		} else {
			onErrorFlagName = fmt.Sprintf("%v.on-error", cmdPrefix)
		}

		onErrorFlagValue, err := cmd.Flags().GetString(onErrorFlagName)
		if err != nil {
			return err, false
		}
		m.OnError = onErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateOnMarkedDownFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	onMarkedDownFlagName := fmt.Sprintf("%v.on-marked-down", cmdPrefix)
	if cmd.Flags().Changed(onMarkedDownFlagName) {

		var onMarkedDownFlagName string
		if cmdPrefix == "" {
			onMarkedDownFlagName = "on-marked-down"
		} else {
			onMarkedDownFlagName = fmt.Sprintf("%v.on-marked-down", cmdPrefix)
		}

		onMarkedDownFlagValue, err := cmd.Flags().GetString(onMarkedDownFlagName)
		if err != nil {
			return err, false
		}
		m.OnMarkedDown = onMarkedDownFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateOnMarkedUpFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	onMarkedUpFlagName := fmt.Sprintf("%v.on-marked-up", cmdPrefix)
	if cmd.Flags().Changed(onMarkedUpFlagName) {

		var onMarkedUpFlagName string
		if cmdPrefix == "" {
			onMarkedUpFlagName = "on-marked-up"
		} else {
			onMarkedUpFlagName = fmt.Sprintf("%v.on-marked-up", cmdPrefix)
		}

		onMarkedUpFlagValue, err := cmd.Flags().GetString(onMarkedUpFlagName)
		if err != nil {
			return err, false
		}
		m.OnMarkedUp = onMarkedUpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplatePoolLowConnFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poolLowConnFlagName := fmt.Sprintf("%v.pool_low_conn", cmdPrefix)
	if cmd.Flags().Changed(poolLowConnFlagName) {

		var poolLowConnFlagName string
		if cmdPrefix == "" {
			poolLowConnFlagName = "pool_low_conn"
		} else {
			poolLowConnFlagName = fmt.Sprintf("%v.pool_low_conn", cmdPrefix)
		}

		poolLowConnFlagValue, err := cmd.Flags().GetInt64(poolLowConnFlagName)
		if err != nil {
			return err, false
		}
		m.PoolLowConn = &poolLowConnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplatePoolMaxConnFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poolMaxConnFlagName := fmt.Sprintf("%v.pool_max_conn", cmdPrefix)
	if cmd.Flags().Changed(poolMaxConnFlagName) {

		var poolMaxConnFlagName string
		if cmdPrefix == "" {
			poolMaxConnFlagName = "pool_max_conn"
		} else {
			poolMaxConnFlagName = fmt.Sprintf("%v.pool_max_conn", cmdPrefix)
		}

		poolMaxConnFlagValue, err := cmd.Flags().GetInt64(poolMaxConnFlagName)
		if err != nil {
			return err, false
		}
		m.PoolMaxConn = &poolMaxConnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplatePoolPurgeDelayFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poolPurgeDelayFlagName := fmt.Sprintf("%v.pool_purge_delay", cmdPrefix)
	if cmd.Flags().Changed(poolPurgeDelayFlagName) {

		var poolPurgeDelayFlagName string
		if cmdPrefix == "" {
			poolPurgeDelayFlagName = "pool_purge_delay"
		} else {
			poolPurgeDelayFlagName = fmt.Sprintf("%v.pool_purge_delay", cmdPrefix)
		}

		poolPurgeDelayFlagValue, err := cmd.Flags().GetInt64(poolPurgeDelayFlagName)
		if err != nil {
			return err, false
		}
		m.PoolPurgeDelay = &poolPurgeDelayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplatePortFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetInt64(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = &portFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplatePrefixFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	prefixFlagName := fmt.Sprintf("%v.prefix", cmdPrefix)
	if cmd.Flags().Changed(prefixFlagName) {

		var prefixFlagName string
		if cmdPrefix == "" {
			prefixFlagName = "prefix"
		} else {
			prefixFlagName = fmt.Sprintf("%v.prefix", cmdPrefix)
		}

		prefixFlagValue, err := cmd.Flags().GetString(prefixFlagName)
		if err != nil {
			return err, false
		}
		m.Prefix = prefixFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateProtoFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protoFlagName := fmt.Sprintf("%v.proto", cmdPrefix)
	if cmd.Flags().Changed(protoFlagName) {

		var protoFlagName string
		if cmdPrefix == "" {
			protoFlagName = "proto"
		} else {
			protoFlagName = fmt.Sprintf("%v.proto", cmdPrefix)
		}

		protoFlagValue, err := cmd.Flags().GetString(protoFlagName)
		if err != nil {
			return err, false
		}
		m.Proto = protoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateProxyV2OptionsFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	proxyV2OptionsFlagName := fmt.Sprintf("%v.proxy-v2-options", cmdPrefix)
	if cmd.Flags().Changed(proxyV2OptionsFlagName) {
		// warning: proxy-v2-options array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServerTemplateRedirFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redirFlagName := fmt.Sprintf("%v.redir", cmdPrefix)
	if cmd.Flags().Changed(redirFlagName) {

		var redirFlagName string
		if cmdPrefix == "" {
			redirFlagName = "redir"
		} else {
			redirFlagName = fmt.Sprintf("%v.redir", cmdPrefix)
		}

		redirFlagValue, err := cmd.Flags().GetString(redirFlagName)
		if err != nil {
			return err, false
		}
		m.Redir = redirFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateResolveNetFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resolveNetFlagName := fmt.Sprintf("%v.resolve-net", cmdPrefix)
	if cmd.Flags().Changed(resolveNetFlagName) {

		var resolveNetFlagName string
		if cmdPrefix == "" {
			resolveNetFlagName = "resolve-net"
		} else {
			resolveNetFlagName = fmt.Sprintf("%v.resolve-net", cmdPrefix)
		}

		resolveNetFlagValue, err := cmd.Flags().GetString(resolveNetFlagName)
		if err != nil {
			return err, false
		}
		m.ResolveNet = resolveNetFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateResolvePreferFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resolvePreferFlagName := fmt.Sprintf("%v.resolve-prefer", cmdPrefix)
	if cmd.Flags().Changed(resolvePreferFlagName) {

		var resolvePreferFlagName string
		if cmdPrefix == "" {
			resolvePreferFlagName = "resolve-prefer"
		} else {
			resolvePreferFlagName = fmt.Sprintf("%v.resolve-prefer", cmdPrefix)
		}

		resolvePreferFlagValue, err := cmd.Flags().GetString(resolvePreferFlagName)
		if err != nil {
			return err, false
		}
		m.ResolvePrefer = resolvePreferFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateResolveOptsFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resolveOptsFlagName := fmt.Sprintf("%v.resolve_opts", cmdPrefix)
	if cmd.Flags().Changed(resolveOptsFlagName) {

		var resolveOptsFlagName string
		if cmdPrefix == "" {
			resolveOptsFlagName = "resolve_opts"
		} else {
			resolveOptsFlagName = fmt.Sprintf("%v.resolve_opts", cmdPrefix)
		}

		resolveOptsFlagValue, err := cmd.Flags().GetString(resolveOptsFlagName)
		if err != nil {
			return err, false
		}
		m.ResolveOpts = resolveOptsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateResolversFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resolversFlagName := fmt.Sprintf("%v.resolvers", cmdPrefix)
	if cmd.Flags().Changed(resolversFlagName) {

		var resolversFlagName string
		if cmdPrefix == "" {
			resolversFlagName = "resolvers"
		} else {
			resolversFlagName = fmt.Sprintf("%v.resolvers", cmdPrefix)
		}

		resolversFlagValue, err := cmd.Flags().GetString(resolversFlagName)
		if err != nil {
			return err, false
		}
		m.Resolvers = resolversFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateRiseFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	riseFlagName := fmt.Sprintf("%v.rise", cmdPrefix)
	if cmd.Flags().Changed(riseFlagName) {

		var riseFlagName string
		if cmdPrefix == "" {
			riseFlagName = "rise"
		} else {
			riseFlagName = fmt.Sprintf("%v.rise", cmdPrefix)
		}

		riseFlagValue, err := cmd.Flags().GetInt64(riseFlagName)
		if err != nil {
			return err, false
		}
		m.Rise = &riseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSendProxyFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sendProxyFlagName := fmt.Sprintf("%v.send-proxy", cmdPrefix)
	if cmd.Flags().Changed(sendProxyFlagName) {

		var sendProxyFlagName string
		if cmdPrefix == "" {
			sendProxyFlagName = "send-proxy"
		} else {
			sendProxyFlagName = fmt.Sprintf("%v.send-proxy", cmdPrefix)
		}

		sendProxyFlagValue, err := cmd.Flags().GetString(sendProxyFlagName)
		if err != nil {
			return err, false
		}
		m.SendProxy = sendProxyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSendProxyV2Flags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sendProxyV2FlagName := fmt.Sprintf("%v.send-proxy-v2", cmdPrefix)
	if cmd.Flags().Changed(sendProxyV2FlagName) {

		var sendProxyV2FlagName string
		if cmdPrefix == "" {
			sendProxyV2FlagName = "send-proxy-v2"
		} else {
			sendProxyV2FlagName = fmt.Sprintf("%v.send-proxy-v2", cmdPrefix)
		}

		sendProxyV2FlagValue, err := cmd.Flags().GetString(sendProxyV2FlagName)
		if err != nil {
			return err, false
		}
		m.SendProxyV2 = sendProxyV2FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSendProxyV2SslFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sendProxyV2SslFlagName := fmt.Sprintf("%v.send_proxy_v2_ssl", cmdPrefix)
	if cmd.Flags().Changed(sendProxyV2SslFlagName) {

		var sendProxyV2SslFlagName string
		if cmdPrefix == "" {
			sendProxyV2SslFlagName = "send_proxy_v2_ssl"
		} else {
			sendProxyV2SslFlagName = fmt.Sprintf("%v.send_proxy_v2_ssl", cmdPrefix)
		}

		sendProxyV2SslFlagValue, err := cmd.Flags().GetString(sendProxyV2SslFlagName)
		if err != nil {
			return err, false
		}
		m.SendProxyV2Ssl = sendProxyV2SslFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSendProxyV2SslCnFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sendProxyV2SslCnFlagName := fmt.Sprintf("%v.send_proxy_v2_ssl_cn", cmdPrefix)
	if cmd.Flags().Changed(sendProxyV2SslCnFlagName) {

		var sendProxyV2SslCnFlagName string
		if cmdPrefix == "" {
			sendProxyV2SslCnFlagName = "send_proxy_v2_ssl_cn"
		} else {
			sendProxyV2SslCnFlagName = fmt.Sprintf("%v.send_proxy_v2_ssl_cn", cmdPrefix)
		}

		sendProxyV2SslCnFlagValue, err := cmd.Flags().GetString(sendProxyV2SslCnFlagName)
		if err != nil {
			return err, false
		}
		m.SendProxyV2SslCn = sendProxyV2SslCnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSlowstartFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slowstartFlagName := fmt.Sprintf("%v.slowstart", cmdPrefix)
	if cmd.Flags().Changed(slowstartFlagName) {

		var slowstartFlagName string
		if cmdPrefix == "" {
			slowstartFlagName = "slowstart"
		} else {
			slowstartFlagName = fmt.Sprintf("%v.slowstart", cmdPrefix)
		}

		slowstartFlagValue, err := cmd.Flags().GetInt64(slowstartFlagName)
		if err != nil {
			return err, false
		}
		m.Slowstart = &slowstartFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSniFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sniFlagName := fmt.Sprintf("%v.sni", cmdPrefix)
	if cmd.Flags().Changed(sniFlagName) {

		var sniFlagName string
		if cmdPrefix == "" {
			sniFlagName = "sni"
		} else {
			sniFlagName = fmt.Sprintf("%v.sni", cmdPrefix)
		}

		sniFlagValue, err := cmd.Flags().GetString(sniFlagName)
		if err != nil {
			return err, false
		}
		m.Sni = sniFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSocks4Flags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	socks4FlagName := fmt.Sprintf("%v.socks4", cmdPrefix)
	if cmd.Flags().Changed(socks4FlagName) {

		var socks4FlagName string
		if cmdPrefix == "" {
			socks4FlagName = "socks4"
		} else {
			socks4FlagName = fmt.Sprintf("%v.socks4", cmdPrefix)
		}

		socks4FlagValue, err := cmd.Flags().GetString(socks4FlagName)
		if err != nil {
			return err, false
		}
		m.Socks4 = socks4FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSourceFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sourceFlagName := fmt.Sprintf("%v.source", cmdPrefix)
	if cmd.Flags().Changed(sourceFlagName) {

		var sourceFlagName string
		if cmdPrefix == "" {
			sourceFlagName = "source"
		} else {
			sourceFlagName = fmt.Sprintf("%v.source", cmdPrefix)
		}

		sourceFlagValue, err := cmd.Flags().GetString(sourceFlagName)
		if err != nil {
			return err, false
		}
		m.Source = sourceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSslFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslFlagName := fmt.Sprintf("%v.ssl", cmdPrefix)
	if cmd.Flags().Changed(sslFlagName) {

		var sslFlagName string
		if cmdPrefix == "" {
			sslFlagName = "ssl"
		} else {
			sslFlagName = fmt.Sprintf("%v.ssl", cmdPrefix)
		}

		sslFlagValue, err := cmd.Flags().GetString(sslFlagName)
		if err != nil {
			return err, false
		}
		m.Ssl = sslFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSslCafileFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslCafileFlagName := fmt.Sprintf("%v.ssl_cafile", cmdPrefix)
	if cmd.Flags().Changed(sslCafileFlagName) {

		var sslCafileFlagName string
		if cmdPrefix == "" {
			sslCafileFlagName = "ssl_cafile"
		} else {
			sslCafileFlagName = fmt.Sprintf("%v.ssl_cafile", cmdPrefix)
		}

		sslCafileFlagValue, err := cmd.Flags().GetString(sslCafileFlagName)
		if err != nil {
			return err, false
		}
		m.SslCafile = sslCafileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSslCertificateFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslCertificateFlagName := fmt.Sprintf("%v.ssl_certificate", cmdPrefix)
	if cmd.Flags().Changed(sslCertificateFlagName) {

		var sslCertificateFlagName string
		if cmdPrefix == "" {
			sslCertificateFlagName = "ssl_certificate"
		} else {
			sslCertificateFlagName = fmt.Sprintf("%v.ssl_certificate", cmdPrefix)
		}

		sslCertificateFlagValue, err := cmd.Flags().GetString(sslCertificateFlagName)
		if err != nil {
			return err, false
		}
		m.SslCertificate = sslCertificateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSslMaxVerFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslMaxVerFlagName := fmt.Sprintf("%v.ssl_max_ver", cmdPrefix)
	if cmd.Flags().Changed(sslMaxVerFlagName) {

		var sslMaxVerFlagName string
		if cmdPrefix == "" {
			sslMaxVerFlagName = "ssl_max_ver"
		} else {
			sslMaxVerFlagName = fmt.Sprintf("%v.ssl_max_ver", cmdPrefix)
		}

		sslMaxVerFlagValue, err := cmd.Flags().GetString(sslMaxVerFlagName)
		if err != nil {
			return err, false
		}
		m.SslMaxVer = sslMaxVerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSslMinVerFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslMinVerFlagName := fmt.Sprintf("%v.ssl_min_ver", cmdPrefix)
	if cmd.Flags().Changed(sslMinVerFlagName) {

		var sslMinVerFlagName string
		if cmdPrefix == "" {
			sslMinVerFlagName = "ssl_min_ver"
		} else {
			sslMinVerFlagName = fmt.Sprintf("%v.ssl_min_ver", cmdPrefix)
		}

		sslMinVerFlagValue, err := cmd.Flags().GetString(sslMinVerFlagName)
		if err != nil {
			return err, false
		}
		m.SslMinVer = sslMinVerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateSslReuseFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslReuseFlagName := fmt.Sprintf("%v.ssl_reuse", cmdPrefix)
	if cmd.Flags().Changed(sslReuseFlagName) {

		var sslReuseFlagName string
		if cmdPrefix == "" {
			sslReuseFlagName = "ssl_reuse"
		} else {
			sslReuseFlagName = fmt.Sprintf("%v.ssl_reuse", cmdPrefix)
		}

		sslReuseFlagValue, err := cmd.Flags().GetString(sslReuseFlagName)
		if err != nil {
			return err, false
		}
		m.SslReuse = sslReuseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateStickFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stickFlagName := fmt.Sprintf("%v.stick", cmdPrefix)
	if cmd.Flags().Changed(stickFlagName) {

		var stickFlagName string
		if cmdPrefix == "" {
			stickFlagName = "stick"
		} else {
			stickFlagName = fmt.Sprintf("%v.stick", cmdPrefix)
		}

		stickFlagValue, err := cmd.Flags().GetString(stickFlagName)
		if err != nil {
			return err, false
		}
		m.Stick = stickFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateTCPUtFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpUtFlagName := fmt.Sprintf("%v.tcp_ut", cmdPrefix)
	if cmd.Flags().Changed(tcpUtFlagName) {

		var tcpUtFlagName string
		if cmdPrefix == "" {
			tcpUtFlagName = "tcp_ut"
		} else {
			tcpUtFlagName = fmt.Sprintf("%v.tcp_ut", cmdPrefix)
		}

		tcpUtFlagValue, err := cmd.Flags().GetInt64(tcpUtFlagName)
		if err != nil {
			return err, false
		}
		m.TCPUt = tcpUtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateTfoFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tfoFlagName := fmt.Sprintf("%v.tfo", cmdPrefix)
	if cmd.Flags().Changed(tfoFlagName) {

		var tfoFlagName string
		if cmdPrefix == "" {
			tfoFlagName = "tfo"
		} else {
			tfoFlagName = fmt.Sprintf("%v.tfo", cmdPrefix)
		}

		tfoFlagValue, err := cmd.Flags().GetString(tfoFlagName)
		if err != nil {
			return err, false
		}
		m.Tfo = tfoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateTLSTicketsFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsTicketsFlagName := fmt.Sprintf("%v.tls_tickets", cmdPrefix)
	if cmd.Flags().Changed(tlsTicketsFlagName) {

		var tlsTicketsFlagName string
		if cmdPrefix == "" {
			tlsTicketsFlagName = "tls_tickets"
		} else {
			tlsTicketsFlagName = fmt.Sprintf("%v.tls_tickets", cmdPrefix)
		}

		tlsTicketsFlagValue, err := cmd.Flags().GetString(tlsTicketsFlagName)
		if err != nil {
			return err, false
		}
		m.TLSTickets = tlsTicketsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateTrackFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trackFlagName := fmt.Sprintf("%v.track", cmdPrefix)
	if cmd.Flags().Changed(trackFlagName) {

		var trackFlagName string
		if cmdPrefix == "" {
			trackFlagName = "track"
		} else {
			trackFlagName = fmt.Sprintf("%v.track", cmdPrefix)
		}

		trackFlagValue, err := cmd.Flags().GetString(trackFlagName)
		if err != nil {
			return err, false
		}
		m.Track = trackFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateVerifyFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	verifyFlagName := fmt.Sprintf("%v.verify", cmdPrefix)
	if cmd.Flags().Changed(verifyFlagName) {

		var verifyFlagName string
		if cmdPrefix == "" {
			verifyFlagName = "verify"
		} else {
			verifyFlagName = fmt.Sprintf("%v.verify", cmdPrefix)
		}

		verifyFlagValue, err := cmd.Flags().GetString(verifyFlagName)
		if err != nil {
			return err, false
		}
		m.Verify = verifyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateVerifyhostFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	verifyhostFlagName := fmt.Sprintf("%v.verifyhost", cmdPrefix)
	if cmd.Flags().Changed(verifyhostFlagName) {

		var verifyhostFlagName string
		if cmdPrefix == "" {
			verifyhostFlagName = "verifyhost"
		} else {
			verifyhostFlagName = fmt.Sprintf("%v.verifyhost", cmdPrefix)
		}

		verifyhostFlagValue, err := cmd.Flags().GetString(verifyhostFlagName)
		if err != nil {
			return err, false
		}
		m.Verifyhost = verifyhostFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateWeightFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	weightFlagName := fmt.Sprintf("%v.weight", cmdPrefix)
	if cmd.Flags().Changed(weightFlagName) {

		var weightFlagName string
		if cmdPrefix == "" {
			weightFlagName = "weight"
		} else {
			weightFlagName = fmt.Sprintf("%v.weight", cmdPrefix)
		}

		weightFlagValue, err := cmd.Flags().GetInt64(weightFlagName)
		if err != nil {
			return err, false
		}
		m.Weight = &weightFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerTemplateWsFlags(depth int, m *models.ServerTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wsFlagName := fmt.Sprintf("%v.ws", cmdPrefix)
	if cmd.Flags().Changed(wsFlagName) {

		var wsFlagName string
		if cmdPrefix == "" {
			wsFlagName = "ws"
		} else {
			wsFlagName = fmt.Sprintf("%v.ws", cmdPrefix)
		}

		wsFlagValue, err := cmd.Flags().GetString(wsFlagName)
		if err != nil {
			return err, false
		}
		m.Ws = wsFlagValue

		retAdded = true
	}

	return nil, retAdded
}
