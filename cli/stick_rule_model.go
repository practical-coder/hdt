// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/models"
	"github.com/spf13/cobra"
)

// Schema cli for StickRule

// register flags to command
func registerModelStickRuleFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStickRuleCond(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickRuleCondTest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickRuleIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickRulePattern(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickRuleTable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStickRuleType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStickRuleCond(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condDescription := `Enum: ["if","unless"]. `

	var condFlagName string
	if cmdPrefix == "" {
		condFlagName = "cond"
	} else {
		condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
	}

	var condFlagDefault string

	_ = cmd.PersistentFlags().String(condFlagName, condFlagDefault, condDescription)

	if err := cmd.RegisterFlagCompletionFunc(condFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["if","unless"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerStickRuleCondTest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	condTestDescription := ``

	var condTestFlagName string
	if cmdPrefix == "" {
		condTestFlagName = "cond_test"
	} else {
		condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
	}

	var condTestFlagDefault string

	_ = cmd.PersistentFlags().String(condTestFlagName, condTestFlagDefault, condTestDescription)

	return nil
}

func registerStickRuleIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	indexDescription := `Required. `

	var indexFlagName string
	if cmdPrefix == "" {
		indexFlagName = "index"
	} else {
		indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
	}

	var indexFlagDefault int64

	_ = cmd.PersistentFlags().Int64(indexFlagName, indexFlagDefault, indexDescription)

	return nil
}

func registerStickRulePattern(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	patternDescription := `Required. `

	var patternFlagName string
	if cmdPrefix == "" {
		patternFlagName = "pattern"
	} else {
		patternFlagName = fmt.Sprintf("%v.pattern", cmdPrefix)
	}

	var patternFlagDefault string

	_ = cmd.PersistentFlags().String(patternFlagName, patternFlagDefault, patternDescription)

	return nil
}

func registerStickRuleTable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tableDescription := ``

	var tableFlagName string
	if cmdPrefix == "" {
		tableFlagName = "table"
	} else {
		tableFlagName = fmt.Sprintf("%v.table", cmdPrefix)
	}

	var tableFlagDefault string

	_ = cmd.PersistentFlags().String(tableFlagName, tableFlagDefault, tableDescription)

	return nil
}

func registerStickRuleType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["match","on","store-request","store-response"]. Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["match","on","store-request","store-response"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStickRuleFlags(depth int, m *models.StickRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, condAdded := retrieveStickRuleCondFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condAdded

	err, condTestAdded := retrieveStickRuleCondTestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || condTestAdded

	err, indexAdded := retrieveStickRuleIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || indexAdded

	err, patternAdded := retrieveStickRulePatternFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || patternAdded

	err, tableAdded := retrieveStickRuleTableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableAdded

	err, typeAdded := retrieveStickRuleTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveStickRuleCondFlags(depth int, m *models.StickRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condFlagName := fmt.Sprintf("%v.cond", cmdPrefix)
	if cmd.Flags().Changed(condFlagName) {

		var condFlagName string
		if cmdPrefix == "" {
			condFlagName = "cond"
		} else {
			condFlagName = fmt.Sprintf("%v.cond", cmdPrefix)
		}

		condFlagValue, err := cmd.Flags().GetString(condFlagName)
		if err != nil {
			return err, false
		}
		m.Cond = condFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickRuleCondTestFlags(depth int, m *models.StickRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	condTestFlagName := fmt.Sprintf("%v.cond_test", cmdPrefix)
	if cmd.Flags().Changed(condTestFlagName) {

		var condTestFlagName string
		if cmdPrefix == "" {
			condTestFlagName = "cond_test"
		} else {
			condTestFlagName = fmt.Sprintf("%v.cond_test", cmdPrefix)
		}

		condTestFlagValue, err := cmd.Flags().GetString(condTestFlagName)
		if err != nil {
			return err, false
		}
		m.CondTest = condTestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickRuleIndexFlags(depth int, m *models.StickRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	indexFlagName := fmt.Sprintf("%v.index", cmdPrefix)
	if cmd.Flags().Changed(indexFlagName) {

		var indexFlagName string
		if cmdPrefix == "" {
			indexFlagName = "index"
		} else {
			indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
		}

		indexFlagValue, err := cmd.Flags().GetInt64(indexFlagName)
		if err != nil {
			return err, false
		}
		m.Index = &indexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickRulePatternFlags(depth int, m *models.StickRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	patternFlagName := fmt.Sprintf("%v.pattern", cmdPrefix)
	if cmd.Flags().Changed(patternFlagName) {

		var patternFlagName string
		if cmdPrefix == "" {
			patternFlagName = "pattern"
		} else {
			patternFlagName = fmt.Sprintf("%v.pattern", cmdPrefix)
		}

		patternFlagValue, err := cmd.Flags().GetString(patternFlagName)
		if err != nil {
			return err, false
		}
		m.Pattern = patternFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickRuleTableFlags(depth int, m *models.StickRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableFlagName := fmt.Sprintf("%v.table", cmdPrefix)
	if cmd.Flags().Changed(tableFlagName) {

		var tableFlagName string
		if cmdPrefix == "" {
			tableFlagName = "table"
		} else {
			tableFlagName = fmt.Sprintf("%v.table", cmdPrefix)
		}

		tableFlagValue, err := cmd.Flags().GetString(tableFlagName)
		if err != nil {
			return err, false
		}
		m.Table = tableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStickRuleTypeFlags(depth int, m *models.StickRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
