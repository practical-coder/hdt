// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdc/models"
	"github.com/spf13/cobra"
)

// Schema cli for AwsRegion

// register flags to command
func registerModelAwsRegionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAwsRegionAccessKeyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAwsRegionAllowlist(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAwsRegionDenylist(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAwsRegionDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAwsRegionEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAwsRegionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAwsRegionIPV4Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAwsRegionName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAwsRegionRegion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAwsRegionRetryTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAwsRegionSecretAccessKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAwsRegionServerSlotsBase(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAwsRegionServerSlotsGrowthIncrement(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAwsRegionServerSlotsGrowthType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAwsRegionAccessKeyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessKeyIdDescription := `AWS Access Key ID.`

	var accessKeyIdFlagName string
	if cmdPrefix == "" {
		accessKeyIdFlagName = "access_key_id"
	} else {
		accessKeyIdFlagName = fmt.Sprintf("%v.access_key_id", cmdPrefix)
	}

	var accessKeyIdFlagDefault string

	_ = cmd.PersistentFlags().String(accessKeyIdFlagName, accessKeyIdFlagDefault, accessKeyIdDescription)

	return nil
}

func registerAwsRegionAllowlist(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: allowlist []*AwsFilters array type is not supported by go-swagger cli yet

	return nil
}

func registerAwsRegionDenylist(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: denylist []*AwsFilters array type is not supported by go-swagger cli yet

	return nil
}

func registerAwsRegionDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerAwsRegionEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Required. `

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerAwsRegionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Auto generated ID.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerAwsRegionIPV4Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipv4AddressDescription := `Enum: ["private","public"]. Required. Select which IPv4 address the Service Discovery has to use for the backend server entry`

	var ipv4AddressFlagName string
	if cmdPrefix == "" {
		ipv4AddressFlagName = "ipv4_address"
	} else {
		ipv4AddressFlagName = fmt.Sprintf("%v.ipv4_address", cmdPrefix)
	}

	var ipv4AddressFlagDefault string

	_ = cmd.PersistentFlags().String(ipv4AddressFlagName, ipv4AddressFlagDefault, ipv4AddressDescription)

	if err := cmd.RegisterFlagCompletionFunc(ipv4AddressFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["private","public"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerAwsRegionName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerAwsRegionRegion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	regionDescription := `Required. `

	var regionFlagName string
	if cmdPrefix == "" {
		regionFlagName = "region"
	} else {
		regionFlagName = fmt.Sprintf("%v.region", cmdPrefix)
	}

	var regionFlagDefault string

	_ = cmd.PersistentFlags().String(regionFlagName, regionFlagDefault, regionDescription)

	return nil
}

func registerAwsRegionRetryTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	retryTimeoutDescription := `Required. Duration in seconds in-between data pulling requests to the AWS region`

	var retryTimeoutFlagName string
	if cmdPrefix == "" {
		retryTimeoutFlagName = "retry_timeout"
	} else {
		retryTimeoutFlagName = fmt.Sprintf("%v.retry_timeout", cmdPrefix)
	}

	var retryTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(retryTimeoutFlagName, retryTimeoutFlagDefault, retryTimeoutDescription)

	return nil
}

func registerAwsRegionSecretAccessKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	secretAccessKeyDescription := `AWS Secret Access Key.`

	var secretAccessKeyFlagName string
	if cmdPrefix == "" {
		secretAccessKeyFlagName = "secret_access_key"
	} else {
		secretAccessKeyFlagName = fmt.Sprintf("%v.secret_access_key", cmdPrefix)
	}

	var secretAccessKeyFlagDefault string

	_ = cmd.PersistentFlags().String(secretAccessKeyFlagName, secretAccessKeyFlagDefault, secretAccessKeyDescription)

	return nil
}

func registerAwsRegionServerSlotsBase(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverSlotsBaseDescription := ``

	var serverSlotsBaseFlagName string
	if cmdPrefix == "" {
		serverSlotsBaseFlagName = "server_slots_base"
	} else {
		serverSlotsBaseFlagName = fmt.Sprintf("%v.server_slots_base", cmdPrefix)
	}

	var serverSlotsBaseFlagDefault int64 = 10

	_ = cmd.PersistentFlags().Int64(serverSlotsBaseFlagName, serverSlotsBaseFlagDefault, serverSlotsBaseDescription)

	return nil
}

func registerAwsRegionServerSlotsGrowthIncrement(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverSlotsGrowthIncrementDescription := ``

	var serverSlotsGrowthIncrementFlagName string
	if cmdPrefix == "" {
		serverSlotsGrowthIncrementFlagName = "server_slots_growth_increment"
	} else {
		serverSlotsGrowthIncrementFlagName = fmt.Sprintf("%v.server_slots_growth_increment", cmdPrefix)
	}

	var serverSlotsGrowthIncrementFlagDefault int64

	_ = cmd.PersistentFlags().Int64(serverSlotsGrowthIncrementFlagName, serverSlotsGrowthIncrementFlagDefault, serverSlotsGrowthIncrementDescription)

	return nil
}

func registerAwsRegionServerSlotsGrowthType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverSlotsGrowthTypeDescription := `Enum: ["linear","exponential"]. `

	var serverSlotsGrowthTypeFlagName string
	if cmdPrefix == "" {
		serverSlotsGrowthTypeFlagName = "server_slots_growth_type"
	} else {
		serverSlotsGrowthTypeFlagName = fmt.Sprintf("%v.server_slots_growth_type", cmdPrefix)
	}

	var serverSlotsGrowthTypeFlagDefault string = "exponential"

	_ = cmd.PersistentFlags().String(serverSlotsGrowthTypeFlagName, serverSlotsGrowthTypeFlagDefault, serverSlotsGrowthTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(serverSlotsGrowthTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["linear","exponential"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAwsRegionFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessKeyIdAdded := retrieveAwsRegionAccessKeyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessKeyIdAdded

	err, allowlistAdded := retrieveAwsRegionAllowlistFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowlistAdded

	err, denylistAdded := retrieveAwsRegionDenylistFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || denylistAdded

	err, descriptionAdded := retrieveAwsRegionDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, enabledAdded := retrieveAwsRegionEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, idAdded := retrieveAwsRegionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, ipv4AddressAdded := retrieveAwsRegionIPV4AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipv4AddressAdded

	err, nameAdded := retrieveAwsRegionNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, regionAdded := retrieveAwsRegionRegionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionAdded

	err, retryTimeoutAdded := retrieveAwsRegionRetryTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || retryTimeoutAdded

	err, secretAccessKeyAdded := retrieveAwsRegionSecretAccessKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || secretAccessKeyAdded

	err, serverSlotsBaseAdded := retrieveAwsRegionServerSlotsBaseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverSlotsBaseAdded

	err, serverSlotsGrowthIncrementAdded := retrieveAwsRegionServerSlotsGrowthIncrementFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverSlotsGrowthIncrementAdded

	err, serverSlotsGrowthTypeAdded := retrieveAwsRegionServerSlotsGrowthTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverSlotsGrowthTypeAdded

	return nil, retAdded
}

func retrieveAwsRegionAccessKeyIDFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessKeyIdFlagName := fmt.Sprintf("%v.access_key_id", cmdPrefix)
	if cmd.Flags().Changed(accessKeyIdFlagName) {

		var accessKeyIdFlagName string
		if cmdPrefix == "" {
			accessKeyIdFlagName = "access_key_id"
		} else {
			accessKeyIdFlagName = fmt.Sprintf("%v.access_key_id", cmdPrefix)
		}

		accessKeyIdFlagValue, err := cmd.Flags().GetString(accessKeyIdFlagName)
		if err != nil {
			return err, false
		}
		m.AccessKeyID = accessKeyIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAwsRegionAllowlistFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowlistFlagName := fmt.Sprintf("%v.allowlist", cmdPrefix)
	if cmd.Flags().Changed(allowlistFlagName) {
		// warning: allowlist array type []*AwsFilters is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAwsRegionDenylistFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	denylistFlagName := fmt.Sprintf("%v.denylist", cmdPrefix)
	if cmd.Flags().Changed(denylistFlagName) {
		// warning: denylist array type []*AwsFilters is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAwsRegionDescriptionFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAwsRegionEnabledFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAwsRegionIDFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAwsRegionIPV4AddressFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipv4AddressFlagName := fmt.Sprintf("%v.ipv4_address", cmdPrefix)
	if cmd.Flags().Changed(ipv4AddressFlagName) {

		var ipv4AddressFlagName string
		if cmdPrefix == "" {
			ipv4AddressFlagName = "ipv4_address"
		} else {
			ipv4AddressFlagName = fmt.Sprintf("%v.ipv4_address", cmdPrefix)
		}

		ipv4AddressFlagValue, err := cmd.Flags().GetString(ipv4AddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPV4Address = &ipv4AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAwsRegionNameFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAwsRegionRegionFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	regionFlagName := fmt.Sprintf("%v.region", cmdPrefix)
	if cmd.Flags().Changed(regionFlagName) {

		var regionFlagName string
		if cmdPrefix == "" {
			regionFlagName = "region"
		} else {
			regionFlagName = fmt.Sprintf("%v.region", cmdPrefix)
		}

		regionFlagValue, err := cmd.Flags().GetString(regionFlagName)
		if err != nil {
			return err, false
		}
		m.Region = &regionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAwsRegionRetryTimeoutFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	retryTimeoutFlagName := fmt.Sprintf("%v.retry_timeout", cmdPrefix)
	if cmd.Flags().Changed(retryTimeoutFlagName) {

		var retryTimeoutFlagName string
		if cmdPrefix == "" {
			retryTimeoutFlagName = "retry_timeout"
		} else {
			retryTimeoutFlagName = fmt.Sprintf("%v.retry_timeout", cmdPrefix)
		}

		retryTimeoutFlagValue, err := cmd.Flags().GetInt64(retryTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.RetryTimeout = &retryTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAwsRegionSecretAccessKeyFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	secretAccessKeyFlagName := fmt.Sprintf("%v.secret_access_key", cmdPrefix)
	if cmd.Flags().Changed(secretAccessKeyFlagName) {

		var secretAccessKeyFlagName string
		if cmdPrefix == "" {
			secretAccessKeyFlagName = "secret_access_key"
		} else {
			secretAccessKeyFlagName = fmt.Sprintf("%v.secret_access_key", cmdPrefix)
		}

		secretAccessKeyFlagValue, err := cmd.Flags().GetString(secretAccessKeyFlagName)
		if err != nil {
			return err, false
		}
		m.SecretAccessKey = secretAccessKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAwsRegionServerSlotsBaseFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverSlotsBaseFlagName := fmt.Sprintf("%v.server_slots_base", cmdPrefix)
	if cmd.Flags().Changed(serverSlotsBaseFlagName) {

		var serverSlotsBaseFlagName string
		if cmdPrefix == "" {
			serverSlotsBaseFlagName = "server_slots_base"
		} else {
			serverSlotsBaseFlagName = fmt.Sprintf("%v.server_slots_base", cmdPrefix)
		}

		serverSlotsBaseFlagValue, err := cmd.Flags().GetInt64(serverSlotsBaseFlagName)
		if err != nil {
			return err, false
		}
		m.ServerSlotsBase = &serverSlotsBaseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAwsRegionServerSlotsGrowthIncrementFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverSlotsGrowthIncrementFlagName := fmt.Sprintf("%v.server_slots_growth_increment", cmdPrefix)
	if cmd.Flags().Changed(serverSlotsGrowthIncrementFlagName) {

		var serverSlotsGrowthIncrementFlagName string
		if cmdPrefix == "" {
			serverSlotsGrowthIncrementFlagName = "server_slots_growth_increment"
		} else {
			serverSlotsGrowthIncrementFlagName = fmt.Sprintf("%v.server_slots_growth_increment", cmdPrefix)
		}

		serverSlotsGrowthIncrementFlagValue, err := cmd.Flags().GetInt64(serverSlotsGrowthIncrementFlagName)
		if err != nil {
			return err, false
		}
		m.ServerSlotsGrowthIncrement = serverSlotsGrowthIncrementFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAwsRegionServerSlotsGrowthTypeFlags(depth int, m *models.AwsRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverSlotsGrowthTypeFlagName := fmt.Sprintf("%v.server_slots_growth_type", cmdPrefix)
	if cmd.Flags().Changed(serverSlotsGrowthTypeFlagName) {

		var serverSlotsGrowthTypeFlagName string
		if cmdPrefix == "" {
			serverSlotsGrowthTypeFlagName = "server_slots_growth_type"
		} else {
			serverSlotsGrowthTypeFlagName = fmt.Sprintf("%v.server_slots_growth_type", cmdPrefix)
		}

		serverSlotsGrowthTypeFlagValue, err := cmd.Flags().GetString(serverSlotsGrowthTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ServerSlotsGrowthType = &serverSlotsGrowthTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
