// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdt/client/maps"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationMapsReplaceRuntimeMapEntryCmd returns a cmd to handle operation replaceRuntimeMapEntry
func makeOperationMapsReplaceRuntimeMapEntryCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "replaceRuntimeMapEntry",
		Short: `Replaces the value corresponding to each id in a map.`,
		RunE:  runOperationMapsReplaceRuntimeMapEntry,
	}

	if err := registerOperationMapsReplaceRuntimeMapEntryParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationMapsReplaceRuntimeMapEntry uses cmd flags to call endpoint api
func runOperationMapsReplaceRuntimeMapEntry(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := maps.NewReplaceRuntimeMapEntryParams()
	if err, _ := retrieveOperationMapsReplaceRuntimeMapEntryDataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationMapsReplaceRuntimeMapEntryForceSyncFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationMapsReplaceRuntimeMapEntryIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationMapsReplaceRuntimeMapEntryMapFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationMapsReplaceRuntimeMapEntryResult(appCli.Maps.ReplaceRuntimeMapEntry(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationMapsReplaceRuntimeMapEntryParamFlags registers all flags needed to fill params
func registerOperationMapsReplaceRuntimeMapEntryParamFlags(cmd *cobra.Command) error {
	if err := registerOperationMapsReplaceRuntimeMapEntryDataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationMapsReplaceRuntimeMapEntryForceSyncParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationMapsReplaceRuntimeMapEntryIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationMapsReplaceRuntimeMapEntryMapParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationMapsReplaceRuntimeMapEntryDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(dataFlagName, "", "Optional json string for [data]. ")

	// add flags for body
	if err := registerModelReplaceRuntimeMapEntryBodyFlags(0, "replaceRuntimeMapEntryBody", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationMapsReplaceRuntimeMapEntryForceSyncParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	forceSyncDescription := `If true, immediately syncs changes to disk`

	var forceSyncFlagName string
	if cmdPrefix == "" {
		forceSyncFlagName = "force_sync"
	} else {
		forceSyncFlagName = fmt.Sprintf("%v.force_sync", cmdPrefix)
	}

	var forceSyncFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceSyncFlagName, forceSyncFlagDefault, forceSyncDescription)

	return nil
}
func registerOperationMapsReplaceRuntimeMapEntryIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Map id`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationMapsReplaceRuntimeMapEntryMapParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	mapDescription := `Required. Mapfile attribute storage_name`

	var mapFlagName string
	if cmdPrefix == "" {
		mapFlagName = "map"
	} else {
		mapFlagName = fmt.Sprintf("%v.map", cmdPrefix)
	}

	var mapFlagDefault string

	_ = cmd.PersistentFlags().String(mapFlagName, mapFlagDefault, mapDescription)

	return nil
}

func retrieveOperationMapsReplaceRuntimeMapEntryDataFlag(m *maps.ReplaceRuntimeMapEntryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("data") {
		// Read data string from cmd and unmarshal
		dataValueStr, err := cmd.Flags().GetString("data")
		if err != nil {
			return err, false
		}

		dataValue := maps.ReplaceRuntimeMapEntryBody{}
		if err := json.Unmarshal([]byte(dataValueStr), &dataValue); err != nil {
			return fmt.Errorf("cannot unmarshal data string in ReplaceRuntimeMapEntryBody: %v", err), false
		}
		m.Data = dataValue
	}
	dataValueModel := m.Data
	if swag.IsZero(dataValueModel) {
		dataValueModel = maps.ReplaceRuntimeMapEntryBody{}
	}
	err, added := retrieveModelReplaceRuntimeMapEntryBodyFlags(0, &dataValueModel, "replaceRuntimeMapEntryBody", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Data = dataValueModel
	}
	if dryRun && debug {

		dataValueDebugBytes, err := json.Marshal(m.Data)
		if err != nil {
			return err, false
		}
		logDebugf("Data dry-run payload: %v", string(dataValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationMapsReplaceRuntimeMapEntryForceSyncFlag(m *maps.ReplaceRuntimeMapEntryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("force_sync") {

		var forceSyncFlagName string
		if cmdPrefix == "" {
			forceSyncFlagName = "force_sync"
		} else {
			forceSyncFlagName = fmt.Sprintf("%v.force_sync", cmdPrefix)
		}

		forceSyncFlagValue, err := cmd.Flags().GetBool(forceSyncFlagName)
		if err != nil {
			return err, false
		}
		m.ForceSync = &forceSyncFlagValue

	}
	return nil, retAdded
}
func retrieveOperationMapsReplaceRuntimeMapEntryIDFlag(m *maps.ReplaceRuntimeMapEntryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationMapsReplaceRuntimeMapEntryMapFlag(m *maps.ReplaceRuntimeMapEntryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("map") {

		var mapFlagName string
		if cmdPrefix == "" {
			mapFlagName = "map"
		} else {
			mapFlagName = fmt.Sprintf("%v.map", cmdPrefix)
		}

		mapFlagValue, err := cmd.Flags().GetString(mapFlagName)
		if err != nil {
			return err, false
		}
		m.Map = mapFlagValue

	}
	return nil, retAdded
}

// parseOperationMapsReplaceRuntimeMapEntryResult parses request result and return the string content
func parseOperationMapsReplaceRuntimeMapEntryResult(resp0 *maps.ReplaceRuntimeMapEntryOK, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*maps.ReplaceRuntimeMapEntryDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*maps.ReplaceRuntimeMapEntryOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*maps.ReplaceRuntimeMapEntryBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*maps.ReplaceRuntimeMapEntryNotFound)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelReplaceRuntimeMapEntryBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReplaceRuntimeMapEntryBodyValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReplaceRuntimeMapEntryBodyValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	valueDescription := `Required. Map value`

	var valueFlagName string
	if cmdPrefix == "" {
		valueFlagName = "value"
	} else {
		valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
	}

	var valueFlagDefault string

	_ = cmd.PersistentFlags().String(valueFlagName, valueFlagDefault, valueDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReplaceRuntimeMapEntryBodyFlags(depth int, m *maps.ReplaceRuntimeMapEntryBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, valueAdded := retrieveReplaceRuntimeMapEntryBodyValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valueAdded

	return nil, retAdded
}

func retrieveReplaceRuntimeMapEntryBodyValueFlags(depth int, m *maps.ReplaceRuntimeMapEntryBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valueFlagName := fmt.Sprintf("%v.value", cmdPrefix)
	if cmd.Flags().Changed(valueFlagName) {

		var valueFlagName string
		if cmdPrefix == "" {
			valueFlagName = "value"
		} else {
			valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
		}

		valueFlagValue, err := cmd.Flags().GetString(valueFlagName)
		if err != nil {
			return err, false
		}
		m.Value = &valueFlagValue

		retAdded = true
	}

	return nil, retAdded
}
