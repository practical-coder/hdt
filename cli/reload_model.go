// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/models"
	"github.com/spf13/cobra"
)

// Schema cli for Reload

// register flags to command
func registerModelReloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReloadID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReloadReloadTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReloadResponse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReloadStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReloadID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerReloadReloadTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	reloadTimestampDescription := ``

	var reloadTimestampFlagName string
	if cmdPrefix == "" {
		reloadTimestampFlagName = "reload_timestamp"
	} else {
		reloadTimestampFlagName = fmt.Sprintf("%v.reload_timestamp", cmdPrefix)
	}

	var reloadTimestampFlagDefault int64

	_ = cmd.PersistentFlags().Int64(reloadTimestampFlagName, reloadTimestampFlagDefault, reloadTimestampDescription)

	return nil
}

func registerReloadResponse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	responseDescription := ``

	var responseFlagName string
	if cmdPrefix == "" {
		responseFlagName = "response"
	} else {
		responseFlagName = fmt.Sprintf("%v.response", cmdPrefix)
	}

	var responseFlagDefault string

	_ = cmd.PersistentFlags().String(responseFlagName, responseFlagDefault, responseDescription)

	return nil
}

func registerReloadStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Enum: ["failed","in_progress","succeeded"]. `

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["failed","in_progress","succeeded"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReloadFlags(depth int, m *models.Reload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, idAdded := retrieveReloadIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, reloadTimestampAdded := retrieveReloadReloadTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || reloadTimestampAdded

	err, responseAdded := retrieveReloadResponseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || responseAdded

	err, statusAdded := retrieveReloadStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrieveReloadIDFlags(depth int, m *models.Reload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReloadReloadTimestampFlags(depth int, m *models.Reload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	reloadTimestampFlagName := fmt.Sprintf("%v.reload_timestamp", cmdPrefix)
	if cmd.Flags().Changed(reloadTimestampFlagName) {

		var reloadTimestampFlagName string
		if cmdPrefix == "" {
			reloadTimestampFlagName = "reload_timestamp"
		} else {
			reloadTimestampFlagName = fmt.Sprintf("%v.reload_timestamp", cmdPrefix)
		}

		reloadTimestampFlagValue, err := cmd.Flags().GetInt64(reloadTimestampFlagName)
		if err != nil {
			return err, false
		}
		m.ReloadTimestamp = reloadTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReloadResponseFlags(depth int, m *models.Reload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	responseFlagName := fmt.Sprintf("%v.response", cmdPrefix)
	if cmd.Flags().Changed(responseFlagName) {

		var responseFlagName string
		if cmdPrefix == "" {
			responseFlagName = "response"
		} else {
			responseFlagName = fmt.Sprintf("%v.response", cmdPrefix)
		}

		responseFlagValue, err := cmd.Flags().GetString(responseFlagName)
		if err != nil {
			return err, false
		}
		m.Response = responseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReloadStatusFlags(depth int, m *models.Reload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
