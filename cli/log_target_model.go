// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/models"
	"github.com/spf13/cobra"
)

// Schema cli for LogTarget

// register flags to command
func registerModelLogTargetFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLogTargetAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLogTargetFacility(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLogTargetFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLogTargetGlobal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLogTargetIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLogTargetLength(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLogTargetLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLogTargetMinlevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLogTargetNolog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLogTargetSampleRange(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLogTargetSampleSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLogTargetAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addressDescription := ``

	var addressFlagName string
	if cmdPrefix == "" {
		addressFlagName = "address"
	} else {
		addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
	}

	var addressFlagDefault string

	_ = cmd.PersistentFlags().String(addressFlagName, addressFlagDefault, addressDescription)

	return nil
}

func registerLogTargetFacility(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	facilityDescription := `Enum: ["kern","user","mail","daemon","auth","syslog","lpr","news","uucp","cron","auth2","ftp","ntp","audit","alert","cron2","local0","local1","local2","local3","local4","local5","local6","local7"]. `

	var facilityFlagName string
	if cmdPrefix == "" {
		facilityFlagName = "facility"
	} else {
		facilityFlagName = fmt.Sprintf("%v.facility", cmdPrefix)
	}

	var facilityFlagDefault string

	_ = cmd.PersistentFlags().String(facilityFlagName, facilityFlagDefault, facilityDescription)

	if err := cmd.RegisterFlagCompletionFunc(facilityFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["kern","user","mail","daemon","auth","syslog","lpr","news","uucp","cron","auth2","ftp","ntp","audit","alert","cron2","local0","local1","local2","local3","local4","local5","local6","local7"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerLogTargetFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	formatDescription := `Enum: ["rfc3164","rfc5424","short","raw"]. `

	var formatFlagName string
	if cmdPrefix == "" {
		formatFlagName = "format"
	} else {
		formatFlagName = fmt.Sprintf("%v.format", cmdPrefix)
	}

	var formatFlagDefault string

	_ = cmd.PersistentFlags().String(formatFlagName, formatFlagDefault, formatDescription)

	if err := cmd.RegisterFlagCompletionFunc(formatFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["rfc3164","rfc5424","short","raw"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerLogTargetGlobal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	globalDescription := ``

	var globalFlagName string
	if cmdPrefix == "" {
		globalFlagName = "global"
	} else {
		globalFlagName = fmt.Sprintf("%v.global", cmdPrefix)
	}

	var globalFlagDefault bool

	_ = cmd.PersistentFlags().Bool(globalFlagName, globalFlagDefault, globalDescription)

	return nil
}

func registerLogTargetIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	indexDescription := `Required. `

	var indexFlagName string
	if cmdPrefix == "" {
		indexFlagName = "index"
	} else {
		indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
	}

	var indexFlagDefault int64

	_ = cmd.PersistentFlags().Int64(indexFlagName, indexFlagDefault, indexDescription)

	return nil
}

func registerLogTargetLength(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lengthDescription := ``

	var lengthFlagName string
	if cmdPrefix == "" {
		lengthFlagName = "length"
	} else {
		lengthFlagName = fmt.Sprintf("%v.length", cmdPrefix)
	}

	var lengthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(lengthFlagName, lengthFlagDefault, lengthDescription)

	return nil
}

func registerLogTargetLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	levelDescription := `Enum: ["emerg","alert","crit","err","warning","notice","info","debug"]. `

	var levelFlagName string
	if cmdPrefix == "" {
		levelFlagName = "level"
	} else {
		levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
	}

	var levelFlagDefault string

	_ = cmd.PersistentFlags().String(levelFlagName, levelFlagDefault, levelDescription)

	if err := cmd.RegisterFlagCompletionFunc(levelFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["emerg","alert","crit","err","warning","notice","info","debug"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerLogTargetMinlevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minlevelDescription := `Enum: ["emerg","alert","crit","err","warning","notice","info","debug"]. `

	var minlevelFlagName string
	if cmdPrefix == "" {
		minlevelFlagName = "minlevel"
	} else {
		minlevelFlagName = fmt.Sprintf("%v.minlevel", cmdPrefix)
	}

	var minlevelFlagDefault string

	_ = cmd.PersistentFlags().String(minlevelFlagName, minlevelFlagDefault, minlevelDescription)

	if err := cmd.RegisterFlagCompletionFunc(minlevelFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["emerg","alert","crit","err","warning","notice","info","debug"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerLogTargetNolog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nologDescription := ``

	var nologFlagName string
	if cmdPrefix == "" {
		nologFlagName = "nolog"
	} else {
		nologFlagName = fmt.Sprintf("%v.nolog", cmdPrefix)
	}

	var nologFlagDefault bool

	_ = cmd.PersistentFlags().Bool(nologFlagName, nologFlagDefault, nologDescription)

	return nil
}

func registerLogTargetSampleRange(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sampleRangeDescription := ``

	var sampleRangeFlagName string
	if cmdPrefix == "" {
		sampleRangeFlagName = "sample_range"
	} else {
		sampleRangeFlagName = fmt.Sprintf("%v.sample_range", cmdPrefix)
	}

	var sampleRangeFlagDefault string

	_ = cmd.PersistentFlags().String(sampleRangeFlagName, sampleRangeFlagDefault, sampleRangeDescription)

	return nil
}

func registerLogTargetSampleSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sampleSizeDescription := ``

	var sampleSizeFlagName string
	if cmdPrefix == "" {
		sampleSizeFlagName = "sample_size"
	} else {
		sampleSizeFlagName = fmt.Sprintf("%v.sample_size", cmdPrefix)
	}

	var sampleSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sampleSizeFlagName, sampleSizeFlagDefault, sampleSizeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLogTargetFlags(depth int, m *models.LogTarget, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressAdded := retrieveLogTargetAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressAdded

	err, facilityAdded := retrieveLogTargetFacilityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || facilityAdded

	err, formatAdded := retrieveLogTargetFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || formatAdded

	err, globalAdded := retrieveLogTargetGlobalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalAdded

	err, indexAdded := retrieveLogTargetIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || indexAdded

	err, lengthAdded := retrieveLogTargetLengthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lengthAdded

	err, levelAdded := retrieveLogTargetLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || levelAdded

	err, minlevelAdded := retrieveLogTargetMinlevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minlevelAdded

	err, nologAdded := retrieveLogTargetNologFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nologAdded

	err, sampleRangeAdded := retrieveLogTargetSampleRangeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sampleRangeAdded

	err, sampleSizeAdded := retrieveLogTargetSampleSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sampleSizeAdded

	return nil, retAdded
}

func retrieveLogTargetAddressFlags(depth int, m *models.LogTarget, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressFlagName := fmt.Sprintf("%v.address", cmdPrefix)
	if cmd.Flags().Changed(addressFlagName) {

		var addressFlagName string
		if cmdPrefix == "" {
			addressFlagName = "address"
		} else {
			addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
		}

		addressFlagValue, err := cmd.Flags().GetString(addressFlagName)
		if err != nil {
			return err, false
		}
		m.Address = addressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLogTargetFacilityFlags(depth int, m *models.LogTarget, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	facilityFlagName := fmt.Sprintf("%v.facility", cmdPrefix)
	if cmd.Flags().Changed(facilityFlagName) {

		var facilityFlagName string
		if cmdPrefix == "" {
			facilityFlagName = "facility"
		} else {
			facilityFlagName = fmt.Sprintf("%v.facility", cmdPrefix)
		}

		facilityFlagValue, err := cmd.Flags().GetString(facilityFlagName)
		if err != nil {
			return err, false
		}
		m.Facility = facilityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLogTargetFormatFlags(depth int, m *models.LogTarget, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	formatFlagName := fmt.Sprintf("%v.format", cmdPrefix)
	if cmd.Flags().Changed(formatFlagName) {

		var formatFlagName string
		if cmdPrefix == "" {
			formatFlagName = "format"
		} else {
			formatFlagName = fmt.Sprintf("%v.format", cmdPrefix)
		}

		formatFlagValue, err := cmd.Flags().GetString(formatFlagName)
		if err != nil {
			return err, false
		}
		m.Format = formatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLogTargetGlobalFlags(depth int, m *models.LogTarget, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	globalFlagName := fmt.Sprintf("%v.global", cmdPrefix)
	if cmd.Flags().Changed(globalFlagName) {

		var globalFlagName string
		if cmdPrefix == "" {
			globalFlagName = "global"
		} else {
			globalFlagName = fmt.Sprintf("%v.global", cmdPrefix)
		}

		globalFlagValue, err := cmd.Flags().GetBool(globalFlagName)
		if err != nil {
			return err, false
		}
		m.Global = globalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLogTargetIndexFlags(depth int, m *models.LogTarget, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	indexFlagName := fmt.Sprintf("%v.index", cmdPrefix)
	if cmd.Flags().Changed(indexFlagName) {

		var indexFlagName string
		if cmdPrefix == "" {
			indexFlagName = "index"
		} else {
			indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
		}

		indexFlagValue, err := cmd.Flags().GetInt64(indexFlagName)
		if err != nil {
			return err, false
		}
		m.Index = &indexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLogTargetLengthFlags(depth int, m *models.LogTarget, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lengthFlagName := fmt.Sprintf("%v.length", cmdPrefix)
	if cmd.Flags().Changed(lengthFlagName) {

		var lengthFlagName string
		if cmdPrefix == "" {
			lengthFlagName = "length"
		} else {
			lengthFlagName = fmt.Sprintf("%v.length", cmdPrefix)
		}

		lengthFlagValue, err := cmd.Flags().GetInt64(lengthFlagName)
		if err != nil {
			return err, false
		}
		m.Length = lengthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLogTargetLevelFlags(depth int, m *models.LogTarget, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	levelFlagName := fmt.Sprintf("%v.level", cmdPrefix)
	if cmd.Flags().Changed(levelFlagName) {

		var levelFlagName string
		if cmdPrefix == "" {
			levelFlagName = "level"
		} else {
			levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
		}

		levelFlagValue, err := cmd.Flags().GetString(levelFlagName)
		if err != nil {
			return err, false
		}
		m.Level = levelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLogTargetMinlevelFlags(depth int, m *models.LogTarget, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minlevelFlagName := fmt.Sprintf("%v.minlevel", cmdPrefix)
	if cmd.Flags().Changed(minlevelFlagName) {

		var minlevelFlagName string
		if cmdPrefix == "" {
			minlevelFlagName = "minlevel"
		} else {
			minlevelFlagName = fmt.Sprintf("%v.minlevel", cmdPrefix)
		}

		minlevelFlagValue, err := cmd.Flags().GetString(minlevelFlagName)
		if err != nil {
			return err, false
		}
		m.Minlevel = minlevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLogTargetNologFlags(depth int, m *models.LogTarget, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nologFlagName := fmt.Sprintf("%v.nolog", cmdPrefix)
	if cmd.Flags().Changed(nologFlagName) {

		var nologFlagName string
		if cmdPrefix == "" {
			nologFlagName = "nolog"
		} else {
			nologFlagName = fmt.Sprintf("%v.nolog", cmdPrefix)
		}

		nologFlagValue, err := cmd.Flags().GetBool(nologFlagName)
		if err != nil {
			return err, false
		}
		m.Nolog = nologFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLogTargetSampleRangeFlags(depth int, m *models.LogTarget, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sampleRangeFlagName := fmt.Sprintf("%v.sample_range", cmdPrefix)
	if cmd.Flags().Changed(sampleRangeFlagName) {

		var sampleRangeFlagName string
		if cmdPrefix == "" {
			sampleRangeFlagName = "sample_range"
		} else {
			sampleRangeFlagName = fmt.Sprintf("%v.sample_range", cmdPrefix)
		}

		sampleRangeFlagValue, err := cmd.Flags().GetString(sampleRangeFlagName)
		if err != nil {
			return err, false
		}
		m.SampleRange = sampleRangeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLogTargetSampleSizeFlags(depth int, m *models.LogTarget, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sampleSizeFlagName := fmt.Sprintf("%v.sample_size", cmdPrefix)
	if cmd.Flags().Changed(sampleSizeFlagName) {

		var sampleSizeFlagName string
		if cmdPrefix == "" {
			sampleSizeFlagName = "sample_size"
		} else {
			sampleSizeFlagName = fmt.Sprintf("%v.sample_size", cmdPrefix)
		}

		sampleSizeFlagValue, err := cmd.Flags().GetInt64(sampleSizeFlagName)
		if err != nil {
			return err, false
		}
		m.SampleSize = sampleSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
