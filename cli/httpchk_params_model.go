// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdc/models"
	"github.com/spf13/cobra"
)

// Schema cli for HttpchkParams

// register flags to command
func registerModelHttpchkParamsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerHttpchkParamsMethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHttpchkParamsURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHttpchkParamsVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerHttpchkParamsMethod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	methodDescription := `Enum: ["HEAD","PUT","POST","GET","TRACE","PATCH"]. `

	var methodFlagName string
	if cmdPrefix == "" {
		methodFlagName = "method"
	} else {
		methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
	}

	var methodFlagDefault string

	_ = cmd.PersistentFlags().String(methodFlagName, methodFlagDefault, methodDescription)

	if err := cmd.RegisterFlagCompletionFunc(methodFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["HEAD","PUT","POST","GET","TRACE","PATCH"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHttpchkParamsURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uriDescription := ``

	var uriFlagName string
	if cmdPrefix == "" {
		uriFlagName = "uri"
	} else {
		uriFlagName = fmt.Sprintf("%v.uri", cmdPrefix)
	}

	var uriFlagDefault string

	_ = cmd.PersistentFlags().String(uriFlagName, uriFlagDefault, uriDescription)

	return nil
}

func registerHttpchkParamsVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHttpchkParamsFlags(depth int, m *models.HttpchkParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, methodAdded := retrieveHttpchkParamsMethodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || methodAdded

	err, uriAdded := retrieveHttpchkParamsURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uriAdded

	err, versionAdded := retrieveHttpchkParamsVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveHttpchkParamsMethodFlags(depth int, m *models.HttpchkParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	methodFlagName := fmt.Sprintf("%v.method", cmdPrefix)
	if cmd.Flags().Changed(methodFlagName) {

		var methodFlagName string
		if cmdPrefix == "" {
			methodFlagName = "method"
		} else {
			methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
		}

		methodFlagValue, err := cmd.Flags().GetString(methodFlagName)
		if err != nil {
			return err, false
		}
		m.Method = methodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHttpchkParamsURIFlags(depth int, m *models.HttpchkParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uriFlagName := fmt.Sprintf("%v.uri", cmdPrefix)
	if cmd.Flags().Changed(uriFlagName) {

		var uriFlagName string
		if cmdPrefix == "" {
			uriFlagName = "uri"
		} else {
			uriFlagName = fmt.Sprintf("%v.uri", cmdPrefix)
		}

		uriFlagValue, err := cmd.Flags().GetString(uriFlagName)
		if err != nil {
			return err, false
		}
		m.URI = uriFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHttpchkParamsVersionFlags(depth int, m *models.HttpchkParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
