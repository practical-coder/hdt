// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdc/models"
	"github.com/spf13/cobra"
)

// Schema cli for Balance

// register flags to command
func registerModelBalanceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBalanceAlgorithm(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBalanceHdrName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBalanceHdrUseDomainOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBalanceRandomDraws(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBalanceRdpCookieName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBalanceURIDepth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBalanceURILen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBalanceURIPathOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBalanceURIWhole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBalanceURLParam(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBalanceURLParamCheckPost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBalanceURLParamMaxWait(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBalanceAlgorithm(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	algorithmDescription := `Enum: ["roundrobin","static-rr","leastconn","first","source","uri","url_param","hdr","random","rdp-cookie"]. Required. `

	var algorithmFlagName string
	if cmdPrefix == "" {
		algorithmFlagName = "algorithm"
	} else {
		algorithmFlagName = fmt.Sprintf("%v.algorithm", cmdPrefix)
	}

	var algorithmFlagDefault string

	_ = cmd.PersistentFlags().String(algorithmFlagName, algorithmFlagDefault, algorithmDescription)

	if err := cmd.RegisterFlagCompletionFunc(algorithmFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["roundrobin","static-rr","leastconn","first","source","uri","url_param","hdr","random","rdp-cookie"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBalanceHdrName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrNameDescription := ``

	var hdrNameFlagName string
	if cmdPrefix == "" {
		hdrNameFlagName = "hdr_name"
	} else {
		hdrNameFlagName = fmt.Sprintf("%v.hdr_name", cmdPrefix)
	}

	var hdrNameFlagDefault string

	_ = cmd.PersistentFlags().String(hdrNameFlagName, hdrNameFlagDefault, hdrNameDescription)

	return nil
}

func registerBalanceHdrUseDomainOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hdrUseDomainOnlyDescription := ``

	var hdrUseDomainOnlyFlagName string
	if cmdPrefix == "" {
		hdrUseDomainOnlyFlagName = "hdr_use_domain_only"
	} else {
		hdrUseDomainOnlyFlagName = fmt.Sprintf("%v.hdr_use_domain_only", cmdPrefix)
	}

	var hdrUseDomainOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hdrUseDomainOnlyFlagName, hdrUseDomainOnlyFlagDefault, hdrUseDomainOnlyDescription)

	return nil
}

func registerBalanceRandomDraws(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	randomDrawsDescription := ``

	var randomDrawsFlagName string
	if cmdPrefix == "" {
		randomDrawsFlagName = "random_draws"
	} else {
		randomDrawsFlagName = fmt.Sprintf("%v.random_draws", cmdPrefix)
	}

	var randomDrawsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(randomDrawsFlagName, randomDrawsFlagDefault, randomDrawsDescription)

	return nil
}

func registerBalanceRdpCookieName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rdpCookieNameDescription := ``

	var rdpCookieNameFlagName string
	if cmdPrefix == "" {
		rdpCookieNameFlagName = "rdp_cookie_name"
	} else {
		rdpCookieNameFlagName = fmt.Sprintf("%v.rdp_cookie_name", cmdPrefix)
	}

	var rdpCookieNameFlagDefault string

	_ = cmd.PersistentFlags().String(rdpCookieNameFlagName, rdpCookieNameFlagDefault, rdpCookieNameDescription)

	return nil
}

func registerBalanceURIDepth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uriDepthDescription := ``

	var uriDepthFlagName string
	if cmdPrefix == "" {
		uriDepthFlagName = "uri_depth"
	} else {
		uriDepthFlagName = fmt.Sprintf("%v.uri_depth", cmdPrefix)
	}

	var uriDepthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(uriDepthFlagName, uriDepthFlagDefault, uriDepthDescription)

	return nil
}

func registerBalanceURILen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uriLenDescription := ``

	var uriLenFlagName string
	if cmdPrefix == "" {
		uriLenFlagName = "uri_len"
	} else {
		uriLenFlagName = fmt.Sprintf("%v.uri_len", cmdPrefix)
	}

	var uriLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(uriLenFlagName, uriLenFlagDefault, uriLenDescription)

	return nil
}

func registerBalanceURIPathOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uriPathOnlyDescription := ``

	var uriPathOnlyFlagName string
	if cmdPrefix == "" {
		uriPathOnlyFlagName = "uri_path_only"
	} else {
		uriPathOnlyFlagName = fmt.Sprintf("%v.uri_path_only", cmdPrefix)
	}

	var uriPathOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(uriPathOnlyFlagName, uriPathOnlyFlagDefault, uriPathOnlyDescription)

	return nil
}

func registerBalanceURIWhole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uriWholeDescription := ``

	var uriWholeFlagName string
	if cmdPrefix == "" {
		uriWholeFlagName = "uri_whole"
	} else {
		uriWholeFlagName = fmt.Sprintf("%v.uri_whole", cmdPrefix)
	}

	var uriWholeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(uriWholeFlagName, uriWholeFlagDefault, uriWholeDescription)

	return nil
}

func registerBalanceURLParam(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlParamDescription := ``

	var urlParamFlagName string
	if cmdPrefix == "" {
		urlParamFlagName = "url_param"
	} else {
		urlParamFlagName = fmt.Sprintf("%v.url_param", cmdPrefix)
	}

	var urlParamFlagDefault string

	_ = cmd.PersistentFlags().String(urlParamFlagName, urlParamFlagDefault, urlParamDescription)

	return nil
}

func registerBalanceURLParamCheckPost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlParamCheckPostDescription := ``

	var urlParamCheckPostFlagName string
	if cmdPrefix == "" {
		urlParamCheckPostFlagName = "url_param_check_post"
	} else {
		urlParamCheckPostFlagName = fmt.Sprintf("%v.url_param_check_post", cmdPrefix)
	}

	var urlParamCheckPostFlagDefault int64

	_ = cmd.PersistentFlags().Int64(urlParamCheckPostFlagName, urlParamCheckPostFlagDefault, urlParamCheckPostDescription)

	return nil
}

func registerBalanceURLParamMaxWait(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlParamMaxWaitDescription := ``

	var urlParamMaxWaitFlagName string
	if cmdPrefix == "" {
		urlParamMaxWaitFlagName = "url_param_max_wait"
	} else {
		urlParamMaxWaitFlagName = fmt.Sprintf("%v.url_param_max_wait", cmdPrefix)
	}

	var urlParamMaxWaitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(urlParamMaxWaitFlagName, urlParamMaxWaitFlagDefault, urlParamMaxWaitDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBalanceFlags(depth int, m *models.Balance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, algorithmAdded := retrieveBalanceAlgorithmFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || algorithmAdded

	err, hdrNameAdded := retrieveBalanceHdrNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrNameAdded

	err, hdrUseDomainOnlyAdded := retrieveBalanceHdrUseDomainOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hdrUseDomainOnlyAdded

	err, randomDrawsAdded := retrieveBalanceRandomDrawsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || randomDrawsAdded

	err, rdpCookieNameAdded := retrieveBalanceRdpCookieNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rdpCookieNameAdded

	err, uriDepthAdded := retrieveBalanceURIDepthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uriDepthAdded

	err, uriLenAdded := retrieveBalanceURILenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uriLenAdded

	err, uriPathOnlyAdded := retrieveBalanceURIPathOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uriPathOnlyAdded

	err, uriWholeAdded := retrieveBalanceURIWholeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uriWholeAdded

	err, urlParamAdded := retrieveBalanceURLParamFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlParamAdded

	err, urlParamCheckPostAdded := retrieveBalanceURLParamCheckPostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlParamCheckPostAdded

	err, urlParamMaxWaitAdded := retrieveBalanceURLParamMaxWaitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlParamMaxWaitAdded

	return nil, retAdded
}

func retrieveBalanceAlgorithmFlags(depth int, m *models.Balance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	algorithmFlagName := fmt.Sprintf("%v.algorithm", cmdPrefix)
	if cmd.Flags().Changed(algorithmFlagName) {

		var algorithmFlagName string
		if cmdPrefix == "" {
			algorithmFlagName = "algorithm"
		} else {
			algorithmFlagName = fmt.Sprintf("%v.algorithm", cmdPrefix)
		}

		algorithmFlagValue, err := cmd.Flags().GetString(algorithmFlagName)
		if err != nil {
			return err, false
		}
		m.Algorithm = &algorithmFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBalanceHdrNameFlags(depth int, m *models.Balance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrNameFlagName := fmt.Sprintf("%v.hdr_name", cmdPrefix)
	if cmd.Flags().Changed(hdrNameFlagName) {

		var hdrNameFlagName string
		if cmdPrefix == "" {
			hdrNameFlagName = "hdr_name"
		} else {
			hdrNameFlagName = fmt.Sprintf("%v.hdr_name", cmdPrefix)
		}

		hdrNameFlagValue, err := cmd.Flags().GetString(hdrNameFlagName)
		if err != nil {
			return err, false
		}
		m.HdrName = hdrNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBalanceHdrUseDomainOnlyFlags(depth int, m *models.Balance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hdrUseDomainOnlyFlagName := fmt.Sprintf("%v.hdr_use_domain_only", cmdPrefix)
	if cmd.Flags().Changed(hdrUseDomainOnlyFlagName) {

		var hdrUseDomainOnlyFlagName string
		if cmdPrefix == "" {
			hdrUseDomainOnlyFlagName = "hdr_use_domain_only"
		} else {
			hdrUseDomainOnlyFlagName = fmt.Sprintf("%v.hdr_use_domain_only", cmdPrefix)
		}

		hdrUseDomainOnlyFlagValue, err := cmd.Flags().GetBool(hdrUseDomainOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.HdrUseDomainOnly = hdrUseDomainOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBalanceRandomDrawsFlags(depth int, m *models.Balance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	randomDrawsFlagName := fmt.Sprintf("%v.random_draws", cmdPrefix)
	if cmd.Flags().Changed(randomDrawsFlagName) {

		var randomDrawsFlagName string
		if cmdPrefix == "" {
			randomDrawsFlagName = "random_draws"
		} else {
			randomDrawsFlagName = fmt.Sprintf("%v.random_draws", cmdPrefix)
		}

		randomDrawsFlagValue, err := cmd.Flags().GetInt64(randomDrawsFlagName)
		if err != nil {
			return err, false
		}
		m.RandomDraws = randomDrawsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBalanceRdpCookieNameFlags(depth int, m *models.Balance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rdpCookieNameFlagName := fmt.Sprintf("%v.rdp_cookie_name", cmdPrefix)
	if cmd.Flags().Changed(rdpCookieNameFlagName) {

		var rdpCookieNameFlagName string
		if cmdPrefix == "" {
			rdpCookieNameFlagName = "rdp_cookie_name"
		} else {
			rdpCookieNameFlagName = fmt.Sprintf("%v.rdp_cookie_name", cmdPrefix)
		}

		rdpCookieNameFlagValue, err := cmd.Flags().GetString(rdpCookieNameFlagName)
		if err != nil {
			return err, false
		}
		m.RdpCookieName = rdpCookieNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBalanceURIDepthFlags(depth int, m *models.Balance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uriDepthFlagName := fmt.Sprintf("%v.uri_depth", cmdPrefix)
	if cmd.Flags().Changed(uriDepthFlagName) {

		var uriDepthFlagName string
		if cmdPrefix == "" {
			uriDepthFlagName = "uri_depth"
		} else {
			uriDepthFlagName = fmt.Sprintf("%v.uri_depth", cmdPrefix)
		}

		uriDepthFlagValue, err := cmd.Flags().GetInt64(uriDepthFlagName)
		if err != nil {
			return err, false
		}
		m.URIDepth = uriDepthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBalanceURILenFlags(depth int, m *models.Balance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uriLenFlagName := fmt.Sprintf("%v.uri_len", cmdPrefix)
	if cmd.Flags().Changed(uriLenFlagName) {

		var uriLenFlagName string
		if cmdPrefix == "" {
			uriLenFlagName = "uri_len"
		} else {
			uriLenFlagName = fmt.Sprintf("%v.uri_len", cmdPrefix)
		}

		uriLenFlagValue, err := cmd.Flags().GetInt64(uriLenFlagName)
		if err != nil {
			return err, false
		}
		m.URILen = uriLenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBalanceURIPathOnlyFlags(depth int, m *models.Balance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uriPathOnlyFlagName := fmt.Sprintf("%v.uri_path_only", cmdPrefix)
	if cmd.Flags().Changed(uriPathOnlyFlagName) {

		var uriPathOnlyFlagName string
		if cmdPrefix == "" {
			uriPathOnlyFlagName = "uri_path_only"
		} else {
			uriPathOnlyFlagName = fmt.Sprintf("%v.uri_path_only", cmdPrefix)
		}

		uriPathOnlyFlagValue, err := cmd.Flags().GetBool(uriPathOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.URIPathOnly = uriPathOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBalanceURIWholeFlags(depth int, m *models.Balance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uriWholeFlagName := fmt.Sprintf("%v.uri_whole", cmdPrefix)
	if cmd.Flags().Changed(uriWholeFlagName) {

		var uriWholeFlagName string
		if cmdPrefix == "" {
			uriWholeFlagName = "uri_whole"
		} else {
			uriWholeFlagName = fmt.Sprintf("%v.uri_whole", cmdPrefix)
		}

		uriWholeFlagValue, err := cmd.Flags().GetBool(uriWholeFlagName)
		if err != nil {
			return err, false
		}
		m.URIWhole = uriWholeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBalanceURLParamFlags(depth int, m *models.Balance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlParamFlagName := fmt.Sprintf("%v.url_param", cmdPrefix)
	if cmd.Flags().Changed(urlParamFlagName) {

		var urlParamFlagName string
		if cmdPrefix == "" {
			urlParamFlagName = "url_param"
		} else {
			urlParamFlagName = fmt.Sprintf("%v.url_param", cmdPrefix)
		}

		urlParamFlagValue, err := cmd.Flags().GetString(urlParamFlagName)
		if err != nil {
			return err, false
		}
		m.URLParam = urlParamFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBalanceURLParamCheckPostFlags(depth int, m *models.Balance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlParamCheckPostFlagName := fmt.Sprintf("%v.url_param_check_post", cmdPrefix)
	if cmd.Flags().Changed(urlParamCheckPostFlagName) {

		var urlParamCheckPostFlagName string
		if cmdPrefix == "" {
			urlParamCheckPostFlagName = "url_param_check_post"
		} else {
			urlParamCheckPostFlagName = fmt.Sprintf("%v.url_param_check_post", cmdPrefix)
		}

		urlParamCheckPostFlagValue, err := cmd.Flags().GetInt64(urlParamCheckPostFlagName)
		if err != nil {
			return err, false
		}
		m.URLParamCheckPost = urlParamCheckPostFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBalanceURLParamMaxWaitFlags(depth int, m *models.Balance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlParamMaxWaitFlagName := fmt.Sprintf("%v.url_param_max_wait", cmdPrefix)
	if cmd.Flags().Changed(urlParamMaxWaitFlagName) {

		var urlParamMaxWaitFlagName string
		if cmdPrefix == "" {
			urlParamMaxWaitFlagName = "url_param_max_wait"
		} else {
			urlParamMaxWaitFlagName = fmt.Sprintf("%v.url_param_max_wait", cmdPrefix)
		}

		urlParamMaxWaitFlagValue, err := cmd.Flags().GetInt64(urlParamMaxWaitFlagName)
		if err != nil {
			return err, false
		}
		m.URLParamMaxWait = urlParamMaxWaitFlagValue

		retAdded = true
	}

	return nil, retAdded
}
