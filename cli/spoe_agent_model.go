// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for SpoeAgent

// register flags to command
func registerModelSpoeAgentFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSpoeAgentAsync(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentContinueOnError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentDontlogNormal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentEngineName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentForceSetVar(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentGroups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentHelloTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentIdleTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentLog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentMaxFrameSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentMaxWaitingFrames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentMaxconnrate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentMaxerrrate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentMessages(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentOptionSetOnError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentOptionSetProcessTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentOptionSetTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentOptionVarPrefix(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentPipelining(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentProcessingTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentRegisterVarNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentSendFragPayload(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpoeAgentUseBackend(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSpoeAgentAsync(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	asyncDescription := `Enum: ["enabled","disabled"]. `

	var asyncFlagName string
	if cmdPrefix == "" {
		asyncFlagName = "async"
	} else {
		asyncFlagName = fmt.Sprintf("%v.async", cmdPrefix)
	}

	var asyncFlagDefault string

	_ = cmd.PersistentFlags().String(asyncFlagName, asyncFlagDefault, asyncDescription)

	if err := cmd.RegisterFlagCompletionFunc(asyncFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSpoeAgentContinueOnError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	continueOnErrorDescription := `Enum: ["enabled"]. `

	var continueOnErrorFlagName string
	if cmdPrefix == "" {
		continueOnErrorFlagName = "continue-on-error"
	} else {
		continueOnErrorFlagName = fmt.Sprintf("%v.continue-on-error", cmdPrefix)
	}

	var continueOnErrorFlagDefault string

	_ = cmd.PersistentFlags().String(continueOnErrorFlagName, continueOnErrorFlagDefault, continueOnErrorDescription)

	if err := cmd.RegisterFlagCompletionFunc(continueOnErrorFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSpoeAgentDontlogNormal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dontlogNormalDescription := `Enum: ["enabled","disabled"]. `

	var dontlogNormalFlagName string
	if cmdPrefix == "" {
		dontlogNormalFlagName = "dontlog-normal"
	} else {
		dontlogNormalFlagName = fmt.Sprintf("%v.dontlog-normal", cmdPrefix)
	}

	var dontlogNormalFlagDefault string

	_ = cmd.PersistentFlags().String(dontlogNormalFlagName, dontlogNormalFlagDefault, dontlogNormalDescription)

	if err := cmd.RegisterFlagCompletionFunc(dontlogNormalFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSpoeAgentEngineName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	engineNameDescription := ``

	var engineNameFlagName string
	if cmdPrefix == "" {
		engineNameFlagName = "engine-name"
	} else {
		engineNameFlagName = fmt.Sprintf("%v.engine-name", cmdPrefix)
	}

	var engineNameFlagDefault string

	_ = cmd.PersistentFlags().String(engineNameFlagName, engineNameFlagDefault, engineNameDescription)

	return nil
}

func registerSpoeAgentForceSetVar(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceSetVarDescription := `Enum: ["enabled"]. `

	var forceSetVarFlagName string
	if cmdPrefix == "" {
		forceSetVarFlagName = "force-set-var"
	} else {
		forceSetVarFlagName = fmt.Sprintf("%v.force-set-var", cmdPrefix)
	}

	var forceSetVarFlagDefault string

	_ = cmd.PersistentFlags().String(forceSetVarFlagName, forceSetVarFlagDefault, forceSetVarDescription)

	if err := cmd.RegisterFlagCompletionFunc(forceSetVarFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSpoeAgentGroups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	groupsDescription := ``

	var groupsFlagName string
	if cmdPrefix == "" {
		groupsFlagName = "groups"
	} else {
		groupsFlagName = fmt.Sprintf("%v.groups", cmdPrefix)
	}

	var groupsFlagDefault string

	_ = cmd.PersistentFlags().String(groupsFlagName, groupsFlagDefault, groupsDescription)

	return nil
}

func registerSpoeAgentHelloTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	helloTimeoutDescription := ``

	var helloTimeoutFlagName string
	if cmdPrefix == "" {
		helloTimeoutFlagName = "hello_timeout"
	} else {
		helloTimeoutFlagName = fmt.Sprintf("%v.hello_timeout", cmdPrefix)
	}

	var helloTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(helloTimeoutFlagName, helloTimeoutFlagDefault, helloTimeoutDescription)

	return nil
}

func registerSpoeAgentIdleTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idleTimeoutDescription := ``

	var idleTimeoutFlagName string
	if cmdPrefix == "" {
		idleTimeoutFlagName = "idle_timeout"
	} else {
		idleTimeoutFlagName = fmt.Sprintf("%v.idle_timeout", cmdPrefix)
	}

	var idleTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idleTimeoutFlagName, idleTimeoutFlagDefault, idleTimeoutDescription)

	return nil
}

func registerSpoeAgentLog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: log LogTargets array type is not supported by go-swagger cli yet

	return nil
}

func registerSpoeAgentMaxFrameSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxFrameSizeDescription := ``

	var maxFrameSizeFlagName string
	if cmdPrefix == "" {
		maxFrameSizeFlagName = "max-frame-size"
	} else {
		maxFrameSizeFlagName = fmt.Sprintf("%v.max-frame-size", cmdPrefix)
	}

	var maxFrameSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxFrameSizeFlagName, maxFrameSizeFlagDefault, maxFrameSizeDescription)

	return nil
}

func registerSpoeAgentMaxWaitingFrames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxWaitingFramesDescription := ``

	var maxWaitingFramesFlagName string
	if cmdPrefix == "" {
		maxWaitingFramesFlagName = "max-waiting-frames"
	} else {
		maxWaitingFramesFlagName = fmt.Sprintf("%v.max-waiting-frames", cmdPrefix)
	}

	var maxWaitingFramesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxWaitingFramesFlagName, maxWaitingFramesFlagDefault, maxWaitingFramesDescription)

	return nil
}

func registerSpoeAgentMaxconnrate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxconnrateDescription := ``

	var maxconnrateFlagName string
	if cmdPrefix == "" {
		maxconnrateFlagName = "maxconnrate"
	} else {
		maxconnrateFlagName = fmt.Sprintf("%v.maxconnrate", cmdPrefix)
	}

	var maxconnrateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxconnrateFlagName, maxconnrateFlagDefault, maxconnrateDescription)

	return nil
}

func registerSpoeAgentMaxerrrate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxerrrateDescription := ``

	var maxerrrateFlagName string
	if cmdPrefix == "" {
		maxerrrateFlagName = "maxerrrate"
	} else {
		maxerrrateFlagName = fmt.Sprintf("%v.maxerrrate", cmdPrefix)
	}

	var maxerrrateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxerrrateFlagName, maxerrrateFlagDefault, maxerrrateDescription)

	return nil
}

func registerSpoeAgentMessages(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messagesDescription := ``

	var messagesFlagName string
	if cmdPrefix == "" {
		messagesFlagName = "messages"
	} else {
		messagesFlagName = fmt.Sprintf("%v.messages", cmdPrefix)
	}

	var messagesFlagDefault string

	_ = cmd.PersistentFlags().String(messagesFlagName, messagesFlagDefault, messagesDescription)

	return nil
}

func registerSpoeAgentName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerSpoeAgentOptionSetOnError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	optionSetOnErrorDescription := ``

	var optionSetOnErrorFlagName string
	if cmdPrefix == "" {
		optionSetOnErrorFlagName = "option_set-on-error"
	} else {
		optionSetOnErrorFlagName = fmt.Sprintf("%v.option_set-on-error", cmdPrefix)
	}

	var optionSetOnErrorFlagDefault string

	_ = cmd.PersistentFlags().String(optionSetOnErrorFlagName, optionSetOnErrorFlagDefault, optionSetOnErrorDescription)

	return nil
}

func registerSpoeAgentOptionSetProcessTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	optionSetProcessTimeDescription := ``

	var optionSetProcessTimeFlagName string
	if cmdPrefix == "" {
		optionSetProcessTimeFlagName = "option_set-process-time"
	} else {
		optionSetProcessTimeFlagName = fmt.Sprintf("%v.option_set-process-time", cmdPrefix)
	}

	var optionSetProcessTimeFlagDefault string

	_ = cmd.PersistentFlags().String(optionSetProcessTimeFlagName, optionSetProcessTimeFlagDefault, optionSetProcessTimeDescription)

	return nil
}

func registerSpoeAgentOptionSetTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	optionSetTotalTimeDescription := ``

	var optionSetTotalTimeFlagName string
	if cmdPrefix == "" {
		optionSetTotalTimeFlagName = "option_set-total-time"
	} else {
		optionSetTotalTimeFlagName = fmt.Sprintf("%v.option_set-total-time", cmdPrefix)
	}

	var optionSetTotalTimeFlagDefault string

	_ = cmd.PersistentFlags().String(optionSetTotalTimeFlagName, optionSetTotalTimeFlagDefault, optionSetTotalTimeDescription)

	return nil
}

func registerSpoeAgentOptionVarPrefix(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	optionVarPrefixDescription := ``

	var optionVarPrefixFlagName string
	if cmdPrefix == "" {
		optionVarPrefixFlagName = "option_var-prefix"
	} else {
		optionVarPrefixFlagName = fmt.Sprintf("%v.option_var-prefix", cmdPrefix)
	}

	var optionVarPrefixFlagDefault string

	_ = cmd.PersistentFlags().String(optionVarPrefixFlagName, optionVarPrefixFlagDefault, optionVarPrefixDescription)

	return nil
}

func registerSpoeAgentPipelining(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pipeliningDescription := `Enum: ["enabled","disabled"]. `

	var pipeliningFlagName string
	if cmdPrefix == "" {
		pipeliningFlagName = "pipelining"
	} else {
		pipeliningFlagName = fmt.Sprintf("%v.pipelining", cmdPrefix)
	}

	var pipeliningFlagDefault string

	_ = cmd.PersistentFlags().String(pipeliningFlagName, pipeliningFlagDefault, pipeliningDescription)

	if err := cmd.RegisterFlagCompletionFunc(pipeliningFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSpoeAgentProcessingTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	processingTimeoutDescription := ``

	var processingTimeoutFlagName string
	if cmdPrefix == "" {
		processingTimeoutFlagName = "processing_timeout"
	} else {
		processingTimeoutFlagName = fmt.Sprintf("%v.processing_timeout", cmdPrefix)
	}

	var processingTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(processingTimeoutFlagName, processingTimeoutFlagDefault, processingTimeoutDescription)

	return nil
}

func registerSpoeAgentRegisterVarNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	registerVarNamesDescription := ``

	var registerVarNamesFlagName string
	if cmdPrefix == "" {
		registerVarNamesFlagName = "register-var-names"
	} else {
		registerVarNamesFlagName = fmt.Sprintf("%v.register-var-names", cmdPrefix)
	}

	var registerVarNamesFlagDefault string

	_ = cmd.PersistentFlags().String(registerVarNamesFlagName, registerVarNamesFlagDefault, registerVarNamesDescription)

	return nil
}

func registerSpoeAgentSendFragPayload(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sendFragPayloadDescription := `Enum: ["enabled","disabled"]. `

	var sendFragPayloadFlagName string
	if cmdPrefix == "" {
		sendFragPayloadFlagName = "send-frag-payload"
	} else {
		sendFragPayloadFlagName = fmt.Sprintf("%v.send-frag-payload", cmdPrefix)
	}

	var sendFragPayloadFlagDefault string

	_ = cmd.PersistentFlags().String(sendFragPayloadFlagName, sendFragPayloadFlagDefault, sendFragPayloadDescription)

	if err := cmd.RegisterFlagCompletionFunc(sendFragPayloadFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSpoeAgentUseBackend(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useBackendDescription := ``

	var useBackendFlagName string
	if cmdPrefix == "" {
		useBackendFlagName = "use-backend"
	} else {
		useBackendFlagName = fmt.Sprintf("%v.use-backend", cmdPrefix)
	}

	var useBackendFlagDefault string

	_ = cmd.PersistentFlags().String(useBackendFlagName, useBackendFlagDefault, useBackendDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSpoeAgentFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, asyncAdded := retrieveSpoeAgentAsyncFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || asyncAdded

	err, continueOnErrorAdded := retrieveSpoeAgentContinueOnErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || continueOnErrorAdded

	err, dontlogNormalAdded := retrieveSpoeAgentDontlogNormalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dontlogNormalAdded

	err, engineNameAdded := retrieveSpoeAgentEngineNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || engineNameAdded

	err, forceSetVarAdded := retrieveSpoeAgentForceSetVarFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceSetVarAdded

	err, groupsAdded := retrieveSpoeAgentGroupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || groupsAdded

	err, helloTimeoutAdded := retrieveSpoeAgentHelloTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || helloTimeoutAdded

	err, idleTimeoutAdded := retrieveSpoeAgentIdleTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idleTimeoutAdded

	err, logAdded := retrieveSpoeAgentLogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logAdded

	err, maxFrameSizeAdded := retrieveSpoeAgentMaxFrameSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxFrameSizeAdded

	err, maxWaitingFramesAdded := retrieveSpoeAgentMaxWaitingFramesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxWaitingFramesAdded

	err, maxconnrateAdded := retrieveSpoeAgentMaxconnrateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxconnrateAdded

	err, maxerrrateAdded := retrieveSpoeAgentMaxerrrateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxerrrateAdded

	err, messagesAdded := retrieveSpoeAgentMessagesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messagesAdded

	err, nameAdded := retrieveSpoeAgentNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, optionSetOnErrorAdded := retrieveSpoeAgentOptionSetOnErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || optionSetOnErrorAdded

	err, optionSetProcessTimeAdded := retrieveSpoeAgentOptionSetProcessTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || optionSetProcessTimeAdded

	err, optionSetTotalTimeAdded := retrieveSpoeAgentOptionSetTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || optionSetTotalTimeAdded

	err, optionVarPrefixAdded := retrieveSpoeAgentOptionVarPrefixFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || optionVarPrefixAdded

	err, pipeliningAdded := retrieveSpoeAgentPipeliningFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pipeliningAdded

	err, processingTimeoutAdded := retrieveSpoeAgentProcessingTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || processingTimeoutAdded

	err, registerVarNamesAdded := retrieveSpoeAgentRegisterVarNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registerVarNamesAdded

	err, sendFragPayloadAdded := retrieveSpoeAgentSendFragPayloadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sendFragPayloadAdded

	err, useBackendAdded := retrieveSpoeAgentUseBackendFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useBackendAdded

	return nil, retAdded
}

func retrieveSpoeAgentAsyncFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	asyncFlagName := fmt.Sprintf("%v.async", cmdPrefix)
	if cmd.Flags().Changed(asyncFlagName) {

		var asyncFlagName string
		if cmdPrefix == "" {
			asyncFlagName = "async"
		} else {
			asyncFlagName = fmt.Sprintf("%v.async", cmdPrefix)
		}

		asyncFlagValue, err := cmd.Flags().GetString(asyncFlagName)
		if err != nil {
			return err, false
		}
		m.Async = asyncFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentContinueOnErrorFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	continueOnErrorFlagName := fmt.Sprintf("%v.continue-on-error", cmdPrefix)
	if cmd.Flags().Changed(continueOnErrorFlagName) {

		var continueOnErrorFlagName string
		if cmdPrefix == "" {
			continueOnErrorFlagName = "continue-on-error"
		} else {
			continueOnErrorFlagName = fmt.Sprintf("%v.continue-on-error", cmdPrefix)
		}

		continueOnErrorFlagValue, err := cmd.Flags().GetString(continueOnErrorFlagName)
		if err != nil {
			return err, false
		}
		m.ContinueOnError = continueOnErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentDontlogNormalFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dontlogNormalFlagName := fmt.Sprintf("%v.dontlog-normal", cmdPrefix)
	if cmd.Flags().Changed(dontlogNormalFlagName) {

		var dontlogNormalFlagName string
		if cmdPrefix == "" {
			dontlogNormalFlagName = "dontlog-normal"
		} else {
			dontlogNormalFlagName = fmt.Sprintf("%v.dontlog-normal", cmdPrefix)
		}

		dontlogNormalFlagValue, err := cmd.Flags().GetString(dontlogNormalFlagName)
		if err != nil {
			return err, false
		}
		m.DontlogNormal = dontlogNormalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentEngineNameFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	engineNameFlagName := fmt.Sprintf("%v.engine-name", cmdPrefix)
	if cmd.Flags().Changed(engineNameFlagName) {

		var engineNameFlagName string
		if cmdPrefix == "" {
			engineNameFlagName = "engine-name"
		} else {
			engineNameFlagName = fmt.Sprintf("%v.engine-name", cmdPrefix)
		}

		engineNameFlagValue, err := cmd.Flags().GetString(engineNameFlagName)
		if err != nil {
			return err, false
		}
		m.EngineName = engineNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentForceSetVarFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceSetVarFlagName := fmt.Sprintf("%v.force-set-var", cmdPrefix)
	if cmd.Flags().Changed(forceSetVarFlagName) {

		var forceSetVarFlagName string
		if cmdPrefix == "" {
			forceSetVarFlagName = "force-set-var"
		} else {
			forceSetVarFlagName = fmt.Sprintf("%v.force-set-var", cmdPrefix)
		}

		forceSetVarFlagValue, err := cmd.Flags().GetString(forceSetVarFlagName)
		if err != nil {
			return err, false
		}
		m.ForceSetVar = forceSetVarFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentGroupsFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	groupsFlagName := fmt.Sprintf("%v.groups", cmdPrefix)
	if cmd.Flags().Changed(groupsFlagName) {

		var groupsFlagName string
		if cmdPrefix == "" {
			groupsFlagName = "groups"
		} else {
			groupsFlagName = fmt.Sprintf("%v.groups", cmdPrefix)
		}

		groupsFlagValue, err := cmd.Flags().GetString(groupsFlagName)
		if err != nil {
			return err, false
		}
		m.Groups = groupsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentHelloTimeoutFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	helloTimeoutFlagName := fmt.Sprintf("%v.hello_timeout", cmdPrefix)
	if cmd.Flags().Changed(helloTimeoutFlagName) {

		var helloTimeoutFlagName string
		if cmdPrefix == "" {
			helloTimeoutFlagName = "hello_timeout"
		} else {
			helloTimeoutFlagName = fmt.Sprintf("%v.hello_timeout", cmdPrefix)
		}

		helloTimeoutFlagValue, err := cmd.Flags().GetInt64(helloTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.HelloTimeout = helloTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentIdleTimeoutFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idleTimeoutFlagName := fmt.Sprintf("%v.idle_timeout", cmdPrefix)
	if cmd.Flags().Changed(idleTimeoutFlagName) {

		var idleTimeoutFlagName string
		if cmdPrefix == "" {
			idleTimeoutFlagName = "idle_timeout"
		} else {
			idleTimeoutFlagName = fmt.Sprintf("%v.idle_timeout", cmdPrefix)
		}

		idleTimeoutFlagValue, err := cmd.Flags().GetInt64(idleTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.IdleTimeout = idleTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentLogFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logFlagName := fmt.Sprintf("%v.log", cmdPrefix)
	if cmd.Flags().Changed(logFlagName) {
		// warning: log array type LogTargets is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSpoeAgentMaxFrameSizeFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxFrameSizeFlagName := fmt.Sprintf("%v.max-frame-size", cmdPrefix)
	if cmd.Flags().Changed(maxFrameSizeFlagName) {

		var maxFrameSizeFlagName string
		if cmdPrefix == "" {
			maxFrameSizeFlagName = "max-frame-size"
		} else {
			maxFrameSizeFlagName = fmt.Sprintf("%v.max-frame-size", cmdPrefix)
		}

		maxFrameSizeFlagValue, err := cmd.Flags().GetInt64(maxFrameSizeFlagName)
		if err != nil {
			return err, false
		}
		m.MaxFrameSize = maxFrameSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentMaxWaitingFramesFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxWaitingFramesFlagName := fmt.Sprintf("%v.max-waiting-frames", cmdPrefix)
	if cmd.Flags().Changed(maxWaitingFramesFlagName) {

		var maxWaitingFramesFlagName string
		if cmdPrefix == "" {
			maxWaitingFramesFlagName = "max-waiting-frames"
		} else {
			maxWaitingFramesFlagName = fmt.Sprintf("%v.max-waiting-frames", cmdPrefix)
		}

		maxWaitingFramesFlagValue, err := cmd.Flags().GetInt64(maxWaitingFramesFlagName)
		if err != nil {
			return err, false
		}
		m.MaxWaitingFrames = maxWaitingFramesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentMaxconnrateFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxconnrateFlagName := fmt.Sprintf("%v.maxconnrate", cmdPrefix)
	if cmd.Flags().Changed(maxconnrateFlagName) {

		var maxconnrateFlagName string
		if cmdPrefix == "" {
			maxconnrateFlagName = "maxconnrate"
		} else {
			maxconnrateFlagName = fmt.Sprintf("%v.maxconnrate", cmdPrefix)
		}

		maxconnrateFlagValue, err := cmd.Flags().GetInt64(maxconnrateFlagName)
		if err != nil {
			return err, false
		}
		m.Maxconnrate = maxconnrateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentMaxerrrateFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxerrrateFlagName := fmt.Sprintf("%v.maxerrrate", cmdPrefix)
	if cmd.Flags().Changed(maxerrrateFlagName) {

		var maxerrrateFlagName string
		if cmdPrefix == "" {
			maxerrrateFlagName = "maxerrrate"
		} else {
			maxerrrateFlagName = fmt.Sprintf("%v.maxerrrate", cmdPrefix)
		}

		maxerrrateFlagValue, err := cmd.Flags().GetInt64(maxerrrateFlagName)
		if err != nil {
			return err, false
		}
		m.Maxerrrate = maxerrrateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentMessagesFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messagesFlagName := fmt.Sprintf("%v.messages", cmdPrefix)
	if cmd.Flags().Changed(messagesFlagName) {

		var messagesFlagName string
		if cmdPrefix == "" {
			messagesFlagName = "messages"
		} else {
			messagesFlagName = fmt.Sprintf("%v.messages", cmdPrefix)
		}

		messagesFlagValue, err := cmd.Flags().GetString(messagesFlagName)
		if err != nil {
			return err, false
		}
		m.Messages = messagesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentNameFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentOptionSetOnErrorFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	optionSetOnErrorFlagName := fmt.Sprintf("%v.option_set-on-error", cmdPrefix)
	if cmd.Flags().Changed(optionSetOnErrorFlagName) {

		var optionSetOnErrorFlagName string
		if cmdPrefix == "" {
			optionSetOnErrorFlagName = "option_set-on-error"
		} else {
			optionSetOnErrorFlagName = fmt.Sprintf("%v.option_set-on-error", cmdPrefix)
		}

		optionSetOnErrorFlagValue, err := cmd.Flags().GetString(optionSetOnErrorFlagName)
		if err != nil {
			return err, false
		}
		m.OptionSetOnError = optionSetOnErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentOptionSetProcessTimeFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	optionSetProcessTimeFlagName := fmt.Sprintf("%v.option_set-process-time", cmdPrefix)
	if cmd.Flags().Changed(optionSetProcessTimeFlagName) {

		var optionSetProcessTimeFlagName string
		if cmdPrefix == "" {
			optionSetProcessTimeFlagName = "option_set-process-time"
		} else {
			optionSetProcessTimeFlagName = fmt.Sprintf("%v.option_set-process-time", cmdPrefix)
		}

		optionSetProcessTimeFlagValue, err := cmd.Flags().GetString(optionSetProcessTimeFlagName)
		if err != nil {
			return err, false
		}
		m.OptionSetProcessTime = optionSetProcessTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentOptionSetTotalTimeFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	optionSetTotalTimeFlagName := fmt.Sprintf("%v.option_set-total-time", cmdPrefix)
	if cmd.Flags().Changed(optionSetTotalTimeFlagName) {

		var optionSetTotalTimeFlagName string
		if cmdPrefix == "" {
			optionSetTotalTimeFlagName = "option_set-total-time"
		} else {
			optionSetTotalTimeFlagName = fmt.Sprintf("%v.option_set-total-time", cmdPrefix)
		}

		optionSetTotalTimeFlagValue, err := cmd.Flags().GetString(optionSetTotalTimeFlagName)
		if err != nil {
			return err, false
		}
		m.OptionSetTotalTime = optionSetTotalTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentOptionVarPrefixFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	optionVarPrefixFlagName := fmt.Sprintf("%v.option_var-prefix", cmdPrefix)
	if cmd.Flags().Changed(optionVarPrefixFlagName) {

		var optionVarPrefixFlagName string
		if cmdPrefix == "" {
			optionVarPrefixFlagName = "option_var-prefix"
		} else {
			optionVarPrefixFlagName = fmt.Sprintf("%v.option_var-prefix", cmdPrefix)
		}

		optionVarPrefixFlagValue, err := cmd.Flags().GetString(optionVarPrefixFlagName)
		if err != nil {
			return err, false
		}
		m.OptionVarPrefix = optionVarPrefixFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentPipeliningFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pipeliningFlagName := fmt.Sprintf("%v.pipelining", cmdPrefix)
	if cmd.Flags().Changed(pipeliningFlagName) {

		var pipeliningFlagName string
		if cmdPrefix == "" {
			pipeliningFlagName = "pipelining"
		} else {
			pipeliningFlagName = fmt.Sprintf("%v.pipelining", cmdPrefix)
		}

		pipeliningFlagValue, err := cmd.Flags().GetString(pipeliningFlagName)
		if err != nil {
			return err, false
		}
		m.Pipelining = pipeliningFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentProcessingTimeoutFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	processingTimeoutFlagName := fmt.Sprintf("%v.processing_timeout", cmdPrefix)
	if cmd.Flags().Changed(processingTimeoutFlagName) {

		var processingTimeoutFlagName string
		if cmdPrefix == "" {
			processingTimeoutFlagName = "processing_timeout"
		} else {
			processingTimeoutFlagName = fmt.Sprintf("%v.processing_timeout", cmdPrefix)
		}

		processingTimeoutFlagValue, err := cmd.Flags().GetInt64(processingTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.ProcessingTimeout = processingTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentRegisterVarNamesFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registerVarNamesFlagName := fmt.Sprintf("%v.register-var-names", cmdPrefix)
	if cmd.Flags().Changed(registerVarNamesFlagName) {

		var registerVarNamesFlagName string
		if cmdPrefix == "" {
			registerVarNamesFlagName = "register-var-names"
		} else {
			registerVarNamesFlagName = fmt.Sprintf("%v.register-var-names", cmdPrefix)
		}

		registerVarNamesFlagValue, err := cmd.Flags().GetString(registerVarNamesFlagName)
		if err != nil {
			return err, false
		}
		m.RegisterVarNames = registerVarNamesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentSendFragPayloadFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sendFragPayloadFlagName := fmt.Sprintf("%v.send-frag-payload", cmdPrefix)
	if cmd.Flags().Changed(sendFragPayloadFlagName) {

		var sendFragPayloadFlagName string
		if cmdPrefix == "" {
			sendFragPayloadFlagName = "send-frag-payload"
		} else {
			sendFragPayloadFlagName = fmt.Sprintf("%v.send-frag-payload", cmdPrefix)
		}

		sendFragPayloadFlagValue, err := cmd.Flags().GetString(sendFragPayloadFlagName)
		if err != nil {
			return err, false
		}
		m.SendFragPayload = sendFragPayloadFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpoeAgentUseBackendFlags(depth int, m *models.SpoeAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useBackendFlagName := fmt.Sprintf("%v.use-backend", cmdPrefix)
	if cmd.Flags().Changed(useBackendFlagName) {

		var useBackendFlagName string
		if cmdPrefix == "" {
			useBackendFlagName = "use-backend"
		} else {
			useBackendFlagName = fmt.Sprintf("%v.use-backend", cmdPrefix)
		}

		useBackendFlagValue, err := cmd.Flags().GetString(useBackendFlagName)
		if err != nil {
			return err, false
		}
		m.UseBackend = useBackendFlagValue

		retAdded = true
	}

	return nil, retAdded
}
