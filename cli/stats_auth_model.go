// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/haproxytech/client-native/v4/models"
	"github.com/spf13/cobra"
)

// Schema cli for StatsAuth

// register flags to command
func registerModelStatsAuthFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStatsAuthPasswd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStatsAuthUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStatsAuthPasswd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwdDescription := `Required. `

	var passwdFlagName string
	if cmdPrefix == "" {
		passwdFlagName = "passwd"
	} else {
		passwdFlagName = fmt.Sprintf("%v.passwd", cmdPrefix)
	}

	var passwdFlagDefault string

	_ = cmd.PersistentFlags().String(passwdFlagName, passwdFlagDefault, passwdDescription)

	return nil
}

func registerStatsAuthUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userDescription := `Required. `

	var userFlagName string
	if cmdPrefix == "" {
		userFlagName = "user"
	} else {
		userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
	}

	var userFlagDefault string

	_ = cmd.PersistentFlags().String(userFlagName, userFlagDefault, userDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStatsAuthFlags(depth int, m *models.StatsAuth, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, passwdAdded := retrieveStatsAuthPasswdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwdAdded

	err, userAdded := retrieveStatsAuthUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded

	return nil, retAdded
}

func retrieveStatsAuthPasswdFlags(depth int, m *models.StatsAuth, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwdFlagName := fmt.Sprintf("%v.passwd", cmdPrefix)
	if cmd.Flags().Changed(passwdFlagName) {

		var passwdFlagName string
		if cmdPrefix == "" {
			passwdFlagName = "passwd"
		} else {
			passwdFlagName = fmt.Sprintf("%v.passwd", cmdPrefix)
		}

		passwdFlagValue, err := cmd.Flags().GetString(passwdFlagName)
		if err != nil {
			return err, false
		}
		m.Passwd = &passwdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStatsAuthUserFlags(depth int, m *models.StatsAuth, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userFlagName := fmt.Sprintf("%v.user", cmdPrefix)
	if cmd.Flags().Changed(userFlagName) {

		var userFlagName string
		if cmdPrefix == "" {
			userFlagName = "user"
		} else {
			userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
		}

		userFlagValue, err := cmd.Flags().GetString(userFlagName)
		if err != nil {
			return err, false
		}
		m.User = &userFlagValue

		retAdded = true
	}

	return nil, retAdded
}
