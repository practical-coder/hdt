// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/haproxytech/models"
	"github.com/spf13/cobra"
)

// Schema cli for Errorfile

// register flags to command
func registerModelErrorfileFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerErrorfileCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerErrorfileFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerErrorfileCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	codeDescription := `Enum: [200,400,403,405,408,425,429,500,502,503,504]. `

	var codeFlagName string
	if cmdPrefix == "" {
		codeFlagName = "code"
	} else {
		codeFlagName = fmt.Sprintf("%v.code", cmdPrefix)
	}

	var codeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(codeFlagName, codeFlagDefault, codeDescription)

	if err := cmd.RegisterFlagCompletionFunc(codeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[200,400,403,405,408,425,429,500,502,503,504]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerErrorfileFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fileDescription := ``

	var fileFlagName string
	if cmdPrefix == "" {
		fileFlagName = "file"
	} else {
		fileFlagName = fmt.Sprintf("%v.file", cmdPrefix)
	}

	var fileFlagDefault string

	_ = cmd.PersistentFlags().String(fileFlagName, fileFlagDefault, fileDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelErrorfileFlags(depth int, m *models.Errorfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, codeAdded := retrieveErrorfileCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || codeAdded

	err, fileAdded := retrieveErrorfileFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileAdded

	return nil, retAdded
}

func retrieveErrorfileCodeFlags(depth int, m *models.Errorfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	codeFlagName := fmt.Sprintf("%v.code", cmdPrefix)
	if cmd.Flags().Changed(codeFlagName) {

		var codeFlagName string
		if cmdPrefix == "" {
			codeFlagName = "code"
		} else {
			codeFlagName = fmt.Sprintf("%v.code", cmdPrefix)
		}

		codeFlagValue, err := cmd.Flags().GetInt64(codeFlagName)
		if err != nil {
			return err, false
		}
		m.Code = codeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveErrorfileFileFlags(depth int, m *models.Errorfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fileFlagName := fmt.Sprintf("%v.file", cmdPrefix)
	if cmd.Flags().Changed(fileFlagName) {

		var fileFlagName string
		if cmdPrefix == "" {
			fileFlagName = "file"
		} else {
			fileFlagName = fmt.Sprintf("%v.file", cmdPrefix)
		}

		fileFlagValue, err := cmd.Flags().GetString(fileFlagName)
		if err != nil {
			return err, false
		}
		m.File = fileFlagValue

		retAdded = true
	}

	return nil, retAdded
}
