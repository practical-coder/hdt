// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdt/client/tcp_check"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTCPCheckDeleteTCPCheckCmd returns a cmd to handle operation deleteTcpCheck
func makeOperationTCPCheckDeleteTCPCheckCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "deleteTCPCheck",
		Short: `Deletes a TCP check configuration by it's index from the specified parent.`,
		RunE:  runOperationTCPCheckDeleteTCPCheck,
	}

	if err := registerOperationTCPCheckDeleteTCPCheckParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTCPCheckDeleteTCPCheck uses cmd flags to call endpoint api
func runOperationTCPCheckDeleteTCPCheck(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := tcp_check.NewDeleteTCPCheckParams()
	if err, _ := retrieveOperationTCPCheckDeleteTCPCheckForceReloadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTCPCheckDeleteTCPCheckIndexFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTCPCheckDeleteTCPCheckParentNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTCPCheckDeleteTCPCheckParentTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTCPCheckDeleteTCPCheckTransactionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTCPCheckDeleteTCPCheckVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTCPCheckDeleteTCPCheckResult(appCli.TCPCheck.DeleteTCPCheck(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTCPCheckDeleteTCPCheckParamFlags registers all flags needed to fill params
func registerOperationTCPCheckDeleteTCPCheckParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTCPCheckDeleteTCPCheckForceReloadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTCPCheckDeleteTCPCheckIndexParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTCPCheckDeleteTCPCheckParentNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTCPCheckDeleteTCPCheckParentTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTCPCheckDeleteTCPCheckTransactionIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTCPCheckDeleteTCPCheckVersionParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTCPCheckDeleteTCPCheckForceReloadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	forceReloadDescription := `If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.`

	var forceReloadFlagName string
	if cmdPrefix == "" {
		forceReloadFlagName = "force_reload"
	} else {
		forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
	}

	var forceReloadFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceReloadFlagName, forceReloadFlagDefault, forceReloadDescription)

	return nil
}
func registerOperationTCPCheckDeleteTCPCheckIndexParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	indexDescription := `Required. TCP check Index`

	var indexFlagName string
	if cmdPrefix == "" {
		indexFlagName = "index"
	} else {
		indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
	}

	var indexFlagDefault int64

	_ = cmd.PersistentFlags().Int64(indexFlagName, indexFlagDefault, indexDescription)

	return nil
}
func registerOperationTCPCheckDeleteTCPCheckParentNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	parentNameDescription := `Parent name`

	var parentNameFlagName string
	if cmdPrefix == "" {
		parentNameFlagName = "parent_name"
	} else {
		parentNameFlagName = fmt.Sprintf("%v.parent_name", cmdPrefix)
	}

	var parentNameFlagDefault string

	_ = cmd.PersistentFlags().String(parentNameFlagName, parentNameFlagDefault, parentNameDescription)

	return nil
}
func registerOperationTCPCheckDeleteTCPCheckParentTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	parentTypeDescription := `Enum: ["backend","defaults"]. Required. Parent type`

	var parentTypeFlagName string
	if cmdPrefix == "" {
		parentTypeFlagName = "parent_type"
	} else {
		parentTypeFlagName = fmt.Sprintf("%v.parent_type", cmdPrefix)
	}

	var parentTypeFlagDefault string

	_ = cmd.PersistentFlags().String(parentTypeFlagName, parentTypeFlagDefault, parentTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(parentTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["backend","defaults"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}
func registerOperationTCPCheckDeleteTCPCheckTransactionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	transactionIdDescription := `ID of the transaction where we want to add the operation. Cannot be used when version is specified.`

	var transactionIdFlagName string
	if cmdPrefix == "" {
		transactionIdFlagName = "transaction_id"
	} else {
		transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
	}

	var transactionIdFlagDefault string

	_ = cmd.PersistentFlags().String(transactionIdFlagName, transactionIdFlagDefault, transactionIdDescription)

	return nil
}
func registerOperationTCPCheckDeleteTCPCheckVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	versionDescription := `Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func retrieveOperationTCPCheckDeleteTCPCheckForceReloadFlag(m *tcp_check.DeleteTCPCheckParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("force_reload") {

		var forceReloadFlagName string
		if cmdPrefix == "" {
			forceReloadFlagName = "force_reload"
		} else {
			forceReloadFlagName = fmt.Sprintf("%v.force_reload", cmdPrefix)
		}

		forceReloadFlagValue, err := cmd.Flags().GetBool(forceReloadFlagName)
		if err != nil {
			return err, false
		}
		m.ForceReload = &forceReloadFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTCPCheckDeleteTCPCheckIndexFlag(m *tcp_check.DeleteTCPCheckParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("index") {

		var indexFlagName string
		if cmdPrefix == "" {
			indexFlagName = "index"
		} else {
			indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
		}

		indexFlagValue, err := cmd.Flags().GetInt64(indexFlagName)
		if err != nil {
			return err, false
		}
		m.Index = indexFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTCPCheckDeleteTCPCheckParentNameFlag(m *tcp_check.DeleteTCPCheckParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("parent_name") {

		var parentNameFlagName string
		if cmdPrefix == "" {
			parentNameFlagName = "parent_name"
		} else {
			parentNameFlagName = fmt.Sprintf("%v.parent_name", cmdPrefix)
		}

		parentNameFlagValue, err := cmd.Flags().GetString(parentNameFlagName)
		if err != nil {
			return err, false
		}
		m.ParentName = &parentNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTCPCheckDeleteTCPCheckParentTypeFlag(m *tcp_check.DeleteTCPCheckParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("parent_type") {

		var parentTypeFlagName string
		if cmdPrefix == "" {
			parentTypeFlagName = "parent_type"
		} else {
			parentTypeFlagName = fmt.Sprintf("%v.parent_type", cmdPrefix)
		}

		parentTypeFlagValue, err := cmd.Flags().GetString(parentTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ParentType = parentTypeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTCPCheckDeleteTCPCheckTransactionIDFlag(m *tcp_check.DeleteTCPCheckParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("transaction_id") {

		var transactionIdFlagName string
		if cmdPrefix == "" {
			transactionIdFlagName = "transaction_id"
		} else {
			transactionIdFlagName = fmt.Sprintf("%v.transaction_id", cmdPrefix)
		}

		transactionIdFlagValue, err := cmd.Flags().GetString(transactionIdFlagName)
		if err != nil {
			return err, false
		}
		m.TransactionID = &transactionIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTCPCheckDeleteTCPCheckVersionFlag(m *tcp_check.DeleteTCPCheckParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("version") {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

	}
	return nil, retAdded
}

// parseOperationTCPCheckDeleteTCPCheckResult parses request result and return the string content
func parseOperationTCPCheckDeleteTCPCheckResult(resp0 *tcp_check.DeleteTCPCheckAccepted, resp1 *tcp_check.DeleteTCPCheckNoContent, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*tcp_check.DeleteTCPCheckDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning deleteTcpCheckAccepted is not supported

		// Non schema case: warning deleteTcpCheckNoContent is not supported

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*tcp_check.DeleteTCPCheckNotFound)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response deleteTcpCheckAccepted is not supported by go-swagger cli yet.

	// warning: non schema response deleteTcpCheckNoContent is not supported by go-swagger cli yet.

	return "", nil
}
