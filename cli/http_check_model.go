// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdc/models"
	"github.com/spf13/cobra"
)

// Schema cli for HTTPCheck

// register flags to command
func registerModelHTTPCheckFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerHTTPCheckCheckHeaders(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckAlpn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckBody(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckBodyLogFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckCheckComment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckDefault(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckErrorStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckExclamationMark(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckLinger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckMatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckMethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckMinRecv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckOkStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckOnError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckOnSuccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckPattern(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckPortString(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckProto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckSendProxy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckSni(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckSsl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckStatusCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckToutStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckURILogFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckVarExpr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckVarFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckVarName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckVarScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHTTPCheckViaSocks4(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerHTTPCheckCheckHeaders(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: CheckHeaders []*ReturnHeader array type is not supported by go-swagger cli yet

	return nil
}

func registerHTTPCheckAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addrDescription := ``

	var addrFlagName string
	if cmdPrefix == "" {
		addrFlagName = "addr"
	} else {
		addrFlagName = fmt.Sprintf("%v.addr", cmdPrefix)
	}

	var addrFlagDefault string

	_ = cmd.PersistentFlags().String(addrFlagName, addrFlagDefault, addrDescription)

	return nil
}

func registerHTTPCheckAlpn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	alpnDescription := ``

	var alpnFlagName string
	if cmdPrefix == "" {
		alpnFlagName = "alpn"
	} else {
		alpnFlagName = fmt.Sprintf("%v.alpn", cmdPrefix)
	}

	var alpnFlagDefault string

	_ = cmd.PersistentFlags().String(alpnFlagName, alpnFlagDefault, alpnDescription)

	return nil
}

func registerHTTPCheckBody(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bodyDescription := ``

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	var bodyFlagDefault string

	_ = cmd.PersistentFlags().String(bodyFlagName, bodyFlagDefault, bodyDescription)

	return nil
}

func registerHTTPCheckBodyLogFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bodyLogFormatDescription := ``

	var bodyLogFormatFlagName string
	if cmdPrefix == "" {
		bodyLogFormatFlagName = "body_log_format"
	} else {
		bodyLogFormatFlagName = fmt.Sprintf("%v.body_log_format", cmdPrefix)
	}

	var bodyLogFormatFlagDefault string

	_ = cmd.PersistentFlags().String(bodyLogFormatFlagName, bodyLogFormatFlagDefault, bodyLogFormatDescription)

	return nil
}

func registerHTTPCheckCheckComment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkCommentDescription := ``

	var checkCommentFlagName string
	if cmdPrefix == "" {
		checkCommentFlagName = "check_comment"
	} else {
		checkCommentFlagName = fmt.Sprintf("%v.check_comment", cmdPrefix)
	}

	var checkCommentFlagDefault string

	_ = cmd.PersistentFlags().String(checkCommentFlagName, checkCommentFlagDefault, checkCommentDescription)

	return nil
}

func registerHTTPCheckDefault(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultDescription := ``

	var defaultFlagName string
	if cmdPrefix == "" {
		defaultFlagName = "default"
	} else {
		defaultFlagName = fmt.Sprintf("%v.default", cmdPrefix)
	}

	var defaultFlagDefault bool

	_ = cmd.PersistentFlags().Bool(defaultFlagName, defaultFlagDefault, defaultDescription)

	return nil
}

func registerHTTPCheckErrorStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorStatusDescription := `Enum: ["L7OKC","L7RSP","L7STS","L6RSP","L4CON"]. `

	var errorStatusFlagName string
	if cmdPrefix == "" {
		errorStatusFlagName = "error_status"
	} else {
		errorStatusFlagName = fmt.Sprintf("%v.error_status", cmdPrefix)
	}

	var errorStatusFlagDefault string

	_ = cmd.PersistentFlags().String(errorStatusFlagName, errorStatusFlagDefault, errorStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(errorStatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["L7OKC","L7RSP","L7STS","L6RSP","L4CON"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPCheckExclamationMark(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	exclamationMarkDescription := ``

	var exclamationMarkFlagName string
	if cmdPrefix == "" {
		exclamationMarkFlagName = "exclamation_mark"
	} else {
		exclamationMarkFlagName = fmt.Sprintf("%v.exclamation_mark", cmdPrefix)
	}

	var exclamationMarkFlagDefault bool

	_ = cmd.PersistentFlags().Bool(exclamationMarkFlagName, exclamationMarkFlagDefault, exclamationMarkDescription)

	return nil
}

func registerHTTPCheckIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	indexDescription := `Required. `

	var indexFlagName string
	if cmdPrefix == "" {
		indexFlagName = "index"
	} else {
		indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
	}

	var indexFlagDefault int64

	_ = cmd.PersistentFlags().Int64(indexFlagName, indexFlagDefault, indexDescription)

	return nil
}

func registerHTTPCheckLinger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lingerDescription := ``

	var lingerFlagName string
	if cmdPrefix == "" {
		lingerFlagName = "linger"
	} else {
		lingerFlagName = fmt.Sprintf("%v.linger", cmdPrefix)
	}

	var lingerFlagDefault bool

	_ = cmd.PersistentFlags().Bool(lingerFlagName, lingerFlagDefault, lingerDescription)

	return nil
}

func registerHTTPCheckMatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	matchDescription := `Enum: ["status","rstatus","hdr","fhdr","string","rstring"]. `

	var matchFlagName string
	if cmdPrefix == "" {
		matchFlagName = "match"
	} else {
		matchFlagName = fmt.Sprintf("%v.match", cmdPrefix)
	}

	var matchFlagDefault string

	_ = cmd.PersistentFlags().String(matchFlagName, matchFlagDefault, matchDescription)

	if err := cmd.RegisterFlagCompletionFunc(matchFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["status","rstatus","hdr","fhdr","string","rstring"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPCheckMethod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	methodDescription := ``

	var methodFlagName string
	if cmdPrefix == "" {
		methodFlagName = "method"
	} else {
		methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
	}

	var methodFlagDefault string

	_ = cmd.PersistentFlags().String(methodFlagName, methodFlagDefault, methodDescription)

	return nil
}

func registerHTTPCheckMinRecv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minRecvDescription := ``

	var minRecvFlagName string
	if cmdPrefix == "" {
		minRecvFlagName = "min_recv"
	} else {
		minRecvFlagName = fmt.Sprintf("%v.min_recv", cmdPrefix)
	}

	var minRecvFlagDefault int64

	_ = cmd.PersistentFlags().Int64(minRecvFlagName, minRecvFlagDefault, minRecvDescription)

	return nil
}

func registerHTTPCheckOkStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	okStatusDescription := `Enum: ["L7OK","L7OKC","L6OK","L4OK"]. `

	var okStatusFlagName string
	if cmdPrefix == "" {
		okStatusFlagName = "ok_status"
	} else {
		okStatusFlagName = fmt.Sprintf("%v.ok_status", cmdPrefix)
	}

	var okStatusFlagDefault string

	_ = cmd.PersistentFlags().String(okStatusFlagName, okStatusFlagDefault, okStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(okStatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["L7OK","L7OKC","L6OK","L4OK"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPCheckOnError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	onErrorDescription := ``

	var onErrorFlagName string
	if cmdPrefix == "" {
		onErrorFlagName = "on_error"
	} else {
		onErrorFlagName = fmt.Sprintf("%v.on_error", cmdPrefix)
	}

	var onErrorFlagDefault string

	_ = cmd.PersistentFlags().String(onErrorFlagName, onErrorFlagDefault, onErrorDescription)

	return nil
}

func registerHTTPCheckOnSuccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	onSuccessDescription := ``

	var onSuccessFlagName string
	if cmdPrefix == "" {
		onSuccessFlagName = "on_success"
	} else {
		onSuccessFlagName = fmt.Sprintf("%v.on_success", cmdPrefix)
	}

	var onSuccessFlagDefault string

	_ = cmd.PersistentFlags().String(onSuccessFlagName, onSuccessFlagDefault, onSuccessDescription)

	return nil
}

func registerHTTPCheckPattern(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	patternDescription := ``

	var patternFlagName string
	if cmdPrefix == "" {
		patternFlagName = "pattern"
	} else {
		patternFlagName = fmt.Sprintf("%v.pattern", cmdPrefix)
	}

	var patternFlagDefault string

	_ = cmd.PersistentFlags().String(patternFlagName, patternFlagDefault, patternDescription)

	return nil
}

func registerHTTPCheckPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := ``

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault int64

	_ = cmd.PersistentFlags().Int64(portFlagName, portFlagDefault, portDescription)

	return nil
}

func registerHTTPCheckPortString(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portStringDescription := ``

	var portStringFlagName string
	if cmdPrefix == "" {
		portStringFlagName = "port_string"
	} else {
		portStringFlagName = fmt.Sprintf("%v.port_string", cmdPrefix)
	}

	var portStringFlagDefault string

	_ = cmd.PersistentFlags().String(portStringFlagName, portStringFlagDefault, portStringDescription)

	return nil
}

func registerHTTPCheckProto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protoDescription := ``

	var protoFlagName string
	if cmdPrefix == "" {
		protoFlagName = "proto"
	} else {
		protoFlagName = fmt.Sprintf("%v.proto", cmdPrefix)
	}

	var protoFlagDefault string

	_ = cmd.PersistentFlags().String(protoFlagName, protoFlagDefault, protoDescription)

	return nil
}

func registerHTTPCheckSendProxy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sendProxyDescription := ``

	var sendProxyFlagName string
	if cmdPrefix == "" {
		sendProxyFlagName = "send_proxy"
	} else {
		sendProxyFlagName = fmt.Sprintf("%v.send_proxy", cmdPrefix)
	}

	var sendProxyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sendProxyFlagName, sendProxyFlagDefault, sendProxyDescription)

	return nil
}

func registerHTTPCheckSni(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sniDescription := ``

	var sniFlagName string
	if cmdPrefix == "" {
		sniFlagName = "sni"
	} else {
		sniFlagName = fmt.Sprintf("%v.sni", cmdPrefix)
	}

	var sniFlagDefault string

	_ = cmd.PersistentFlags().String(sniFlagName, sniFlagDefault, sniDescription)

	return nil
}

func registerHTTPCheckSsl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslDescription := ``

	var sslFlagName string
	if cmdPrefix == "" {
		sslFlagName = "ssl"
	} else {
		sslFlagName = fmt.Sprintf("%v.ssl", cmdPrefix)
	}

	var sslFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sslFlagName, sslFlagDefault, sslDescription)

	return nil
}

func registerHTTPCheckStatusCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusCodeDescription := ``

	var statusCodeFlagName string
	if cmdPrefix == "" {
		statusCodeFlagName = "status-code"
	} else {
		statusCodeFlagName = fmt.Sprintf("%v.status-code", cmdPrefix)
	}

	var statusCodeFlagDefault string

	_ = cmd.PersistentFlags().String(statusCodeFlagName, statusCodeFlagDefault, statusCodeDescription)

	return nil
}

func registerHTTPCheckToutStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	toutStatusDescription := `Enum: ["L7TOUT","L6TOUT","L4TOUT"]. `

	var toutStatusFlagName string
	if cmdPrefix == "" {
		toutStatusFlagName = "tout_status"
	} else {
		toutStatusFlagName = fmt.Sprintf("%v.tout_status", cmdPrefix)
	}

	var toutStatusFlagDefault string

	_ = cmd.PersistentFlags().String(toutStatusFlagName, toutStatusFlagDefault, toutStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(toutStatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["L7TOUT","L6TOUT","L4TOUT"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPCheckType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["comment","connect","disable-on-404","expect","send","send-state","set-var","set-var-fmt","unset-var"]. Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["comment","connect","disable-on-404","expect","send","send-state","set-var","set-var-fmt","unset-var"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHTTPCheckURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uriDescription := ``

	var uriFlagName string
	if cmdPrefix == "" {
		uriFlagName = "uri"
	} else {
		uriFlagName = fmt.Sprintf("%v.uri", cmdPrefix)
	}

	var uriFlagDefault string

	_ = cmd.PersistentFlags().String(uriFlagName, uriFlagDefault, uriDescription)

	return nil
}

func registerHTTPCheckURILogFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uriLogFormatDescription := ``

	var uriLogFormatFlagName string
	if cmdPrefix == "" {
		uriLogFormatFlagName = "uri_log_format"
	} else {
		uriLogFormatFlagName = fmt.Sprintf("%v.uri_log_format", cmdPrefix)
	}

	var uriLogFormatFlagDefault string

	_ = cmd.PersistentFlags().String(uriLogFormatFlagName, uriLogFormatFlagDefault, uriLogFormatDescription)

	return nil
}

func registerHTTPCheckVarExpr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varExprDescription := ``

	var varExprFlagName string
	if cmdPrefix == "" {
		varExprFlagName = "var_expr"
	} else {
		varExprFlagName = fmt.Sprintf("%v.var_expr", cmdPrefix)
	}

	var varExprFlagDefault string

	_ = cmd.PersistentFlags().String(varExprFlagName, varExprFlagDefault, varExprDescription)

	return nil
}

func registerHTTPCheckVarFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varFormatDescription := ``

	var varFormatFlagName string
	if cmdPrefix == "" {
		varFormatFlagName = "var_format"
	} else {
		varFormatFlagName = fmt.Sprintf("%v.var_format", cmdPrefix)
	}

	var varFormatFlagDefault string

	_ = cmd.PersistentFlags().String(varFormatFlagName, varFormatFlagDefault, varFormatDescription)

	return nil
}

func registerHTTPCheckVarName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varNameDescription := ``

	var varNameFlagName string
	if cmdPrefix == "" {
		varNameFlagName = "var_name"
	} else {
		varNameFlagName = fmt.Sprintf("%v.var_name", cmdPrefix)
	}

	var varNameFlagDefault string

	_ = cmd.PersistentFlags().String(varNameFlagName, varNameFlagDefault, varNameDescription)

	return nil
}

func registerHTTPCheckVarScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varScopeDescription := ``

	var varScopeFlagName string
	if cmdPrefix == "" {
		varScopeFlagName = "var_scope"
	} else {
		varScopeFlagName = fmt.Sprintf("%v.var_scope", cmdPrefix)
	}

	var varScopeFlagDefault string

	_ = cmd.PersistentFlags().String(varScopeFlagName, varScopeFlagDefault, varScopeDescription)

	return nil
}

func registerHTTPCheckVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func registerHTTPCheckViaSocks4(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	viaSocks4Description := ``

	var viaSocks4FlagName string
	if cmdPrefix == "" {
		viaSocks4FlagName = "via_socks4"
	} else {
		viaSocks4FlagName = fmt.Sprintf("%v.via_socks4", cmdPrefix)
	}

	var viaSocks4FlagDefault bool

	_ = cmd.PersistentFlags().Bool(viaSocks4FlagName, viaSocks4FlagDefault, viaSocks4Description)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHTTPCheckFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, checkHeadersAdded := retrieveHTTPCheckCheckHeadersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkHeadersAdded

	err, addrAdded := retrieveHTTPCheckAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addrAdded

	err, alpnAdded := retrieveHTTPCheckAlpnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || alpnAdded

	err, bodyAdded := retrieveHTTPCheckBodyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bodyAdded

	err, bodyLogFormatAdded := retrieveHTTPCheckBodyLogFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bodyLogFormatAdded

	err, checkCommentAdded := retrieveHTTPCheckCheckCommentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkCommentAdded

	err, defaultAdded := retrieveHTTPCheckDefaultFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultAdded

	err, errorStatusAdded := retrieveHTTPCheckErrorStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorStatusAdded

	err, exclamationMarkAdded := retrieveHTTPCheckExclamationMarkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || exclamationMarkAdded

	err, indexAdded := retrieveHTTPCheckIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || indexAdded

	err, lingerAdded := retrieveHTTPCheckLingerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lingerAdded

	err, matchAdded := retrieveHTTPCheckMatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || matchAdded

	err, methodAdded := retrieveHTTPCheckMethodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || methodAdded

	err, minRecvAdded := retrieveHTTPCheckMinRecvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minRecvAdded

	err, okStatusAdded := retrieveHTTPCheckOkStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || okStatusAdded

	err, onErrorAdded := retrieveHTTPCheckOnErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || onErrorAdded

	err, onSuccessAdded := retrieveHTTPCheckOnSuccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || onSuccessAdded

	err, patternAdded := retrieveHTTPCheckPatternFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || patternAdded

	err, portAdded := retrieveHTTPCheckPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, portStringAdded := retrieveHTTPCheckPortStringFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portStringAdded

	err, protoAdded := retrieveHTTPCheckProtoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protoAdded

	err, sendProxyAdded := retrieveHTTPCheckSendProxyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sendProxyAdded

	err, sniAdded := retrieveHTTPCheckSniFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sniAdded

	err, sslAdded := retrieveHTTPCheckSslFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslAdded

	err, statusCodeAdded := retrieveHTTPCheckStatusCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusCodeAdded

	err, toutStatusAdded := retrieveHTTPCheckToutStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || toutStatusAdded

	err, typeAdded := retrieveHTTPCheckTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, uriAdded := retrieveHTTPCheckURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uriAdded

	err, uriLogFormatAdded := retrieveHTTPCheckURILogFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uriLogFormatAdded

	err, varExprAdded := retrieveHTTPCheckVarExprFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varExprAdded

	err, varFormatAdded := retrieveHTTPCheckVarFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varFormatAdded

	err, varNameAdded := retrieveHTTPCheckVarNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varNameAdded

	err, varScopeAdded := retrieveHTTPCheckVarScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varScopeAdded

	err, versionAdded := retrieveHTTPCheckVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	err, viaSocks4Added := retrieveHTTPCheckViaSocks4Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || viaSocks4Added

	return nil, retAdded
}

func retrieveHTTPCheckCheckHeadersFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkHeadersFlagName := fmt.Sprintf("%v.CheckHeaders", cmdPrefix)
	if cmd.Flags().Changed(checkHeadersFlagName) {
		// warning: CheckHeaders array type []*ReturnHeader is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHTTPCheckAddrFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addrFlagName := fmt.Sprintf("%v.addr", cmdPrefix)
	if cmd.Flags().Changed(addrFlagName) {

		var addrFlagName string
		if cmdPrefix == "" {
			addrFlagName = "addr"
		} else {
			addrFlagName = fmt.Sprintf("%v.addr", cmdPrefix)
		}

		addrFlagValue, err := cmd.Flags().GetString(addrFlagName)
		if err != nil {
			return err, false
		}
		m.Addr = addrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckAlpnFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	alpnFlagName := fmt.Sprintf("%v.alpn", cmdPrefix)
	if cmd.Flags().Changed(alpnFlagName) {

		var alpnFlagName string
		if cmdPrefix == "" {
			alpnFlagName = "alpn"
		} else {
			alpnFlagName = fmt.Sprintf("%v.alpn", cmdPrefix)
		}

		alpnFlagValue, err := cmd.Flags().GetString(alpnFlagName)
		if err != nil {
			return err, false
		}
		m.Alpn = alpnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckBodyFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bodyFlagName := fmt.Sprintf("%v.body", cmdPrefix)
	if cmd.Flags().Changed(bodyFlagName) {

		var bodyFlagName string
		if cmdPrefix == "" {
			bodyFlagName = "body"
		} else {
			bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
		}

		bodyFlagValue, err := cmd.Flags().GetString(bodyFlagName)
		if err != nil {
			return err, false
		}
		m.Body = bodyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckBodyLogFormatFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bodyLogFormatFlagName := fmt.Sprintf("%v.body_log_format", cmdPrefix)
	if cmd.Flags().Changed(bodyLogFormatFlagName) {

		var bodyLogFormatFlagName string
		if cmdPrefix == "" {
			bodyLogFormatFlagName = "body_log_format"
		} else {
			bodyLogFormatFlagName = fmt.Sprintf("%v.body_log_format", cmdPrefix)
		}

		bodyLogFormatFlagValue, err := cmd.Flags().GetString(bodyLogFormatFlagName)
		if err != nil {
			return err, false
		}
		m.BodyLogFormat = bodyLogFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckCheckCommentFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkCommentFlagName := fmt.Sprintf("%v.check_comment", cmdPrefix)
	if cmd.Flags().Changed(checkCommentFlagName) {

		var checkCommentFlagName string
		if cmdPrefix == "" {
			checkCommentFlagName = "check_comment"
		} else {
			checkCommentFlagName = fmt.Sprintf("%v.check_comment", cmdPrefix)
		}

		checkCommentFlagValue, err := cmd.Flags().GetString(checkCommentFlagName)
		if err != nil {
			return err, false
		}
		m.CheckComment = checkCommentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckDefaultFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultFlagName := fmt.Sprintf("%v.default", cmdPrefix)
	if cmd.Flags().Changed(defaultFlagName) {

		var defaultFlagName string
		if cmdPrefix == "" {
			defaultFlagName = "default"
		} else {
			defaultFlagName = fmt.Sprintf("%v.default", cmdPrefix)
		}

		defaultFlagValue, err := cmd.Flags().GetBool(defaultFlagName)
		if err != nil {
			return err, false
		}
		m.Default = defaultFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckErrorStatusFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorStatusFlagName := fmt.Sprintf("%v.error_status", cmdPrefix)
	if cmd.Flags().Changed(errorStatusFlagName) {

		var errorStatusFlagName string
		if cmdPrefix == "" {
			errorStatusFlagName = "error_status"
		} else {
			errorStatusFlagName = fmt.Sprintf("%v.error_status", cmdPrefix)
		}

		errorStatusFlagValue, err := cmd.Flags().GetString(errorStatusFlagName)
		if err != nil {
			return err, false
		}
		m.ErrorStatus = errorStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckExclamationMarkFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	exclamationMarkFlagName := fmt.Sprintf("%v.exclamation_mark", cmdPrefix)
	if cmd.Flags().Changed(exclamationMarkFlagName) {

		var exclamationMarkFlagName string
		if cmdPrefix == "" {
			exclamationMarkFlagName = "exclamation_mark"
		} else {
			exclamationMarkFlagName = fmt.Sprintf("%v.exclamation_mark", cmdPrefix)
		}

		exclamationMarkFlagValue, err := cmd.Flags().GetBool(exclamationMarkFlagName)
		if err != nil {
			return err, false
		}
		m.ExclamationMark = exclamationMarkFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckIndexFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	indexFlagName := fmt.Sprintf("%v.index", cmdPrefix)
	if cmd.Flags().Changed(indexFlagName) {

		var indexFlagName string
		if cmdPrefix == "" {
			indexFlagName = "index"
		} else {
			indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
		}

		indexFlagValue, err := cmd.Flags().GetInt64(indexFlagName)
		if err != nil {
			return err, false
		}
		m.Index = &indexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckLingerFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lingerFlagName := fmt.Sprintf("%v.linger", cmdPrefix)
	if cmd.Flags().Changed(lingerFlagName) {

		var lingerFlagName string
		if cmdPrefix == "" {
			lingerFlagName = "linger"
		} else {
			lingerFlagName = fmt.Sprintf("%v.linger", cmdPrefix)
		}

		lingerFlagValue, err := cmd.Flags().GetBool(lingerFlagName)
		if err != nil {
			return err, false
		}
		m.Linger = lingerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckMatchFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	matchFlagName := fmt.Sprintf("%v.match", cmdPrefix)
	if cmd.Flags().Changed(matchFlagName) {

		var matchFlagName string
		if cmdPrefix == "" {
			matchFlagName = "match"
		} else {
			matchFlagName = fmt.Sprintf("%v.match", cmdPrefix)
		}

		matchFlagValue, err := cmd.Flags().GetString(matchFlagName)
		if err != nil {
			return err, false
		}
		m.Match = matchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckMethodFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	methodFlagName := fmt.Sprintf("%v.method", cmdPrefix)
	if cmd.Flags().Changed(methodFlagName) {

		var methodFlagName string
		if cmdPrefix == "" {
			methodFlagName = "method"
		} else {
			methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
		}

		methodFlagValue, err := cmd.Flags().GetString(methodFlagName)
		if err != nil {
			return err, false
		}
		m.Method = methodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckMinRecvFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minRecvFlagName := fmt.Sprintf("%v.min_recv", cmdPrefix)
	if cmd.Flags().Changed(minRecvFlagName) {

		var minRecvFlagName string
		if cmdPrefix == "" {
			minRecvFlagName = "min_recv"
		} else {
			minRecvFlagName = fmt.Sprintf("%v.min_recv", cmdPrefix)
		}

		minRecvFlagValue, err := cmd.Flags().GetInt64(minRecvFlagName)
		if err != nil {
			return err, false
		}
		m.MinRecv = &minRecvFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckOkStatusFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	okStatusFlagName := fmt.Sprintf("%v.ok_status", cmdPrefix)
	if cmd.Flags().Changed(okStatusFlagName) {

		var okStatusFlagName string
		if cmdPrefix == "" {
			okStatusFlagName = "ok_status"
		} else {
			okStatusFlagName = fmt.Sprintf("%v.ok_status", cmdPrefix)
		}

		okStatusFlagValue, err := cmd.Flags().GetString(okStatusFlagName)
		if err != nil {
			return err, false
		}
		m.OkStatus = okStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckOnErrorFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	onErrorFlagName := fmt.Sprintf("%v.on_error", cmdPrefix)
	if cmd.Flags().Changed(onErrorFlagName) {

		var onErrorFlagName string
		if cmdPrefix == "" {
			onErrorFlagName = "on_error"
		} else {
			onErrorFlagName = fmt.Sprintf("%v.on_error", cmdPrefix)
		}

		onErrorFlagValue, err := cmd.Flags().GetString(onErrorFlagName)
		if err != nil {
			return err, false
		}
		m.OnError = onErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckOnSuccessFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	onSuccessFlagName := fmt.Sprintf("%v.on_success", cmdPrefix)
	if cmd.Flags().Changed(onSuccessFlagName) {

		var onSuccessFlagName string
		if cmdPrefix == "" {
			onSuccessFlagName = "on_success"
		} else {
			onSuccessFlagName = fmt.Sprintf("%v.on_success", cmdPrefix)
		}

		onSuccessFlagValue, err := cmd.Flags().GetString(onSuccessFlagName)
		if err != nil {
			return err, false
		}
		m.OnSuccess = onSuccessFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckPatternFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	patternFlagName := fmt.Sprintf("%v.pattern", cmdPrefix)
	if cmd.Flags().Changed(patternFlagName) {

		var patternFlagName string
		if cmdPrefix == "" {
			patternFlagName = "pattern"
		} else {
			patternFlagName = fmt.Sprintf("%v.pattern", cmdPrefix)
		}

		patternFlagValue, err := cmd.Flags().GetString(patternFlagName)
		if err != nil {
			return err, false
		}
		m.Pattern = patternFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckPortFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetInt64(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = &portFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckPortStringFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portStringFlagName := fmt.Sprintf("%v.port_string", cmdPrefix)
	if cmd.Flags().Changed(portStringFlagName) {

		var portStringFlagName string
		if cmdPrefix == "" {
			portStringFlagName = "port_string"
		} else {
			portStringFlagName = fmt.Sprintf("%v.port_string", cmdPrefix)
		}

		portStringFlagValue, err := cmd.Flags().GetString(portStringFlagName)
		if err != nil {
			return err, false
		}
		m.PortString = portStringFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckProtoFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protoFlagName := fmt.Sprintf("%v.proto", cmdPrefix)
	if cmd.Flags().Changed(protoFlagName) {

		var protoFlagName string
		if cmdPrefix == "" {
			protoFlagName = "proto"
		} else {
			protoFlagName = fmt.Sprintf("%v.proto", cmdPrefix)
		}

		protoFlagValue, err := cmd.Flags().GetString(protoFlagName)
		if err != nil {
			return err, false
		}
		m.Proto = protoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckSendProxyFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sendProxyFlagName := fmt.Sprintf("%v.send_proxy", cmdPrefix)
	if cmd.Flags().Changed(sendProxyFlagName) {

		var sendProxyFlagName string
		if cmdPrefix == "" {
			sendProxyFlagName = "send_proxy"
		} else {
			sendProxyFlagName = fmt.Sprintf("%v.send_proxy", cmdPrefix)
		}

		sendProxyFlagValue, err := cmd.Flags().GetBool(sendProxyFlagName)
		if err != nil {
			return err, false
		}
		m.SendProxy = sendProxyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckSniFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sniFlagName := fmt.Sprintf("%v.sni", cmdPrefix)
	if cmd.Flags().Changed(sniFlagName) {

		var sniFlagName string
		if cmdPrefix == "" {
			sniFlagName = "sni"
		} else {
			sniFlagName = fmt.Sprintf("%v.sni", cmdPrefix)
		}

		sniFlagValue, err := cmd.Flags().GetString(sniFlagName)
		if err != nil {
			return err, false
		}
		m.Sni = sniFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckSslFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslFlagName := fmt.Sprintf("%v.ssl", cmdPrefix)
	if cmd.Flags().Changed(sslFlagName) {

		var sslFlagName string
		if cmdPrefix == "" {
			sslFlagName = "ssl"
		} else {
			sslFlagName = fmt.Sprintf("%v.ssl", cmdPrefix)
		}

		sslFlagValue, err := cmd.Flags().GetBool(sslFlagName)
		if err != nil {
			return err, false
		}
		m.Ssl = sslFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckStatusCodeFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusCodeFlagName := fmt.Sprintf("%v.status-code", cmdPrefix)
	if cmd.Flags().Changed(statusCodeFlagName) {

		var statusCodeFlagName string
		if cmdPrefix == "" {
			statusCodeFlagName = "status-code"
		} else {
			statusCodeFlagName = fmt.Sprintf("%v.status-code", cmdPrefix)
		}

		statusCodeFlagValue, err := cmd.Flags().GetString(statusCodeFlagName)
		if err != nil {
			return err, false
		}
		m.StatusCode = statusCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckToutStatusFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	toutStatusFlagName := fmt.Sprintf("%v.tout_status", cmdPrefix)
	if cmd.Flags().Changed(toutStatusFlagName) {

		var toutStatusFlagName string
		if cmdPrefix == "" {
			toutStatusFlagName = "tout_status"
		} else {
			toutStatusFlagName = fmt.Sprintf("%v.tout_status", cmdPrefix)
		}

		toutStatusFlagValue, err := cmd.Flags().GetString(toutStatusFlagName)
		if err != nil {
			return err, false
		}
		m.ToutStatus = toutStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckTypeFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckURIFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uriFlagName := fmt.Sprintf("%v.uri", cmdPrefix)
	if cmd.Flags().Changed(uriFlagName) {

		var uriFlagName string
		if cmdPrefix == "" {
			uriFlagName = "uri"
		} else {
			uriFlagName = fmt.Sprintf("%v.uri", cmdPrefix)
		}

		uriFlagValue, err := cmd.Flags().GetString(uriFlagName)
		if err != nil {
			return err, false
		}
		m.URI = uriFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckURILogFormatFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uriLogFormatFlagName := fmt.Sprintf("%v.uri_log_format", cmdPrefix)
	if cmd.Flags().Changed(uriLogFormatFlagName) {

		var uriLogFormatFlagName string
		if cmdPrefix == "" {
			uriLogFormatFlagName = "uri_log_format"
		} else {
			uriLogFormatFlagName = fmt.Sprintf("%v.uri_log_format", cmdPrefix)
		}

		uriLogFormatFlagValue, err := cmd.Flags().GetString(uriLogFormatFlagName)
		if err != nil {
			return err, false
		}
		m.URILogFormat = uriLogFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckVarExprFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varExprFlagName := fmt.Sprintf("%v.var_expr", cmdPrefix)
	if cmd.Flags().Changed(varExprFlagName) {

		var varExprFlagName string
		if cmdPrefix == "" {
			varExprFlagName = "var_expr"
		} else {
			varExprFlagName = fmt.Sprintf("%v.var_expr", cmdPrefix)
		}

		varExprFlagValue, err := cmd.Flags().GetString(varExprFlagName)
		if err != nil {
			return err, false
		}
		m.VarExpr = varExprFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckVarFormatFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varFormatFlagName := fmt.Sprintf("%v.var_format", cmdPrefix)
	if cmd.Flags().Changed(varFormatFlagName) {

		var varFormatFlagName string
		if cmdPrefix == "" {
			varFormatFlagName = "var_format"
		} else {
			varFormatFlagName = fmt.Sprintf("%v.var_format", cmdPrefix)
		}

		varFormatFlagValue, err := cmd.Flags().GetString(varFormatFlagName)
		if err != nil {
			return err, false
		}
		m.VarFormat = varFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckVarNameFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varNameFlagName := fmt.Sprintf("%v.var_name", cmdPrefix)
	if cmd.Flags().Changed(varNameFlagName) {

		var varNameFlagName string
		if cmdPrefix == "" {
			varNameFlagName = "var_name"
		} else {
			varNameFlagName = fmt.Sprintf("%v.var_name", cmdPrefix)
		}

		varNameFlagValue, err := cmd.Flags().GetString(varNameFlagName)
		if err != nil {
			return err, false
		}
		m.VarName = varNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckVarScopeFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varScopeFlagName := fmt.Sprintf("%v.var_scope", cmdPrefix)
	if cmd.Flags().Changed(varScopeFlagName) {

		var varScopeFlagName string
		if cmdPrefix == "" {
			varScopeFlagName = "var_scope"
		} else {
			varScopeFlagName = fmt.Sprintf("%v.var_scope", cmdPrefix)
		}

		varScopeFlagValue, err := cmd.Flags().GetString(varScopeFlagName)
		if err != nil {
			return err, false
		}
		m.VarScope = varScopeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckVersionFlags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHTTPCheckViaSocks4Flags(depth int, m *models.HTTPCheck, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	viaSocks4FlagName := fmt.Sprintf("%v.via_socks4", cmdPrefix)
	if cmd.Flags().Changed(viaSocks4FlagName) {

		var viaSocks4FlagName string
		if cmdPrefix == "" {
			viaSocks4FlagName = "via_socks4"
		} else {
			viaSocks4FlagName = fmt.Sprintf("%v.via_socks4", cmdPrefix)
		}

		viaSocks4FlagValue, err := cmd.Flags().GetBool(viaSocks4FlagName)
		if err != nil {
			return err, false
		}
		m.ViaSocks4 = viaSocks4FlagValue

		retAdded = true
	}

	return nil, retAdded
}
