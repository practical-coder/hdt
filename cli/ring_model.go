// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdc/models"
	"github.com/spf13/cobra"
)

// Schema cli for Ring

// register flags to command
func registerModelRingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRingDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRingFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRingMaxlen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRingName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRingSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRingTimeoutConnect(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRingTimeoutServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRingDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerRingFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	formatDescription := `Enum: ["iso","local","raw","rfc3164","rfc5424","short","priority","timed"]. `

	var formatFlagName string
	if cmdPrefix == "" {
		formatFlagName = "format"
	} else {
		formatFlagName = fmt.Sprintf("%v.format", cmdPrefix)
	}

	var formatFlagDefault string

	_ = cmd.PersistentFlags().String(formatFlagName, formatFlagDefault, formatDescription)

	if err := cmd.RegisterFlagCompletionFunc(formatFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["iso","local","raw","rfc3164","rfc5424","short","priority","timed"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerRingMaxlen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxlenDescription := ``

	var maxlenFlagName string
	if cmdPrefix == "" {
		maxlenFlagName = "maxlen"
	} else {
		maxlenFlagName = fmt.Sprintf("%v.maxlen", cmdPrefix)
	}

	var maxlenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxlenFlagName, maxlenFlagDefault, maxlenDescription)

	return nil
}

func registerRingName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerRingSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sizeDescription := ``

	var sizeFlagName string
	if cmdPrefix == "" {
		sizeFlagName = "size"
	} else {
		sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var sizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sizeFlagName, sizeFlagDefault, sizeDescription)

	return nil
}

func registerRingTimeoutConnect(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeoutConnectDescription := ``

	var timeoutConnectFlagName string
	if cmdPrefix == "" {
		timeoutConnectFlagName = "timeout_connect"
	} else {
		timeoutConnectFlagName = fmt.Sprintf("%v.timeout_connect", cmdPrefix)
	}

	var timeoutConnectFlagDefault int64

	_ = cmd.PersistentFlags().Int64(timeoutConnectFlagName, timeoutConnectFlagDefault, timeoutConnectDescription)

	return nil
}

func registerRingTimeoutServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeoutServerDescription := ``

	var timeoutServerFlagName string
	if cmdPrefix == "" {
		timeoutServerFlagName = "timeout_server"
	} else {
		timeoutServerFlagName = fmt.Sprintf("%v.timeout_server", cmdPrefix)
	}

	var timeoutServerFlagDefault int64

	_ = cmd.PersistentFlags().Int64(timeoutServerFlagName, timeoutServerFlagDefault, timeoutServerDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRingFlags(depth int, m *models.Ring, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, descriptionAdded := retrieveRingDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, formatAdded := retrieveRingFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || formatAdded

	err, maxlenAdded := retrieveRingMaxlenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxlenAdded

	err, nameAdded := retrieveRingNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, sizeAdded := retrieveRingSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sizeAdded

	err, timeoutConnectAdded := retrieveRingTimeoutConnectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeoutConnectAdded

	err, timeoutServerAdded := retrieveRingTimeoutServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeoutServerAdded

	return nil, retAdded
}

func retrieveRingDescriptionFlags(depth int, m *models.Ring, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRingFormatFlags(depth int, m *models.Ring, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	formatFlagName := fmt.Sprintf("%v.format", cmdPrefix)
	if cmd.Flags().Changed(formatFlagName) {

		var formatFlagName string
		if cmdPrefix == "" {
			formatFlagName = "format"
		} else {
			formatFlagName = fmt.Sprintf("%v.format", cmdPrefix)
		}

		formatFlagValue, err := cmd.Flags().GetString(formatFlagName)
		if err != nil {
			return err, false
		}
		m.Format = formatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRingMaxlenFlags(depth int, m *models.Ring, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxlenFlagName := fmt.Sprintf("%v.maxlen", cmdPrefix)
	if cmd.Flags().Changed(maxlenFlagName) {

		var maxlenFlagName string
		if cmdPrefix == "" {
			maxlenFlagName = "maxlen"
		} else {
			maxlenFlagName = fmt.Sprintf("%v.maxlen", cmdPrefix)
		}

		maxlenFlagValue, err := cmd.Flags().GetInt64(maxlenFlagName)
		if err != nil {
			return err, false
		}
		m.Maxlen = &maxlenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRingNameFlags(depth int, m *models.Ring, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRingSizeFlags(depth int, m *models.Ring, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sizeFlagName := fmt.Sprintf("%v.size", cmdPrefix)
	if cmd.Flags().Changed(sizeFlagName) {

		var sizeFlagName string
		if cmdPrefix == "" {
			sizeFlagName = "size"
		} else {
			sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		sizeFlagValue, err := cmd.Flags().GetInt64(sizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = &sizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRingTimeoutConnectFlags(depth int, m *models.Ring, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeoutConnectFlagName := fmt.Sprintf("%v.timeout_connect", cmdPrefix)
	if cmd.Flags().Changed(timeoutConnectFlagName) {

		var timeoutConnectFlagName string
		if cmdPrefix == "" {
			timeoutConnectFlagName = "timeout_connect"
		} else {
			timeoutConnectFlagName = fmt.Sprintf("%v.timeout_connect", cmdPrefix)
		}

		timeoutConnectFlagValue, err := cmd.Flags().GetInt64(timeoutConnectFlagName)
		if err != nil {
			return err, false
		}
		m.TimeoutConnect = &timeoutConnectFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRingTimeoutServerFlags(depth int, m *models.Ring, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeoutServerFlagName := fmt.Sprintf("%v.timeout_server", cmdPrefix)
	if cmd.Flags().Changed(timeoutServerFlagName) {

		var timeoutServerFlagName string
		if cmdPrefix == "" {
			timeoutServerFlagName = "timeout_server"
		} else {
			timeoutServerFlagName = fmt.Sprintf("%v.timeout_server", cmdPrefix)
		}

		timeoutServerFlagValue, err := cmd.Flags().GetInt64(timeoutServerFlagName)
		if err != nil {
			return err, false
		}
		m.TimeoutServer = &timeoutServerFlagValue

		retAdded = true
	}

	return nil, retAdded
}
