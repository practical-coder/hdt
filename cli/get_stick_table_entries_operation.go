// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/practical-coder/hdt/client/stick_table"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationStickTableGetStickTableEntriesCmd returns a cmd to handle operation getStickTableEntries
func makeOperationStickTableGetStickTableEntriesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getStickTableEntries",
		Short: `Returns an array of all entries in a given stick tables.`,
		RunE:  runOperationStickTableGetStickTableEntries,
	}

	if err := registerOperationStickTableGetStickTableEntriesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationStickTableGetStickTableEntries uses cmd flags to call endpoint api
func runOperationStickTableGetStickTableEntries(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := stick_table.NewGetStickTableEntriesParams()
	if err, _ := retrieveOperationStickTableGetStickTableEntriesCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStickTableGetStickTableEntriesFilterFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStickTableGetStickTableEntriesKeyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStickTableGetStickTableEntriesOffsetFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStickTableGetStickTableEntriesProcessFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStickTableGetStickTableEntriesStickTableFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationStickTableGetStickTableEntriesResult(appCli.StickTable.GetStickTableEntries(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationStickTableGetStickTableEntriesParamFlags registers all flags needed to fill params
func registerOperationStickTableGetStickTableEntriesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationStickTableGetStickTableEntriesCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStickTableGetStickTableEntriesFilterParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStickTableGetStickTableEntriesKeyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStickTableGetStickTableEntriesOffsetParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStickTableGetStickTableEntriesProcessParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStickTableGetStickTableEntriesStickTableParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationStickTableGetStickTableEntriesCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	countDescription := `Max number of entries to be returned for pagination`

	var countFlagName string
	if cmdPrefix == "" {
		countFlagName = "count"
	} else {
		countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var countFlagDefault int64

	_ = cmd.PersistentFlags().Int64(countFlagName, countFlagDefault, countDescription)

	return nil
}
func registerOperationStickTableGetStickTableEntriesFilterParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterDescription := `A list of filters in format data.<type> <operator> <value> separated by comma`

	var filterFlagName string
	if cmdPrefix == "" {
		filterFlagName = "filter"
	} else {
		filterFlagName = fmt.Sprintf("%v.filter", cmdPrefix)
	}

	var filterFlagDefault string

	_ = cmd.PersistentFlags().String(filterFlagName, filterFlagDefault, filterDescription)

	return nil
}
func registerOperationStickTableGetStickTableEntriesKeyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	keyDescription := `Key which we want the entries for`

	var keyFlagName string
	if cmdPrefix == "" {
		keyFlagName = "key"
	} else {
		keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
	}

	var keyFlagDefault string

	_ = cmd.PersistentFlags().String(keyFlagName, keyFlagDefault, keyDescription)

	return nil
}
func registerOperationStickTableGetStickTableEntriesOffsetParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	offsetDescription := `Offset which indicates how many items we skip in pagination`

	var offsetFlagName string
	if cmdPrefix == "" {
		offsetFlagName = "offset"
	} else {
		offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
	}

	var offsetFlagDefault int64

	_ = cmd.PersistentFlags().Int64(offsetFlagName, offsetFlagDefault, offsetDescription)

	return nil
}
func registerOperationStickTableGetStickTableEntriesProcessParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	processDescription := `Required. Process number if master-worker mode, if not only first process is returned`

	var processFlagName string
	if cmdPrefix == "" {
		processFlagName = "process"
	} else {
		processFlagName = fmt.Sprintf("%v.process", cmdPrefix)
	}

	var processFlagDefault int64

	_ = cmd.PersistentFlags().Int64(processFlagName, processFlagDefault, processDescription)

	return nil
}
func registerOperationStickTableGetStickTableEntriesStickTableParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	stickTableDescription := `Required. Stick table name`

	var stickTableFlagName string
	if cmdPrefix == "" {
		stickTableFlagName = "stick_table"
	} else {
		stickTableFlagName = fmt.Sprintf("%v.stick_table", cmdPrefix)
	}

	var stickTableFlagDefault string

	_ = cmd.PersistentFlags().String(stickTableFlagName, stickTableFlagDefault, stickTableDescription)

	return nil
}

func retrieveOperationStickTableGetStickTableEntriesCountFlag(m *stick_table.GetStickTableEntriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("count") {

		var countFlagName string
		if cmdPrefix == "" {
			countFlagName = "count"
		} else {
			countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		countFlagValue, err := cmd.Flags().GetInt64(countFlagName)
		if err != nil {
			return err, false
		}
		m.Count = &countFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStickTableGetStickTableEntriesFilterFlag(m *stick_table.GetStickTableEntriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filter") {

		var filterFlagName string
		if cmdPrefix == "" {
			filterFlagName = "filter"
		} else {
			filterFlagName = fmt.Sprintf("%v.filter", cmdPrefix)
		}

		filterFlagValue, err := cmd.Flags().GetString(filterFlagName)
		if err != nil {
			return err, false
		}
		m.Filter = &filterFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStickTableGetStickTableEntriesKeyFlag(m *stick_table.GetStickTableEntriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("key") {

		var keyFlagName string
		if cmdPrefix == "" {
			keyFlagName = "key"
		} else {
			keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
		}

		keyFlagValue, err := cmd.Flags().GetString(keyFlagName)
		if err != nil {
			return err, false
		}
		m.Key = &keyFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStickTableGetStickTableEntriesOffsetFlag(m *stick_table.GetStickTableEntriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("offset") {

		var offsetFlagName string
		if cmdPrefix == "" {
			offsetFlagName = "offset"
		} else {
			offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
		}

		offsetFlagValue, err := cmd.Flags().GetInt64(offsetFlagName)
		if err != nil {
			return err, false
		}
		m.Offset = &offsetFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStickTableGetStickTableEntriesProcessFlag(m *stick_table.GetStickTableEntriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("process") {

		var processFlagName string
		if cmdPrefix == "" {
			processFlagName = "process"
		} else {
			processFlagName = fmt.Sprintf("%v.process", cmdPrefix)
		}

		processFlagValue, err := cmd.Flags().GetInt64(processFlagName)
		if err != nil {
			return err, false
		}
		m.Process = processFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStickTableGetStickTableEntriesStickTableFlag(m *stick_table.GetStickTableEntriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stick_table") {

		var stickTableFlagName string
		if cmdPrefix == "" {
			stickTableFlagName = "stick_table"
		} else {
			stickTableFlagName = fmt.Sprintf("%v.stick_table", cmdPrefix)
		}

		stickTableFlagValue, err := cmd.Flags().GetString(stickTableFlagName)
		if err != nil {
			return err, false
		}
		m.StickTable = stickTableFlagValue

	}
	return nil, retAdded
}

// parseOperationStickTableGetStickTableEntriesResult parses request result and return the string content
func parseOperationStickTableGetStickTableEntriesResult(resp0 *stick_table.GetStickTableEntriesOK, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*stick_table.GetStickTableEntriesDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*stick_table.GetStickTableEntriesOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
