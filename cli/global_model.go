// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Global

// register flags to command
func registerModelGlobalFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGlobalCPUMaps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalH1CaseAdjusts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalPresetEnvs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalRuntimeAPIs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSetEnvs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSetVarFmts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSetVars(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSslEngines(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalThreadGroupLines(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalBusyPolling(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalCaBase(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalChroot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalCrtBase(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalDaemon(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalDeviceAtlasOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalExposeExperimentalDirectives(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalExternalCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalFiftyOneDegreesOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalGid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalGrace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalGroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalH1CaseAdjustFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalH2WorkaroundBogusWebsocketClients(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalHardStopAfter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalInsecureForkWanted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalInsecureSetuidWanted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalIssuersChainPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalLocalpeer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalLogSendHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalLuaLoadPerThread(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalLuaLoads(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalLuaPrependPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalMasterWorker(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalMaxSpreadChecks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalMaxcompcpuusage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalMaxcomprate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalMaxconn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalMaxconnrate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalMaxpipes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalMaxsessrate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalMaxsslconn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalMaxsslrate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalMaxzlibmem(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalMworkerMaxReloads(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalNbproc(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalNbthread(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalNode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalNoepoll(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalNoevports(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalNogetaddrinfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalNokqueue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalNopoll(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalNoreuseport(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalNosplice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalNumaCPUMapping(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalPidfile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalPp2NeverSendLocal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalProfilingTasks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalQuiet(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalResetenv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalServerStateBase(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalServerStateFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSetDumpable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSpreadChecks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSslDefaultBindCiphers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSslDefaultBindCiphersuites(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSslDefaultBindCurves(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSslDefaultBindOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSslDefaultServerCiphers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSslDefaultServerCiphersuites(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSslDefaultServerOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSslDhParamFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSslLoadExtraFiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSslModeAsync(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSslServerVerify(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalSslSkipSelfIssuedCa(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalStatsMaxconn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalStatsTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalStrictLimits(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalThreadGroups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneSslDefaultDhParam(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalUlimitn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalUnsetenv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalWurflOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalZeroWarning(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGlobalCPUMaps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: CPUMaps []*CPUMap array type is not supported by go-swagger cli yet

	return nil
}

func registerGlobalH1CaseAdjusts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: H1CaseAdjusts []*H1CaseAdjust array type is not supported by go-swagger cli yet

	return nil
}

func registerGlobalPresetEnvs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: PresetEnvs []*PresetEnv array type is not supported by go-swagger cli yet

	return nil
}

func registerGlobalRuntimeAPIs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: RuntimeAPIs []*RuntimeAPI array type is not supported by go-swagger cli yet

	return nil
}

func registerGlobalSetEnvs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: SetEnvs []*SetEnv array type is not supported by go-swagger cli yet

	return nil
}

func registerGlobalSetVarFmts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: SetVarFmts []*SetVarFmt array type is not supported by go-swagger cli yet

	return nil
}

func registerGlobalSetVars(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: SetVars []*SetVar array type is not supported by go-swagger cli yet

	return nil
}

func registerGlobalSslEngines(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: SslEngines []*SslEngine array type is not supported by go-swagger cli yet

	return nil
}

func registerGlobalThreadGroupLines(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ThreadGroupLines []*ThreadGroup array type is not supported by go-swagger cli yet

	return nil
}

func registerGlobalBusyPolling(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	busyPollingDescription := ``

	var busyPollingFlagName string
	if cmdPrefix == "" {
		busyPollingFlagName = "busy_polling"
	} else {
		busyPollingFlagName = fmt.Sprintf("%v.busy_polling", cmdPrefix)
	}

	var busyPollingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(busyPollingFlagName, busyPollingFlagDefault, busyPollingDescription)

	return nil
}

func registerGlobalCaBase(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	caBaseDescription := ``

	var caBaseFlagName string
	if cmdPrefix == "" {
		caBaseFlagName = "ca_base"
	} else {
		caBaseFlagName = fmt.Sprintf("%v.ca_base", cmdPrefix)
	}

	var caBaseFlagDefault string

	_ = cmd.PersistentFlags().String(caBaseFlagName, caBaseFlagDefault, caBaseDescription)

	return nil
}

func registerGlobalChroot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	chrootDescription := ``

	var chrootFlagName string
	if cmdPrefix == "" {
		chrootFlagName = "chroot"
	} else {
		chrootFlagName = fmt.Sprintf("%v.chroot", cmdPrefix)
	}

	var chrootFlagDefault string

	_ = cmd.PersistentFlags().String(chrootFlagName, chrootFlagDefault, chrootDescription)

	return nil
}

func registerGlobalCrtBase(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	crtBaseDescription := ``

	var crtBaseFlagName string
	if cmdPrefix == "" {
		crtBaseFlagName = "crt_base"
	} else {
		crtBaseFlagName = fmt.Sprintf("%v.crt_base", cmdPrefix)
	}

	var crtBaseFlagDefault string

	_ = cmd.PersistentFlags().String(crtBaseFlagName, crtBaseFlagDefault, crtBaseDescription)

	return nil
}

func registerGlobalDaemon(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	daemonDescription := `Enum: ["enabled","disabled"]. `

	var daemonFlagName string
	if cmdPrefix == "" {
		daemonFlagName = "daemon"
	} else {
		daemonFlagName = fmt.Sprintf("%v.daemon", cmdPrefix)
	}

	var daemonFlagDefault string

	_ = cmd.PersistentFlags().String(daemonFlagName, daemonFlagDefault, daemonDescription)

	if err := cmd.RegisterFlagCompletionFunc(daemonFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerGlobalDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerGlobalDeviceAtlasOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var deviceAtlasOptionsFlagName string
	if cmdPrefix == "" {
		deviceAtlasOptionsFlagName = "device_atlas_options"
	} else {
		deviceAtlasOptionsFlagName = fmt.Sprintf("%v.device_atlas_options", cmdPrefix)
	}

	if err := registerModelGlobalDeviceAtlasOptionsFlags(depth+1, deviceAtlasOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerGlobalExposeExperimentalDirectives(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	exposeExperimentalDirectivesDescription := ``

	var exposeExperimentalDirectivesFlagName string
	if cmdPrefix == "" {
		exposeExperimentalDirectivesFlagName = "expose_experimental_directives"
	} else {
		exposeExperimentalDirectivesFlagName = fmt.Sprintf("%v.expose_experimental_directives", cmdPrefix)
	}

	var exposeExperimentalDirectivesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(exposeExperimentalDirectivesFlagName, exposeExperimentalDirectivesFlagDefault, exposeExperimentalDirectivesDescription)

	return nil
}

func registerGlobalExternalCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	externalCheckDescription := ``

	var externalCheckFlagName string
	if cmdPrefix == "" {
		externalCheckFlagName = "external_check"
	} else {
		externalCheckFlagName = fmt.Sprintf("%v.external_check", cmdPrefix)
	}

	var externalCheckFlagDefault bool

	_ = cmd.PersistentFlags().Bool(externalCheckFlagName, externalCheckFlagDefault, externalCheckDescription)

	return nil
}

func registerGlobalFiftyOneDegreesOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var fiftyOneDegreesOptionsFlagName string
	if cmdPrefix == "" {
		fiftyOneDegreesOptionsFlagName = "fifty_one_degrees_options"
	} else {
		fiftyOneDegreesOptionsFlagName = fmt.Sprintf("%v.fifty_one_degrees_options", cmdPrefix)
	}

	if err := registerModelGlobalFiftyOneDegreesOptionsFlags(depth+1, fiftyOneDegreesOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerGlobalGid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gidDescription := ``

	var gidFlagName string
	if cmdPrefix == "" {
		gidFlagName = "gid"
	} else {
		gidFlagName = fmt.Sprintf("%v.gid", cmdPrefix)
	}

	var gidFlagDefault int64

	_ = cmd.PersistentFlags().Int64(gidFlagName, gidFlagDefault, gidDescription)

	return nil
}

func registerGlobalGrace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	graceDescription := ``

	var graceFlagName string
	if cmdPrefix == "" {
		graceFlagName = "grace"
	} else {
		graceFlagName = fmt.Sprintf("%v.grace", cmdPrefix)
	}

	var graceFlagDefault int64

	_ = cmd.PersistentFlags().Int64(graceFlagName, graceFlagDefault, graceDescription)

	return nil
}

func registerGlobalGroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	groupDescription := ``

	var groupFlagName string
	if cmdPrefix == "" {
		groupFlagName = "group"
	} else {
		groupFlagName = fmt.Sprintf("%v.group", cmdPrefix)
	}

	var groupFlagDefault string

	_ = cmd.PersistentFlags().String(groupFlagName, groupFlagDefault, groupDescription)

	return nil
}

func registerGlobalH1CaseAdjustFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h1CaseAdjustFileDescription := ``

	var h1CaseAdjustFileFlagName string
	if cmdPrefix == "" {
		h1CaseAdjustFileFlagName = "h1_case_adjust_file"
	} else {
		h1CaseAdjustFileFlagName = fmt.Sprintf("%v.h1_case_adjust_file", cmdPrefix)
	}

	var h1CaseAdjustFileFlagDefault string

	_ = cmd.PersistentFlags().String(h1CaseAdjustFileFlagName, h1CaseAdjustFileFlagDefault, h1CaseAdjustFileDescription)

	return nil
}

func registerGlobalH2WorkaroundBogusWebsocketClients(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h2WorkaroundBogusWebsocketClientsDescription := ``

	var h2WorkaroundBogusWebsocketClientsFlagName string
	if cmdPrefix == "" {
		h2WorkaroundBogusWebsocketClientsFlagName = "h2_workaround_bogus_websocket_clients"
	} else {
		h2WorkaroundBogusWebsocketClientsFlagName = fmt.Sprintf("%v.h2_workaround_bogus_websocket_clients", cmdPrefix)
	}

	var h2WorkaroundBogusWebsocketClientsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(h2WorkaroundBogusWebsocketClientsFlagName, h2WorkaroundBogusWebsocketClientsFlagDefault, h2WorkaroundBogusWebsocketClientsDescription)

	return nil
}

func registerGlobalHardStopAfter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hardStopAfterDescription := ``

	var hardStopAfterFlagName string
	if cmdPrefix == "" {
		hardStopAfterFlagName = "hard_stop_after"
	} else {
		hardStopAfterFlagName = fmt.Sprintf("%v.hard_stop_after", cmdPrefix)
	}

	var hardStopAfterFlagDefault int64

	_ = cmd.PersistentFlags().Int64(hardStopAfterFlagName, hardStopAfterFlagDefault, hardStopAfterDescription)

	return nil
}

func registerGlobalInsecureForkWanted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	insecureForkWantedDescription := ``

	var insecureForkWantedFlagName string
	if cmdPrefix == "" {
		insecureForkWantedFlagName = "insecure_fork_wanted"
	} else {
		insecureForkWantedFlagName = fmt.Sprintf("%v.insecure_fork_wanted", cmdPrefix)
	}

	var insecureForkWantedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(insecureForkWantedFlagName, insecureForkWantedFlagDefault, insecureForkWantedDescription)

	return nil
}

func registerGlobalInsecureSetuidWanted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	insecureSetuidWantedDescription := ``

	var insecureSetuidWantedFlagName string
	if cmdPrefix == "" {
		insecureSetuidWantedFlagName = "insecure_setuid_wanted"
	} else {
		insecureSetuidWantedFlagName = fmt.Sprintf("%v.insecure_setuid_wanted", cmdPrefix)
	}

	var insecureSetuidWantedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(insecureSetuidWantedFlagName, insecureSetuidWantedFlagDefault, insecureSetuidWantedDescription)

	return nil
}

func registerGlobalIssuersChainPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	issuersChainPathDescription := ``

	var issuersChainPathFlagName string
	if cmdPrefix == "" {
		issuersChainPathFlagName = "issuers_chain_path"
	} else {
		issuersChainPathFlagName = fmt.Sprintf("%v.issuers_chain_path", cmdPrefix)
	}

	var issuersChainPathFlagDefault string

	_ = cmd.PersistentFlags().String(issuersChainPathFlagName, issuersChainPathFlagDefault, issuersChainPathDescription)

	return nil
}

func registerGlobalLocalpeer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	localpeerDescription := ``

	var localpeerFlagName string
	if cmdPrefix == "" {
		localpeerFlagName = "localpeer"
	} else {
		localpeerFlagName = fmt.Sprintf("%v.localpeer", cmdPrefix)
	}

	var localpeerFlagDefault string

	_ = cmd.PersistentFlags().String(localpeerFlagName, localpeerFlagDefault, localpeerDescription)

	return nil
}

func registerGlobalLogSendHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var logSendHostnameFlagName string
	if cmdPrefix == "" {
		logSendHostnameFlagName = "log_send_hostname"
	} else {
		logSendHostnameFlagName = fmt.Sprintf("%v.log_send_hostname", cmdPrefix)
	}

	if err := registerModelGlobalLogSendHostnameFlags(depth+1, logSendHostnameFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerGlobalLuaLoadPerThread(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaLoadPerThreadDescription := ``

	var luaLoadPerThreadFlagName string
	if cmdPrefix == "" {
		luaLoadPerThreadFlagName = "lua_load_per_thread"
	} else {
		luaLoadPerThreadFlagName = fmt.Sprintf("%v.lua_load_per_thread", cmdPrefix)
	}

	var luaLoadPerThreadFlagDefault string

	_ = cmd.PersistentFlags().String(luaLoadPerThreadFlagName, luaLoadPerThreadFlagDefault, luaLoadPerThreadDescription)

	return nil
}

func registerGlobalLuaLoads(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: lua_loads []*LuaLoad array type is not supported by go-swagger cli yet

	return nil
}

func registerGlobalLuaPrependPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: lua_prepend_path []*LuaPrependPath array type is not supported by go-swagger cli yet

	return nil
}

func registerGlobalMasterWorker(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	masterWorkerDescription := ``

	var masterWorkerFlagName string
	if cmdPrefix == "" {
		masterWorkerFlagName = "master-worker"
	} else {
		masterWorkerFlagName = fmt.Sprintf("%v.master-worker", cmdPrefix)
	}

	var masterWorkerFlagDefault bool

	_ = cmd.PersistentFlags().Bool(masterWorkerFlagName, masterWorkerFlagDefault, masterWorkerDescription)

	return nil
}

func registerGlobalMaxSpreadChecks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxSpreadChecksDescription := ``

	var maxSpreadChecksFlagName string
	if cmdPrefix == "" {
		maxSpreadChecksFlagName = "max_spread_checks"
	} else {
		maxSpreadChecksFlagName = fmt.Sprintf("%v.max_spread_checks", cmdPrefix)
	}

	var maxSpreadChecksFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxSpreadChecksFlagName, maxSpreadChecksFlagDefault, maxSpreadChecksDescription)

	return nil
}

func registerGlobalMaxcompcpuusage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxcompcpuusageDescription := ``

	var maxcompcpuusageFlagName string
	if cmdPrefix == "" {
		maxcompcpuusageFlagName = "maxcompcpuusage"
	} else {
		maxcompcpuusageFlagName = fmt.Sprintf("%v.maxcompcpuusage", cmdPrefix)
	}

	var maxcompcpuusageFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxcompcpuusageFlagName, maxcompcpuusageFlagDefault, maxcompcpuusageDescription)

	return nil
}

func registerGlobalMaxcomprate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxcomprateDescription := ``

	var maxcomprateFlagName string
	if cmdPrefix == "" {
		maxcomprateFlagName = "maxcomprate"
	} else {
		maxcomprateFlagName = fmt.Sprintf("%v.maxcomprate", cmdPrefix)
	}

	var maxcomprateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxcomprateFlagName, maxcomprateFlagDefault, maxcomprateDescription)

	return nil
}

func registerGlobalMaxconn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxconnDescription := ``

	var maxconnFlagName string
	if cmdPrefix == "" {
		maxconnFlagName = "maxconn"
	} else {
		maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
	}

	var maxconnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxconnFlagName, maxconnFlagDefault, maxconnDescription)

	return nil
}

func registerGlobalMaxconnrate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxconnrateDescription := ``

	var maxconnrateFlagName string
	if cmdPrefix == "" {
		maxconnrateFlagName = "maxconnrate"
	} else {
		maxconnrateFlagName = fmt.Sprintf("%v.maxconnrate", cmdPrefix)
	}

	var maxconnrateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxconnrateFlagName, maxconnrateFlagDefault, maxconnrateDescription)

	return nil
}

func registerGlobalMaxpipes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxpipesDescription := ``

	var maxpipesFlagName string
	if cmdPrefix == "" {
		maxpipesFlagName = "maxpipes"
	} else {
		maxpipesFlagName = fmt.Sprintf("%v.maxpipes", cmdPrefix)
	}

	var maxpipesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxpipesFlagName, maxpipesFlagDefault, maxpipesDescription)

	return nil
}

func registerGlobalMaxsessrate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxsessrateDescription := ``

	var maxsessrateFlagName string
	if cmdPrefix == "" {
		maxsessrateFlagName = "maxsessrate"
	} else {
		maxsessrateFlagName = fmt.Sprintf("%v.maxsessrate", cmdPrefix)
	}

	var maxsessrateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxsessrateFlagName, maxsessrateFlagDefault, maxsessrateDescription)

	return nil
}

func registerGlobalMaxsslconn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxsslconnDescription := ``

	var maxsslconnFlagName string
	if cmdPrefix == "" {
		maxsslconnFlagName = "maxsslconn"
	} else {
		maxsslconnFlagName = fmt.Sprintf("%v.maxsslconn", cmdPrefix)
	}

	var maxsslconnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxsslconnFlagName, maxsslconnFlagDefault, maxsslconnDescription)

	return nil
}

func registerGlobalMaxsslrate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxsslrateDescription := ``

	var maxsslrateFlagName string
	if cmdPrefix == "" {
		maxsslrateFlagName = "maxsslrate"
	} else {
		maxsslrateFlagName = fmt.Sprintf("%v.maxsslrate", cmdPrefix)
	}

	var maxsslrateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxsslrateFlagName, maxsslrateFlagDefault, maxsslrateDescription)

	return nil
}

func registerGlobalMaxzlibmem(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxzlibmemDescription := ``

	var maxzlibmemFlagName string
	if cmdPrefix == "" {
		maxzlibmemFlagName = "maxzlibmem"
	} else {
		maxzlibmemFlagName = fmt.Sprintf("%v.maxzlibmem", cmdPrefix)
	}

	var maxzlibmemFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxzlibmemFlagName, maxzlibmemFlagDefault, maxzlibmemDescription)

	return nil
}

func registerGlobalMworkerMaxReloads(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mworkerMaxReloadsDescription := ``

	var mworkerMaxReloadsFlagName string
	if cmdPrefix == "" {
		mworkerMaxReloadsFlagName = "mworker_max_reloads"
	} else {
		mworkerMaxReloadsFlagName = fmt.Sprintf("%v.mworker_max_reloads", cmdPrefix)
	}

	var mworkerMaxReloadsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(mworkerMaxReloadsFlagName, mworkerMaxReloadsFlagDefault, mworkerMaxReloadsDescription)

	return nil
}

func registerGlobalNbproc(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nbprocDescription := ``

	var nbprocFlagName string
	if cmdPrefix == "" {
		nbprocFlagName = "nbproc"
	} else {
		nbprocFlagName = fmt.Sprintf("%v.nbproc", cmdPrefix)
	}

	var nbprocFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nbprocFlagName, nbprocFlagDefault, nbprocDescription)

	return nil
}

func registerGlobalNbthread(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nbthreadDescription := ``

	var nbthreadFlagName string
	if cmdPrefix == "" {
		nbthreadFlagName = "nbthread"
	} else {
		nbthreadFlagName = fmt.Sprintf("%v.nbthread", cmdPrefix)
	}

	var nbthreadFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nbthreadFlagName, nbthreadFlagDefault, nbthreadDescription)

	return nil
}

func registerGlobalNode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodeDescription := ``

	var nodeFlagName string
	if cmdPrefix == "" {
		nodeFlagName = "node"
	} else {
		nodeFlagName = fmt.Sprintf("%v.node", cmdPrefix)
	}

	var nodeFlagDefault string

	_ = cmd.PersistentFlags().String(nodeFlagName, nodeFlagDefault, nodeDescription)

	return nil
}

func registerGlobalNoepoll(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noepollDescription := ``

	var noepollFlagName string
	if cmdPrefix == "" {
		noepollFlagName = "noepoll"
	} else {
		noepollFlagName = fmt.Sprintf("%v.noepoll", cmdPrefix)
	}

	var noepollFlagDefault bool

	_ = cmd.PersistentFlags().Bool(noepollFlagName, noepollFlagDefault, noepollDescription)

	return nil
}

func registerGlobalNoevports(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noevportsDescription := ``

	var noevportsFlagName string
	if cmdPrefix == "" {
		noevportsFlagName = "noevports"
	} else {
		noevportsFlagName = fmt.Sprintf("%v.noevports", cmdPrefix)
	}

	var noevportsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(noevportsFlagName, noevportsFlagDefault, noevportsDescription)

	return nil
}

func registerGlobalNogetaddrinfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nogetaddrinfoDescription := ``

	var nogetaddrinfoFlagName string
	if cmdPrefix == "" {
		nogetaddrinfoFlagName = "nogetaddrinfo"
	} else {
		nogetaddrinfoFlagName = fmt.Sprintf("%v.nogetaddrinfo", cmdPrefix)
	}

	var nogetaddrinfoFlagDefault bool

	_ = cmd.PersistentFlags().Bool(nogetaddrinfoFlagName, nogetaddrinfoFlagDefault, nogetaddrinfoDescription)

	return nil
}

func registerGlobalNokqueue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nokqueueDescription := ``

	var nokqueueFlagName string
	if cmdPrefix == "" {
		nokqueueFlagName = "nokqueue"
	} else {
		nokqueueFlagName = fmt.Sprintf("%v.nokqueue", cmdPrefix)
	}

	var nokqueueFlagDefault bool

	_ = cmd.PersistentFlags().Bool(nokqueueFlagName, nokqueueFlagDefault, nokqueueDescription)

	return nil
}

func registerGlobalNopoll(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nopollDescription := ``

	var nopollFlagName string
	if cmdPrefix == "" {
		nopollFlagName = "nopoll"
	} else {
		nopollFlagName = fmt.Sprintf("%v.nopoll", cmdPrefix)
	}

	var nopollFlagDefault bool

	_ = cmd.PersistentFlags().Bool(nopollFlagName, nopollFlagDefault, nopollDescription)

	return nil
}

func registerGlobalNoreuseport(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noreuseportDescription := ``

	var noreuseportFlagName string
	if cmdPrefix == "" {
		noreuseportFlagName = "noreuseport"
	} else {
		noreuseportFlagName = fmt.Sprintf("%v.noreuseport", cmdPrefix)
	}

	var noreuseportFlagDefault bool

	_ = cmd.PersistentFlags().Bool(noreuseportFlagName, noreuseportFlagDefault, noreuseportDescription)

	return nil
}

func registerGlobalNosplice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nospliceDescription := ``

	var nospliceFlagName string
	if cmdPrefix == "" {
		nospliceFlagName = "nosplice"
	} else {
		nospliceFlagName = fmt.Sprintf("%v.nosplice", cmdPrefix)
	}

	var nospliceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(nospliceFlagName, nospliceFlagDefault, nospliceDescription)

	return nil
}

func registerGlobalNumaCPUMapping(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numaCpuMappingDescription := ``

	var numaCpuMappingFlagName string
	if cmdPrefix == "" {
		numaCpuMappingFlagName = "numa_cpu_mapping"
	} else {
		numaCpuMappingFlagName = fmt.Sprintf("%v.numa_cpu_mapping", cmdPrefix)
	}

	var numaCpuMappingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(numaCpuMappingFlagName, numaCpuMappingFlagDefault, numaCpuMappingDescription)

	return nil
}

func registerGlobalPidfile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pidfileDescription := ``

	var pidfileFlagName string
	if cmdPrefix == "" {
		pidfileFlagName = "pidfile"
	} else {
		pidfileFlagName = fmt.Sprintf("%v.pidfile", cmdPrefix)
	}

	var pidfileFlagDefault string

	_ = cmd.PersistentFlags().String(pidfileFlagName, pidfileFlagDefault, pidfileDescription)

	return nil
}

func registerGlobalPp2NeverSendLocal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pp2NeverSendLocalDescription := ``

	var pp2NeverSendLocalFlagName string
	if cmdPrefix == "" {
		pp2NeverSendLocalFlagName = "pp2_never_send_local"
	} else {
		pp2NeverSendLocalFlagName = fmt.Sprintf("%v.pp2_never_send_local", cmdPrefix)
	}

	var pp2NeverSendLocalFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pp2NeverSendLocalFlagName, pp2NeverSendLocalFlagDefault, pp2NeverSendLocalDescription)

	return nil
}

func registerGlobalProfilingTasks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	profilingTasksDescription := `Enum: ["auto","on","off"]. `

	var profilingTasksFlagName string
	if cmdPrefix == "" {
		profilingTasksFlagName = "profiling_tasks"
	} else {
		profilingTasksFlagName = fmt.Sprintf("%v.profiling_tasks", cmdPrefix)
	}

	var profilingTasksFlagDefault string

	_ = cmd.PersistentFlags().String(profilingTasksFlagName, profilingTasksFlagDefault, profilingTasksDescription)

	if err := cmd.RegisterFlagCompletionFunc(profilingTasksFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["auto","on","off"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerGlobalQuiet(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	quietDescription := ``

	var quietFlagName string
	if cmdPrefix == "" {
		quietFlagName = "quiet"
	} else {
		quietFlagName = fmt.Sprintf("%v.quiet", cmdPrefix)
	}

	var quietFlagDefault bool

	_ = cmd.PersistentFlags().Bool(quietFlagName, quietFlagDefault, quietDescription)

	return nil
}

func registerGlobalResetenv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resetenvDescription := ``

	var resetenvFlagName string
	if cmdPrefix == "" {
		resetenvFlagName = "resetenv"
	} else {
		resetenvFlagName = fmt.Sprintf("%v.resetenv", cmdPrefix)
	}

	var resetenvFlagDefault string

	_ = cmd.PersistentFlags().String(resetenvFlagName, resetenvFlagDefault, resetenvDescription)

	return nil
}

func registerGlobalServerStateBase(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverStateBaseDescription := ``

	var serverStateBaseFlagName string
	if cmdPrefix == "" {
		serverStateBaseFlagName = "server_state_base"
	} else {
		serverStateBaseFlagName = fmt.Sprintf("%v.server_state_base", cmdPrefix)
	}

	var serverStateBaseFlagDefault string

	_ = cmd.PersistentFlags().String(serverStateBaseFlagName, serverStateBaseFlagDefault, serverStateBaseDescription)

	return nil
}

func registerGlobalServerStateFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverStateFileDescription := ``

	var serverStateFileFlagName string
	if cmdPrefix == "" {
		serverStateFileFlagName = "server_state_file"
	} else {
		serverStateFileFlagName = fmt.Sprintf("%v.server_state_file", cmdPrefix)
	}

	var serverStateFileFlagDefault string

	_ = cmd.PersistentFlags().String(serverStateFileFlagName, serverStateFileFlagDefault, serverStateFileDescription)

	return nil
}

func registerGlobalSetDumpable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	setDumpableDescription := ``

	var setDumpableFlagName string
	if cmdPrefix == "" {
		setDumpableFlagName = "set_dumpable"
	} else {
		setDumpableFlagName = fmt.Sprintf("%v.set_dumpable", cmdPrefix)
	}

	var setDumpableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(setDumpableFlagName, setDumpableFlagDefault, setDumpableDescription)

	return nil
}

func registerGlobalSpreadChecks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spreadChecksDescription := ``

	var spreadChecksFlagName string
	if cmdPrefix == "" {
		spreadChecksFlagName = "spread_checks"
	} else {
		spreadChecksFlagName = fmt.Sprintf("%v.spread_checks", cmdPrefix)
	}

	var spreadChecksFlagDefault int64

	_ = cmd.PersistentFlags().Int64(spreadChecksFlagName, spreadChecksFlagDefault, spreadChecksDescription)

	return nil
}

func registerGlobalSslDefaultBindCiphers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslDefaultBindCiphersDescription := ``

	var sslDefaultBindCiphersFlagName string
	if cmdPrefix == "" {
		sslDefaultBindCiphersFlagName = "ssl_default_bind_ciphers"
	} else {
		sslDefaultBindCiphersFlagName = fmt.Sprintf("%v.ssl_default_bind_ciphers", cmdPrefix)
	}

	var sslDefaultBindCiphersFlagDefault string

	_ = cmd.PersistentFlags().String(sslDefaultBindCiphersFlagName, sslDefaultBindCiphersFlagDefault, sslDefaultBindCiphersDescription)

	return nil
}

func registerGlobalSslDefaultBindCiphersuites(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslDefaultBindCiphersuitesDescription := ``

	var sslDefaultBindCiphersuitesFlagName string
	if cmdPrefix == "" {
		sslDefaultBindCiphersuitesFlagName = "ssl_default_bind_ciphersuites"
	} else {
		sslDefaultBindCiphersuitesFlagName = fmt.Sprintf("%v.ssl_default_bind_ciphersuites", cmdPrefix)
	}

	var sslDefaultBindCiphersuitesFlagDefault string

	_ = cmd.PersistentFlags().String(sslDefaultBindCiphersuitesFlagName, sslDefaultBindCiphersuitesFlagDefault, sslDefaultBindCiphersuitesDescription)

	return nil
}

func registerGlobalSslDefaultBindCurves(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslDefaultBindCurvesDescription := ``

	var sslDefaultBindCurvesFlagName string
	if cmdPrefix == "" {
		sslDefaultBindCurvesFlagName = "ssl_default_bind_curves"
	} else {
		sslDefaultBindCurvesFlagName = fmt.Sprintf("%v.ssl_default_bind_curves", cmdPrefix)
	}

	var sslDefaultBindCurvesFlagDefault string

	_ = cmd.PersistentFlags().String(sslDefaultBindCurvesFlagName, sslDefaultBindCurvesFlagDefault, sslDefaultBindCurvesDescription)

	return nil
}

func registerGlobalSslDefaultBindOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslDefaultBindOptionsDescription := ``

	var sslDefaultBindOptionsFlagName string
	if cmdPrefix == "" {
		sslDefaultBindOptionsFlagName = "ssl_default_bind_options"
	} else {
		sslDefaultBindOptionsFlagName = fmt.Sprintf("%v.ssl_default_bind_options", cmdPrefix)
	}

	var sslDefaultBindOptionsFlagDefault string

	_ = cmd.PersistentFlags().String(sslDefaultBindOptionsFlagName, sslDefaultBindOptionsFlagDefault, sslDefaultBindOptionsDescription)

	return nil
}

func registerGlobalSslDefaultServerCiphers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslDefaultServerCiphersDescription := ``

	var sslDefaultServerCiphersFlagName string
	if cmdPrefix == "" {
		sslDefaultServerCiphersFlagName = "ssl_default_server_ciphers"
	} else {
		sslDefaultServerCiphersFlagName = fmt.Sprintf("%v.ssl_default_server_ciphers", cmdPrefix)
	}

	var sslDefaultServerCiphersFlagDefault string

	_ = cmd.PersistentFlags().String(sslDefaultServerCiphersFlagName, sslDefaultServerCiphersFlagDefault, sslDefaultServerCiphersDescription)

	return nil
}

func registerGlobalSslDefaultServerCiphersuites(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslDefaultServerCiphersuitesDescription := ``

	var sslDefaultServerCiphersuitesFlagName string
	if cmdPrefix == "" {
		sslDefaultServerCiphersuitesFlagName = "ssl_default_server_ciphersuites"
	} else {
		sslDefaultServerCiphersuitesFlagName = fmt.Sprintf("%v.ssl_default_server_ciphersuites", cmdPrefix)
	}

	var sslDefaultServerCiphersuitesFlagDefault string

	_ = cmd.PersistentFlags().String(sslDefaultServerCiphersuitesFlagName, sslDefaultServerCiphersuitesFlagDefault, sslDefaultServerCiphersuitesDescription)

	return nil
}

func registerGlobalSslDefaultServerOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslDefaultServerOptionsDescription := ``

	var sslDefaultServerOptionsFlagName string
	if cmdPrefix == "" {
		sslDefaultServerOptionsFlagName = "ssl_default_server_options"
	} else {
		sslDefaultServerOptionsFlagName = fmt.Sprintf("%v.ssl_default_server_options", cmdPrefix)
	}

	var sslDefaultServerOptionsFlagDefault string

	_ = cmd.PersistentFlags().String(sslDefaultServerOptionsFlagName, sslDefaultServerOptionsFlagDefault, sslDefaultServerOptionsDescription)

	return nil
}

func registerGlobalSslDhParamFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslDhParamFileDescription := ``

	var sslDhParamFileFlagName string
	if cmdPrefix == "" {
		sslDhParamFileFlagName = "ssl_dh_param_file"
	} else {
		sslDhParamFileFlagName = fmt.Sprintf("%v.ssl_dh_param_file", cmdPrefix)
	}

	var sslDhParamFileFlagDefault string

	_ = cmd.PersistentFlags().String(sslDhParamFileFlagName, sslDhParamFileFlagDefault, sslDhParamFileDescription)

	return nil
}

func registerGlobalSslLoadExtraFiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslLoadExtraFilesDescription := ``

	var sslLoadExtraFilesFlagName string
	if cmdPrefix == "" {
		sslLoadExtraFilesFlagName = "ssl_load_extra_files"
	} else {
		sslLoadExtraFilesFlagName = fmt.Sprintf("%v.ssl_load_extra_files", cmdPrefix)
	}

	var sslLoadExtraFilesFlagDefault string

	_ = cmd.PersistentFlags().String(sslLoadExtraFilesFlagName, sslLoadExtraFilesFlagDefault, sslLoadExtraFilesDescription)

	return nil
}

func registerGlobalSslModeAsync(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslModeAsyncDescription := `Enum: ["enabled","disabled"]. `

	var sslModeAsyncFlagName string
	if cmdPrefix == "" {
		sslModeAsyncFlagName = "ssl_mode_async"
	} else {
		sslModeAsyncFlagName = fmt.Sprintf("%v.ssl_mode_async", cmdPrefix)
	}

	var sslModeAsyncFlagDefault string

	_ = cmd.PersistentFlags().String(sslModeAsyncFlagName, sslModeAsyncFlagDefault, sslModeAsyncDescription)

	if err := cmd.RegisterFlagCompletionFunc(sslModeAsyncFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerGlobalSslServerVerify(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslServerVerifyDescription := `Enum: ["none","required"]. `

	var sslServerVerifyFlagName string
	if cmdPrefix == "" {
		sslServerVerifyFlagName = "ssl_server_verify"
	} else {
		sslServerVerifyFlagName = fmt.Sprintf("%v.ssl_server_verify", cmdPrefix)
	}

	var sslServerVerifyFlagDefault string

	_ = cmd.PersistentFlags().String(sslServerVerifyFlagName, sslServerVerifyFlagDefault, sslServerVerifyDescription)

	if err := cmd.RegisterFlagCompletionFunc(sslServerVerifyFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["none","required"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerGlobalSslSkipSelfIssuedCa(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslSkipSelfIssuedCaDescription := ``

	var sslSkipSelfIssuedCaFlagName string
	if cmdPrefix == "" {
		sslSkipSelfIssuedCaFlagName = "ssl_skip_self_issued_ca"
	} else {
		sslSkipSelfIssuedCaFlagName = fmt.Sprintf("%v.ssl_skip_self_issued_ca", cmdPrefix)
	}

	var sslSkipSelfIssuedCaFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sslSkipSelfIssuedCaFlagName, sslSkipSelfIssuedCaFlagDefault, sslSkipSelfIssuedCaDescription)

	return nil
}

func registerGlobalStatsMaxconn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statsMaxconnDescription := ``

	var statsMaxconnFlagName string
	if cmdPrefix == "" {
		statsMaxconnFlagName = "stats_maxconn"
	} else {
		statsMaxconnFlagName = fmt.Sprintf("%v.stats_maxconn", cmdPrefix)
	}

	var statsMaxconnFlagDefault int64

	_ = cmd.PersistentFlags().Int64(statsMaxconnFlagName, statsMaxconnFlagDefault, statsMaxconnDescription)

	return nil
}

func registerGlobalStatsTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statsTimeoutDescription := ``

	var statsTimeoutFlagName string
	if cmdPrefix == "" {
		statsTimeoutFlagName = "stats_timeout"
	} else {
		statsTimeoutFlagName = fmt.Sprintf("%v.stats_timeout", cmdPrefix)
	}

	var statsTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(statsTimeoutFlagName, statsTimeoutFlagDefault, statsTimeoutDescription)

	return nil
}

func registerGlobalStrictLimits(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	strictLimitsDescription := ``

	var strictLimitsFlagName string
	if cmdPrefix == "" {
		strictLimitsFlagName = "strict_limits"
	} else {
		strictLimitsFlagName = fmt.Sprintf("%v.strict_limits", cmdPrefix)
	}

	var strictLimitsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(strictLimitsFlagName, strictLimitsFlagDefault, strictLimitsDescription)

	return nil
}

func registerGlobalThreadGroups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	threadGroupsDescription := ``

	var threadGroupsFlagName string
	if cmdPrefix == "" {
		threadGroupsFlagName = "thread_groups"
	} else {
		threadGroupsFlagName = fmt.Sprintf("%v.thread_groups", cmdPrefix)
	}

	var threadGroupsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(threadGroupsFlagName, threadGroupsFlagDefault, threadGroupsDescription)

	return nil
}

func registerGlobalTuneOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tuneOptionsFlagName string
	if cmdPrefix == "" {
		tuneOptionsFlagName = "tune_options"
	} else {
		tuneOptionsFlagName = fmt.Sprintf("%v.tune_options", cmdPrefix)
	}

	if err := registerModelGlobalTuneOptionsFlags(depth+1, tuneOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerGlobalTuneSslDefaultDhParam(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tuneSslDefaultDhParamDescription := ``

	var tuneSslDefaultDhParamFlagName string
	if cmdPrefix == "" {
		tuneSslDefaultDhParamFlagName = "tune_ssl_default_dh_param"
	} else {
		tuneSslDefaultDhParamFlagName = fmt.Sprintf("%v.tune_ssl_default_dh_param", cmdPrefix)
	}

	var tuneSslDefaultDhParamFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tuneSslDefaultDhParamFlagName, tuneSslDefaultDhParamFlagDefault, tuneSslDefaultDhParamDescription)

	return nil
}

func registerGlobalUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uidDescription := ``

	var uidFlagName string
	if cmdPrefix == "" {
		uidFlagName = "uid"
	} else {
		uidFlagName = fmt.Sprintf("%v.uid", cmdPrefix)
	}

	var uidFlagDefault int64

	_ = cmd.PersistentFlags().Int64(uidFlagName, uidFlagDefault, uidDescription)

	return nil
}

func registerGlobalUlimitn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ulimitNDescription := ``

	var ulimitNFlagName string
	if cmdPrefix == "" {
		ulimitNFlagName = "ulimit_n"
	} else {
		ulimitNFlagName = fmt.Sprintf("%v.ulimit_n", cmdPrefix)
	}

	var ulimitNFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ulimitNFlagName, ulimitNFlagDefault, ulimitNDescription)

	return nil
}

func registerGlobalUnsetenv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unsetenvDescription := ``

	var unsetenvFlagName string
	if cmdPrefix == "" {
		unsetenvFlagName = "unsetenv"
	} else {
		unsetenvFlagName = fmt.Sprintf("%v.unsetenv", cmdPrefix)
	}

	var unsetenvFlagDefault string

	_ = cmd.PersistentFlags().String(unsetenvFlagName, unsetenvFlagDefault, unsetenvDescription)

	return nil
}

func registerGlobalUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userDescription := ``

	var userFlagName string
	if cmdPrefix == "" {
		userFlagName = "user"
	} else {
		userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
	}

	var userFlagDefault string

	_ = cmd.PersistentFlags().String(userFlagName, userFlagDefault, userDescription)

	return nil
}

func registerGlobalWurflOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var wurflOptionsFlagName string
	if cmdPrefix == "" {
		wurflOptionsFlagName = "wurfl_options"
	} else {
		wurflOptionsFlagName = fmt.Sprintf("%v.wurfl_options", cmdPrefix)
	}

	if err := registerModelGlobalWurflOptionsFlags(depth+1, wurflOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerGlobalZeroWarning(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	zeroWarningDescription := ``

	var zeroWarningFlagName string
	if cmdPrefix == "" {
		zeroWarningFlagName = "zero_warning"
	} else {
		zeroWarningFlagName = fmt.Sprintf("%v.zero_warning", cmdPrefix)
	}

	var zeroWarningFlagDefault bool

	_ = cmd.PersistentFlags().Bool(zeroWarningFlagName, zeroWarningFlagDefault, zeroWarningDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGlobalFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cpuMapsAdded := retrieveGlobalCPUMapsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuMapsAdded

	err, h1CaseAdjustsAdded := retrieveGlobalH1CaseAdjustsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h1CaseAdjustsAdded

	err, presetEnvsAdded := retrieveGlobalPresetEnvsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || presetEnvsAdded

	err, runtimeAPIsAdded := retrieveGlobalRuntimeAPIsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runtimeAPIsAdded

	err, setEnvsAdded := retrieveGlobalSetEnvsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || setEnvsAdded

	err, setVarFmtsAdded := retrieveGlobalSetVarFmtsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || setVarFmtsAdded

	err, setVarsAdded := retrieveGlobalSetVarsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || setVarsAdded

	err, sslEnginesAdded := retrieveGlobalSslEnginesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslEnginesAdded

	err, threadGroupLinesAdded := retrieveGlobalThreadGroupLinesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || threadGroupLinesAdded

	err, busyPollingAdded := retrieveGlobalBusyPollingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || busyPollingAdded

	err, caBaseAdded := retrieveGlobalCaBaseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || caBaseAdded

	err, chrootAdded := retrieveGlobalChrootFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chrootAdded

	err, crtBaseAdded := retrieveGlobalCrtBaseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || crtBaseAdded

	err, daemonAdded := retrieveGlobalDaemonFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || daemonAdded

	err, descriptionAdded := retrieveGlobalDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, deviceAtlasOptionsAdded := retrieveGlobalDeviceAtlasOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceAtlasOptionsAdded

	err, exposeExperimentalDirectivesAdded := retrieveGlobalExposeExperimentalDirectivesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || exposeExperimentalDirectivesAdded

	err, externalCheckAdded := retrieveGlobalExternalCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || externalCheckAdded

	err, fiftyOneDegreesOptionsAdded := retrieveGlobalFiftyOneDegreesOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fiftyOneDegreesOptionsAdded

	err, gidAdded := retrieveGlobalGidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gidAdded

	err, graceAdded := retrieveGlobalGraceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || graceAdded

	err, groupAdded := retrieveGlobalGroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || groupAdded

	err, h1CaseAdjustFileAdded := retrieveGlobalH1CaseAdjustFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h1CaseAdjustFileAdded

	err, h2WorkaroundBogusWebsocketClientsAdded := retrieveGlobalH2WorkaroundBogusWebsocketClientsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h2WorkaroundBogusWebsocketClientsAdded

	err, hardStopAfterAdded := retrieveGlobalHardStopAfterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hardStopAfterAdded

	err, insecureForkWantedAdded := retrieveGlobalInsecureForkWantedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || insecureForkWantedAdded

	err, insecureSetuidWantedAdded := retrieveGlobalInsecureSetuidWantedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || insecureSetuidWantedAdded

	err, issuersChainPathAdded := retrieveGlobalIssuersChainPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || issuersChainPathAdded

	err, localpeerAdded := retrieveGlobalLocalpeerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || localpeerAdded

	err, logSendHostnameAdded := retrieveGlobalLogSendHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logSendHostnameAdded

	err, luaLoadPerThreadAdded := retrieveGlobalLuaLoadPerThreadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaLoadPerThreadAdded

	err, luaLoadsAdded := retrieveGlobalLuaLoadsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaLoadsAdded

	err, luaPrependPathAdded := retrieveGlobalLuaPrependPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaPrependPathAdded

	err, masterWorkerAdded := retrieveGlobalMasterWorkerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || masterWorkerAdded

	err, maxSpreadChecksAdded := retrieveGlobalMaxSpreadChecksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxSpreadChecksAdded

	err, maxcompcpuusageAdded := retrieveGlobalMaxcompcpuusageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxcompcpuusageAdded

	err, maxcomprateAdded := retrieveGlobalMaxcomprateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxcomprateAdded

	err, maxconnAdded := retrieveGlobalMaxconnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxconnAdded

	err, maxconnrateAdded := retrieveGlobalMaxconnrateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxconnrateAdded

	err, maxpipesAdded := retrieveGlobalMaxpipesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxpipesAdded

	err, maxsessrateAdded := retrieveGlobalMaxsessrateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxsessrateAdded

	err, maxsslconnAdded := retrieveGlobalMaxsslconnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxsslconnAdded

	err, maxsslrateAdded := retrieveGlobalMaxsslrateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxsslrateAdded

	err, maxzlibmemAdded := retrieveGlobalMaxzlibmemFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxzlibmemAdded

	err, mworkerMaxReloadsAdded := retrieveGlobalMworkerMaxReloadsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mworkerMaxReloadsAdded

	err, nbprocAdded := retrieveGlobalNbprocFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nbprocAdded

	err, nbthreadAdded := retrieveGlobalNbthreadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nbthreadAdded

	err, nodeAdded := retrieveGlobalNodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodeAdded

	err, noepollAdded := retrieveGlobalNoepollFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noepollAdded

	err, noevportsAdded := retrieveGlobalNoevportsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noevportsAdded

	err, nogetaddrinfoAdded := retrieveGlobalNogetaddrinfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nogetaddrinfoAdded

	err, nokqueueAdded := retrieveGlobalNokqueueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nokqueueAdded

	err, nopollAdded := retrieveGlobalNopollFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nopollAdded

	err, noreuseportAdded := retrieveGlobalNoreuseportFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noreuseportAdded

	err, nospliceAdded := retrieveGlobalNospliceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nospliceAdded

	err, numaCpuMappingAdded := retrieveGlobalNumaCPUMappingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numaCpuMappingAdded

	err, pidfileAdded := retrieveGlobalPidfileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pidfileAdded

	err, pp2NeverSendLocalAdded := retrieveGlobalPp2NeverSendLocalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pp2NeverSendLocalAdded

	err, profilingTasksAdded := retrieveGlobalProfilingTasksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || profilingTasksAdded

	err, quietAdded := retrieveGlobalQuietFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quietAdded

	err, resetenvAdded := retrieveGlobalResetenvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resetenvAdded

	err, serverStateBaseAdded := retrieveGlobalServerStateBaseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverStateBaseAdded

	err, serverStateFileAdded := retrieveGlobalServerStateFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverStateFileAdded

	err, setDumpableAdded := retrieveGlobalSetDumpableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || setDumpableAdded

	err, spreadChecksAdded := retrieveGlobalSpreadChecksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spreadChecksAdded

	err, sslDefaultBindCiphersAdded := retrieveGlobalSslDefaultBindCiphersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslDefaultBindCiphersAdded

	err, sslDefaultBindCiphersuitesAdded := retrieveGlobalSslDefaultBindCiphersuitesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslDefaultBindCiphersuitesAdded

	err, sslDefaultBindCurvesAdded := retrieveGlobalSslDefaultBindCurvesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslDefaultBindCurvesAdded

	err, sslDefaultBindOptionsAdded := retrieveGlobalSslDefaultBindOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslDefaultBindOptionsAdded

	err, sslDefaultServerCiphersAdded := retrieveGlobalSslDefaultServerCiphersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslDefaultServerCiphersAdded

	err, sslDefaultServerCiphersuitesAdded := retrieveGlobalSslDefaultServerCiphersuitesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslDefaultServerCiphersuitesAdded

	err, sslDefaultServerOptionsAdded := retrieveGlobalSslDefaultServerOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslDefaultServerOptionsAdded

	err, sslDhParamFileAdded := retrieveGlobalSslDhParamFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslDhParamFileAdded

	err, sslLoadExtraFilesAdded := retrieveGlobalSslLoadExtraFilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslLoadExtraFilesAdded

	err, sslModeAsyncAdded := retrieveGlobalSslModeAsyncFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslModeAsyncAdded

	err, sslServerVerifyAdded := retrieveGlobalSslServerVerifyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslServerVerifyAdded

	err, sslSkipSelfIssuedCaAdded := retrieveGlobalSslSkipSelfIssuedCaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslSkipSelfIssuedCaAdded

	err, statsMaxconnAdded := retrieveGlobalStatsMaxconnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statsMaxconnAdded

	err, statsTimeoutAdded := retrieveGlobalStatsTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statsTimeoutAdded

	err, strictLimitsAdded := retrieveGlobalStrictLimitsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || strictLimitsAdded

	err, threadGroupsAdded := retrieveGlobalThreadGroupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || threadGroupsAdded

	err, tuneOptionsAdded := retrieveGlobalTuneOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tuneOptionsAdded

	err, tuneSslDefaultDhParamAdded := retrieveGlobalTuneSslDefaultDhParamFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tuneSslDefaultDhParamAdded

	err, uidAdded := retrieveGlobalUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uidAdded

	err, ulimitNAdded := retrieveGlobalUlimitnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ulimitNAdded

	err, unsetenvAdded := retrieveGlobalUnsetenvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unsetenvAdded

	err, userAdded := retrieveGlobalUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded

	err, wurflOptionsAdded := retrieveGlobalWurflOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wurflOptionsAdded

	err, zeroWarningAdded := retrieveGlobalZeroWarningFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || zeroWarningAdded

	return nil, retAdded
}

func retrieveGlobalCPUMapsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpuMapsFlagName := fmt.Sprintf("%v.CPUMaps", cmdPrefix)
	if cmd.Flags().Changed(cpuMapsFlagName) {
		// warning: CPUMaps array type []*CPUMap is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGlobalH1CaseAdjustsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h1CaseAdjustsFlagName := fmt.Sprintf("%v.H1CaseAdjusts", cmdPrefix)
	if cmd.Flags().Changed(h1CaseAdjustsFlagName) {
		// warning: H1CaseAdjusts array type []*H1CaseAdjust is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGlobalPresetEnvsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	presetEnvsFlagName := fmt.Sprintf("%v.PresetEnvs", cmdPrefix)
	if cmd.Flags().Changed(presetEnvsFlagName) {
		// warning: PresetEnvs array type []*PresetEnv is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGlobalRuntimeAPIsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runtimeAPIsFlagName := fmt.Sprintf("%v.RuntimeAPIs", cmdPrefix)
	if cmd.Flags().Changed(runtimeAPIsFlagName) {
		// warning: RuntimeAPIs array type []*RuntimeAPI is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGlobalSetEnvsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	setEnvsFlagName := fmt.Sprintf("%v.SetEnvs", cmdPrefix)
	if cmd.Flags().Changed(setEnvsFlagName) {
		// warning: SetEnvs array type []*SetEnv is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGlobalSetVarFmtsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	setVarFmtsFlagName := fmt.Sprintf("%v.SetVarFmts", cmdPrefix)
	if cmd.Flags().Changed(setVarFmtsFlagName) {
		// warning: SetVarFmts array type []*SetVarFmt is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGlobalSetVarsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	setVarsFlagName := fmt.Sprintf("%v.SetVars", cmdPrefix)
	if cmd.Flags().Changed(setVarsFlagName) {
		// warning: SetVars array type []*SetVar is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGlobalSslEnginesFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslEnginesFlagName := fmt.Sprintf("%v.SslEngines", cmdPrefix)
	if cmd.Flags().Changed(sslEnginesFlagName) {
		// warning: SslEngines array type []*SslEngine is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGlobalThreadGroupLinesFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	threadGroupLinesFlagName := fmt.Sprintf("%v.ThreadGroupLines", cmdPrefix)
	if cmd.Flags().Changed(threadGroupLinesFlagName) {
		// warning: ThreadGroupLines array type []*ThreadGroup is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGlobalBusyPollingFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	busyPollingFlagName := fmt.Sprintf("%v.busy_polling", cmdPrefix)
	if cmd.Flags().Changed(busyPollingFlagName) {

		var busyPollingFlagName string
		if cmdPrefix == "" {
			busyPollingFlagName = "busy_polling"
		} else {
			busyPollingFlagName = fmt.Sprintf("%v.busy_polling", cmdPrefix)
		}

		busyPollingFlagValue, err := cmd.Flags().GetBool(busyPollingFlagName)
		if err != nil {
			return err, false
		}
		m.BusyPolling = busyPollingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalCaBaseFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	caBaseFlagName := fmt.Sprintf("%v.ca_base", cmdPrefix)
	if cmd.Flags().Changed(caBaseFlagName) {

		var caBaseFlagName string
		if cmdPrefix == "" {
			caBaseFlagName = "ca_base"
		} else {
			caBaseFlagName = fmt.Sprintf("%v.ca_base", cmdPrefix)
		}

		caBaseFlagValue, err := cmd.Flags().GetString(caBaseFlagName)
		if err != nil {
			return err, false
		}
		m.CaBase = caBaseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalChrootFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	chrootFlagName := fmt.Sprintf("%v.chroot", cmdPrefix)
	if cmd.Flags().Changed(chrootFlagName) {

		var chrootFlagName string
		if cmdPrefix == "" {
			chrootFlagName = "chroot"
		} else {
			chrootFlagName = fmt.Sprintf("%v.chroot", cmdPrefix)
		}

		chrootFlagValue, err := cmd.Flags().GetString(chrootFlagName)
		if err != nil {
			return err, false
		}
		m.Chroot = chrootFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalCrtBaseFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	crtBaseFlagName := fmt.Sprintf("%v.crt_base", cmdPrefix)
	if cmd.Flags().Changed(crtBaseFlagName) {

		var crtBaseFlagName string
		if cmdPrefix == "" {
			crtBaseFlagName = "crt_base"
		} else {
			crtBaseFlagName = fmt.Sprintf("%v.crt_base", cmdPrefix)
		}

		crtBaseFlagValue, err := cmd.Flags().GetString(crtBaseFlagName)
		if err != nil {
			return err, false
		}
		m.CrtBase = crtBaseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalDaemonFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	daemonFlagName := fmt.Sprintf("%v.daemon", cmdPrefix)
	if cmd.Flags().Changed(daemonFlagName) {

		var daemonFlagName string
		if cmdPrefix == "" {
			daemonFlagName = "daemon"
		} else {
			daemonFlagName = fmt.Sprintf("%v.daemon", cmdPrefix)
		}

		daemonFlagValue, err := cmd.Flags().GetString(daemonFlagName)
		if err != nil {
			return err, false
		}
		m.Daemon = daemonFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalDescriptionFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalDeviceAtlasOptionsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceAtlasOptionsFlagName := fmt.Sprintf("%v.device_atlas_options", cmdPrefix)
	if cmd.Flags().Changed(deviceAtlasOptionsFlagName) {
		// info: complex object device_atlas_options GlobalDeviceAtlasOptions is retrieved outside this Changed() block
	}
	deviceAtlasOptionsFlagValue := m.DeviceAtlasOptions
	if swag.IsZero(deviceAtlasOptionsFlagValue) {
		deviceAtlasOptionsFlagValue = &models.GlobalDeviceAtlasOptions{}
	}

	err, deviceAtlasOptionsAdded := retrieveModelGlobalDeviceAtlasOptionsFlags(depth+1, deviceAtlasOptionsFlagValue, deviceAtlasOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceAtlasOptionsAdded
	if deviceAtlasOptionsAdded {
		m.DeviceAtlasOptions = deviceAtlasOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveGlobalExposeExperimentalDirectivesFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	exposeExperimentalDirectivesFlagName := fmt.Sprintf("%v.expose_experimental_directives", cmdPrefix)
	if cmd.Flags().Changed(exposeExperimentalDirectivesFlagName) {

		var exposeExperimentalDirectivesFlagName string
		if cmdPrefix == "" {
			exposeExperimentalDirectivesFlagName = "expose_experimental_directives"
		} else {
			exposeExperimentalDirectivesFlagName = fmt.Sprintf("%v.expose_experimental_directives", cmdPrefix)
		}

		exposeExperimentalDirectivesFlagValue, err := cmd.Flags().GetBool(exposeExperimentalDirectivesFlagName)
		if err != nil {
			return err, false
		}
		m.ExposeExperimentalDirectives = exposeExperimentalDirectivesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalExternalCheckFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	externalCheckFlagName := fmt.Sprintf("%v.external_check", cmdPrefix)
	if cmd.Flags().Changed(externalCheckFlagName) {

		var externalCheckFlagName string
		if cmdPrefix == "" {
			externalCheckFlagName = "external_check"
		} else {
			externalCheckFlagName = fmt.Sprintf("%v.external_check", cmdPrefix)
		}

		externalCheckFlagValue, err := cmd.Flags().GetBool(externalCheckFlagName)
		if err != nil {
			return err, false
		}
		m.ExternalCheck = externalCheckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalFiftyOneDegreesOptionsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fiftyOneDegreesOptionsFlagName := fmt.Sprintf("%v.fifty_one_degrees_options", cmdPrefix)
	if cmd.Flags().Changed(fiftyOneDegreesOptionsFlagName) {
		// info: complex object fifty_one_degrees_options GlobalFiftyOneDegreesOptions is retrieved outside this Changed() block
	}
	fiftyOneDegreesOptionsFlagValue := m.FiftyOneDegreesOptions
	if swag.IsZero(fiftyOneDegreesOptionsFlagValue) {
		fiftyOneDegreesOptionsFlagValue = &models.GlobalFiftyOneDegreesOptions{}
	}

	err, fiftyOneDegreesOptionsAdded := retrieveModelGlobalFiftyOneDegreesOptionsFlags(depth+1, fiftyOneDegreesOptionsFlagValue, fiftyOneDegreesOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fiftyOneDegreesOptionsAdded
	if fiftyOneDegreesOptionsAdded {
		m.FiftyOneDegreesOptions = fiftyOneDegreesOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveGlobalGidFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gidFlagName := fmt.Sprintf("%v.gid", cmdPrefix)
	if cmd.Flags().Changed(gidFlagName) {

		var gidFlagName string
		if cmdPrefix == "" {
			gidFlagName = "gid"
		} else {
			gidFlagName = fmt.Sprintf("%v.gid", cmdPrefix)
		}

		gidFlagValue, err := cmd.Flags().GetInt64(gidFlagName)
		if err != nil {
			return err, false
		}
		m.Gid = gidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalGraceFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	graceFlagName := fmt.Sprintf("%v.grace", cmdPrefix)
	if cmd.Flags().Changed(graceFlagName) {

		var graceFlagName string
		if cmdPrefix == "" {
			graceFlagName = "grace"
		} else {
			graceFlagName = fmt.Sprintf("%v.grace", cmdPrefix)
		}

		graceFlagValue, err := cmd.Flags().GetInt64(graceFlagName)
		if err != nil {
			return err, false
		}
		m.Grace = &graceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalGroupFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	groupFlagName := fmt.Sprintf("%v.group", cmdPrefix)
	if cmd.Flags().Changed(groupFlagName) {

		var groupFlagName string
		if cmdPrefix == "" {
			groupFlagName = "group"
		} else {
			groupFlagName = fmt.Sprintf("%v.group", cmdPrefix)
		}

		groupFlagValue, err := cmd.Flags().GetString(groupFlagName)
		if err != nil {
			return err, false
		}
		m.Group = groupFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalH1CaseAdjustFileFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h1CaseAdjustFileFlagName := fmt.Sprintf("%v.h1_case_adjust_file", cmdPrefix)
	if cmd.Flags().Changed(h1CaseAdjustFileFlagName) {

		var h1CaseAdjustFileFlagName string
		if cmdPrefix == "" {
			h1CaseAdjustFileFlagName = "h1_case_adjust_file"
		} else {
			h1CaseAdjustFileFlagName = fmt.Sprintf("%v.h1_case_adjust_file", cmdPrefix)
		}

		h1CaseAdjustFileFlagValue, err := cmd.Flags().GetString(h1CaseAdjustFileFlagName)
		if err != nil {
			return err, false
		}
		m.H1CaseAdjustFile = h1CaseAdjustFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalH2WorkaroundBogusWebsocketClientsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h2WorkaroundBogusWebsocketClientsFlagName := fmt.Sprintf("%v.h2_workaround_bogus_websocket_clients", cmdPrefix)
	if cmd.Flags().Changed(h2WorkaroundBogusWebsocketClientsFlagName) {

		var h2WorkaroundBogusWebsocketClientsFlagName string
		if cmdPrefix == "" {
			h2WorkaroundBogusWebsocketClientsFlagName = "h2_workaround_bogus_websocket_clients"
		} else {
			h2WorkaroundBogusWebsocketClientsFlagName = fmt.Sprintf("%v.h2_workaround_bogus_websocket_clients", cmdPrefix)
		}

		h2WorkaroundBogusWebsocketClientsFlagValue, err := cmd.Flags().GetBool(h2WorkaroundBogusWebsocketClientsFlagName)
		if err != nil {
			return err, false
		}
		m.H2WorkaroundBogusWebsocketClients = h2WorkaroundBogusWebsocketClientsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalHardStopAfterFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hardStopAfterFlagName := fmt.Sprintf("%v.hard_stop_after", cmdPrefix)
	if cmd.Flags().Changed(hardStopAfterFlagName) {

		var hardStopAfterFlagName string
		if cmdPrefix == "" {
			hardStopAfterFlagName = "hard_stop_after"
		} else {
			hardStopAfterFlagName = fmt.Sprintf("%v.hard_stop_after", cmdPrefix)
		}

		hardStopAfterFlagValue, err := cmd.Flags().GetInt64(hardStopAfterFlagName)
		if err != nil {
			return err, false
		}
		m.HardStopAfter = &hardStopAfterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalInsecureForkWantedFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	insecureForkWantedFlagName := fmt.Sprintf("%v.insecure_fork_wanted", cmdPrefix)
	if cmd.Flags().Changed(insecureForkWantedFlagName) {

		var insecureForkWantedFlagName string
		if cmdPrefix == "" {
			insecureForkWantedFlagName = "insecure_fork_wanted"
		} else {
			insecureForkWantedFlagName = fmt.Sprintf("%v.insecure_fork_wanted", cmdPrefix)
		}

		insecureForkWantedFlagValue, err := cmd.Flags().GetBool(insecureForkWantedFlagName)
		if err != nil {
			return err, false
		}
		m.InsecureForkWanted = insecureForkWantedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalInsecureSetuidWantedFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	insecureSetuidWantedFlagName := fmt.Sprintf("%v.insecure_setuid_wanted", cmdPrefix)
	if cmd.Flags().Changed(insecureSetuidWantedFlagName) {

		var insecureSetuidWantedFlagName string
		if cmdPrefix == "" {
			insecureSetuidWantedFlagName = "insecure_setuid_wanted"
		} else {
			insecureSetuidWantedFlagName = fmt.Sprintf("%v.insecure_setuid_wanted", cmdPrefix)
		}

		insecureSetuidWantedFlagValue, err := cmd.Flags().GetBool(insecureSetuidWantedFlagName)
		if err != nil {
			return err, false
		}
		m.InsecureSetuidWanted = insecureSetuidWantedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalIssuersChainPathFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	issuersChainPathFlagName := fmt.Sprintf("%v.issuers_chain_path", cmdPrefix)
	if cmd.Flags().Changed(issuersChainPathFlagName) {

		var issuersChainPathFlagName string
		if cmdPrefix == "" {
			issuersChainPathFlagName = "issuers_chain_path"
		} else {
			issuersChainPathFlagName = fmt.Sprintf("%v.issuers_chain_path", cmdPrefix)
		}

		issuersChainPathFlagValue, err := cmd.Flags().GetString(issuersChainPathFlagName)
		if err != nil {
			return err, false
		}
		m.IssuersChainPath = issuersChainPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalLocalpeerFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	localpeerFlagName := fmt.Sprintf("%v.localpeer", cmdPrefix)
	if cmd.Flags().Changed(localpeerFlagName) {

		var localpeerFlagName string
		if cmdPrefix == "" {
			localpeerFlagName = "localpeer"
		} else {
			localpeerFlagName = fmt.Sprintf("%v.localpeer", cmdPrefix)
		}

		localpeerFlagValue, err := cmd.Flags().GetString(localpeerFlagName)
		if err != nil {
			return err, false
		}
		m.Localpeer = localpeerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalLogSendHostnameFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logSendHostnameFlagName := fmt.Sprintf("%v.log_send_hostname", cmdPrefix)
	if cmd.Flags().Changed(logSendHostnameFlagName) {
		// info: complex object log_send_hostname GlobalLogSendHostname is retrieved outside this Changed() block
	}
	logSendHostnameFlagValue := m.LogSendHostname
	if swag.IsZero(logSendHostnameFlagValue) {
		logSendHostnameFlagValue = &models.GlobalLogSendHostname{}
	}

	err, logSendHostnameAdded := retrieveModelGlobalLogSendHostnameFlags(depth+1, logSendHostnameFlagValue, logSendHostnameFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logSendHostnameAdded
	if logSendHostnameAdded {
		m.LogSendHostname = logSendHostnameFlagValue
	}

	return nil, retAdded
}

func retrieveGlobalLuaLoadPerThreadFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaLoadPerThreadFlagName := fmt.Sprintf("%v.lua_load_per_thread", cmdPrefix)
	if cmd.Flags().Changed(luaLoadPerThreadFlagName) {

		var luaLoadPerThreadFlagName string
		if cmdPrefix == "" {
			luaLoadPerThreadFlagName = "lua_load_per_thread"
		} else {
			luaLoadPerThreadFlagName = fmt.Sprintf("%v.lua_load_per_thread", cmdPrefix)
		}

		luaLoadPerThreadFlagValue, err := cmd.Flags().GetString(luaLoadPerThreadFlagName)
		if err != nil {
			return err, false
		}
		m.LuaLoadPerThread = luaLoadPerThreadFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalLuaLoadsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaLoadsFlagName := fmt.Sprintf("%v.lua_loads", cmdPrefix)
	if cmd.Flags().Changed(luaLoadsFlagName) {
		// warning: lua_loads array type []*LuaLoad is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGlobalLuaPrependPathFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaPrependPathFlagName := fmt.Sprintf("%v.lua_prepend_path", cmdPrefix)
	if cmd.Flags().Changed(luaPrependPathFlagName) {
		// warning: lua_prepend_path array type []*LuaPrependPath is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGlobalMasterWorkerFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	masterWorkerFlagName := fmt.Sprintf("%v.master-worker", cmdPrefix)
	if cmd.Flags().Changed(masterWorkerFlagName) {

		var masterWorkerFlagName string
		if cmdPrefix == "" {
			masterWorkerFlagName = "master-worker"
		} else {
			masterWorkerFlagName = fmt.Sprintf("%v.master-worker", cmdPrefix)
		}

		masterWorkerFlagValue, err := cmd.Flags().GetBool(masterWorkerFlagName)
		if err != nil {
			return err, false
		}
		m.MasterWorker = masterWorkerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalMaxSpreadChecksFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxSpreadChecksFlagName := fmt.Sprintf("%v.max_spread_checks", cmdPrefix)
	if cmd.Flags().Changed(maxSpreadChecksFlagName) {

		var maxSpreadChecksFlagName string
		if cmdPrefix == "" {
			maxSpreadChecksFlagName = "max_spread_checks"
		} else {
			maxSpreadChecksFlagName = fmt.Sprintf("%v.max_spread_checks", cmdPrefix)
		}

		maxSpreadChecksFlagValue, err := cmd.Flags().GetInt64(maxSpreadChecksFlagName)
		if err != nil {
			return err, false
		}
		m.MaxSpreadChecks = maxSpreadChecksFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalMaxcompcpuusageFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxcompcpuusageFlagName := fmt.Sprintf("%v.maxcompcpuusage", cmdPrefix)
	if cmd.Flags().Changed(maxcompcpuusageFlagName) {

		var maxcompcpuusageFlagName string
		if cmdPrefix == "" {
			maxcompcpuusageFlagName = "maxcompcpuusage"
		} else {
			maxcompcpuusageFlagName = fmt.Sprintf("%v.maxcompcpuusage", cmdPrefix)
		}

		maxcompcpuusageFlagValue, err := cmd.Flags().GetInt64(maxcompcpuusageFlagName)
		if err != nil {
			return err, false
		}
		m.Maxcompcpuusage = maxcompcpuusageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalMaxcomprateFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxcomprateFlagName := fmt.Sprintf("%v.maxcomprate", cmdPrefix)
	if cmd.Flags().Changed(maxcomprateFlagName) {

		var maxcomprateFlagName string
		if cmdPrefix == "" {
			maxcomprateFlagName = "maxcomprate"
		} else {
			maxcomprateFlagName = fmt.Sprintf("%v.maxcomprate", cmdPrefix)
		}

		maxcomprateFlagValue, err := cmd.Flags().GetInt64(maxcomprateFlagName)
		if err != nil {
			return err, false
		}
		m.Maxcomprate = maxcomprateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalMaxconnFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxconnFlagName := fmt.Sprintf("%v.maxconn", cmdPrefix)
	if cmd.Flags().Changed(maxconnFlagName) {

		var maxconnFlagName string
		if cmdPrefix == "" {
			maxconnFlagName = "maxconn"
		} else {
			maxconnFlagName = fmt.Sprintf("%v.maxconn", cmdPrefix)
		}

		maxconnFlagValue, err := cmd.Flags().GetInt64(maxconnFlagName)
		if err != nil {
			return err, false
		}
		m.Maxconn = maxconnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalMaxconnrateFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxconnrateFlagName := fmt.Sprintf("%v.maxconnrate", cmdPrefix)
	if cmd.Flags().Changed(maxconnrateFlagName) {

		var maxconnrateFlagName string
		if cmdPrefix == "" {
			maxconnrateFlagName = "maxconnrate"
		} else {
			maxconnrateFlagName = fmt.Sprintf("%v.maxconnrate", cmdPrefix)
		}

		maxconnrateFlagValue, err := cmd.Flags().GetInt64(maxconnrateFlagName)
		if err != nil {
			return err, false
		}
		m.Maxconnrate = maxconnrateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalMaxpipesFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxpipesFlagName := fmt.Sprintf("%v.maxpipes", cmdPrefix)
	if cmd.Flags().Changed(maxpipesFlagName) {

		var maxpipesFlagName string
		if cmdPrefix == "" {
			maxpipesFlagName = "maxpipes"
		} else {
			maxpipesFlagName = fmt.Sprintf("%v.maxpipes", cmdPrefix)
		}

		maxpipesFlagValue, err := cmd.Flags().GetInt64(maxpipesFlagName)
		if err != nil {
			return err, false
		}
		m.Maxpipes = maxpipesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalMaxsessrateFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxsessrateFlagName := fmt.Sprintf("%v.maxsessrate", cmdPrefix)
	if cmd.Flags().Changed(maxsessrateFlagName) {

		var maxsessrateFlagName string
		if cmdPrefix == "" {
			maxsessrateFlagName = "maxsessrate"
		} else {
			maxsessrateFlagName = fmt.Sprintf("%v.maxsessrate", cmdPrefix)
		}

		maxsessrateFlagValue, err := cmd.Flags().GetInt64(maxsessrateFlagName)
		if err != nil {
			return err, false
		}
		m.Maxsessrate = maxsessrateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalMaxsslconnFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxsslconnFlagName := fmt.Sprintf("%v.maxsslconn", cmdPrefix)
	if cmd.Flags().Changed(maxsslconnFlagName) {

		var maxsslconnFlagName string
		if cmdPrefix == "" {
			maxsslconnFlagName = "maxsslconn"
		} else {
			maxsslconnFlagName = fmt.Sprintf("%v.maxsslconn", cmdPrefix)
		}

		maxsslconnFlagValue, err := cmd.Flags().GetInt64(maxsslconnFlagName)
		if err != nil {
			return err, false
		}
		m.Maxsslconn = maxsslconnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalMaxsslrateFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxsslrateFlagName := fmt.Sprintf("%v.maxsslrate", cmdPrefix)
	if cmd.Flags().Changed(maxsslrateFlagName) {

		var maxsslrateFlagName string
		if cmdPrefix == "" {
			maxsslrateFlagName = "maxsslrate"
		} else {
			maxsslrateFlagName = fmt.Sprintf("%v.maxsslrate", cmdPrefix)
		}

		maxsslrateFlagValue, err := cmd.Flags().GetInt64(maxsslrateFlagName)
		if err != nil {
			return err, false
		}
		m.Maxsslrate = maxsslrateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalMaxzlibmemFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxzlibmemFlagName := fmt.Sprintf("%v.maxzlibmem", cmdPrefix)
	if cmd.Flags().Changed(maxzlibmemFlagName) {

		var maxzlibmemFlagName string
		if cmdPrefix == "" {
			maxzlibmemFlagName = "maxzlibmem"
		} else {
			maxzlibmemFlagName = fmt.Sprintf("%v.maxzlibmem", cmdPrefix)
		}

		maxzlibmemFlagValue, err := cmd.Flags().GetInt64(maxzlibmemFlagName)
		if err != nil {
			return err, false
		}
		m.Maxzlibmem = maxzlibmemFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalMworkerMaxReloadsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mworkerMaxReloadsFlagName := fmt.Sprintf("%v.mworker_max_reloads", cmdPrefix)
	if cmd.Flags().Changed(mworkerMaxReloadsFlagName) {

		var mworkerMaxReloadsFlagName string
		if cmdPrefix == "" {
			mworkerMaxReloadsFlagName = "mworker_max_reloads"
		} else {
			mworkerMaxReloadsFlagName = fmt.Sprintf("%v.mworker_max_reloads", cmdPrefix)
		}

		mworkerMaxReloadsFlagValue, err := cmd.Flags().GetInt64(mworkerMaxReloadsFlagName)
		if err != nil {
			return err, false
		}
		m.MworkerMaxReloads = mworkerMaxReloadsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalNbprocFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nbprocFlagName := fmt.Sprintf("%v.nbproc", cmdPrefix)
	if cmd.Flags().Changed(nbprocFlagName) {

		var nbprocFlagName string
		if cmdPrefix == "" {
			nbprocFlagName = "nbproc"
		} else {
			nbprocFlagName = fmt.Sprintf("%v.nbproc", cmdPrefix)
		}

		nbprocFlagValue, err := cmd.Flags().GetInt64(nbprocFlagName)
		if err != nil {
			return err, false
		}
		m.Nbproc = nbprocFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalNbthreadFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nbthreadFlagName := fmt.Sprintf("%v.nbthread", cmdPrefix)
	if cmd.Flags().Changed(nbthreadFlagName) {

		var nbthreadFlagName string
		if cmdPrefix == "" {
			nbthreadFlagName = "nbthread"
		} else {
			nbthreadFlagName = fmt.Sprintf("%v.nbthread", cmdPrefix)
		}

		nbthreadFlagValue, err := cmd.Flags().GetInt64(nbthreadFlagName)
		if err != nil {
			return err, false
		}
		m.Nbthread = nbthreadFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalNodeFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodeFlagName := fmt.Sprintf("%v.node", cmdPrefix)
	if cmd.Flags().Changed(nodeFlagName) {

		var nodeFlagName string
		if cmdPrefix == "" {
			nodeFlagName = "node"
		} else {
			nodeFlagName = fmt.Sprintf("%v.node", cmdPrefix)
		}

		nodeFlagValue, err := cmd.Flags().GetString(nodeFlagName)
		if err != nil {
			return err, false
		}
		m.Node = nodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalNoepollFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noepollFlagName := fmt.Sprintf("%v.noepoll", cmdPrefix)
	if cmd.Flags().Changed(noepollFlagName) {

		var noepollFlagName string
		if cmdPrefix == "" {
			noepollFlagName = "noepoll"
		} else {
			noepollFlagName = fmt.Sprintf("%v.noepoll", cmdPrefix)
		}

		noepollFlagValue, err := cmd.Flags().GetBool(noepollFlagName)
		if err != nil {
			return err, false
		}
		m.Noepoll = noepollFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalNoevportsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noevportsFlagName := fmt.Sprintf("%v.noevports", cmdPrefix)
	if cmd.Flags().Changed(noevportsFlagName) {

		var noevportsFlagName string
		if cmdPrefix == "" {
			noevportsFlagName = "noevports"
		} else {
			noevportsFlagName = fmt.Sprintf("%v.noevports", cmdPrefix)
		}

		noevportsFlagValue, err := cmd.Flags().GetBool(noevportsFlagName)
		if err != nil {
			return err, false
		}
		m.Noevports = noevportsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalNogetaddrinfoFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nogetaddrinfoFlagName := fmt.Sprintf("%v.nogetaddrinfo", cmdPrefix)
	if cmd.Flags().Changed(nogetaddrinfoFlagName) {

		var nogetaddrinfoFlagName string
		if cmdPrefix == "" {
			nogetaddrinfoFlagName = "nogetaddrinfo"
		} else {
			nogetaddrinfoFlagName = fmt.Sprintf("%v.nogetaddrinfo", cmdPrefix)
		}

		nogetaddrinfoFlagValue, err := cmd.Flags().GetBool(nogetaddrinfoFlagName)
		if err != nil {
			return err, false
		}
		m.Nogetaddrinfo = nogetaddrinfoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalNokqueueFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nokqueueFlagName := fmt.Sprintf("%v.nokqueue", cmdPrefix)
	if cmd.Flags().Changed(nokqueueFlagName) {

		var nokqueueFlagName string
		if cmdPrefix == "" {
			nokqueueFlagName = "nokqueue"
		} else {
			nokqueueFlagName = fmt.Sprintf("%v.nokqueue", cmdPrefix)
		}

		nokqueueFlagValue, err := cmd.Flags().GetBool(nokqueueFlagName)
		if err != nil {
			return err, false
		}
		m.Nokqueue = nokqueueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalNopollFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nopollFlagName := fmt.Sprintf("%v.nopoll", cmdPrefix)
	if cmd.Flags().Changed(nopollFlagName) {

		var nopollFlagName string
		if cmdPrefix == "" {
			nopollFlagName = "nopoll"
		} else {
			nopollFlagName = fmt.Sprintf("%v.nopoll", cmdPrefix)
		}

		nopollFlagValue, err := cmd.Flags().GetBool(nopollFlagName)
		if err != nil {
			return err, false
		}
		m.Nopoll = nopollFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalNoreuseportFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noreuseportFlagName := fmt.Sprintf("%v.noreuseport", cmdPrefix)
	if cmd.Flags().Changed(noreuseportFlagName) {

		var noreuseportFlagName string
		if cmdPrefix == "" {
			noreuseportFlagName = "noreuseport"
		} else {
			noreuseportFlagName = fmt.Sprintf("%v.noreuseport", cmdPrefix)
		}

		noreuseportFlagValue, err := cmd.Flags().GetBool(noreuseportFlagName)
		if err != nil {
			return err, false
		}
		m.Noreuseport = noreuseportFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalNospliceFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nospliceFlagName := fmt.Sprintf("%v.nosplice", cmdPrefix)
	if cmd.Flags().Changed(nospliceFlagName) {

		var nospliceFlagName string
		if cmdPrefix == "" {
			nospliceFlagName = "nosplice"
		} else {
			nospliceFlagName = fmt.Sprintf("%v.nosplice", cmdPrefix)
		}

		nospliceFlagValue, err := cmd.Flags().GetBool(nospliceFlagName)
		if err != nil {
			return err, false
		}
		m.Nosplice = nospliceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalNumaCPUMappingFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numaCpuMappingFlagName := fmt.Sprintf("%v.numa_cpu_mapping", cmdPrefix)
	if cmd.Flags().Changed(numaCpuMappingFlagName) {

		var numaCpuMappingFlagName string
		if cmdPrefix == "" {
			numaCpuMappingFlagName = "numa_cpu_mapping"
		} else {
			numaCpuMappingFlagName = fmt.Sprintf("%v.numa_cpu_mapping", cmdPrefix)
		}

		numaCpuMappingFlagValue, err := cmd.Flags().GetBool(numaCpuMappingFlagName)
		if err != nil {
			return err, false
		}
		m.NumaCPUMapping = numaCpuMappingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalPidfileFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pidfileFlagName := fmt.Sprintf("%v.pidfile", cmdPrefix)
	if cmd.Flags().Changed(pidfileFlagName) {

		var pidfileFlagName string
		if cmdPrefix == "" {
			pidfileFlagName = "pidfile"
		} else {
			pidfileFlagName = fmt.Sprintf("%v.pidfile", cmdPrefix)
		}

		pidfileFlagValue, err := cmd.Flags().GetString(pidfileFlagName)
		if err != nil {
			return err, false
		}
		m.Pidfile = pidfileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalPp2NeverSendLocalFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pp2NeverSendLocalFlagName := fmt.Sprintf("%v.pp2_never_send_local", cmdPrefix)
	if cmd.Flags().Changed(pp2NeverSendLocalFlagName) {

		var pp2NeverSendLocalFlagName string
		if cmdPrefix == "" {
			pp2NeverSendLocalFlagName = "pp2_never_send_local"
		} else {
			pp2NeverSendLocalFlagName = fmt.Sprintf("%v.pp2_never_send_local", cmdPrefix)
		}

		pp2NeverSendLocalFlagValue, err := cmd.Flags().GetBool(pp2NeverSendLocalFlagName)
		if err != nil {
			return err, false
		}
		m.Pp2NeverSendLocal = pp2NeverSendLocalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalProfilingTasksFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	profilingTasksFlagName := fmt.Sprintf("%v.profiling_tasks", cmdPrefix)
	if cmd.Flags().Changed(profilingTasksFlagName) {

		var profilingTasksFlagName string
		if cmdPrefix == "" {
			profilingTasksFlagName = "profiling_tasks"
		} else {
			profilingTasksFlagName = fmt.Sprintf("%v.profiling_tasks", cmdPrefix)
		}

		profilingTasksFlagValue, err := cmd.Flags().GetString(profilingTasksFlagName)
		if err != nil {
			return err, false
		}
		m.ProfilingTasks = profilingTasksFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalQuietFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	quietFlagName := fmt.Sprintf("%v.quiet", cmdPrefix)
	if cmd.Flags().Changed(quietFlagName) {

		var quietFlagName string
		if cmdPrefix == "" {
			quietFlagName = "quiet"
		} else {
			quietFlagName = fmt.Sprintf("%v.quiet", cmdPrefix)
		}

		quietFlagValue, err := cmd.Flags().GetBool(quietFlagName)
		if err != nil {
			return err, false
		}
		m.Quiet = quietFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalResetenvFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resetenvFlagName := fmt.Sprintf("%v.resetenv", cmdPrefix)
	if cmd.Flags().Changed(resetenvFlagName) {

		var resetenvFlagName string
		if cmdPrefix == "" {
			resetenvFlagName = "resetenv"
		} else {
			resetenvFlagName = fmt.Sprintf("%v.resetenv", cmdPrefix)
		}

		resetenvFlagValue, err := cmd.Flags().GetString(resetenvFlagName)
		if err != nil {
			return err, false
		}
		m.Resetenv = resetenvFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalServerStateBaseFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverStateBaseFlagName := fmt.Sprintf("%v.server_state_base", cmdPrefix)
	if cmd.Flags().Changed(serverStateBaseFlagName) {

		var serverStateBaseFlagName string
		if cmdPrefix == "" {
			serverStateBaseFlagName = "server_state_base"
		} else {
			serverStateBaseFlagName = fmt.Sprintf("%v.server_state_base", cmdPrefix)
		}

		serverStateBaseFlagValue, err := cmd.Flags().GetString(serverStateBaseFlagName)
		if err != nil {
			return err, false
		}
		m.ServerStateBase = serverStateBaseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalServerStateFileFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverStateFileFlagName := fmt.Sprintf("%v.server_state_file", cmdPrefix)
	if cmd.Flags().Changed(serverStateFileFlagName) {

		var serverStateFileFlagName string
		if cmdPrefix == "" {
			serverStateFileFlagName = "server_state_file"
		} else {
			serverStateFileFlagName = fmt.Sprintf("%v.server_state_file", cmdPrefix)
		}

		serverStateFileFlagValue, err := cmd.Flags().GetString(serverStateFileFlagName)
		if err != nil {
			return err, false
		}
		m.ServerStateFile = serverStateFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSetDumpableFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	setDumpableFlagName := fmt.Sprintf("%v.set_dumpable", cmdPrefix)
	if cmd.Flags().Changed(setDumpableFlagName) {

		var setDumpableFlagName string
		if cmdPrefix == "" {
			setDumpableFlagName = "set_dumpable"
		} else {
			setDumpableFlagName = fmt.Sprintf("%v.set_dumpable", cmdPrefix)
		}

		setDumpableFlagValue, err := cmd.Flags().GetBool(setDumpableFlagName)
		if err != nil {
			return err, false
		}
		m.SetDumpable = setDumpableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSpreadChecksFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spreadChecksFlagName := fmt.Sprintf("%v.spread_checks", cmdPrefix)
	if cmd.Flags().Changed(spreadChecksFlagName) {

		var spreadChecksFlagName string
		if cmdPrefix == "" {
			spreadChecksFlagName = "spread_checks"
		} else {
			spreadChecksFlagName = fmt.Sprintf("%v.spread_checks", cmdPrefix)
		}

		spreadChecksFlagValue, err := cmd.Flags().GetInt64(spreadChecksFlagName)
		if err != nil {
			return err, false
		}
		m.SpreadChecks = spreadChecksFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSslDefaultBindCiphersFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslDefaultBindCiphersFlagName := fmt.Sprintf("%v.ssl_default_bind_ciphers", cmdPrefix)
	if cmd.Flags().Changed(sslDefaultBindCiphersFlagName) {

		var sslDefaultBindCiphersFlagName string
		if cmdPrefix == "" {
			sslDefaultBindCiphersFlagName = "ssl_default_bind_ciphers"
		} else {
			sslDefaultBindCiphersFlagName = fmt.Sprintf("%v.ssl_default_bind_ciphers", cmdPrefix)
		}

		sslDefaultBindCiphersFlagValue, err := cmd.Flags().GetString(sslDefaultBindCiphersFlagName)
		if err != nil {
			return err, false
		}
		m.SslDefaultBindCiphers = sslDefaultBindCiphersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSslDefaultBindCiphersuitesFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslDefaultBindCiphersuitesFlagName := fmt.Sprintf("%v.ssl_default_bind_ciphersuites", cmdPrefix)
	if cmd.Flags().Changed(sslDefaultBindCiphersuitesFlagName) {

		var sslDefaultBindCiphersuitesFlagName string
		if cmdPrefix == "" {
			sslDefaultBindCiphersuitesFlagName = "ssl_default_bind_ciphersuites"
		} else {
			sslDefaultBindCiphersuitesFlagName = fmt.Sprintf("%v.ssl_default_bind_ciphersuites", cmdPrefix)
		}

		sslDefaultBindCiphersuitesFlagValue, err := cmd.Flags().GetString(sslDefaultBindCiphersuitesFlagName)
		if err != nil {
			return err, false
		}
		m.SslDefaultBindCiphersuites = sslDefaultBindCiphersuitesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSslDefaultBindCurvesFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslDefaultBindCurvesFlagName := fmt.Sprintf("%v.ssl_default_bind_curves", cmdPrefix)
	if cmd.Flags().Changed(sslDefaultBindCurvesFlagName) {

		var sslDefaultBindCurvesFlagName string
		if cmdPrefix == "" {
			sslDefaultBindCurvesFlagName = "ssl_default_bind_curves"
		} else {
			sslDefaultBindCurvesFlagName = fmt.Sprintf("%v.ssl_default_bind_curves", cmdPrefix)
		}

		sslDefaultBindCurvesFlagValue, err := cmd.Flags().GetString(sslDefaultBindCurvesFlagName)
		if err != nil {
			return err, false
		}
		m.SslDefaultBindCurves = sslDefaultBindCurvesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSslDefaultBindOptionsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslDefaultBindOptionsFlagName := fmt.Sprintf("%v.ssl_default_bind_options", cmdPrefix)
	if cmd.Flags().Changed(sslDefaultBindOptionsFlagName) {

		var sslDefaultBindOptionsFlagName string
		if cmdPrefix == "" {
			sslDefaultBindOptionsFlagName = "ssl_default_bind_options"
		} else {
			sslDefaultBindOptionsFlagName = fmt.Sprintf("%v.ssl_default_bind_options", cmdPrefix)
		}

		sslDefaultBindOptionsFlagValue, err := cmd.Flags().GetString(sslDefaultBindOptionsFlagName)
		if err != nil {
			return err, false
		}
		m.SslDefaultBindOptions = sslDefaultBindOptionsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSslDefaultServerCiphersFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslDefaultServerCiphersFlagName := fmt.Sprintf("%v.ssl_default_server_ciphers", cmdPrefix)
	if cmd.Flags().Changed(sslDefaultServerCiphersFlagName) {

		var sslDefaultServerCiphersFlagName string
		if cmdPrefix == "" {
			sslDefaultServerCiphersFlagName = "ssl_default_server_ciphers"
		} else {
			sslDefaultServerCiphersFlagName = fmt.Sprintf("%v.ssl_default_server_ciphers", cmdPrefix)
		}

		sslDefaultServerCiphersFlagValue, err := cmd.Flags().GetString(sslDefaultServerCiphersFlagName)
		if err != nil {
			return err, false
		}
		m.SslDefaultServerCiphers = sslDefaultServerCiphersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSslDefaultServerCiphersuitesFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslDefaultServerCiphersuitesFlagName := fmt.Sprintf("%v.ssl_default_server_ciphersuites", cmdPrefix)
	if cmd.Flags().Changed(sslDefaultServerCiphersuitesFlagName) {

		var sslDefaultServerCiphersuitesFlagName string
		if cmdPrefix == "" {
			sslDefaultServerCiphersuitesFlagName = "ssl_default_server_ciphersuites"
		} else {
			sslDefaultServerCiphersuitesFlagName = fmt.Sprintf("%v.ssl_default_server_ciphersuites", cmdPrefix)
		}

		sslDefaultServerCiphersuitesFlagValue, err := cmd.Flags().GetString(sslDefaultServerCiphersuitesFlagName)
		if err != nil {
			return err, false
		}
		m.SslDefaultServerCiphersuites = sslDefaultServerCiphersuitesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSslDefaultServerOptionsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslDefaultServerOptionsFlagName := fmt.Sprintf("%v.ssl_default_server_options", cmdPrefix)
	if cmd.Flags().Changed(sslDefaultServerOptionsFlagName) {

		var sslDefaultServerOptionsFlagName string
		if cmdPrefix == "" {
			sslDefaultServerOptionsFlagName = "ssl_default_server_options"
		} else {
			sslDefaultServerOptionsFlagName = fmt.Sprintf("%v.ssl_default_server_options", cmdPrefix)
		}

		sslDefaultServerOptionsFlagValue, err := cmd.Flags().GetString(sslDefaultServerOptionsFlagName)
		if err != nil {
			return err, false
		}
		m.SslDefaultServerOptions = sslDefaultServerOptionsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSslDhParamFileFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslDhParamFileFlagName := fmt.Sprintf("%v.ssl_dh_param_file", cmdPrefix)
	if cmd.Flags().Changed(sslDhParamFileFlagName) {

		var sslDhParamFileFlagName string
		if cmdPrefix == "" {
			sslDhParamFileFlagName = "ssl_dh_param_file"
		} else {
			sslDhParamFileFlagName = fmt.Sprintf("%v.ssl_dh_param_file", cmdPrefix)
		}

		sslDhParamFileFlagValue, err := cmd.Flags().GetString(sslDhParamFileFlagName)
		if err != nil {
			return err, false
		}
		m.SslDhParamFile = sslDhParamFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSslLoadExtraFilesFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslLoadExtraFilesFlagName := fmt.Sprintf("%v.ssl_load_extra_files", cmdPrefix)
	if cmd.Flags().Changed(sslLoadExtraFilesFlagName) {

		var sslLoadExtraFilesFlagName string
		if cmdPrefix == "" {
			sslLoadExtraFilesFlagName = "ssl_load_extra_files"
		} else {
			sslLoadExtraFilesFlagName = fmt.Sprintf("%v.ssl_load_extra_files", cmdPrefix)
		}

		sslLoadExtraFilesFlagValue, err := cmd.Flags().GetString(sslLoadExtraFilesFlagName)
		if err != nil {
			return err, false
		}
		m.SslLoadExtraFiles = sslLoadExtraFilesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSslModeAsyncFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslModeAsyncFlagName := fmt.Sprintf("%v.ssl_mode_async", cmdPrefix)
	if cmd.Flags().Changed(sslModeAsyncFlagName) {

		var sslModeAsyncFlagName string
		if cmdPrefix == "" {
			sslModeAsyncFlagName = "ssl_mode_async"
		} else {
			sslModeAsyncFlagName = fmt.Sprintf("%v.ssl_mode_async", cmdPrefix)
		}

		sslModeAsyncFlagValue, err := cmd.Flags().GetString(sslModeAsyncFlagName)
		if err != nil {
			return err, false
		}
		m.SslModeAsync = sslModeAsyncFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSslServerVerifyFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslServerVerifyFlagName := fmt.Sprintf("%v.ssl_server_verify", cmdPrefix)
	if cmd.Flags().Changed(sslServerVerifyFlagName) {

		var sslServerVerifyFlagName string
		if cmdPrefix == "" {
			sslServerVerifyFlagName = "ssl_server_verify"
		} else {
			sslServerVerifyFlagName = fmt.Sprintf("%v.ssl_server_verify", cmdPrefix)
		}

		sslServerVerifyFlagValue, err := cmd.Flags().GetString(sslServerVerifyFlagName)
		if err != nil {
			return err, false
		}
		m.SslServerVerify = sslServerVerifyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalSslSkipSelfIssuedCaFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslSkipSelfIssuedCaFlagName := fmt.Sprintf("%v.ssl_skip_self_issued_ca", cmdPrefix)
	if cmd.Flags().Changed(sslSkipSelfIssuedCaFlagName) {

		var sslSkipSelfIssuedCaFlagName string
		if cmdPrefix == "" {
			sslSkipSelfIssuedCaFlagName = "ssl_skip_self_issued_ca"
		} else {
			sslSkipSelfIssuedCaFlagName = fmt.Sprintf("%v.ssl_skip_self_issued_ca", cmdPrefix)
		}

		sslSkipSelfIssuedCaFlagValue, err := cmd.Flags().GetBool(sslSkipSelfIssuedCaFlagName)
		if err != nil {
			return err, false
		}
		m.SslSkipSelfIssuedCa = sslSkipSelfIssuedCaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalStatsMaxconnFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statsMaxconnFlagName := fmt.Sprintf("%v.stats_maxconn", cmdPrefix)
	if cmd.Flags().Changed(statsMaxconnFlagName) {

		var statsMaxconnFlagName string
		if cmdPrefix == "" {
			statsMaxconnFlagName = "stats_maxconn"
		} else {
			statsMaxconnFlagName = fmt.Sprintf("%v.stats_maxconn", cmdPrefix)
		}

		statsMaxconnFlagValue, err := cmd.Flags().GetInt64(statsMaxconnFlagName)
		if err != nil {
			return err, false
		}
		m.StatsMaxconn = &statsMaxconnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalStatsTimeoutFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statsTimeoutFlagName := fmt.Sprintf("%v.stats_timeout", cmdPrefix)
	if cmd.Flags().Changed(statsTimeoutFlagName) {

		var statsTimeoutFlagName string
		if cmdPrefix == "" {
			statsTimeoutFlagName = "stats_timeout"
		} else {
			statsTimeoutFlagName = fmt.Sprintf("%v.stats_timeout", cmdPrefix)
		}

		statsTimeoutFlagValue, err := cmd.Flags().GetInt64(statsTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.StatsTimeout = &statsTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalStrictLimitsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	strictLimitsFlagName := fmt.Sprintf("%v.strict_limits", cmdPrefix)
	if cmd.Flags().Changed(strictLimitsFlagName) {

		var strictLimitsFlagName string
		if cmdPrefix == "" {
			strictLimitsFlagName = "strict_limits"
		} else {
			strictLimitsFlagName = fmt.Sprintf("%v.strict_limits", cmdPrefix)
		}

		strictLimitsFlagValue, err := cmd.Flags().GetBool(strictLimitsFlagName)
		if err != nil {
			return err, false
		}
		m.StrictLimits = strictLimitsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalThreadGroupsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	threadGroupsFlagName := fmt.Sprintf("%v.thread_groups", cmdPrefix)
	if cmd.Flags().Changed(threadGroupsFlagName) {

		var threadGroupsFlagName string
		if cmdPrefix == "" {
			threadGroupsFlagName = "thread_groups"
		} else {
			threadGroupsFlagName = fmt.Sprintf("%v.thread_groups", cmdPrefix)
		}

		threadGroupsFlagValue, err := cmd.Flags().GetInt64(threadGroupsFlagName)
		if err != nil {
			return err, false
		}
		m.ThreadGroups = threadGroupsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tuneOptionsFlagName := fmt.Sprintf("%v.tune_options", cmdPrefix)
	if cmd.Flags().Changed(tuneOptionsFlagName) {
		// info: complex object tune_options GlobalTuneOptions is retrieved outside this Changed() block
	}
	tuneOptionsFlagValue := m.TuneOptions
	if swag.IsZero(tuneOptionsFlagValue) {
		tuneOptionsFlagValue = &models.GlobalTuneOptions{}
	}

	err, tuneOptionsAdded := retrieveModelGlobalTuneOptionsFlags(depth+1, tuneOptionsFlagValue, tuneOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tuneOptionsAdded
	if tuneOptionsAdded {
		m.TuneOptions = tuneOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveGlobalTuneSslDefaultDhParamFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tuneSslDefaultDhParamFlagName := fmt.Sprintf("%v.tune_ssl_default_dh_param", cmdPrefix)
	if cmd.Flags().Changed(tuneSslDefaultDhParamFlagName) {

		var tuneSslDefaultDhParamFlagName string
		if cmdPrefix == "" {
			tuneSslDefaultDhParamFlagName = "tune_ssl_default_dh_param"
		} else {
			tuneSslDefaultDhParamFlagName = fmt.Sprintf("%v.tune_ssl_default_dh_param", cmdPrefix)
		}

		tuneSslDefaultDhParamFlagValue, err := cmd.Flags().GetInt64(tuneSslDefaultDhParamFlagName)
		if err != nil {
			return err, false
		}
		m.TuneSslDefaultDhParam = tuneSslDefaultDhParamFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalUIDFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uidFlagName := fmt.Sprintf("%v.uid", cmdPrefix)
	if cmd.Flags().Changed(uidFlagName) {

		var uidFlagName string
		if cmdPrefix == "" {
			uidFlagName = "uid"
		} else {
			uidFlagName = fmt.Sprintf("%v.uid", cmdPrefix)
		}

		uidFlagValue, err := cmd.Flags().GetInt64(uidFlagName)
		if err != nil {
			return err, false
		}
		m.UID = uidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalUlimitnFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ulimitNFlagName := fmt.Sprintf("%v.ulimit_n", cmdPrefix)
	if cmd.Flags().Changed(ulimitNFlagName) {

		var ulimitNFlagName string
		if cmdPrefix == "" {
			ulimitNFlagName = "ulimit_n"
		} else {
			ulimitNFlagName = fmt.Sprintf("%v.ulimit_n", cmdPrefix)
		}

		ulimitNFlagValue, err := cmd.Flags().GetInt64(ulimitNFlagName)
		if err != nil {
			return err, false
		}
		m.Ulimitn = ulimitNFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalUnsetenvFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unsetenvFlagName := fmt.Sprintf("%v.unsetenv", cmdPrefix)
	if cmd.Flags().Changed(unsetenvFlagName) {

		var unsetenvFlagName string
		if cmdPrefix == "" {
			unsetenvFlagName = "unsetenv"
		} else {
			unsetenvFlagName = fmt.Sprintf("%v.unsetenv", cmdPrefix)
		}

		unsetenvFlagValue, err := cmd.Flags().GetString(unsetenvFlagName)
		if err != nil {
			return err, false
		}
		m.Unsetenv = unsetenvFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalUserFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userFlagName := fmt.Sprintf("%v.user", cmdPrefix)
	if cmd.Flags().Changed(userFlagName) {

		var userFlagName string
		if cmdPrefix == "" {
			userFlagName = "user"
		} else {
			userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
		}

		userFlagValue, err := cmd.Flags().GetString(userFlagName)
		if err != nil {
			return err, false
		}
		m.User = userFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalWurflOptionsFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wurflOptionsFlagName := fmt.Sprintf("%v.wurfl_options", cmdPrefix)
	if cmd.Flags().Changed(wurflOptionsFlagName) {
		// info: complex object wurfl_options GlobalWurflOptions is retrieved outside this Changed() block
	}
	wurflOptionsFlagValue := m.WurflOptions
	if swag.IsZero(wurflOptionsFlagValue) {
		wurflOptionsFlagValue = &models.GlobalWurflOptions{}
	}

	err, wurflOptionsAdded := retrieveModelGlobalWurflOptionsFlags(depth+1, wurflOptionsFlagValue, wurflOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wurflOptionsAdded
	if wurflOptionsAdded {
		m.WurflOptions = wurflOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveGlobalZeroWarningFlags(depth int, m *models.Global, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	zeroWarningFlagName := fmt.Sprintf("%v.zero_warning", cmdPrefix)
	if cmd.Flags().Changed(zeroWarningFlagName) {

		var zeroWarningFlagName string
		if cmdPrefix == "" {
			zeroWarningFlagName = "zero_warning"
		} else {
			zeroWarningFlagName = fmt.Sprintf("%v.zero_warning", cmdPrefix)
		}

		zeroWarningFlagValue, err := cmd.Flags().GetBool(zeroWarningFlagName)
		if err != nil {
			return err, false
		}
		m.ZeroWarning = zeroWarningFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for CPUMap

// register flags to command
func registerModelCPUMapFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCPUMapCPUSet(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCPUMapProcess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCPUMapCPUSet(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuSetDescription := `Required. `

	var cpuSetFlagName string
	if cmdPrefix == "" {
		cpuSetFlagName = "cpu_set"
	} else {
		cpuSetFlagName = fmt.Sprintf("%v.cpu_set", cmdPrefix)
	}

	var cpuSetFlagDefault string

	_ = cmd.PersistentFlags().String(cpuSetFlagName, cpuSetFlagDefault, cpuSetDescription)

	return nil
}

func registerCPUMapProcess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	processDescription := `Required. `

	var processFlagName string
	if cmdPrefix == "" {
		processFlagName = "process"
	} else {
		processFlagName = fmt.Sprintf("%v.process", cmdPrefix)
	}

	var processFlagDefault string

	_ = cmd.PersistentFlags().String(processFlagName, processFlagDefault, processDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCPUMapFlags(depth int, m *models.CPUMap, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cpuSetAdded := retrieveCPUMapCPUSetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuSetAdded

	err, processAdded := retrieveCPUMapProcessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || processAdded

	return nil, retAdded
}

func retrieveCPUMapCPUSetFlags(depth int, m *models.CPUMap, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpuSetFlagName := fmt.Sprintf("%v.cpu_set", cmdPrefix)
	if cmd.Flags().Changed(cpuSetFlagName) {

		var cpuSetFlagName string
		if cmdPrefix == "" {
			cpuSetFlagName = "cpu_set"
		} else {
			cpuSetFlagName = fmt.Sprintf("%v.cpu_set", cmdPrefix)
		}

		cpuSetFlagValue, err := cmd.Flags().GetString(cpuSetFlagName)
		if err != nil {
			return err, false
		}
		m.CPUSet = &cpuSetFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCPUMapProcessFlags(depth int, m *models.CPUMap, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	processFlagName := fmt.Sprintf("%v.process", cmdPrefix)
	if cmd.Flags().Changed(processFlagName) {

		var processFlagName string
		if cmdPrefix == "" {
			processFlagName = "process"
		} else {
			processFlagName = fmt.Sprintf("%v.process", cmdPrefix)
		}

		processFlagValue, err := cmd.Flags().GetString(processFlagName)
		if err != nil {
			return err, false
		}
		m.Process = &processFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for GlobalDeviceAtlasOptions

// register flags to command
func registerModelGlobalDeviceAtlasOptionsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGlobalDeviceAtlasOptionsJSONFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalDeviceAtlasOptionsLogLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalDeviceAtlasOptionsPropertiesCookie(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalDeviceAtlasOptionsSeparator(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGlobalDeviceAtlasOptionsJSONFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jsonFileDescription := ``

	var jsonFileFlagName string
	if cmdPrefix == "" {
		jsonFileFlagName = "json_file"
	} else {
		jsonFileFlagName = fmt.Sprintf("%v.json_file", cmdPrefix)
	}

	var jsonFileFlagDefault string

	_ = cmd.PersistentFlags().String(jsonFileFlagName, jsonFileFlagDefault, jsonFileDescription)

	return nil
}

func registerGlobalDeviceAtlasOptionsLogLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logLevelDescription := ``

	var logLevelFlagName string
	if cmdPrefix == "" {
		logLevelFlagName = "log_level"
	} else {
		logLevelFlagName = fmt.Sprintf("%v.log_level", cmdPrefix)
	}

	var logLevelFlagDefault string

	_ = cmd.PersistentFlags().String(logLevelFlagName, logLevelFlagDefault, logLevelDescription)

	return nil
}

func registerGlobalDeviceAtlasOptionsPropertiesCookie(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	propertiesCookieDescription := ``

	var propertiesCookieFlagName string
	if cmdPrefix == "" {
		propertiesCookieFlagName = "properties_cookie"
	} else {
		propertiesCookieFlagName = fmt.Sprintf("%v.properties_cookie", cmdPrefix)
	}

	var propertiesCookieFlagDefault string

	_ = cmd.PersistentFlags().String(propertiesCookieFlagName, propertiesCookieFlagDefault, propertiesCookieDescription)

	return nil
}

func registerGlobalDeviceAtlasOptionsSeparator(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	separatorDescription := ``

	var separatorFlagName string
	if cmdPrefix == "" {
		separatorFlagName = "separator"
	} else {
		separatorFlagName = fmt.Sprintf("%v.separator", cmdPrefix)
	}

	var separatorFlagDefault string

	_ = cmd.PersistentFlags().String(separatorFlagName, separatorFlagDefault, separatorDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGlobalDeviceAtlasOptionsFlags(depth int, m *models.GlobalDeviceAtlasOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, jsonFileAdded := retrieveGlobalDeviceAtlasOptionsJSONFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jsonFileAdded

	err, logLevelAdded := retrieveGlobalDeviceAtlasOptionsLogLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logLevelAdded

	err, propertiesCookieAdded := retrieveGlobalDeviceAtlasOptionsPropertiesCookieFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || propertiesCookieAdded

	err, separatorAdded := retrieveGlobalDeviceAtlasOptionsSeparatorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || separatorAdded

	return nil, retAdded
}

func retrieveGlobalDeviceAtlasOptionsJSONFileFlags(depth int, m *models.GlobalDeviceAtlasOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jsonFileFlagName := fmt.Sprintf("%v.json_file", cmdPrefix)
	if cmd.Flags().Changed(jsonFileFlagName) {

		var jsonFileFlagName string
		if cmdPrefix == "" {
			jsonFileFlagName = "json_file"
		} else {
			jsonFileFlagName = fmt.Sprintf("%v.json_file", cmdPrefix)
		}

		jsonFileFlagValue, err := cmd.Flags().GetString(jsonFileFlagName)
		if err != nil {
			return err, false
		}
		m.JSONFile = jsonFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalDeviceAtlasOptionsLogLevelFlags(depth int, m *models.GlobalDeviceAtlasOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logLevelFlagName := fmt.Sprintf("%v.log_level", cmdPrefix)
	if cmd.Flags().Changed(logLevelFlagName) {

		var logLevelFlagName string
		if cmdPrefix == "" {
			logLevelFlagName = "log_level"
		} else {
			logLevelFlagName = fmt.Sprintf("%v.log_level", cmdPrefix)
		}

		logLevelFlagValue, err := cmd.Flags().GetString(logLevelFlagName)
		if err != nil {
			return err, false
		}
		m.LogLevel = logLevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalDeviceAtlasOptionsPropertiesCookieFlags(depth int, m *models.GlobalDeviceAtlasOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	propertiesCookieFlagName := fmt.Sprintf("%v.properties_cookie", cmdPrefix)
	if cmd.Flags().Changed(propertiesCookieFlagName) {

		var propertiesCookieFlagName string
		if cmdPrefix == "" {
			propertiesCookieFlagName = "properties_cookie"
		} else {
			propertiesCookieFlagName = fmt.Sprintf("%v.properties_cookie", cmdPrefix)
		}

		propertiesCookieFlagValue, err := cmd.Flags().GetString(propertiesCookieFlagName)
		if err != nil {
			return err, false
		}
		m.PropertiesCookie = propertiesCookieFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalDeviceAtlasOptionsSeparatorFlags(depth int, m *models.GlobalDeviceAtlasOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	separatorFlagName := fmt.Sprintf("%v.separator", cmdPrefix)
	if cmd.Flags().Changed(separatorFlagName) {

		var separatorFlagName string
		if cmdPrefix == "" {
			separatorFlagName = "separator"
		} else {
			separatorFlagName = fmt.Sprintf("%v.separator", cmdPrefix)
		}

		separatorFlagValue, err := cmd.Flags().GetString(separatorFlagName)
		if err != nil {
			return err, false
		}
		m.Separator = separatorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for GlobalFiftyOneDegreesOptions

// register flags to command
func registerModelGlobalFiftyOneDegreesOptionsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGlobalFiftyOneDegreesOptionsCacheSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalFiftyOneDegreesOptionsDataFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalFiftyOneDegreesOptionsPropertyNameList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalFiftyOneDegreesOptionsPropertySeparator(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGlobalFiftyOneDegreesOptionsCacheSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cacheSizeDescription := ``

	var cacheSizeFlagName string
	if cmdPrefix == "" {
		cacheSizeFlagName = "cache_size"
	} else {
		cacheSizeFlagName = fmt.Sprintf("%v.cache_size", cmdPrefix)
	}

	var cacheSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cacheSizeFlagName, cacheSizeFlagDefault, cacheSizeDescription)

	return nil
}

func registerGlobalFiftyOneDegreesOptionsDataFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataFileDescription := ``

	var dataFileFlagName string
	if cmdPrefix == "" {
		dataFileFlagName = "data_file"
	} else {
		dataFileFlagName = fmt.Sprintf("%v.data_file", cmdPrefix)
	}

	var dataFileFlagDefault string

	_ = cmd.PersistentFlags().String(dataFileFlagName, dataFileFlagDefault, dataFileDescription)

	return nil
}

func registerGlobalFiftyOneDegreesOptionsPropertyNameList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	propertyNameListDescription := ``

	var propertyNameListFlagName string
	if cmdPrefix == "" {
		propertyNameListFlagName = "property_name_list"
	} else {
		propertyNameListFlagName = fmt.Sprintf("%v.property_name_list", cmdPrefix)
	}

	var propertyNameListFlagDefault string

	_ = cmd.PersistentFlags().String(propertyNameListFlagName, propertyNameListFlagDefault, propertyNameListDescription)

	return nil
}

func registerGlobalFiftyOneDegreesOptionsPropertySeparator(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	propertySeparatorDescription := ``

	var propertySeparatorFlagName string
	if cmdPrefix == "" {
		propertySeparatorFlagName = "property_separator"
	} else {
		propertySeparatorFlagName = fmt.Sprintf("%v.property_separator", cmdPrefix)
	}

	var propertySeparatorFlagDefault string

	_ = cmd.PersistentFlags().String(propertySeparatorFlagName, propertySeparatorFlagDefault, propertySeparatorDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGlobalFiftyOneDegreesOptionsFlags(depth int, m *models.GlobalFiftyOneDegreesOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cacheSizeAdded := retrieveGlobalFiftyOneDegreesOptionsCacheSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cacheSizeAdded

	err, dataFileAdded := retrieveGlobalFiftyOneDegreesOptionsDataFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataFileAdded

	err, propertyNameListAdded := retrieveGlobalFiftyOneDegreesOptionsPropertyNameListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || propertyNameListAdded

	err, propertySeparatorAdded := retrieveGlobalFiftyOneDegreesOptionsPropertySeparatorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || propertySeparatorAdded

	return nil, retAdded
}

func retrieveGlobalFiftyOneDegreesOptionsCacheSizeFlags(depth int, m *models.GlobalFiftyOneDegreesOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cacheSizeFlagName := fmt.Sprintf("%v.cache_size", cmdPrefix)
	if cmd.Flags().Changed(cacheSizeFlagName) {

		var cacheSizeFlagName string
		if cmdPrefix == "" {
			cacheSizeFlagName = "cache_size"
		} else {
			cacheSizeFlagName = fmt.Sprintf("%v.cache_size", cmdPrefix)
		}

		cacheSizeFlagValue, err := cmd.Flags().GetInt64(cacheSizeFlagName)
		if err != nil {
			return err, false
		}
		m.CacheSize = cacheSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalFiftyOneDegreesOptionsDataFileFlags(depth int, m *models.GlobalFiftyOneDegreesOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFileFlagName := fmt.Sprintf("%v.data_file", cmdPrefix)
	if cmd.Flags().Changed(dataFileFlagName) {

		var dataFileFlagName string
		if cmdPrefix == "" {
			dataFileFlagName = "data_file"
		} else {
			dataFileFlagName = fmt.Sprintf("%v.data_file", cmdPrefix)
		}

		dataFileFlagValue, err := cmd.Flags().GetString(dataFileFlagName)
		if err != nil {
			return err, false
		}
		m.DataFile = dataFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalFiftyOneDegreesOptionsPropertyNameListFlags(depth int, m *models.GlobalFiftyOneDegreesOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	propertyNameListFlagName := fmt.Sprintf("%v.property_name_list", cmdPrefix)
	if cmd.Flags().Changed(propertyNameListFlagName) {

		var propertyNameListFlagName string
		if cmdPrefix == "" {
			propertyNameListFlagName = "property_name_list"
		} else {
			propertyNameListFlagName = fmt.Sprintf("%v.property_name_list", cmdPrefix)
		}

		propertyNameListFlagValue, err := cmd.Flags().GetString(propertyNameListFlagName)
		if err != nil {
			return err, false
		}
		m.PropertyNameList = propertyNameListFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalFiftyOneDegreesOptionsPropertySeparatorFlags(depth int, m *models.GlobalFiftyOneDegreesOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	propertySeparatorFlagName := fmt.Sprintf("%v.property_separator", cmdPrefix)
	if cmd.Flags().Changed(propertySeparatorFlagName) {

		var propertySeparatorFlagName string
		if cmdPrefix == "" {
			propertySeparatorFlagName = "property_separator"
		} else {
			propertySeparatorFlagName = fmt.Sprintf("%v.property_separator", cmdPrefix)
		}

		propertySeparatorFlagValue, err := cmd.Flags().GetString(propertySeparatorFlagName)
		if err != nil {
			return err, false
		}
		m.PropertySeparator = propertySeparatorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for H1CaseAdjust

// register flags to command
func registerModelH1CaseAdjustFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerH1CaseAdjustFrom(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerH1CaseAdjustTo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerH1CaseAdjustFrom(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fromDescription := `Required. `

	var fromFlagName string
	if cmdPrefix == "" {
		fromFlagName = "from"
	} else {
		fromFlagName = fmt.Sprintf("%v.from", cmdPrefix)
	}

	var fromFlagDefault string

	_ = cmd.PersistentFlags().String(fromFlagName, fromFlagDefault, fromDescription)

	return nil
}

func registerH1CaseAdjustTo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	toDescription := `Required. `

	var toFlagName string
	if cmdPrefix == "" {
		toFlagName = "to"
	} else {
		toFlagName = fmt.Sprintf("%v.to", cmdPrefix)
	}

	var toFlagDefault string

	_ = cmd.PersistentFlags().String(toFlagName, toFlagDefault, toDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelH1CaseAdjustFlags(depth int, m *models.H1CaseAdjust, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, fromAdded := retrieveH1CaseAdjustFromFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fromAdded

	err, toAdded := retrieveH1CaseAdjustToFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || toAdded

	return nil, retAdded
}

func retrieveH1CaseAdjustFromFlags(depth int, m *models.H1CaseAdjust, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fromFlagName := fmt.Sprintf("%v.from", cmdPrefix)
	if cmd.Flags().Changed(fromFlagName) {

		var fromFlagName string
		if cmdPrefix == "" {
			fromFlagName = "from"
		} else {
			fromFlagName = fmt.Sprintf("%v.from", cmdPrefix)
		}

		fromFlagValue, err := cmd.Flags().GetString(fromFlagName)
		if err != nil {
			return err, false
		}
		m.From = &fromFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveH1CaseAdjustToFlags(depth int, m *models.H1CaseAdjust, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	toFlagName := fmt.Sprintf("%v.to", cmdPrefix)
	if cmd.Flags().Changed(toFlagName) {

		var toFlagName string
		if cmdPrefix == "" {
			toFlagName = "to"
		} else {
			toFlagName = fmt.Sprintf("%v.to", cmdPrefix)
		}

		toFlagValue, err := cmd.Flags().GetString(toFlagName)
		if err != nil {
			return err, false
		}
		m.To = &toFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for GlobalLogSendHostname

// register flags to command
func registerModelGlobalLogSendHostnameFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGlobalLogSendHostnameEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalLogSendHostnameParam(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGlobalLogSendHostnameEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Enum: ["enabled","disabled"]. Required. `

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault string

	_ = cmd.PersistentFlags().String(enabledFlagName, enabledFlagDefault, enabledDescription)

	if err := cmd.RegisterFlagCompletionFunc(enabledFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerGlobalLogSendHostnameParam(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	paramDescription := ``

	var paramFlagName string
	if cmdPrefix == "" {
		paramFlagName = "param"
	} else {
		paramFlagName = fmt.Sprintf("%v.param", cmdPrefix)
	}

	var paramFlagDefault string

	_ = cmd.PersistentFlags().String(paramFlagName, paramFlagDefault, paramDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGlobalLogSendHostnameFlags(depth int, m *models.GlobalLogSendHostname, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enabledAdded := retrieveGlobalLogSendHostnameEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, paramAdded := retrieveGlobalLogSendHostnameParamFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || paramAdded

	return nil, retAdded
}

func retrieveGlobalLogSendHostnameEnabledFlags(depth int, m *models.GlobalLogSendHostname, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetString(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalLogSendHostnameParamFlags(depth int, m *models.GlobalLogSendHostname, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	paramFlagName := fmt.Sprintf("%v.param", cmdPrefix)
	if cmd.Flags().Changed(paramFlagName) {

		var paramFlagName string
		if cmdPrefix == "" {
			paramFlagName = "param"
		} else {
			paramFlagName = fmt.Sprintf("%v.param", cmdPrefix)
		}

		paramFlagValue, err := cmd.Flags().GetString(paramFlagName)
		if err != nil {
			return err, false
		}
		m.Param = paramFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for LuaLoad

// register flags to command
func registerModelLuaLoadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLuaLoadFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLuaLoadFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fileDescription := `Required. `

	var fileFlagName string
	if cmdPrefix == "" {
		fileFlagName = "file"
	} else {
		fileFlagName = fmt.Sprintf("%v.file", cmdPrefix)
	}

	var fileFlagDefault string

	_ = cmd.PersistentFlags().String(fileFlagName, fileFlagDefault, fileDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLuaLoadFlags(depth int, m *models.LuaLoad, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, fileAdded := retrieveLuaLoadFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileAdded

	return nil, retAdded
}

func retrieveLuaLoadFileFlags(depth int, m *models.LuaLoad, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fileFlagName := fmt.Sprintf("%v.file", cmdPrefix)
	if cmd.Flags().Changed(fileFlagName) {

		var fileFlagName string
		if cmdPrefix == "" {
			fileFlagName = "file"
		} else {
			fileFlagName = fmt.Sprintf("%v.file", cmdPrefix)
		}

		fileFlagValue, err := cmd.Flags().GetString(fileFlagName)
		if err != nil {
			return err, false
		}
		m.File = &fileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for LuaPrependPath

// register flags to command
func registerModelLuaPrependPathFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLuaPrependPathPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLuaPrependPathType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLuaPrependPathPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pathDescription := `Required. `

	var pathFlagName string
	if cmdPrefix == "" {
		pathFlagName = "path"
	} else {
		pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
	}

	var pathFlagDefault string

	_ = cmd.PersistentFlags().String(pathFlagName, pathFlagDefault, pathDescription)

	return nil
}

func registerLuaPrependPathType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["path","cpath"]. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["path","cpath"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLuaPrependPathFlags(depth int, m *models.LuaPrependPath, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, pathAdded := retrieveLuaPrependPathPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pathAdded

	err, typeAdded := retrieveLuaPrependPathTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveLuaPrependPathPathFlags(depth int, m *models.LuaPrependPath, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pathFlagName := fmt.Sprintf("%v.path", cmdPrefix)
	if cmd.Flags().Changed(pathFlagName) {

		var pathFlagName string
		if cmdPrefix == "" {
			pathFlagName = "path"
		} else {
			pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
		}

		pathFlagValue, err := cmd.Flags().GetString(pathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = &pathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLuaPrependPathTypeFlags(depth int, m *models.LuaPrependPath, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PresetEnv

// register flags to command
func registerModelPresetEnvFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPresetEnvName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPresetEnvValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPresetEnvName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPresetEnvValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	valueDescription := `Required. `

	var valueFlagName string
	if cmdPrefix == "" {
		valueFlagName = "value"
	} else {
		valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
	}

	var valueFlagDefault string

	_ = cmd.PersistentFlags().String(valueFlagName, valueFlagDefault, valueDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPresetEnvFlags(depth int, m *models.PresetEnv, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, nameAdded := retrievePresetEnvNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, valueAdded := retrievePresetEnvValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valueAdded

	return nil, retAdded
}

func retrievePresetEnvNameFlags(depth int, m *models.PresetEnv, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePresetEnvValueFlags(depth int, m *models.PresetEnv, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valueFlagName := fmt.Sprintf("%v.value", cmdPrefix)
	if cmd.Flags().Changed(valueFlagName) {

		var valueFlagName string
		if cmdPrefix == "" {
			valueFlagName = "value"
		} else {
			valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
		}

		valueFlagValue, err := cmd.Flags().GetString(valueFlagName)
		if err != nil {
			return err, false
		}
		m.Value = &valueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for GlobalRuntimeApisItems0

// register flags to command
func registerModelRuntimeAPIFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	// register embedded BindParams flags

	if err := registerModelBindParamsFlags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRuntimeAPIAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRuntimeAPIAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addressDescription := `Required. `

	var addressFlagName string
	if cmdPrefix == "" {
		addressFlagName = "address"
	} else {
		addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
	}

	var addressFlagDefault string

	_ = cmd.PersistentFlags().String(addressFlagName, addressFlagDefault, addressDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRuntimeAPIFlags(depth int, m *models.GlobalRuntimeApisItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	// retrieve model BindParams
	err, aO0Added := retrieveModelBindParamsFlags(depth, &m.BindParams, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aO0Added

	err, addressAdded := retrieveRuntimeAPIAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressAdded

	return nil, retAdded
}

func retrieveRuntimeAPIAddressFlags(depth int, m *models.GlobalRuntimeApisItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressFlagName := fmt.Sprintf("%v.address", cmdPrefix)
	if cmd.Flags().Changed(addressFlagName) {

		var addressFlagName string
		if cmdPrefix == "" {
			addressFlagName = "address"
		} else {
			addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
		}

		addressFlagValue, err := cmd.Flags().GetString(addressFlagName)
		if err != nil {
			return err, false
		}
		m.Address = &addressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SetVarFmt

// register flags to command
func registerModelSetVarFmtFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSetVarFmtFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSetVarFmtName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSetVarFmtFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	formatDescription := `Required. `

	var formatFlagName string
	if cmdPrefix == "" {
		formatFlagName = "format"
	} else {
		formatFlagName = fmt.Sprintf("%v.format", cmdPrefix)
	}

	var formatFlagDefault string

	_ = cmd.PersistentFlags().String(formatFlagName, formatFlagDefault, formatDescription)

	return nil
}

func registerSetVarFmtName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSetVarFmtFlags(depth int, m *models.SetVarFmt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, formatAdded := retrieveSetVarFmtFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || formatAdded

	err, nameAdded := retrieveSetVarFmtNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveSetVarFmtFormatFlags(depth int, m *models.SetVarFmt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	formatFlagName := fmt.Sprintf("%v.format", cmdPrefix)
	if cmd.Flags().Changed(formatFlagName) {

		var formatFlagName string
		if cmdPrefix == "" {
			formatFlagName = "format"
		} else {
			formatFlagName = fmt.Sprintf("%v.format", cmdPrefix)
		}

		formatFlagValue, err := cmd.Flags().GetString(formatFlagName)
		if err != nil {
			return err, false
		}
		m.Format = &formatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSetVarFmtNameFlags(depth int, m *models.SetVarFmt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SetVar

// register flags to command
func registerModelSetVarFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSetVarExpr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSetVarName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSetVarExpr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	exprDescription := `Required. `

	var exprFlagName string
	if cmdPrefix == "" {
		exprFlagName = "expr"
	} else {
		exprFlagName = fmt.Sprintf("%v.expr", cmdPrefix)
	}

	var exprFlagDefault string

	_ = cmd.PersistentFlags().String(exprFlagName, exprFlagDefault, exprDescription)

	return nil
}

func registerSetVarName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSetVarFlags(depth int, m *models.SetVar, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, exprAdded := retrieveSetVarExprFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || exprAdded

	err, nameAdded := retrieveSetVarNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveSetVarExprFlags(depth int, m *models.SetVar, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	exprFlagName := fmt.Sprintf("%v.expr", cmdPrefix)
	if cmd.Flags().Changed(exprFlagName) {

		var exprFlagName string
		if cmdPrefix == "" {
			exprFlagName = "expr"
		} else {
			exprFlagName = fmt.Sprintf("%v.expr", cmdPrefix)
		}

		exprFlagValue, err := cmd.Flags().GetString(exprFlagName)
		if err != nil {
			return err, false
		}
		m.Expr = &exprFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSetVarNameFlags(depth int, m *models.SetVar, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SetEnv

// register flags to command
func registerModelSetEnvFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSetEnvName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSetEnvValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSetEnvName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerSetEnvValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	valueDescription := `Required. `

	var valueFlagName string
	if cmdPrefix == "" {
		valueFlagName = "value"
	} else {
		valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
	}

	var valueFlagDefault string

	_ = cmd.PersistentFlags().String(valueFlagName, valueFlagDefault, valueDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSetEnvFlags(depth int, m *models.SetEnv, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, nameAdded := retrieveSetEnvNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, valueAdded := retrieveSetEnvValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valueAdded

	return nil, retAdded
}

func retrieveSetEnvNameFlags(depth int, m *models.SetEnv, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSetEnvValueFlags(depth int, m *models.SetEnv, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valueFlagName := fmt.Sprintf("%v.value", cmdPrefix)
	if cmd.Flags().Changed(valueFlagName) {

		var valueFlagName string
		if cmdPrefix == "" {
			valueFlagName = "value"
		} else {
			valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
		}

		valueFlagValue, err := cmd.Flags().GetString(valueFlagName)
		if err != nil {
			return err, false
		}
		m.Value = &valueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SslEngine

// register flags to command
func registerModelSslEngineFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSslEngineAlgorithms(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslEngineName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSslEngineAlgorithms(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	algorithmsDescription := ``

	var algorithmsFlagName string
	if cmdPrefix == "" {
		algorithmsFlagName = "algorithms"
	} else {
		algorithmsFlagName = fmt.Sprintf("%v.algorithms", cmdPrefix)
	}

	var algorithmsFlagDefault string

	_ = cmd.PersistentFlags().String(algorithmsFlagName, algorithmsFlagDefault, algorithmsDescription)

	return nil
}

func registerSslEngineName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSslEngineFlags(depth int, m *models.SslEngine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, algorithmsAdded := retrieveSslEngineAlgorithmsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || algorithmsAdded

	err, nameAdded := retrieveSslEngineNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveSslEngineAlgorithmsFlags(depth int, m *models.SslEngine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	algorithmsFlagName := fmt.Sprintf("%v.algorithms", cmdPrefix)
	if cmd.Flags().Changed(algorithmsFlagName) {

		var algorithmsFlagName string
		if cmdPrefix == "" {
			algorithmsFlagName = "algorithms"
		} else {
			algorithmsFlagName = fmt.Sprintf("%v.algorithms", cmdPrefix)
		}

		algorithmsFlagValue, err := cmd.Flags().GetString(algorithmsFlagName)
		if err != nil {
			return err, false
		}
		m.Algorithms = &algorithmsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslEngineNameFlags(depth int, m *models.SslEngine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ThreadGroup

// register flags to command
func registerModelThreadGroupFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerThreadGroupGroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerThreadGroupNumOrRange(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerThreadGroupGroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	groupDescription := `Required. `

	var groupFlagName string
	if cmdPrefix == "" {
		groupFlagName = "group"
	} else {
		groupFlagName = fmt.Sprintf("%v.group", cmdPrefix)
	}

	var groupFlagDefault string

	_ = cmd.PersistentFlags().String(groupFlagName, groupFlagDefault, groupDescription)

	return nil
}

func registerThreadGroupNumOrRange(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numOrRangeDescription := `Required. `

	var numOrRangeFlagName string
	if cmdPrefix == "" {
		numOrRangeFlagName = "num_or_range"
	} else {
		numOrRangeFlagName = fmt.Sprintf("%v.num_or_range", cmdPrefix)
	}

	var numOrRangeFlagDefault string

	_ = cmd.PersistentFlags().String(numOrRangeFlagName, numOrRangeFlagDefault, numOrRangeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelThreadGroupFlags(depth int, m *models.ThreadGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, groupAdded := retrieveThreadGroupGroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || groupAdded

	err, numOrRangeAdded := retrieveThreadGroupNumOrRangeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numOrRangeAdded

	return nil, retAdded
}

func retrieveThreadGroupGroupFlags(depth int, m *models.ThreadGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	groupFlagName := fmt.Sprintf("%v.group", cmdPrefix)
	if cmd.Flags().Changed(groupFlagName) {

		var groupFlagName string
		if cmdPrefix == "" {
			groupFlagName = "group"
		} else {
			groupFlagName = fmt.Sprintf("%v.group", cmdPrefix)
		}

		groupFlagValue, err := cmd.Flags().GetString(groupFlagName)
		if err != nil {
			return err, false
		}
		m.Group = &groupFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveThreadGroupNumOrRangeFlags(depth int, m *models.ThreadGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numOrRangeFlagName := fmt.Sprintf("%v.num_or_range", cmdPrefix)
	if cmd.Flags().Changed(numOrRangeFlagName) {

		var numOrRangeFlagName string
		if cmdPrefix == "" {
			numOrRangeFlagName = "num_or_range"
		} else {
			numOrRangeFlagName = fmt.Sprintf("%v.num_or_range", cmdPrefix)
		}

		numOrRangeFlagValue, err := cmd.Flags().GetString(numOrRangeFlagName)
		if err != nil {
			return err, false
		}
		m.NumOrRange = &numOrRangeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for GlobalTuneOptions

// register flags to command
func registerModelGlobalTuneOptionsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGlobalTuneOptionsBuffersLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsBuffersReserve(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsBufsize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsCompMaxlevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsFailAlloc(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsFdEdgeTriggered(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsH2HeaderTableSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsH2InitialWindowSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsH2MaxConcurrentStreams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsH2MaxFrameSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsHTTPCookielen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsHTTPLogurilen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsHTTPMaxhdr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsIdlePoolShared(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsIdletimer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsListenerMultiQueue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsLuaForcedYield(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsLuaMaxmem(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsLuaServiceTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsLuaSessionTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsLuaTaskTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsMaxaccept(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsMaxpollevents(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsMaxrewrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsPatternCacheSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsPipesize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsPoolHighFdRatio(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsPoolLowFdRatio(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsRcvbufClient(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsRcvbufServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsRecvEnough(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsRunqueueDepth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsSchedLowLatency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsSndbufClient(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsSndbufServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsSslCachesize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsSslCaptureBufferSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsSslCtxCacheSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsSslDefaultDhParam(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsSslForcePrivateCache(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsSslKeylog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsSslLifetime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsSslMaxrecord(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsVarsGlobalMaxSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsVarsProcMaxSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsVarsReqresMaxSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsVarsSessMaxSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsVarsTxnMaxSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsZlibMemlevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalTuneOptionsZlibWindowsize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGlobalTuneOptionsBuffersLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	buffersLimitDescription := ``

	var buffersLimitFlagName string
	if cmdPrefix == "" {
		buffersLimitFlagName = "buffers_limit"
	} else {
		buffersLimitFlagName = fmt.Sprintf("%v.buffers_limit", cmdPrefix)
	}

	var buffersLimitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(buffersLimitFlagName, buffersLimitFlagDefault, buffersLimitDescription)

	return nil
}

func registerGlobalTuneOptionsBuffersReserve(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	buffersReserveDescription := ``

	var buffersReserveFlagName string
	if cmdPrefix == "" {
		buffersReserveFlagName = "buffers_reserve"
	} else {
		buffersReserveFlagName = fmt.Sprintf("%v.buffers_reserve", cmdPrefix)
	}

	var buffersReserveFlagDefault int64

	_ = cmd.PersistentFlags().Int64(buffersReserveFlagName, buffersReserveFlagDefault, buffersReserveDescription)

	return nil
}

func registerGlobalTuneOptionsBufsize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bufsizeDescription := ``

	var bufsizeFlagName string
	if cmdPrefix == "" {
		bufsizeFlagName = "bufsize"
	} else {
		bufsizeFlagName = fmt.Sprintf("%v.bufsize", cmdPrefix)
	}

	var bufsizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(bufsizeFlagName, bufsizeFlagDefault, bufsizeDescription)

	return nil
}

func registerGlobalTuneOptionsCompMaxlevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	compMaxlevelDescription := ``

	var compMaxlevelFlagName string
	if cmdPrefix == "" {
		compMaxlevelFlagName = "comp_maxlevel"
	} else {
		compMaxlevelFlagName = fmt.Sprintf("%v.comp_maxlevel", cmdPrefix)
	}

	var compMaxlevelFlagDefault int64

	_ = cmd.PersistentFlags().Int64(compMaxlevelFlagName, compMaxlevelFlagDefault, compMaxlevelDescription)

	return nil
}

func registerGlobalTuneOptionsFailAlloc(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	failAllocDescription := ``

	var failAllocFlagName string
	if cmdPrefix == "" {
		failAllocFlagName = "fail_alloc"
	} else {
		failAllocFlagName = fmt.Sprintf("%v.fail_alloc", cmdPrefix)
	}

	var failAllocFlagDefault bool

	_ = cmd.PersistentFlags().Bool(failAllocFlagName, failAllocFlagDefault, failAllocDescription)

	return nil
}

func registerGlobalTuneOptionsFdEdgeTriggered(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fdEdgeTriggeredDescription := `Enum: ["enabled","disabled"]. `

	var fdEdgeTriggeredFlagName string
	if cmdPrefix == "" {
		fdEdgeTriggeredFlagName = "fd_edge_triggered"
	} else {
		fdEdgeTriggeredFlagName = fmt.Sprintf("%v.fd_edge_triggered", cmdPrefix)
	}

	var fdEdgeTriggeredFlagDefault string

	_ = cmd.PersistentFlags().String(fdEdgeTriggeredFlagName, fdEdgeTriggeredFlagDefault, fdEdgeTriggeredDescription)

	if err := cmd.RegisterFlagCompletionFunc(fdEdgeTriggeredFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerGlobalTuneOptionsH2HeaderTableSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h2HeaderTableSizeDescription := ``

	var h2HeaderTableSizeFlagName string
	if cmdPrefix == "" {
		h2HeaderTableSizeFlagName = "h2_header_table_size"
	} else {
		h2HeaderTableSizeFlagName = fmt.Sprintf("%v.h2_header_table_size", cmdPrefix)
	}

	var h2HeaderTableSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(h2HeaderTableSizeFlagName, h2HeaderTableSizeFlagDefault, h2HeaderTableSizeDescription)

	return nil
}

func registerGlobalTuneOptionsH2InitialWindowSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h2InitialWindowSizeDescription := ``

	var h2InitialWindowSizeFlagName string
	if cmdPrefix == "" {
		h2InitialWindowSizeFlagName = "h2_initial_window_size"
	} else {
		h2InitialWindowSizeFlagName = fmt.Sprintf("%v.h2_initial_window_size", cmdPrefix)
	}

	var h2InitialWindowSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(h2InitialWindowSizeFlagName, h2InitialWindowSizeFlagDefault, h2InitialWindowSizeDescription)

	return nil
}

func registerGlobalTuneOptionsH2MaxConcurrentStreams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h2MaxConcurrentStreamsDescription := ``

	var h2MaxConcurrentStreamsFlagName string
	if cmdPrefix == "" {
		h2MaxConcurrentStreamsFlagName = "h2_max_concurrent_streams"
	} else {
		h2MaxConcurrentStreamsFlagName = fmt.Sprintf("%v.h2_max_concurrent_streams", cmdPrefix)
	}

	var h2MaxConcurrentStreamsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(h2MaxConcurrentStreamsFlagName, h2MaxConcurrentStreamsFlagDefault, h2MaxConcurrentStreamsDescription)

	return nil
}

func registerGlobalTuneOptionsH2MaxFrameSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h2MaxFrameSizeDescription := ``

	var h2MaxFrameSizeFlagName string
	if cmdPrefix == "" {
		h2MaxFrameSizeFlagName = "h2_max_frame_size"
	} else {
		h2MaxFrameSizeFlagName = fmt.Sprintf("%v.h2_max_frame_size", cmdPrefix)
	}

	var h2MaxFrameSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(h2MaxFrameSizeFlagName, h2MaxFrameSizeFlagDefault, h2MaxFrameSizeDescription)

	return nil
}

func registerGlobalTuneOptionsHTTPCookielen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpCookielenDescription := ``

	var httpCookielenFlagName string
	if cmdPrefix == "" {
		httpCookielenFlagName = "http_cookielen"
	} else {
		httpCookielenFlagName = fmt.Sprintf("%v.http_cookielen", cmdPrefix)
	}

	var httpCookielenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpCookielenFlagName, httpCookielenFlagDefault, httpCookielenDescription)

	return nil
}

func registerGlobalTuneOptionsHTTPLogurilen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpLogurilenDescription := ``

	var httpLogurilenFlagName string
	if cmdPrefix == "" {
		httpLogurilenFlagName = "http_logurilen"
	} else {
		httpLogurilenFlagName = fmt.Sprintf("%v.http_logurilen", cmdPrefix)
	}

	var httpLogurilenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpLogurilenFlagName, httpLogurilenFlagDefault, httpLogurilenDescription)

	return nil
}

func registerGlobalTuneOptionsHTTPMaxhdr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpMaxhdrDescription := ``

	var httpMaxhdrFlagName string
	if cmdPrefix == "" {
		httpMaxhdrFlagName = "http_maxhdr"
	} else {
		httpMaxhdrFlagName = fmt.Sprintf("%v.http_maxhdr", cmdPrefix)
	}

	var httpMaxhdrFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpMaxhdrFlagName, httpMaxhdrFlagDefault, httpMaxhdrDescription)

	return nil
}

func registerGlobalTuneOptionsIdlePoolShared(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idlePoolSharedDescription := `Enum: ["enabled","disabled"]. `

	var idlePoolSharedFlagName string
	if cmdPrefix == "" {
		idlePoolSharedFlagName = "idle_pool_shared"
	} else {
		idlePoolSharedFlagName = fmt.Sprintf("%v.idle_pool_shared", cmdPrefix)
	}

	var idlePoolSharedFlagDefault string

	_ = cmd.PersistentFlags().String(idlePoolSharedFlagName, idlePoolSharedFlagDefault, idlePoolSharedDescription)

	if err := cmd.RegisterFlagCompletionFunc(idlePoolSharedFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerGlobalTuneOptionsIdletimer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idletimerDescription := ``

	var idletimerFlagName string
	if cmdPrefix == "" {
		idletimerFlagName = "idletimer"
	} else {
		idletimerFlagName = fmt.Sprintf("%v.idletimer", cmdPrefix)
	}

	var idletimerFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idletimerFlagName, idletimerFlagDefault, idletimerDescription)

	return nil
}

func registerGlobalTuneOptionsListenerMultiQueue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	listenerMultiQueueDescription := `Enum: ["enabled","disabled"]. `

	var listenerMultiQueueFlagName string
	if cmdPrefix == "" {
		listenerMultiQueueFlagName = "listener_multi_queue"
	} else {
		listenerMultiQueueFlagName = fmt.Sprintf("%v.listener_multi_queue", cmdPrefix)
	}

	var listenerMultiQueueFlagDefault string

	_ = cmd.PersistentFlags().String(listenerMultiQueueFlagName, listenerMultiQueueFlagDefault, listenerMultiQueueDescription)

	if err := cmd.RegisterFlagCompletionFunc(listenerMultiQueueFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerGlobalTuneOptionsLuaForcedYield(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaForcedYieldDescription := ``

	var luaForcedYieldFlagName string
	if cmdPrefix == "" {
		luaForcedYieldFlagName = "lua_forced_yield"
	} else {
		luaForcedYieldFlagName = fmt.Sprintf("%v.lua_forced_yield", cmdPrefix)
	}

	var luaForcedYieldFlagDefault int64

	_ = cmd.PersistentFlags().Int64(luaForcedYieldFlagName, luaForcedYieldFlagDefault, luaForcedYieldDescription)

	return nil
}

func registerGlobalTuneOptionsLuaMaxmem(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaMaxmemDescription := ``

	var luaMaxmemFlagName string
	if cmdPrefix == "" {
		luaMaxmemFlagName = "lua_maxmem"
	} else {
		luaMaxmemFlagName = fmt.Sprintf("%v.lua_maxmem", cmdPrefix)
	}

	var luaMaxmemFlagDefault bool

	_ = cmd.PersistentFlags().Bool(luaMaxmemFlagName, luaMaxmemFlagDefault, luaMaxmemDescription)

	return nil
}

func registerGlobalTuneOptionsLuaServiceTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaServiceTimeoutDescription := ``

	var luaServiceTimeoutFlagName string
	if cmdPrefix == "" {
		luaServiceTimeoutFlagName = "lua_service_timeout"
	} else {
		luaServiceTimeoutFlagName = fmt.Sprintf("%v.lua_service_timeout", cmdPrefix)
	}

	var luaServiceTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(luaServiceTimeoutFlagName, luaServiceTimeoutFlagDefault, luaServiceTimeoutDescription)

	return nil
}

func registerGlobalTuneOptionsLuaSessionTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaSessionTimeoutDescription := ``

	var luaSessionTimeoutFlagName string
	if cmdPrefix == "" {
		luaSessionTimeoutFlagName = "lua_session_timeout"
	} else {
		luaSessionTimeoutFlagName = fmt.Sprintf("%v.lua_session_timeout", cmdPrefix)
	}

	var luaSessionTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(luaSessionTimeoutFlagName, luaSessionTimeoutFlagDefault, luaSessionTimeoutDescription)

	return nil
}

func registerGlobalTuneOptionsLuaTaskTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	luaTaskTimeoutDescription := ``

	var luaTaskTimeoutFlagName string
	if cmdPrefix == "" {
		luaTaskTimeoutFlagName = "lua_task_timeout"
	} else {
		luaTaskTimeoutFlagName = fmt.Sprintf("%v.lua_task_timeout", cmdPrefix)
	}

	var luaTaskTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(luaTaskTimeoutFlagName, luaTaskTimeoutFlagDefault, luaTaskTimeoutDescription)

	return nil
}

func registerGlobalTuneOptionsMaxaccept(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxacceptDescription := ``

	var maxacceptFlagName string
	if cmdPrefix == "" {
		maxacceptFlagName = "maxaccept"
	} else {
		maxacceptFlagName = fmt.Sprintf("%v.maxaccept", cmdPrefix)
	}

	var maxacceptFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxacceptFlagName, maxacceptFlagDefault, maxacceptDescription)

	return nil
}

func registerGlobalTuneOptionsMaxpollevents(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxpolleventsDescription := ``

	var maxpolleventsFlagName string
	if cmdPrefix == "" {
		maxpolleventsFlagName = "maxpollevents"
	} else {
		maxpolleventsFlagName = fmt.Sprintf("%v.maxpollevents", cmdPrefix)
	}

	var maxpolleventsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxpolleventsFlagName, maxpolleventsFlagDefault, maxpolleventsDescription)

	return nil
}

func registerGlobalTuneOptionsMaxrewrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxrewriteDescription := ``

	var maxrewriteFlagName string
	if cmdPrefix == "" {
		maxrewriteFlagName = "maxrewrite"
	} else {
		maxrewriteFlagName = fmt.Sprintf("%v.maxrewrite", cmdPrefix)
	}

	var maxrewriteFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxrewriteFlagName, maxrewriteFlagDefault, maxrewriteDescription)

	return nil
}

func registerGlobalTuneOptionsPatternCacheSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	patternCacheSizeDescription := ``

	var patternCacheSizeFlagName string
	if cmdPrefix == "" {
		patternCacheSizeFlagName = "pattern_cache_size"
	} else {
		patternCacheSizeFlagName = fmt.Sprintf("%v.pattern_cache_size", cmdPrefix)
	}

	var patternCacheSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(patternCacheSizeFlagName, patternCacheSizeFlagDefault, patternCacheSizeDescription)

	return nil
}

func registerGlobalTuneOptionsPipesize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pipesizeDescription := ``

	var pipesizeFlagName string
	if cmdPrefix == "" {
		pipesizeFlagName = "pipesize"
	} else {
		pipesizeFlagName = fmt.Sprintf("%v.pipesize", cmdPrefix)
	}

	var pipesizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pipesizeFlagName, pipesizeFlagDefault, pipesizeDescription)

	return nil
}

func registerGlobalTuneOptionsPoolHighFdRatio(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poolHighFdRatioDescription := ``

	var poolHighFdRatioFlagName string
	if cmdPrefix == "" {
		poolHighFdRatioFlagName = "pool_high_fd_ratio"
	} else {
		poolHighFdRatioFlagName = fmt.Sprintf("%v.pool_high_fd_ratio", cmdPrefix)
	}

	var poolHighFdRatioFlagDefault int64

	_ = cmd.PersistentFlags().Int64(poolHighFdRatioFlagName, poolHighFdRatioFlagDefault, poolHighFdRatioDescription)

	return nil
}

func registerGlobalTuneOptionsPoolLowFdRatio(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poolLowFdRatioDescription := ``

	var poolLowFdRatioFlagName string
	if cmdPrefix == "" {
		poolLowFdRatioFlagName = "pool_low_fd_ratio"
	} else {
		poolLowFdRatioFlagName = fmt.Sprintf("%v.pool_low_fd_ratio", cmdPrefix)
	}

	var poolLowFdRatioFlagDefault int64

	_ = cmd.PersistentFlags().Int64(poolLowFdRatioFlagName, poolLowFdRatioFlagDefault, poolLowFdRatioDescription)

	return nil
}

func registerGlobalTuneOptionsRcvbufClient(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rcvbufClientDescription := ``

	var rcvbufClientFlagName string
	if cmdPrefix == "" {
		rcvbufClientFlagName = "rcvbuf_client"
	} else {
		rcvbufClientFlagName = fmt.Sprintf("%v.rcvbuf_client", cmdPrefix)
	}

	var rcvbufClientFlagDefault int64

	_ = cmd.PersistentFlags().Int64(rcvbufClientFlagName, rcvbufClientFlagDefault, rcvbufClientDescription)

	return nil
}

func registerGlobalTuneOptionsRcvbufServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rcvbufServerDescription := ``

	var rcvbufServerFlagName string
	if cmdPrefix == "" {
		rcvbufServerFlagName = "rcvbuf_server"
	} else {
		rcvbufServerFlagName = fmt.Sprintf("%v.rcvbuf_server", cmdPrefix)
	}

	var rcvbufServerFlagDefault int64

	_ = cmd.PersistentFlags().Int64(rcvbufServerFlagName, rcvbufServerFlagDefault, rcvbufServerDescription)

	return nil
}

func registerGlobalTuneOptionsRecvEnough(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	recvEnoughDescription := ``

	var recvEnoughFlagName string
	if cmdPrefix == "" {
		recvEnoughFlagName = "recv_enough"
	} else {
		recvEnoughFlagName = fmt.Sprintf("%v.recv_enough", cmdPrefix)
	}

	var recvEnoughFlagDefault int64

	_ = cmd.PersistentFlags().Int64(recvEnoughFlagName, recvEnoughFlagDefault, recvEnoughDescription)

	return nil
}

func registerGlobalTuneOptionsRunqueueDepth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runqueueDepthDescription := ``

	var runqueueDepthFlagName string
	if cmdPrefix == "" {
		runqueueDepthFlagName = "runqueue_depth"
	} else {
		runqueueDepthFlagName = fmt.Sprintf("%v.runqueue_depth", cmdPrefix)
	}

	var runqueueDepthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(runqueueDepthFlagName, runqueueDepthFlagDefault, runqueueDepthDescription)

	return nil
}

func registerGlobalTuneOptionsSchedLowLatency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	schedLowLatencyDescription := `Enum: ["enabled","disabled"]. `

	var schedLowLatencyFlagName string
	if cmdPrefix == "" {
		schedLowLatencyFlagName = "sched_low_latency"
	} else {
		schedLowLatencyFlagName = fmt.Sprintf("%v.sched_low_latency", cmdPrefix)
	}

	var schedLowLatencyFlagDefault string

	_ = cmd.PersistentFlags().String(schedLowLatencyFlagName, schedLowLatencyFlagDefault, schedLowLatencyDescription)

	if err := cmd.RegisterFlagCompletionFunc(schedLowLatencyFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerGlobalTuneOptionsSndbufClient(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sndbufClientDescription := ``

	var sndbufClientFlagName string
	if cmdPrefix == "" {
		sndbufClientFlagName = "sndbuf_client"
	} else {
		sndbufClientFlagName = fmt.Sprintf("%v.sndbuf_client", cmdPrefix)
	}

	var sndbufClientFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sndbufClientFlagName, sndbufClientFlagDefault, sndbufClientDescription)

	return nil
}

func registerGlobalTuneOptionsSndbufServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sndbufServerDescription := ``

	var sndbufServerFlagName string
	if cmdPrefix == "" {
		sndbufServerFlagName = "sndbuf_server"
	} else {
		sndbufServerFlagName = fmt.Sprintf("%v.sndbuf_server", cmdPrefix)
	}

	var sndbufServerFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sndbufServerFlagName, sndbufServerFlagDefault, sndbufServerDescription)

	return nil
}

func registerGlobalTuneOptionsSslCachesize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslCachesizeDescription := ``

	var sslCachesizeFlagName string
	if cmdPrefix == "" {
		sslCachesizeFlagName = "ssl_cachesize"
	} else {
		sslCachesizeFlagName = fmt.Sprintf("%v.ssl_cachesize", cmdPrefix)
	}

	var sslCachesizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslCachesizeFlagName, sslCachesizeFlagDefault, sslCachesizeDescription)

	return nil
}

func registerGlobalTuneOptionsSslCaptureBufferSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslCaptureBufferSizeDescription := ``

	var sslCaptureBufferSizeFlagName string
	if cmdPrefix == "" {
		sslCaptureBufferSizeFlagName = "ssl_capture_buffer_size"
	} else {
		sslCaptureBufferSizeFlagName = fmt.Sprintf("%v.ssl_capture_buffer_size", cmdPrefix)
	}

	var sslCaptureBufferSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslCaptureBufferSizeFlagName, sslCaptureBufferSizeFlagDefault, sslCaptureBufferSizeDescription)

	return nil
}

func registerGlobalTuneOptionsSslCtxCacheSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslCtxCacheSizeDescription := ``

	var sslCtxCacheSizeFlagName string
	if cmdPrefix == "" {
		sslCtxCacheSizeFlagName = "ssl_ctx_cache_size"
	} else {
		sslCtxCacheSizeFlagName = fmt.Sprintf("%v.ssl_ctx_cache_size", cmdPrefix)
	}

	var sslCtxCacheSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslCtxCacheSizeFlagName, sslCtxCacheSizeFlagDefault, sslCtxCacheSizeDescription)

	return nil
}

func registerGlobalTuneOptionsSslDefaultDhParam(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslDefaultDhParamDescription := ``

	var sslDefaultDhParamFlagName string
	if cmdPrefix == "" {
		sslDefaultDhParamFlagName = "ssl_default_dh_param"
	} else {
		sslDefaultDhParamFlagName = fmt.Sprintf("%v.ssl_default_dh_param", cmdPrefix)
	}

	var sslDefaultDhParamFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslDefaultDhParamFlagName, sslDefaultDhParamFlagDefault, sslDefaultDhParamDescription)

	return nil
}

func registerGlobalTuneOptionsSslForcePrivateCache(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslForcePrivateCacheDescription := ``

	var sslForcePrivateCacheFlagName string
	if cmdPrefix == "" {
		sslForcePrivateCacheFlagName = "ssl_force_private_cache"
	} else {
		sslForcePrivateCacheFlagName = fmt.Sprintf("%v.ssl_force_private_cache", cmdPrefix)
	}

	var sslForcePrivateCacheFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sslForcePrivateCacheFlagName, sslForcePrivateCacheFlagDefault, sslForcePrivateCacheDescription)

	return nil
}

func registerGlobalTuneOptionsSslKeylog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslKeylogDescription := `Enum: ["enabled","disabled"]. `

	var sslKeylogFlagName string
	if cmdPrefix == "" {
		sslKeylogFlagName = "ssl_keylog"
	} else {
		sslKeylogFlagName = fmt.Sprintf("%v.ssl_keylog", cmdPrefix)
	}

	var sslKeylogFlagDefault string

	_ = cmd.PersistentFlags().String(sslKeylogFlagName, sslKeylogFlagDefault, sslKeylogDescription)

	if err := cmd.RegisterFlagCompletionFunc(sslKeylogFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerGlobalTuneOptionsSslLifetime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslLifetimeDescription := ``

	var sslLifetimeFlagName string
	if cmdPrefix == "" {
		sslLifetimeFlagName = "ssl_lifetime"
	} else {
		sslLifetimeFlagName = fmt.Sprintf("%v.ssl_lifetime", cmdPrefix)
	}

	var sslLifetimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslLifetimeFlagName, sslLifetimeFlagDefault, sslLifetimeDescription)

	return nil
}

func registerGlobalTuneOptionsSslMaxrecord(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sslMaxrecordDescription := ``

	var sslMaxrecordFlagName string
	if cmdPrefix == "" {
		sslMaxrecordFlagName = "ssl_maxrecord"
	} else {
		sslMaxrecordFlagName = fmt.Sprintf("%v.ssl_maxrecord", cmdPrefix)
	}

	var sslMaxrecordFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sslMaxrecordFlagName, sslMaxrecordFlagDefault, sslMaxrecordDescription)

	return nil
}

func registerGlobalTuneOptionsVarsGlobalMaxSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varsGlobalMaxSizeDescription := ``

	var varsGlobalMaxSizeFlagName string
	if cmdPrefix == "" {
		varsGlobalMaxSizeFlagName = "vars_global_max_size"
	} else {
		varsGlobalMaxSizeFlagName = fmt.Sprintf("%v.vars_global_max_size", cmdPrefix)
	}

	var varsGlobalMaxSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(varsGlobalMaxSizeFlagName, varsGlobalMaxSizeFlagDefault, varsGlobalMaxSizeDescription)

	return nil
}

func registerGlobalTuneOptionsVarsProcMaxSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varsProcMaxSizeDescription := ``

	var varsProcMaxSizeFlagName string
	if cmdPrefix == "" {
		varsProcMaxSizeFlagName = "vars_proc_max_size"
	} else {
		varsProcMaxSizeFlagName = fmt.Sprintf("%v.vars_proc_max_size", cmdPrefix)
	}

	var varsProcMaxSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(varsProcMaxSizeFlagName, varsProcMaxSizeFlagDefault, varsProcMaxSizeDescription)

	return nil
}

func registerGlobalTuneOptionsVarsReqresMaxSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varsReqresMaxSizeDescription := ``

	var varsReqresMaxSizeFlagName string
	if cmdPrefix == "" {
		varsReqresMaxSizeFlagName = "vars_reqres_max_size"
	} else {
		varsReqresMaxSizeFlagName = fmt.Sprintf("%v.vars_reqres_max_size", cmdPrefix)
	}

	var varsReqresMaxSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(varsReqresMaxSizeFlagName, varsReqresMaxSizeFlagDefault, varsReqresMaxSizeDescription)

	return nil
}

func registerGlobalTuneOptionsVarsSessMaxSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varsSessMaxSizeDescription := ``

	var varsSessMaxSizeFlagName string
	if cmdPrefix == "" {
		varsSessMaxSizeFlagName = "vars_sess_max_size"
	} else {
		varsSessMaxSizeFlagName = fmt.Sprintf("%v.vars_sess_max_size", cmdPrefix)
	}

	var varsSessMaxSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(varsSessMaxSizeFlagName, varsSessMaxSizeFlagDefault, varsSessMaxSizeDescription)

	return nil
}

func registerGlobalTuneOptionsVarsTxnMaxSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	varsTxnMaxSizeDescription := ``

	var varsTxnMaxSizeFlagName string
	if cmdPrefix == "" {
		varsTxnMaxSizeFlagName = "vars_txn_max_size"
	} else {
		varsTxnMaxSizeFlagName = fmt.Sprintf("%v.vars_txn_max_size", cmdPrefix)
	}

	var varsTxnMaxSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(varsTxnMaxSizeFlagName, varsTxnMaxSizeFlagDefault, varsTxnMaxSizeDescription)

	return nil
}

func registerGlobalTuneOptionsZlibMemlevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	zlibMemlevelDescription := ``

	var zlibMemlevelFlagName string
	if cmdPrefix == "" {
		zlibMemlevelFlagName = "zlib_memlevel"
	} else {
		zlibMemlevelFlagName = fmt.Sprintf("%v.zlib_memlevel", cmdPrefix)
	}

	var zlibMemlevelFlagDefault int64

	_ = cmd.PersistentFlags().Int64(zlibMemlevelFlagName, zlibMemlevelFlagDefault, zlibMemlevelDescription)

	return nil
}

func registerGlobalTuneOptionsZlibWindowsize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	zlibWindowsizeDescription := ``

	var zlibWindowsizeFlagName string
	if cmdPrefix == "" {
		zlibWindowsizeFlagName = "zlib_windowsize"
	} else {
		zlibWindowsizeFlagName = fmt.Sprintf("%v.zlib_windowsize", cmdPrefix)
	}

	var zlibWindowsizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(zlibWindowsizeFlagName, zlibWindowsizeFlagDefault, zlibWindowsizeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGlobalTuneOptionsFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, buffersLimitAdded := retrieveGlobalTuneOptionsBuffersLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || buffersLimitAdded

	err, buffersReserveAdded := retrieveGlobalTuneOptionsBuffersReserveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || buffersReserveAdded

	err, bufsizeAdded := retrieveGlobalTuneOptionsBufsizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bufsizeAdded

	err, compMaxlevelAdded := retrieveGlobalTuneOptionsCompMaxlevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compMaxlevelAdded

	err, failAllocAdded := retrieveGlobalTuneOptionsFailAllocFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || failAllocAdded

	err, fdEdgeTriggeredAdded := retrieveGlobalTuneOptionsFdEdgeTriggeredFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fdEdgeTriggeredAdded

	err, h2HeaderTableSizeAdded := retrieveGlobalTuneOptionsH2HeaderTableSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h2HeaderTableSizeAdded

	err, h2InitialWindowSizeAdded := retrieveGlobalTuneOptionsH2InitialWindowSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h2InitialWindowSizeAdded

	err, h2MaxConcurrentStreamsAdded := retrieveGlobalTuneOptionsH2MaxConcurrentStreamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h2MaxConcurrentStreamsAdded

	err, h2MaxFrameSizeAdded := retrieveGlobalTuneOptionsH2MaxFrameSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h2MaxFrameSizeAdded

	err, httpCookielenAdded := retrieveGlobalTuneOptionsHTTPCookielenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpCookielenAdded

	err, httpLogurilenAdded := retrieveGlobalTuneOptionsHTTPLogurilenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpLogurilenAdded

	err, httpMaxhdrAdded := retrieveGlobalTuneOptionsHTTPMaxhdrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpMaxhdrAdded

	err, idlePoolSharedAdded := retrieveGlobalTuneOptionsIdlePoolSharedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idlePoolSharedAdded

	err, idletimerAdded := retrieveGlobalTuneOptionsIdletimerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idletimerAdded

	err, listenerMultiQueueAdded := retrieveGlobalTuneOptionsListenerMultiQueueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || listenerMultiQueueAdded

	err, luaForcedYieldAdded := retrieveGlobalTuneOptionsLuaForcedYieldFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaForcedYieldAdded

	err, luaMaxmemAdded := retrieveGlobalTuneOptionsLuaMaxmemFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaMaxmemAdded

	err, luaServiceTimeoutAdded := retrieveGlobalTuneOptionsLuaServiceTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaServiceTimeoutAdded

	err, luaSessionTimeoutAdded := retrieveGlobalTuneOptionsLuaSessionTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaSessionTimeoutAdded

	err, luaTaskTimeoutAdded := retrieveGlobalTuneOptionsLuaTaskTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || luaTaskTimeoutAdded

	err, maxacceptAdded := retrieveGlobalTuneOptionsMaxacceptFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxacceptAdded

	err, maxpolleventsAdded := retrieveGlobalTuneOptionsMaxpolleventsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxpolleventsAdded

	err, maxrewriteAdded := retrieveGlobalTuneOptionsMaxrewriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxrewriteAdded

	err, patternCacheSizeAdded := retrieveGlobalTuneOptionsPatternCacheSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || patternCacheSizeAdded

	err, pipesizeAdded := retrieveGlobalTuneOptionsPipesizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pipesizeAdded

	err, poolHighFdRatioAdded := retrieveGlobalTuneOptionsPoolHighFdRatioFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poolHighFdRatioAdded

	err, poolLowFdRatioAdded := retrieveGlobalTuneOptionsPoolLowFdRatioFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poolLowFdRatioAdded

	err, rcvbufClientAdded := retrieveGlobalTuneOptionsRcvbufClientFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rcvbufClientAdded

	err, rcvbufServerAdded := retrieveGlobalTuneOptionsRcvbufServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rcvbufServerAdded

	err, recvEnoughAdded := retrieveGlobalTuneOptionsRecvEnoughFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || recvEnoughAdded

	err, runqueueDepthAdded := retrieveGlobalTuneOptionsRunqueueDepthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runqueueDepthAdded

	err, schedLowLatencyAdded := retrieveGlobalTuneOptionsSchedLowLatencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || schedLowLatencyAdded

	err, sndbufClientAdded := retrieveGlobalTuneOptionsSndbufClientFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sndbufClientAdded

	err, sndbufServerAdded := retrieveGlobalTuneOptionsSndbufServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sndbufServerAdded

	err, sslCachesizeAdded := retrieveGlobalTuneOptionsSslCachesizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslCachesizeAdded

	err, sslCaptureBufferSizeAdded := retrieveGlobalTuneOptionsSslCaptureBufferSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslCaptureBufferSizeAdded

	err, sslCtxCacheSizeAdded := retrieveGlobalTuneOptionsSslCtxCacheSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslCtxCacheSizeAdded

	err, sslDefaultDhParamAdded := retrieveGlobalTuneOptionsSslDefaultDhParamFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslDefaultDhParamAdded

	err, sslForcePrivateCacheAdded := retrieveGlobalTuneOptionsSslForcePrivateCacheFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslForcePrivateCacheAdded

	err, sslKeylogAdded := retrieveGlobalTuneOptionsSslKeylogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslKeylogAdded

	err, sslLifetimeAdded := retrieveGlobalTuneOptionsSslLifetimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslLifetimeAdded

	err, sslMaxrecordAdded := retrieveGlobalTuneOptionsSslMaxrecordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sslMaxrecordAdded

	err, varsGlobalMaxSizeAdded := retrieveGlobalTuneOptionsVarsGlobalMaxSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varsGlobalMaxSizeAdded

	err, varsProcMaxSizeAdded := retrieveGlobalTuneOptionsVarsProcMaxSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varsProcMaxSizeAdded

	err, varsReqresMaxSizeAdded := retrieveGlobalTuneOptionsVarsReqresMaxSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varsReqresMaxSizeAdded

	err, varsSessMaxSizeAdded := retrieveGlobalTuneOptionsVarsSessMaxSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varsSessMaxSizeAdded

	err, varsTxnMaxSizeAdded := retrieveGlobalTuneOptionsVarsTxnMaxSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varsTxnMaxSizeAdded

	err, zlibMemlevelAdded := retrieveGlobalTuneOptionsZlibMemlevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || zlibMemlevelAdded

	err, zlibWindowsizeAdded := retrieveGlobalTuneOptionsZlibWindowsizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || zlibWindowsizeAdded

	return nil, retAdded
}

func retrieveGlobalTuneOptionsBuffersLimitFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	buffersLimitFlagName := fmt.Sprintf("%v.buffers_limit", cmdPrefix)
	if cmd.Flags().Changed(buffersLimitFlagName) {

		var buffersLimitFlagName string
		if cmdPrefix == "" {
			buffersLimitFlagName = "buffers_limit"
		} else {
			buffersLimitFlagName = fmt.Sprintf("%v.buffers_limit", cmdPrefix)
		}

		buffersLimitFlagValue, err := cmd.Flags().GetInt64(buffersLimitFlagName)
		if err != nil {
			return err, false
		}
		m.BuffersLimit = &buffersLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsBuffersReserveFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	buffersReserveFlagName := fmt.Sprintf("%v.buffers_reserve", cmdPrefix)
	if cmd.Flags().Changed(buffersReserveFlagName) {

		var buffersReserveFlagName string
		if cmdPrefix == "" {
			buffersReserveFlagName = "buffers_reserve"
		} else {
			buffersReserveFlagName = fmt.Sprintf("%v.buffers_reserve", cmdPrefix)
		}

		buffersReserveFlagValue, err := cmd.Flags().GetInt64(buffersReserveFlagName)
		if err != nil {
			return err, false
		}
		m.BuffersReserve = buffersReserveFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsBufsizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bufsizeFlagName := fmt.Sprintf("%v.bufsize", cmdPrefix)
	if cmd.Flags().Changed(bufsizeFlagName) {

		var bufsizeFlagName string
		if cmdPrefix == "" {
			bufsizeFlagName = "bufsize"
		} else {
			bufsizeFlagName = fmt.Sprintf("%v.bufsize", cmdPrefix)
		}

		bufsizeFlagValue, err := cmd.Flags().GetInt64(bufsizeFlagName)
		if err != nil {
			return err, false
		}
		m.Bufsize = bufsizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsCompMaxlevelFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	compMaxlevelFlagName := fmt.Sprintf("%v.comp_maxlevel", cmdPrefix)
	if cmd.Flags().Changed(compMaxlevelFlagName) {

		var compMaxlevelFlagName string
		if cmdPrefix == "" {
			compMaxlevelFlagName = "comp_maxlevel"
		} else {
			compMaxlevelFlagName = fmt.Sprintf("%v.comp_maxlevel", cmdPrefix)
		}

		compMaxlevelFlagValue, err := cmd.Flags().GetInt64(compMaxlevelFlagName)
		if err != nil {
			return err, false
		}
		m.CompMaxlevel = compMaxlevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsFailAllocFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	failAllocFlagName := fmt.Sprintf("%v.fail_alloc", cmdPrefix)
	if cmd.Flags().Changed(failAllocFlagName) {

		var failAllocFlagName string
		if cmdPrefix == "" {
			failAllocFlagName = "fail_alloc"
		} else {
			failAllocFlagName = fmt.Sprintf("%v.fail_alloc", cmdPrefix)
		}

		failAllocFlagValue, err := cmd.Flags().GetBool(failAllocFlagName)
		if err != nil {
			return err, false
		}
		m.FailAlloc = failAllocFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsFdEdgeTriggeredFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fdEdgeTriggeredFlagName := fmt.Sprintf("%v.fd_edge_triggered", cmdPrefix)
	if cmd.Flags().Changed(fdEdgeTriggeredFlagName) {

		var fdEdgeTriggeredFlagName string
		if cmdPrefix == "" {
			fdEdgeTriggeredFlagName = "fd_edge_triggered"
		} else {
			fdEdgeTriggeredFlagName = fmt.Sprintf("%v.fd_edge_triggered", cmdPrefix)
		}

		fdEdgeTriggeredFlagValue, err := cmd.Flags().GetString(fdEdgeTriggeredFlagName)
		if err != nil {
			return err, false
		}
		m.FdEdgeTriggered = fdEdgeTriggeredFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsH2HeaderTableSizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h2HeaderTableSizeFlagName := fmt.Sprintf("%v.h2_header_table_size", cmdPrefix)
	if cmd.Flags().Changed(h2HeaderTableSizeFlagName) {

		var h2HeaderTableSizeFlagName string
		if cmdPrefix == "" {
			h2HeaderTableSizeFlagName = "h2_header_table_size"
		} else {
			h2HeaderTableSizeFlagName = fmt.Sprintf("%v.h2_header_table_size", cmdPrefix)
		}

		h2HeaderTableSizeFlagValue, err := cmd.Flags().GetInt64(h2HeaderTableSizeFlagName)
		if err != nil {
			return err, false
		}
		m.H2HeaderTableSize = h2HeaderTableSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsH2InitialWindowSizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h2InitialWindowSizeFlagName := fmt.Sprintf("%v.h2_initial_window_size", cmdPrefix)
	if cmd.Flags().Changed(h2InitialWindowSizeFlagName) {

		var h2InitialWindowSizeFlagName string
		if cmdPrefix == "" {
			h2InitialWindowSizeFlagName = "h2_initial_window_size"
		} else {
			h2InitialWindowSizeFlagName = fmt.Sprintf("%v.h2_initial_window_size", cmdPrefix)
		}

		h2InitialWindowSizeFlagValue, err := cmd.Flags().GetInt64(h2InitialWindowSizeFlagName)
		if err != nil {
			return err, false
		}
		m.H2InitialWindowSize = &h2InitialWindowSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsH2MaxConcurrentStreamsFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h2MaxConcurrentStreamsFlagName := fmt.Sprintf("%v.h2_max_concurrent_streams", cmdPrefix)
	if cmd.Flags().Changed(h2MaxConcurrentStreamsFlagName) {

		var h2MaxConcurrentStreamsFlagName string
		if cmdPrefix == "" {
			h2MaxConcurrentStreamsFlagName = "h2_max_concurrent_streams"
		} else {
			h2MaxConcurrentStreamsFlagName = fmt.Sprintf("%v.h2_max_concurrent_streams", cmdPrefix)
		}

		h2MaxConcurrentStreamsFlagValue, err := cmd.Flags().GetInt64(h2MaxConcurrentStreamsFlagName)
		if err != nil {
			return err, false
		}
		m.H2MaxConcurrentStreams = h2MaxConcurrentStreamsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsH2MaxFrameSizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h2MaxFrameSizeFlagName := fmt.Sprintf("%v.h2_max_frame_size", cmdPrefix)
	if cmd.Flags().Changed(h2MaxFrameSizeFlagName) {

		var h2MaxFrameSizeFlagName string
		if cmdPrefix == "" {
			h2MaxFrameSizeFlagName = "h2_max_frame_size"
		} else {
			h2MaxFrameSizeFlagName = fmt.Sprintf("%v.h2_max_frame_size", cmdPrefix)
		}

		h2MaxFrameSizeFlagValue, err := cmd.Flags().GetInt64(h2MaxFrameSizeFlagName)
		if err != nil {
			return err, false
		}
		m.H2MaxFrameSize = h2MaxFrameSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsHTTPCookielenFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpCookielenFlagName := fmt.Sprintf("%v.http_cookielen", cmdPrefix)
	if cmd.Flags().Changed(httpCookielenFlagName) {

		var httpCookielenFlagName string
		if cmdPrefix == "" {
			httpCookielenFlagName = "http_cookielen"
		} else {
			httpCookielenFlagName = fmt.Sprintf("%v.http_cookielen", cmdPrefix)
		}

		httpCookielenFlagValue, err := cmd.Flags().GetInt64(httpCookielenFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPCookielen = httpCookielenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsHTTPLogurilenFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpLogurilenFlagName := fmt.Sprintf("%v.http_logurilen", cmdPrefix)
	if cmd.Flags().Changed(httpLogurilenFlagName) {

		var httpLogurilenFlagName string
		if cmdPrefix == "" {
			httpLogurilenFlagName = "http_logurilen"
		} else {
			httpLogurilenFlagName = fmt.Sprintf("%v.http_logurilen", cmdPrefix)
		}

		httpLogurilenFlagValue, err := cmd.Flags().GetInt64(httpLogurilenFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPLogurilen = httpLogurilenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsHTTPMaxhdrFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpMaxhdrFlagName := fmt.Sprintf("%v.http_maxhdr", cmdPrefix)
	if cmd.Flags().Changed(httpMaxhdrFlagName) {

		var httpMaxhdrFlagName string
		if cmdPrefix == "" {
			httpMaxhdrFlagName = "http_maxhdr"
		} else {
			httpMaxhdrFlagName = fmt.Sprintf("%v.http_maxhdr", cmdPrefix)
		}

		httpMaxhdrFlagValue, err := cmd.Flags().GetInt64(httpMaxhdrFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPMaxhdr = httpMaxhdrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsIdlePoolSharedFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idlePoolSharedFlagName := fmt.Sprintf("%v.idle_pool_shared", cmdPrefix)
	if cmd.Flags().Changed(idlePoolSharedFlagName) {

		var idlePoolSharedFlagName string
		if cmdPrefix == "" {
			idlePoolSharedFlagName = "idle_pool_shared"
		} else {
			idlePoolSharedFlagName = fmt.Sprintf("%v.idle_pool_shared", cmdPrefix)
		}

		idlePoolSharedFlagValue, err := cmd.Flags().GetString(idlePoolSharedFlagName)
		if err != nil {
			return err, false
		}
		m.IdlePoolShared = idlePoolSharedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsIdletimerFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idletimerFlagName := fmt.Sprintf("%v.idletimer", cmdPrefix)
	if cmd.Flags().Changed(idletimerFlagName) {

		var idletimerFlagName string
		if cmdPrefix == "" {
			idletimerFlagName = "idletimer"
		} else {
			idletimerFlagName = fmt.Sprintf("%v.idletimer", cmdPrefix)
		}

		idletimerFlagValue, err := cmd.Flags().GetInt64(idletimerFlagName)
		if err != nil {
			return err, false
		}
		m.Idletimer = &idletimerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsListenerMultiQueueFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	listenerMultiQueueFlagName := fmt.Sprintf("%v.listener_multi_queue", cmdPrefix)
	if cmd.Flags().Changed(listenerMultiQueueFlagName) {

		var listenerMultiQueueFlagName string
		if cmdPrefix == "" {
			listenerMultiQueueFlagName = "listener_multi_queue"
		} else {
			listenerMultiQueueFlagName = fmt.Sprintf("%v.listener_multi_queue", cmdPrefix)
		}

		listenerMultiQueueFlagValue, err := cmd.Flags().GetString(listenerMultiQueueFlagName)
		if err != nil {
			return err, false
		}
		m.ListenerMultiQueue = listenerMultiQueueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsLuaForcedYieldFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaForcedYieldFlagName := fmt.Sprintf("%v.lua_forced_yield", cmdPrefix)
	if cmd.Flags().Changed(luaForcedYieldFlagName) {

		var luaForcedYieldFlagName string
		if cmdPrefix == "" {
			luaForcedYieldFlagName = "lua_forced_yield"
		} else {
			luaForcedYieldFlagName = fmt.Sprintf("%v.lua_forced_yield", cmdPrefix)
		}

		luaForcedYieldFlagValue, err := cmd.Flags().GetInt64(luaForcedYieldFlagName)
		if err != nil {
			return err, false
		}
		m.LuaForcedYield = luaForcedYieldFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsLuaMaxmemFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaMaxmemFlagName := fmt.Sprintf("%v.lua_maxmem", cmdPrefix)
	if cmd.Flags().Changed(luaMaxmemFlagName) {

		var luaMaxmemFlagName string
		if cmdPrefix == "" {
			luaMaxmemFlagName = "lua_maxmem"
		} else {
			luaMaxmemFlagName = fmt.Sprintf("%v.lua_maxmem", cmdPrefix)
		}

		luaMaxmemFlagValue, err := cmd.Flags().GetBool(luaMaxmemFlagName)
		if err != nil {
			return err, false
		}
		m.LuaMaxmem = luaMaxmemFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsLuaServiceTimeoutFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaServiceTimeoutFlagName := fmt.Sprintf("%v.lua_service_timeout", cmdPrefix)
	if cmd.Flags().Changed(luaServiceTimeoutFlagName) {

		var luaServiceTimeoutFlagName string
		if cmdPrefix == "" {
			luaServiceTimeoutFlagName = "lua_service_timeout"
		} else {
			luaServiceTimeoutFlagName = fmt.Sprintf("%v.lua_service_timeout", cmdPrefix)
		}

		luaServiceTimeoutFlagValue, err := cmd.Flags().GetInt64(luaServiceTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.LuaServiceTimeout = &luaServiceTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsLuaSessionTimeoutFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaSessionTimeoutFlagName := fmt.Sprintf("%v.lua_session_timeout", cmdPrefix)
	if cmd.Flags().Changed(luaSessionTimeoutFlagName) {

		var luaSessionTimeoutFlagName string
		if cmdPrefix == "" {
			luaSessionTimeoutFlagName = "lua_session_timeout"
		} else {
			luaSessionTimeoutFlagName = fmt.Sprintf("%v.lua_session_timeout", cmdPrefix)
		}

		luaSessionTimeoutFlagValue, err := cmd.Flags().GetInt64(luaSessionTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.LuaSessionTimeout = &luaSessionTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsLuaTaskTimeoutFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	luaTaskTimeoutFlagName := fmt.Sprintf("%v.lua_task_timeout", cmdPrefix)
	if cmd.Flags().Changed(luaTaskTimeoutFlagName) {

		var luaTaskTimeoutFlagName string
		if cmdPrefix == "" {
			luaTaskTimeoutFlagName = "lua_task_timeout"
		} else {
			luaTaskTimeoutFlagName = fmt.Sprintf("%v.lua_task_timeout", cmdPrefix)
		}

		luaTaskTimeoutFlagValue, err := cmd.Flags().GetInt64(luaTaskTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.LuaTaskTimeout = &luaTaskTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsMaxacceptFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxacceptFlagName := fmt.Sprintf("%v.maxaccept", cmdPrefix)
	if cmd.Flags().Changed(maxacceptFlagName) {

		var maxacceptFlagName string
		if cmdPrefix == "" {
			maxacceptFlagName = "maxaccept"
		} else {
			maxacceptFlagName = fmt.Sprintf("%v.maxaccept", cmdPrefix)
		}

		maxacceptFlagValue, err := cmd.Flags().GetInt64(maxacceptFlagName)
		if err != nil {
			return err, false
		}
		m.Maxaccept = maxacceptFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsMaxpolleventsFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxpolleventsFlagName := fmt.Sprintf("%v.maxpollevents", cmdPrefix)
	if cmd.Flags().Changed(maxpolleventsFlagName) {

		var maxpolleventsFlagName string
		if cmdPrefix == "" {
			maxpolleventsFlagName = "maxpollevents"
		} else {
			maxpolleventsFlagName = fmt.Sprintf("%v.maxpollevents", cmdPrefix)
		}

		maxpolleventsFlagValue, err := cmd.Flags().GetInt64(maxpolleventsFlagName)
		if err != nil {
			return err, false
		}
		m.Maxpollevents = maxpolleventsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsMaxrewriteFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxrewriteFlagName := fmt.Sprintf("%v.maxrewrite", cmdPrefix)
	if cmd.Flags().Changed(maxrewriteFlagName) {

		var maxrewriteFlagName string
		if cmdPrefix == "" {
			maxrewriteFlagName = "maxrewrite"
		} else {
			maxrewriteFlagName = fmt.Sprintf("%v.maxrewrite", cmdPrefix)
		}

		maxrewriteFlagValue, err := cmd.Flags().GetInt64(maxrewriteFlagName)
		if err != nil {
			return err, false
		}
		m.Maxrewrite = maxrewriteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsPatternCacheSizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	patternCacheSizeFlagName := fmt.Sprintf("%v.pattern_cache_size", cmdPrefix)
	if cmd.Flags().Changed(patternCacheSizeFlagName) {

		var patternCacheSizeFlagName string
		if cmdPrefix == "" {
			patternCacheSizeFlagName = "pattern_cache_size"
		} else {
			patternCacheSizeFlagName = fmt.Sprintf("%v.pattern_cache_size", cmdPrefix)
		}

		patternCacheSizeFlagValue, err := cmd.Flags().GetInt64(patternCacheSizeFlagName)
		if err != nil {
			return err, false
		}
		m.PatternCacheSize = &patternCacheSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsPipesizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pipesizeFlagName := fmt.Sprintf("%v.pipesize", cmdPrefix)
	if cmd.Flags().Changed(pipesizeFlagName) {

		var pipesizeFlagName string
		if cmdPrefix == "" {
			pipesizeFlagName = "pipesize"
		} else {
			pipesizeFlagName = fmt.Sprintf("%v.pipesize", cmdPrefix)
		}

		pipesizeFlagValue, err := cmd.Flags().GetInt64(pipesizeFlagName)
		if err != nil {
			return err, false
		}
		m.Pipesize = pipesizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsPoolHighFdRatioFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poolHighFdRatioFlagName := fmt.Sprintf("%v.pool_high_fd_ratio", cmdPrefix)
	if cmd.Flags().Changed(poolHighFdRatioFlagName) {

		var poolHighFdRatioFlagName string
		if cmdPrefix == "" {
			poolHighFdRatioFlagName = "pool_high_fd_ratio"
		} else {
			poolHighFdRatioFlagName = fmt.Sprintf("%v.pool_high_fd_ratio", cmdPrefix)
		}

		poolHighFdRatioFlagValue, err := cmd.Flags().GetInt64(poolHighFdRatioFlagName)
		if err != nil {
			return err, false
		}
		m.PoolHighFdRatio = poolHighFdRatioFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsPoolLowFdRatioFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poolLowFdRatioFlagName := fmt.Sprintf("%v.pool_low_fd_ratio", cmdPrefix)
	if cmd.Flags().Changed(poolLowFdRatioFlagName) {

		var poolLowFdRatioFlagName string
		if cmdPrefix == "" {
			poolLowFdRatioFlagName = "pool_low_fd_ratio"
		} else {
			poolLowFdRatioFlagName = fmt.Sprintf("%v.pool_low_fd_ratio", cmdPrefix)
		}

		poolLowFdRatioFlagValue, err := cmd.Flags().GetInt64(poolLowFdRatioFlagName)
		if err != nil {
			return err, false
		}
		m.PoolLowFdRatio = poolLowFdRatioFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsRcvbufClientFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rcvbufClientFlagName := fmt.Sprintf("%v.rcvbuf_client", cmdPrefix)
	if cmd.Flags().Changed(rcvbufClientFlagName) {

		var rcvbufClientFlagName string
		if cmdPrefix == "" {
			rcvbufClientFlagName = "rcvbuf_client"
		} else {
			rcvbufClientFlagName = fmt.Sprintf("%v.rcvbuf_client", cmdPrefix)
		}

		rcvbufClientFlagValue, err := cmd.Flags().GetInt64(rcvbufClientFlagName)
		if err != nil {
			return err, false
		}
		m.RcvbufClient = &rcvbufClientFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsRcvbufServerFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rcvbufServerFlagName := fmt.Sprintf("%v.rcvbuf_server", cmdPrefix)
	if cmd.Flags().Changed(rcvbufServerFlagName) {

		var rcvbufServerFlagName string
		if cmdPrefix == "" {
			rcvbufServerFlagName = "rcvbuf_server"
		} else {
			rcvbufServerFlagName = fmt.Sprintf("%v.rcvbuf_server", cmdPrefix)
		}

		rcvbufServerFlagValue, err := cmd.Flags().GetInt64(rcvbufServerFlagName)
		if err != nil {
			return err, false
		}
		m.RcvbufServer = &rcvbufServerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsRecvEnoughFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	recvEnoughFlagName := fmt.Sprintf("%v.recv_enough", cmdPrefix)
	if cmd.Flags().Changed(recvEnoughFlagName) {

		var recvEnoughFlagName string
		if cmdPrefix == "" {
			recvEnoughFlagName = "recv_enough"
		} else {
			recvEnoughFlagName = fmt.Sprintf("%v.recv_enough", cmdPrefix)
		}

		recvEnoughFlagValue, err := cmd.Flags().GetInt64(recvEnoughFlagName)
		if err != nil {
			return err, false
		}
		m.RecvEnough = recvEnoughFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsRunqueueDepthFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runqueueDepthFlagName := fmt.Sprintf("%v.runqueue_depth", cmdPrefix)
	if cmd.Flags().Changed(runqueueDepthFlagName) {

		var runqueueDepthFlagName string
		if cmdPrefix == "" {
			runqueueDepthFlagName = "runqueue_depth"
		} else {
			runqueueDepthFlagName = fmt.Sprintf("%v.runqueue_depth", cmdPrefix)
		}

		runqueueDepthFlagValue, err := cmd.Flags().GetInt64(runqueueDepthFlagName)
		if err != nil {
			return err, false
		}
		m.RunqueueDepth = runqueueDepthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsSchedLowLatencyFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	schedLowLatencyFlagName := fmt.Sprintf("%v.sched_low_latency", cmdPrefix)
	if cmd.Flags().Changed(schedLowLatencyFlagName) {

		var schedLowLatencyFlagName string
		if cmdPrefix == "" {
			schedLowLatencyFlagName = "sched_low_latency"
		} else {
			schedLowLatencyFlagName = fmt.Sprintf("%v.sched_low_latency", cmdPrefix)
		}

		schedLowLatencyFlagValue, err := cmd.Flags().GetString(schedLowLatencyFlagName)
		if err != nil {
			return err, false
		}
		m.SchedLowLatency = schedLowLatencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsSndbufClientFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sndbufClientFlagName := fmt.Sprintf("%v.sndbuf_client", cmdPrefix)
	if cmd.Flags().Changed(sndbufClientFlagName) {

		var sndbufClientFlagName string
		if cmdPrefix == "" {
			sndbufClientFlagName = "sndbuf_client"
		} else {
			sndbufClientFlagName = fmt.Sprintf("%v.sndbuf_client", cmdPrefix)
		}

		sndbufClientFlagValue, err := cmd.Flags().GetInt64(sndbufClientFlagName)
		if err != nil {
			return err, false
		}
		m.SndbufClient = &sndbufClientFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsSndbufServerFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sndbufServerFlagName := fmt.Sprintf("%v.sndbuf_server", cmdPrefix)
	if cmd.Flags().Changed(sndbufServerFlagName) {

		var sndbufServerFlagName string
		if cmdPrefix == "" {
			sndbufServerFlagName = "sndbuf_server"
		} else {
			sndbufServerFlagName = fmt.Sprintf("%v.sndbuf_server", cmdPrefix)
		}

		sndbufServerFlagValue, err := cmd.Flags().GetInt64(sndbufServerFlagName)
		if err != nil {
			return err, false
		}
		m.SndbufServer = &sndbufServerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsSslCachesizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslCachesizeFlagName := fmt.Sprintf("%v.ssl_cachesize", cmdPrefix)
	if cmd.Flags().Changed(sslCachesizeFlagName) {

		var sslCachesizeFlagName string
		if cmdPrefix == "" {
			sslCachesizeFlagName = "ssl_cachesize"
		} else {
			sslCachesizeFlagName = fmt.Sprintf("%v.ssl_cachesize", cmdPrefix)
		}

		sslCachesizeFlagValue, err := cmd.Flags().GetInt64(sslCachesizeFlagName)
		if err != nil {
			return err, false
		}
		m.SslCachesize = &sslCachesizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsSslCaptureBufferSizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslCaptureBufferSizeFlagName := fmt.Sprintf("%v.ssl_capture_buffer_size", cmdPrefix)
	if cmd.Flags().Changed(sslCaptureBufferSizeFlagName) {

		var sslCaptureBufferSizeFlagName string
		if cmdPrefix == "" {
			sslCaptureBufferSizeFlagName = "ssl_capture_buffer_size"
		} else {
			sslCaptureBufferSizeFlagName = fmt.Sprintf("%v.ssl_capture_buffer_size", cmdPrefix)
		}

		sslCaptureBufferSizeFlagValue, err := cmd.Flags().GetInt64(sslCaptureBufferSizeFlagName)
		if err != nil {
			return err, false
		}
		m.SslCaptureBufferSize = &sslCaptureBufferSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsSslCtxCacheSizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslCtxCacheSizeFlagName := fmt.Sprintf("%v.ssl_ctx_cache_size", cmdPrefix)
	if cmd.Flags().Changed(sslCtxCacheSizeFlagName) {

		var sslCtxCacheSizeFlagName string
		if cmdPrefix == "" {
			sslCtxCacheSizeFlagName = "ssl_ctx_cache_size"
		} else {
			sslCtxCacheSizeFlagName = fmt.Sprintf("%v.ssl_ctx_cache_size", cmdPrefix)
		}

		sslCtxCacheSizeFlagValue, err := cmd.Flags().GetInt64(sslCtxCacheSizeFlagName)
		if err != nil {
			return err, false
		}
		m.SslCtxCacheSize = sslCtxCacheSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsSslDefaultDhParamFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslDefaultDhParamFlagName := fmt.Sprintf("%v.ssl_default_dh_param", cmdPrefix)
	if cmd.Flags().Changed(sslDefaultDhParamFlagName) {

		var sslDefaultDhParamFlagName string
		if cmdPrefix == "" {
			sslDefaultDhParamFlagName = "ssl_default_dh_param"
		} else {
			sslDefaultDhParamFlagName = fmt.Sprintf("%v.ssl_default_dh_param", cmdPrefix)
		}

		sslDefaultDhParamFlagValue, err := cmd.Flags().GetInt64(sslDefaultDhParamFlagName)
		if err != nil {
			return err, false
		}
		m.SslDefaultDhParam = sslDefaultDhParamFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsSslForcePrivateCacheFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslForcePrivateCacheFlagName := fmt.Sprintf("%v.ssl_force_private_cache", cmdPrefix)
	if cmd.Flags().Changed(sslForcePrivateCacheFlagName) {

		var sslForcePrivateCacheFlagName string
		if cmdPrefix == "" {
			sslForcePrivateCacheFlagName = "ssl_force_private_cache"
		} else {
			sslForcePrivateCacheFlagName = fmt.Sprintf("%v.ssl_force_private_cache", cmdPrefix)
		}

		sslForcePrivateCacheFlagValue, err := cmd.Flags().GetBool(sslForcePrivateCacheFlagName)
		if err != nil {
			return err, false
		}
		m.SslForcePrivateCache = sslForcePrivateCacheFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsSslKeylogFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslKeylogFlagName := fmt.Sprintf("%v.ssl_keylog", cmdPrefix)
	if cmd.Flags().Changed(sslKeylogFlagName) {

		var sslKeylogFlagName string
		if cmdPrefix == "" {
			sslKeylogFlagName = "ssl_keylog"
		} else {
			sslKeylogFlagName = fmt.Sprintf("%v.ssl_keylog", cmdPrefix)
		}

		sslKeylogFlagValue, err := cmd.Flags().GetString(sslKeylogFlagName)
		if err != nil {
			return err, false
		}
		m.SslKeylog = sslKeylogFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsSslLifetimeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslLifetimeFlagName := fmt.Sprintf("%v.ssl_lifetime", cmdPrefix)
	if cmd.Flags().Changed(sslLifetimeFlagName) {

		var sslLifetimeFlagName string
		if cmdPrefix == "" {
			sslLifetimeFlagName = "ssl_lifetime"
		} else {
			sslLifetimeFlagName = fmt.Sprintf("%v.ssl_lifetime", cmdPrefix)
		}

		sslLifetimeFlagValue, err := cmd.Flags().GetInt64(sslLifetimeFlagName)
		if err != nil {
			return err, false
		}
		m.SslLifetime = &sslLifetimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsSslMaxrecordFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sslMaxrecordFlagName := fmt.Sprintf("%v.ssl_maxrecord", cmdPrefix)
	if cmd.Flags().Changed(sslMaxrecordFlagName) {

		var sslMaxrecordFlagName string
		if cmdPrefix == "" {
			sslMaxrecordFlagName = "ssl_maxrecord"
		} else {
			sslMaxrecordFlagName = fmt.Sprintf("%v.ssl_maxrecord", cmdPrefix)
		}

		sslMaxrecordFlagValue, err := cmd.Flags().GetInt64(sslMaxrecordFlagName)
		if err != nil {
			return err, false
		}
		m.SslMaxrecord = &sslMaxrecordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsVarsGlobalMaxSizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varsGlobalMaxSizeFlagName := fmt.Sprintf("%v.vars_global_max_size", cmdPrefix)
	if cmd.Flags().Changed(varsGlobalMaxSizeFlagName) {

		var varsGlobalMaxSizeFlagName string
		if cmdPrefix == "" {
			varsGlobalMaxSizeFlagName = "vars_global_max_size"
		} else {
			varsGlobalMaxSizeFlagName = fmt.Sprintf("%v.vars_global_max_size", cmdPrefix)
		}

		varsGlobalMaxSizeFlagValue, err := cmd.Flags().GetInt64(varsGlobalMaxSizeFlagName)
		if err != nil {
			return err, false
		}
		m.VarsGlobalMaxSize = &varsGlobalMaxSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsVarsProcMaxSizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varsProcMaxSizeFlagName := fmt.Sprintf("%v.vars_proc_max_size", cmdPrefix)
	if cmd.Flags().Changed(varsProcMaxSizeFlagName) {

		var varsProcMaxSizeFlagName string
		if cmdPrefix == "" {
			varsProcMaxSizeFlagName = "vars_proc_max_size"
		} else {
			varsProcMaxSizeFlagName = fmt.Sprintf("%v.vars_proc_max_size", cmdPrefix)
		}

		varsProcMaxSizeFlagValue, err := cmd.Flags().GetInt64(varsProcMaxSizeFlagName)
		if err != nil {
			return err, false
		}
		m.VarsProcMaxSize = &varsProcMaxSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsVarsReqresMaxSizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varsReqresMaxSizeFlagName := fmt.Sprintf("%v.vars_reqres_max_size", cmdPrefix)
	if cmd.Flags().Changed(varsReqresMaxSizeFlagName) {

		var varsReqresMaxSizeFlagName string
		if cmdPrefix == "" {
			varsReqresMaxSizeFlagName = "vars_reqres_max_size"
		} else {
			varsReqresMaxSizeFlagName = fmt.Sprintf("%v.vars_reqres_max_size", cmdPrefix)
		}

		varsReqresMaxSizeFlagValue, err := cmd.Flags().GetInt64(varsReqresMaxSizeFlagName)
		if err != nil {
			return err, false
		}
		m.VarsReqresMaxSize = &varsReqresMaxSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsVarsSessMaxSizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varsSessMaxSizeFlagName := fmt.Sprintf("%v.vars_sess_max_size", cmdPrefix)
	if cmd.Flags().Changed(varsSessMaxSizeFlagName) {

		var varsSessMaxSizeFlagName string
		if cmdPrefix == "" {
			varsSessMaxSizeFlagName = "vars_sess_max_size"
		} else {
			varsSessMaxSizeFlagName = fmt.Sprintf("%v.vars_sess_max_size", cmdPrefix)
		}

		varsSessMaxSizeFlagValue, err := cmd.Flags().GetInt64(varsSessMaxSizeFlagName)
		if err != nil {
			return err, false
		}
		m.VarsSessMaxSize = &varsSessMaxSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsVarsTxnMaxSizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varsTxnMaxSizeFlagName := fmt.Sprintf("%v.vars_txn_max_size", cmdPrefix)
	if cmd.Flags().Changed(varsTxnMaxSizeFlagName) {

		var varsTxnMaxSizeFlagName string
		if cmdPrefix == "" {
			varsTxnMaxSizeFlagName = "vars_txn_max_size"
		} else {
			varsTxnMaxSizeFlagName = fmt.Sprintf("%v.vars_txn_max_size", cmdPrefix)
		}

		varsTxnMaxSizeFlagValue, err := cmd.Flags().GetInt64(varsTxnMaxSizeFlagName)
		if err != nil {
			return err, false
		}
		m.VarsTxnMaxSize = &varsTxnMaxSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsZlibMemlevelFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	zlibMemlevelFlagName := fmt.Sprintf("%v.zlib_memlevel", cmdPrefix)
	if cmd.Flags().Changed(zlibMemlevelFlagName) {

		var zlibMemlevelFlagName string
		if cmdPrefix == "" {
			zlibMemlevelFlagName = "zlib_memlevel"
		} else {
			zlibMemlevelFlagName = fmt.Sprintf("%v.zlib_memlevel", cmdPrefix)
		}

		zlibMemlevelFlagValue, err := cmd.Flags().GetInt64(zlibMemlevelFlagName)
		if err != nil {
			return err, false
		}
		m.ZlibMemlevel = zlibMemlevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalTuneOptionsZlibWindowsizeFlags(depth int, m *models.GlobalTuneOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	zlibWindowsizeFlagName := fmt.Sprintf("%v.zlib_windowsize", cmdPrefix)
	if cmd.Flags().Changed(zlibWindowsizeFlagName) {

		var zlibWindowsizeFlagName string
		if cmdPrefix == "" {
			zlibWindowsizeFlagName = "zlib_windowsize"
		} else {
			zlibWindowsizeFlagName = fmt.Sprintf("%v.zlib_windowsize", cmdPrefix)
		}

		zlibWindowsizeFlagValue, err := cmd.Flags().GetInt64(zlibWindowsizeFlagName)
		if err != nil {
			return err, false
		}
		m.ZlibWindowsize = zlibWindowsizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for GlobalWurflOptions

// register flags to command
func registerModelGlobalWurflOptionsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGlobalWurflOptionsCacheSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalWurflOptionsDataFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalWurflOptionsInformationList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalWurflOptionsInformationListSeparator(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGlobalWurflOptionsPatchFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGlobalWurflOptionsCacheSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cacheSizeDescription := ``

	var cacheSizeFlagName string
	if cmdPrefix == "" {
		cacheSizeFlagName = "cache_size"
	} else {
		cacheSizeFlagName = fmt.Sprintf("%v.cache_size", cmdPrefix)
	}

	var cacheSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cacheSizeFlagName, cacheSizeFlagDefault, cacheSizeDescription)

	return nil
}

func registerGlobalWurflOptionsDataFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataFileDescription := ``

	var dataFileFlagName string
	if cmdPrefix == "" {
		dataFileFlagName = "data_file"
	} else {
		dataFileFlagName = fmt.Sprintf("%v.data_file", cmdPrefix)
	}

	var dataFileFlagDefault string

	_ = cmd.PersistentFlags().String(dataFileFlagName, dataFileFlagDefault, dataFileDescription)

	return nil
}

func registerGlobalWurflOptionsInformationList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	informationListDescription := ``

	var informationListFlagName string
	if cmdPrefix == "" {
		informationListFlagName = "information_list"
	} else {
		informationListFlagName = fmt.Sprintf("%v.information_list", cmdPrefix)
	}

	var informationListFlagDefault string

	_ = cmd.PersistentFlags().String(informationListFlagName, informationListFlagDefault, informationListDescription)

	return nil
}

func registerGlobalWurflOptionsInformationListSeparator(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	informationListSeparatorDescription := ``

	var informationListSeparatorFlagName string
	if cmdPrefix == "" {
		informationListSeparatorFlagName = "information_list_separator"
	} else {
		informationListSeparatorFlagName = fmt.Sprintf("%v.information_list_separator", cmdPrefix)
	}

	var informationListSeparatorFlagDefault string

	_ = cmd.PersistentFlags().String(informationListSeparatorFlagName, informationListSeparatorFlagDefault, informationListSeparatorDescription)

	return nil
}

func registerGlobalWurflOptionsPatchFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	patchFileDescription := ``

	var patchFileFlagName string
	if cmdPrefix == "" {
		patchFileFlagName = "patch_file"
	} else {
		patchFileFlagName = fmt.Sprintf("%v.patch_file", cmdPrefix)
	}

	var patchFileFlagDefault string

	_ = cmd.PersistentFlags().String(patchFileFlagName, patchFileFlagDefault, patchFileDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGlobalWurflOptionsFlags(depth int, m *models.GlobalWurflOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cacheSizeAdded := retrieveGlobalWurflOptionsCacheSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cacheSizeAdded

	err, dataFileAdded := retrieveGlobalWurflOptionsDataFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataFileAdded

	err, informationListAdded := retrieveGlobalWurflOptionsInformationListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || informationListAdded

	err, informationListSeparatorAdded := retrieveGlobalWurflOptionsInformationListSeparatorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || informationListSeparatorAdded

	err, patchFileAdded := retrieveGlobalWurflOptionsPatchFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || patchFileAdded

	return nil, retAdded
}

func retrieveGlobalWurflOptionsCacheSizeFlags(depth int, m *models.GlobalWurflOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cacheSizeFlagName := fmt.Sprintf("%v.cache_size", cmdPrefix)
	if cmd.Flags().Changed(cacheSizeFlagName) {

		var cacheSizeFlagName string
		if cmdPrefix == "" {
			cacheSizeFlagName = "cache_size"
		} else {
			cacheSizeFlagName = fmt.Sprintf("%v.cache_size", cmdPrefix)
		}

		cacheSizeFlagValue, err := cmd.Flags().GetInt64(cacheSizeFlagName)
		if err != nil {
			return err, false
		}
		m.CacheSize = cacheSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalWurflOptionsDataFileFlags(depth int, m *models.GlobalWurflOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFileFlagName := fmt.Sprintf("%v.data_file", cmdPrefix)
	if cmd.Flags().Changed(dataFileFlagName) {

		var dataFileFlagName string
		if cmdPrefix == "" {
			dataFileFlagName = "data_file"
		} else {
			dataFileFlagName = fmt.Sprintf("%v.data_file", cmdPrefix)
		}

		dataFileFlagValue, err := cmd.Flags().GetString(dataFileFlagName)
		if err != nil {
			return err, false
		}
		m.DataFile = dataFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalWurflOptionsInformationListFlags(depth int, m *models.GlobalWurflOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	informationListFlagName := fmt.Sprintf("%v.information_list", cmdPrefix)
	if cmd.Flags().Changed(informationListFlagName) {

		var informationListFlagName string
		if cmdPrefix == "" {
			informationListFlagName = "information_list"
		} else {
			informationListFlagName = fmt.Sprintf("%v.information_list", cmdPrefix)
		}

		informationListFlagValue, err := cmd.Flags().GetString(informationListFlagName)
		if err != nil {
			return err, false
		}
		m.InformationList = informationListFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalWurflOptionsInformationListSeparatorFlags(depth int, m *models.GlobalWurflOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	informationListSeparatorFlagName := fmt.Sprintf("%v.information_list_separator", cmdPrefix)
	if cmd.Flags().Changed(informationListSeparatorFlagName) {

		var informationListSeparatorFlagName string
		if cmdPrefix == "" {
			informationListSeparatorFlagName = "information_list_separator"
		} else {
			informationListSeparatorFlagName = fmt.Sprintf("%v.information_list_separator", cmdPrefix)
		}

		informationListSeparatorFlagValue, err := cmd.Flags().GetString(informationListSeparatorFlagName)
		if err != nil {
			return err, false
		}
		m.InformationListSeparator = informationListSeparatorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGlobalWurflOptionsPatchFileFlags(depth int, m *models.GlobalWurflOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	patchFileFlagName := fmt.Sprintf("%v.patch_file", cmdPrefix)
	if cmd.Flags().Changed(patchFileFlagName) {

		var patchFileFlagName string
		if cmdPrefix == "" {
			patchFileFlagName = "patch_file"
		} else {
			patchFileFlagName = fmt.Sprintf("%v.patch_file", cmdPrefix)
		}

		patchFileFlagValue, err := cmd.Flags().GetString(patchFileFlagName)
		if err != nil {
			return err, false
		}
		m.PatchFile = patchFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}
