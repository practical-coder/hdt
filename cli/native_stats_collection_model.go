// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/haproxytech/models"
	"github.com/spf13/cobra"
)

// Schema cli for NativeStatsCollection

// register flags to command
func registerModelNativeStatsCollectionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNativeStatsCollectionError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatsCollectionRuntimeAPI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeStatsCollectionStats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNativeStatsCollectionError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorDescription := ``

	var errorFlagName string
	if cmdPrefix == "" {
		errorFlagName = "error"
	} else {
		errorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
	}

	var errorFlagDefault string

	_ = cmd.PersistentFlags().String(errorFlagName, errorFlagDefault, errorDescription)

	return nil
}

func registerNativeStatsCollectionRuntimeAPI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runtimeApiDescription := ``

	var runtimeApiFlagName string
	if cmdPrefix == "" {
		runtimeApiFlagName = "runtimeAPI"
	} else {
		runtimeApiFlagName = fmt.Sprintf("%v.runtimeAPI", cmdPrefix)
	}

	var runtimeApiFlagDefault string

	_ = cmd.PersistentFlags().String(runtimeApiFlagName, runtimeApiFlagDefault, runtimeApiDescription)

	return nil
}

func registerNativeStatsCollectionStats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: stats []*NativeStat array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNativeStatsCollectionFlags(depth int, m *models.NativeStatsCollection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, errorAdded := retrieveNativeStatsCollectionErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorAdded

	err, runtimeApiAdded := retrieveNativeStatsCollectionRuntimeAPIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runtimeApiAdded

	err, statsAdded := retrieveNativeStatsCollectionStatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statsAdded

	return nil, retAdded
}

func retrieveNativeStatsCollectionErrorFlags(depth int, m *models.NativeStatsCollection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorFlagName := fmt.Sprintf("%v.error", cmdPrefix)
	if cmd.Flags().Changed(errorFlagName) {

		var errorFlagName string
		if cmdPrefix == "" {
			errorFlagName = "error"
		} else {
			errorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
		}

		errorFlagValue, err := cmd.Flags().GetString(errorFlagName)
		if err != nil {
			return err, false
		}
		m.Error = errorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatsCollectionRuntimeAPIFlags(depth int, m *models.NativeStatsCollection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runtimeApiFlagName := fmt.Sprintf("%v.runtimeAPI", cmdPrefix)
	if cmd.Flags().Changed(runtimeApiFlagName) {

		var runtimeApiFlagName string
		if cmdPrefix == "" {
			runtimeApiFlagName = "runtimeAPI"
		} else {
			runtimeApiFlagName = fmt.Sprintf("%v.runtimeAPI", cmdPrefix)
		}

		runtimeApiFlagValue, err := cmd.Flags().GetString(runtimeApiFlagName)
		if err != nil {
			return err, false
		}
		m.RuntimeAPI = runtimeApiFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeStatsCollectionStatsFlags(depth int, m *models.NativeStatsCollection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statsFlagName := fmt.Sprintf("%v.stats", cmdPrefix)
	if cmd.Flags().Changed(statsFlagName) {
		// warning: stats array type []*NativeStat is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
