// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/haproxytech/client-native/v4/models"

	"github.com/spf13/cobra"
)

// Schema cli for Backend

// register flags to command
func registerModelBackendFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBackendAbortonclose(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendAcceptInvalidHTTPResponse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendAdvCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendAllbackups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendBalance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendBindProcess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendCheckTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendCheckcache(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendCompression(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendConnectTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendCookie(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendDefaultServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendDynamicCookieKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendExternalCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendExternalCheckCommand(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendExternalCheckPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendForwardfor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendH1CaseAdjustBogusServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHashType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHTTPBufferRequest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHTTPCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHTTPKeepAlive(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHTTPNoDelay(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHTTPServerClose(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHTTPUseHtx(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHTTPConnectionMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHTTPKeepAliveTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHTTPPretendKeepalive(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHTTPProxy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHTTPRequestTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHTTPReuse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHttpchkParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHttpclose(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendIndependentStreams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendLogHealthChecks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendLogTag(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendMysqlCheckParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendNolinger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendOriginalto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendPersist(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendPgsqlCheckParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendPreferLastServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendQueueTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendRedispatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendRetries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendServerTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendSmtpchkParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendSpliceAuto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendSpliceRequest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendSpliceResponse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendSpopCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendSrvtcpka(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendSrvtcpkaCnt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendSrvtcpkaIdle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendSrvtcpkaIntvl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendStatsOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendStickTable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendTCPSmartConnect(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendTcpka(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendTransparent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendTunnelTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendAbortonclose(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	abortoncloseDescription := `Enum: ["enabled","disabled"]. `

	var abortoncloseFlagName string
	if cmdPrefix == "" {
		abortoncloseFlagName = "abortonclose"
	} else {
		abortoncloseFlagName = fmt.Sprintf("%v.abortonclose", cmdPrefix)
	}

	var abortoncloseFlagDefault string

	_ = cmd.PersistentFlags().String(abortoncloseFlagName, abortoncloseFlagDefault, abortoncloseDescription)

	if err := cmd.RegisterFlagCompletionFunc(abortoncloseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendAcceptInvalidHTTPResponse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	acceptInvalidHttpResponseDescription := `Enum: ["enabled","disabled"]. `

	var acceptInvalidHttpResponseFlagName string
	if cmdPrefix == "" {
		acceptInvalidHttpResponseFlagName = "accept_invalid_http_response"
	} else {
		acceptInvalidHttpResponseFlagName = fmt.Sprintf("%v.accept_invalid_http_response", cmdPrefix)
	}

	var acceptInvalidHttpResponseFlagDefault string

	_ = cmd.PersistentFlags().String(acceptInvalidHttpResponseFlagName, acceptInvalidHttpResponseFlagDefault, acceptInvalidHttpResponseDescription)

	if err := cmd.RegisterFlagCompletionFunc(acceptInvalidHttpResponseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendAdvCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	advCheckDescription := `Enum: ["ssl-hello-chk","smtpchk","ldap-check","mysql-check","pgsql-check","tcp-check","redis-check","httpchk"]. `

	var advCheckFlagName string
	if cmdPrefix == "" {
		advCheckFlagName = "adv_check"
	} else {
		advCheckFlagName = fmt.Sprintf("%v.adv_check", cmdPrefix)
	}

	var advCheckFlagDefault string

	_ = cmd.PersistentFlags().String(advCheckFlagName, advCheckFlagDefault, advCheckDescription)

	if err := cmd.RegisterFlagCompletionFunc(advCheckFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ssl-hello-chk","smtpchk","ldap-check","mysql-check","pgsql-check","tcp-check","redis-check","httpchk"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendAllbackups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allbackupsDescription := `Enum: ["enabled","disabled"]. `

	var allbackupsFlagName string
	if cmdPrefix == "" {
		allbackupsFlagName = "allbackups"
	} else {
		allbackupsFlagName = fmt.Sprintf("%v.allbackups", cmdPrefix)
	}

	var allbackupsFlagDefault string

	_ = cmd.PersistentFlags().String(allbackupsFlagName, allbackupsFlagDefault, allbackupsDescription)

	if err := cmd.RegisterFlagCompletionFunc(allbackupsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendBalance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var balanceFlagName string
	if cmdPrefix == "" {
		balanceFlagName = "balance"
	} else {
		balanceFlagName = fmt.Sprintf("%v.balance", cmdPrefix)
	}

	if err := registerModelBalanceFlags(depth+1, balanceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendBindProcess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bindProcessDescription := ``

	var bindProcessFlagName string
	if cmdPrefix == "" {
		bindProcessFlagName = "bind_process"
	} else {
		bindProcessFlagName = fmt.Sprintf("%v.bind_process", cmdPrefix)
	}

	var bindProcessFlagDefault string

	_ = cmd.PersistentFlags().String(bindProcessFlagName, bindProcessFlagDefault, bindProcessDescription)

	return nil
}

func registerBackendCheckTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkTimeoutDescription := ``

	var checkTimeoutFlagName string
	if cmdPrefix == "" {
		checkTimeoutFlagName = "check_timeout"
	} else {
		checkTimeoutFlagName = fmt.Sprintf("%v.check_timeout", cmdPrefix)
	}

	var checkTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(checkTimeoutFlagName, checkTimeoutFlagDefault, checkTimeoutDescription)

	return nil
}

func registerBackendCheckcache(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkcacheDescription := `Enum: ["enabled","disabled"]. `

	var checkcacheFlagName string
	if cmdPrefix == "" {
		checkcacheFlagName = "checkcache"
	} else {
		checkcacheFlagName = fmt.Sprintf("%v.checkcache", cmdPrefix)
	}

	var checkcacheFlagDefault string

	_ = cmd.PersistentFlags().String(checkcacheFlagName, checkcacheFlagDefault, checkcacheDescription)

	if err := cmd.RegisterFlagCompletionFunc(checkcacheFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendCompression(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var compressionFlagName string
	if cmdPrefix == "" {
		compressionFlagName = "compression"
	} else {
		compressionFlagName = fmt.Sprintf("%v.compression", cmdPrefix)
	}

	if err := registerModelCompressionFlags(depth+1, compressionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendConnectTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connectTimeoutDescription := ``

	var connectTimeoutFlagName string
	if cmdPrefix == "" {
		connectTimeoutFlagName = "connect_timeout"
	} else {
		connectTimeoutFlagName = fmt.Sprintf("%v.connect_timeout", cmdPrefix)
	}

	var connectTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(connectTimeoutFlagName, connectTimeoutFlagDefault, connectTimeoutDescription)

	return nil
}

func registerBackendCookie(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var cookieFlagName string
	if cmdPrefix == "" {
		cookieFlagName = "cookie"
	} else {
		cookieFlagName = fmt.Sprintf("%v.cookie", cmdPrefix)
	}

	if err := registerModelCookieFlags(depth+1, cookieFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendDefaultServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var defaultServerFlagName string
	if cmdPrefix == "" {
		defaultServerFlagName = "default_server"
	} else {
		defaultServerFlagName = fmt.Sprintf("%v.default_server", cmdPrefix)
	}

	if err := registerModelDefaultServerFlags(depth+1, defaultServerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendDynamicCookieKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dynamicCookieKeyDescription := ``

	var dynamicCookieKeyFlagName string
	if cmdPrefix == "" {
		dynamicCookieKeyFlagName = "dynamic_cookie_key"
	} else {
		dynamicCookieKeyFlagName = fmt.Sprintf("%v.dynamic_cookie_key", cmdPrefix)
	}

	var dynamicCookieKeyFlagDefault string

	_ = cmd.PersistentFlags().String(dynamicCookieKeyFlagName, dynamicCookieKeyFlagDefault, dynamicCookieKeyDescription)

	return nil
}

func registerBackendExternalCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	externalCheckDescription := `Enum: ["enabled","disabled"]. `

	var externalCheckFlagName string
	if cmdPrefix == "" {
		externalCheckFlagName = "external_check"
	} else {
		externalCheckFlagName = fmt.Sprintf("%v.external_check", cmdPrefix)
	}

	var externalCheckFlagDefault string

	_ = cmd.PersistentFlags().String(externalCheckFlagName, externalCheckFlagDefault, externalCheckDescription)

	if err := cmd.RegisterFlagCompletionFunc(externalCheckFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendExternalCheckCommand(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	externalCheckCommandDescription := ``

	var externalCheckCommandFlagName string
	if cmdPrefix == "" {
		externalCheckCommandFlagName = "external_check_command"
	} else {
		externalCheckCommandFlagName = fmt.Sprintf("%v.external_check_command", cmdPrefix)
	}

	var externalCheckCommandFlagDefault string

	_ = cmd.PersistentFlags().String(externalCheckCommandFlagName, externalCheckCommandFlagDefault, externalCheckCommandDescription)

	return nil
}

func registerBackendExternalCheckPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	externalCheckPathDescription := ``

	var externalCheckPathFlagName string
	if cmdPrefix == "" {
		externalCheckPathFlagName = "external_check_path"
	} else {
		externalCheckPathFlagName = fmt.Sprintf("%v.external_check_path", cmdPrefix)
	}

	var externalCheckPathFlagDefault string

	_ = cmd.PersistentFlags().String(externalCheckPathFlagName, externalCheckPathFlagDefault, externalCheckPathDescription)

	return nil
}

func registerBackendForwardfor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var forwardforFlagName string
	if cmdPrefix == "" {
		forwardforFlagName = "forwardfor"
	} else {
		forwardforFlagName = fmt.Sprintf("%v.forwardfor", cmdPrefix)
	}

	if err := registerModelForwardforFlags(depth+1, forwardforFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendH1CaseAdjustBogusServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h1CaseAdjustBogusServerDescription := `Enum: ["enabled","disabled"]. `

	var h1CaseAdjustBogusServerFlagName string
	if cmdPrefix == "" {
		h1CaseAdjustBogusServerFlagName = "h1_case_adjust_bogus_server"
	} else {
		h1CaseAdjustBogusServerFlagName = fmt.Sprintf("%v.h1_case_adjust_bogus_server", cmdPrefix)
	}

	var h1CaseAdjustBogusServerFlagDefault string

	_ = cmd.PersistentFlags().String(h1CaseAdjustBogusServerFlagName, h1CaseAdjustBogusServerFlagDefault, h1CaseAdjustBogusServerDescription)

	if err := cmd.RegisterFlagCompletionFunc(h1CaseAdjustBogusServerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendHashType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var hashTypeFlagName string
	if cmdPrefix == "" {
		hashTypeFlagName = "hash_type"
	} else {
		hashTypeFlagName = fmt.Sprintf("%v.hash_type", cmdPrefix)
	}

	if err := registerModelBackendHashTypeFlags(depth+1, hashTypeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendHTTPBufferRequest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpBufferRequestDescription := `Enum: ["enabled","disabled"]. `

	var httpBufferRequestFlagName string
	if cmdPrefix == "" {
		httpBufferRequestFlagName = "http-buffer-request"
	} else {
		httpBufferRequestFlagName = fmt.Sprintf("%v.http-buffer-request", cmdPrefix)
	}

	var httpBufferRequestFlagDefault string

	_ = cmd.PersistentFlags().String(httpBufferRequestFlagName, httpBufferRequestFlagDefault, httpBufferRequestDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpBufferRequestFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendHTTPCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var httpCheckFlagName string
	if cmdPrefix == "" {
		httpCheckFlagName = "http-check"
	} else {
		httpCheckFlagName = fmt.Sprintf("%v.http-check", cmdPrefix)
	}

	if err := registerModelHTTPCheckFlags(depth+1, httpCheckFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendHTTPKeepAlive(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpKeepAliveDescription := `Enum: ["enabled","disabled"]. `

	var httpKeepAliveFlagName string
	if cmdPrefix == "" {
		httpKeepAliveFlagName = "http-keep-alive"
	} else {
		httpKeepAliveFlagName = fmt.Sprintf("%v.http-keep-alive", cmdPrefix)
	}

	var httpKeepAliveFlagDefault string

	_ = cmd.PersistentFlags().String(httpKeepAliveFlagName, httpKeepAliveFlagDefault, httpKeepAliveDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpKeepAliveFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendHTTPNoDelay(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpNoDelayDescription := `Enum: ["enabled","disabled"]. `

	var httpNoDelayFlagName string
	if cmdPrefix == "" {
		httpNoDelayFlagName = "http-no-delay"
	} else {
		httpNoDelayFlagName = fmt.Sprintf("%v.http-no-delay", cmdPrefix)
	}

	var httpNoDelayFlagDefault string

	_ = cmd.PersistentFlags().String(httpNoDelayFlagName, httpNoDelayFlagDefault, httpNoDelayDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpNoDelayFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendHTTPServerClose(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpServerCloseDescription := `Enum: ["enabled","disabled"]. `

	var httpServerCloseFlagName string
	if cmdPrefix == "" {
		httpServerCloseFlagName = "http-server-close"
	} else {
		httpServerCloseFlagName = fmt.Sprintf("%v.http-server-close", cmdPrefix)
	}

	var httpServerCloseFlagDefault string

	_ = cmd.PersistentFlags().String(httpServerCloseFlagName, httpServerCloseFlagDefault, httpServerCloseDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpServerCloseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendHTTPUseHtx(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpUseHtxDescription := `Enum: ["enabled","disabled"]. `

	var httpUseHtxFlagName string
	if cmdPrefix == "" {
		httpUseHtxFlagName = "http-use-htx"
	} else {
		httpUseHtxFlagName = fmt.Sprintf("%v.http-use-htx", cmdPrefix)
	}

	var httpUseHtxFlagDefault string

	_ = cmd.PersistentFlags().String(httpUseHtxFlagName, httpUseHtxFlagDefault, httpUseHtxDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpUseHtxFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendHTTPConnectionMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpConnectionModeDescription := `Enum: ["httpclose","http-server-close","http-keep-alive"]. `

	var httpConnectionModeFlagName string
	if cmdPrefix == "" {
		httpConnectionModeFlagName = "http_connection_mode"
	} else {
		httpConnectionModeFlagName = fmt.Sprintf("%v.http_connection_mode", cmdPrefix)
	}

	var httpConnectionModeFlagDefault string

	_ = cmd.PersistentFlags().String(httpConnectionModeFlagName, httpConnectionModeFlagDefault, httpConnectionModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpConnectionModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["httpclose","http-server-close","http-keep-alive"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendHTTPKeepAliveTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpKeepAliveTimeoutDescription := ``

	var httpKeepAliveTimeoutFlagName string
	if cmdPrefix == "" {
		httpKeepAliveTimeoutFlagName = "http_keep_alive_timeout"
	} else {
		httpKeepAliveTimeoutFlagName = fmt.Sprintf("%v.http_keep_alive_timeout", cmdPrefix)
	}

	var httpKeepAliveTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpKeepAliveTimeoutFlagName, httpKeepAliveTimeoutFlagDefault, httpKeepAliveTimeoutDescription)

	return nil
}

func registerBackendHTTPPretendKeepalive(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpPretendKeepaliveDescription := `Enum: ["enabled","disabled"]. `

	var httpPretendKeepaliveFlagName string
	if cmdPrefix == "" {
		httpPretendKeepaliveFlagName = "http_pretend_keepalive"
	} else {
		httpPretendKeepaliveFlagName = fmt.Sprintf("%v.http_pretend_keepalive", cmdPrefix)
	}

	var httpPretendKeepaliveFlagDefault string

	_ = cmd.PersistentFlags().String(httpPretendKeepaliveFlagName, httpPretendKeepaliveFlagDefault, httpPretendKeepaliveDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpPretendKeepaliveFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendHTTPProxy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpProxyDescription := `Enum: ["enabled","disabled"]. `

	var httpProxyFlagName string
	if cmdPrefix == "" {
		httpProxyFlagName = "http_proxy"
	} else {
		httpProxyFlagName = fmt.Sprintf("%v.http_proxy", cmdPrefix)
	}

	var httpProxyFlagDefault string

	_ = cmd.PersistentFlags().String(httpProxyFlagName, httpProxyFlagDefault, httpProxyDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpProxyFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendHTTPRequestTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpRequestTimeoutDescription := ``

	var httpRequestTimeoutFlagName string
	if cmdPrefix == "" {
		httpRequestTimeoutFlagName = "http_request_timeout"
	} else {
		httpRequestTimeoutFlagName = fmt.Sprintf("%v.http_request_timeout", cmdPrefix)
	}

	var httpRequestTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpRequestTimeoutFlagName, httpRequestTimeoutFlagDefault, httpRequestTimeoutDescription)

	return nil
}

func registerBackendHTTPReuse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpReuseDescription := `Enum: ["aggressive","always","never","safe"]. `

	var httpReuseFlagName string
	if cmdPrefix == "" {
		httpReuseFlagName = "http_reuse"
	} else {
		httpReuseFlagName = fmt.Sprintf("%v.http_reuse", cmdPrefix)
	}

	var httpReuseFlagDefault string

	_ = cmd.PersistentFlags().String(httpReuseFlagName, httpReuseFlagDefault, httpReuseDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpReuseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["aggressive","always","never","safe"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendHttpchkParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var httpchkParamsFlagName string
	if cmdPrefix == "" {
		httpchkParamsFlagName = "httpchk_params"
	} else {
		httpchkParamsFlagName = fmt.Sprintf("%v.httpchk_params", cmdPrefix)
	}

	if err := registerModelHttpchkParamsFlags(depth+1, httpchkParamsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendHttpclose(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpcloseDescription := `Enum: ["enabled","disabled"]. `

	var httpcloseFlagName string
	if cmdPrefix == "" {
		httpcloseFlagName = "httpclose"
	} else {
		httpcloseFlagName = fmt.Sprintf("%v.httpclose", cmdPrefix)
	}

	var httpcloseFlagDefault string

	_ = cmd.PersistentFlags().String(httpcloseFlagName, httpcloseFlagDefault, httpcloseDescription)

	if err := cmd.RegisterFlagCompletionFunc(httpcloseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendIndependentStreams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	independentStreamsDescription := `Enum: ["enabled","disabled"]. `

	var independentStreamsFlagName string
	if cmdPrefix == "" {
		independentStreamsFlagName = "independent_streams"
	} else {
		independentStreamsFlagName = fmt.Sprintf("%v.independent_streams", cmdPrefix)
	}

	var independentStreamsFlagDefault string

	_ = cmd.PersistentFlags().String(independentStreamsFlagName, independentStreamsFlagDefault, independentStreamsDescription)

	if err := cmd.RegisterFlagCompletionFunc(independentStreamsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendLogHealthChecks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logHealthChecksDescription := `Enum: ["enabled","disabled"]. `

	var logHealthChecksFlagName string
	if cmdPrefix == "" {
		logHealthChecksFlagName = "log_health_checks"
	} else {
		logHealthChecksFlagName = fmt.Sprintf("%v.log_health_checks", cmdPrefix)
	}

	var logHealthChecksFlagDefault string

	_ = cmd.PersistentFlags().String(logHealthChecksFlagName, logHealthChecksFlagDefault, logHealthChecksDescription)

	if err := cmd.RegisterFlagCompletionFunc(logHealthChecksFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendLogTag(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logTagDescription := ``

	var logTagFlagName string
	if cmdPrefix == "" {
		logTagFlagName = "log_tag"
	} else {
		logTagFlagName = fmt.Sprintf("%v.log_tag", cmdPrefix)
	}

	var logTagFlagDefault string

	_ = cmd.PersistentFlags().String(logTagFlagName, logTagFlagDefault, logTagDescription)

	return nil
}

func registerBackendMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `Enum: ["http","tcp"]. `

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	if err := cmd.RegisterFlagCompletionFunc(modeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["http","tcp"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendMysqlCheckParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var mysqlCheckParamsFlagName string
	if cmdPrefix == "" {
		mysqlCheckParamsFlagName = "mysql_check_params"
	} else {
		mysqlCheckParamsFlagName = fmt.Sprintf("%v.mysql_check_params", cmdPrefix)
	}

	if err := registerModelMysqlCheckParamsFlags(depth+1, mysqlCheckParamsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerBackendNolinger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nolingerDescription := `Enum: ["enabled","disabled"]. `

	var nolingerFlagName string
	if cmdPrefix == "" {
		nolingerFlagName = "nolinger"
	} else {
		nolingerFlagName = fmt.Sprintf("%v.nolinger", cmdPrefix)
	}

	var nolingerFlagDefault string

	_ = cmd.PersistentFlags().String(nolingerFlagName, nolingerFlagDefault, nolingerDescription)

	if err := cmd.RegisterFlagCompletionFunc(nolingerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendOriginalto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	originaltoDescription := `Enum: ["enabled","disabled"]. `

	var originaltoFlagName string
	if cmdPrefix == "" {
		originaltoFlagName = "originalto"
	} else {
		originaltoFlagName = fmt.Sprintf("%v.originalto", cmdPrefix)
	}

	var originaltoFlagDefault string

	_ = cmd.PersistentFlags().String(originaltoFlagName, originaltoFlagDefault, originaltoDescription)

	if err := cmd.RegisterFlagCompletionFunc(originaltoFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendPersist(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	persistDescription := `Enum: ["enabled","disabled"]. `

	var persistFlagName string
	if cmdPrefix == "" {
		persistFlagName = "persist"
	} else {
		persistFlagName = fmt.Sprintf("%v.persist", cmdPrefix)
	}

	var persistFlagDefault string

	_ = cmd.PersistentFlags().String(persistFlagName, persistFlagDefault, persistDescription)

	if err := cmd.RegisterFlagCompletionFunc(persistFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendPgsqlCheckParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var pgsqlCheckParamsFlagName string
	if cmdPrefix == "" {
		pgsqlCheckParamsFlagName = "pgsql_check_params"
	} else {
		pgsqlCheckParamsFlagName = fmt.Sprintf("%v.pgsql_check_params", cmdPrefix)
	}

	if err := registerModelPgsqlCheckParamsFlags(depth+1, pgsqlCheckParamsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendPreferLastServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	preferLastServerDescription := `Enum: ["enabled","disabled"]. `

	var preferLastServerFlagName string
	if cmdPrefix == "" {
		preferLastServerFlagName = "prefer_last_server"
	} else {
		preferLastServerFlagName = fmt.Sprintf("%v.prefer_last_server", cmdPrefix)
	}

	var preferLastServerFlagDefault string

	_ = cmd.PersistentFlags().String(preferLastServerFlagName, preferLastServerFlagDefault, preferLastServerDescription)

	if err := cmd.RegisterFlagCompletionFunc(preferLastServerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendQueueTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	queueTimeoutDescription := ``

	var queueTimeoutFlagName string
	if cmdPrefix == "" {
		queueTimeoutFlagName = "queue_timeout"
	} else {
		queueTimeoutFlagName = fmt.Sprintf("%v.queue_timeout", cmdPrefix)
	}

	var queueTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(queueTimeoutFlagName, queueTimeoutFlagDefault, queueTimeoutDescription)

	return nil
}

func registerBackendRedispatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var redispatchFlagName string
	if cmdPrefix == "" {
		redispatchFlagName = "redispatch"
	} else {
		redispatchFlagName = fmt.Sprintf("%v.redispatch", cmdPrefix)
	}

	if err := registerModelRedispatchFlags(depth+1, redispatchFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendRetries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	retriesDescription := ``

	var retriesFlagName string
	if cmdPrefix == "" {
		retriesFlagName = "retries"
	} else {
		retriesFlagName = fmt.Sprintf("%v.retries", cmdPrefix)
	}

	var retriesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(retriesFlagName, retriesFlagDefault, retriesDescription)

	return nil
}

func registerBackendServerTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverTimeoutDescription := ``

	var serverTimeoutFlagName string
	if cmdPrefix == "" {
		serverTimeoutFlagName = "server_timeout"
	} else {
		serverTimeoutFlagName = fmt.Sprintf("%v.server_timeout", cmdPrefix)
	}

	var serverTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(serverTimeoutFlagName, serverTimeoutFlagDefault, serverTimeoutDescription)

	return nil
}

func registerBackendSmtpchkParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var smtpchkParamsFlagName string
	if cmdPrefix == "" {
		smtpchkParamsFlagName = "smtpchk_params"
	} else {
		smtpchkParamsFlagName = fmt.Sprintf("%v.smtpchk_params", cmdPrefix)
	}

	if err := registerModelSmtpchkParamsFlags(depth+1, smtpchkParamsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendSpliceAuto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spliceAutoDescription := `Enum: ["enabled","disabled"]. `

	var spliceAutoFlagName string
	if cmdPrefix == "" {
		spliceAutoFlagName = "splice_auto"
	} else {
		spliceAutoFlagName = fmt.Sprintf("%v.splice_auto", cmdPrefix)
	}

	var spliceAutoFlagDefault string

	_ = cmd.PersistentFlags().String(spliceAutoFlagName, spliceAutoFlagDefault, spliceAutoDescription)

	if err := cmd.RegisterFlagCompletionFunc(spliceAutoFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendSpliceRequest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spliceRequestDescription := `Enum: ["enabled","disabled"]. `

	var spliceRequestFlagName string
	if cmdPrefix == "" {
		spliceRequestFlagName = "splice_request"
	} else {
		spliceRequestFlagName = fmt.Sprintf("%v.splice_request", cmdPrefix)
	}

	var spliceRequestFlagDefault string

	_ = cmd.PersistentFlags().String(spliceRequestFlagName, spliceRequestFlagDefault, spliceRequestDescription)

	if err := cmd.RegisterFlagCompletionFunc(spliceRequestFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendSpliceResponse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spliceResponseDescription := `Enum: ["enabled","disabled"]. `

	var spliceResponseFlagName string
	if cmdPrefix == "" {
		spliceResponseFlagName = "splice_response"
	} else {
		spliceResponseFlagName = fmt.Sprintf("%v.splice_response", cmdPrefix)
	}

	var spliceResponseFlagDefault string

	_ = cmd.PersistentFlags().String(spliceResponseFlagName, spliceResponseFlagDefault, spliceResponseDescription)

	if err := cmd.RegisterFlagCompletionFunc(spliceResponseFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendSpopCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	spopCheckDescription := `Enum: ["enabled","disabled"]. `

	var spopCheckFlagName string
	if cmdPrefix == "" {
		spopCheckFlagName = "spop_check"
	} else {
		spopCheckFlagName = fmt.Sprintf("%v.spop_check", cmdPrefix)
	}

	var spopCheckFlagDefault string

	_ = cmd.PersistentFlags().String(spopCheckFlagName, spopCheckFlagDefault, spopCheckDescription)

	if err := cmd.RegisterFlagCompletionFunc(spopCheckFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendSrvtcpka(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	srvtcpkaDescription := `Enum: ["enabled","disabled"]. `

	var srvtcpkaFlagName string
	if cmdPrefix == "" {
		srvtcpkaFlagName = "srvtcpka"
	} else {
		srvtcpkaFlagName = fmt.Sprintf("%v.srvtcpka", cmdPrefix)
	}

	var srvtcpkaFlagDefault string

	_ = cmd.PersistentFlags().String(srvtcpkaFlagName, srvtcpkaFlagDefault, srvtcpkaDescription)

	if err := cmd.RegisterFlagCompletionFunc(srvtcpkaFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendSrvtcpkaCnt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	srvtcpkaCntDescription := ``

	var srvtcpkaCntFlagName string
	if cmdPrefix == "" {
		srvtcpkaCntFlagName = "srvtcpka_cnt"
	} else {
		srvtcpkaCntFlagName = fmt.Sprintf("%v.srvtcpka_cnt", cmdPrefix)
	}

	var srvtcpkaCntFlagDefault int64

	_ = cmd.PersistentFlags().Int64(srvtcpkaCntFlagName, srvtcpkaCntFlagDefault, srvtcpkaCntDescription)

	return nil
}

func registerBackendSrvtcpkaIdle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	srvtcpkaIdleDescription := ``

	var srvtcpkaIdleFlagName string
	if cmdPrefix == "" {
		srvtcpkaIdleFlagName = "srvtcpka_idle"
	} else {
		srvtcpkaIdleFlagName = fmt.Sprintf("%v.srvtcpka_idle", cmdPrefix)
	}

	var srvtcpkaIdleFlagDefault int64

	_ = cmd.PersistentFlags().Int64(srvtcpkaIdleFlagName, srvtcpkaIdleFlagDefault, srvtcpkaIdleDescription)

	return nil
}

func registerBackendSrvtcpkaIntvl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	srvtcpkaIntvlDescription := ``

	var srvtcpkaIntvlFlagName string
	if cmdPrefix == "" {
		srvtcpkaIntvlFlagName = "srvtcpka_intvl"
	} else {
		srvtcpkaIntvlFlagName = fmt.Sprintf("%v.srvtcpka_intvl", cmdPrefix)
	}

	var srvtcpkaIntvlFlagDefault int64

	_ = cmd.PersistentFlags().Int64(srvtcpkaIntvlFlagName, srvtcpkaIntvlFlagDefault, srvtcpkaIntvlDescription)

	return nil
}

func registerBackendStatsOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var statsOptionsFlagName string
	if cmdPrefix == "" {
		statsOptionsFlagName = "stats_options"
	} else {
		statsOptionsFlagName = fmt.Sprintf("%v.stats_options", cmdPrefix)
	}

	if err := registerModelStatsOptionsFlags(depth+1, statsOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendStickTable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var stickTableFlagName string
	if cmdPrefix == "" {
		stickTableFlagName = "stick_table"
	} else {
		stickTableFlagName = fmt.Sprintf("%v.stick_table", cmdPrefix)
	}

	if err := registerModelConfigStickTableFlags(depth+1, stickTableFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendTCPSmartConnect(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpSmartConnectDescription := `Enum: ["enabled","disabled"]. `

	var tcpSmartConnectFlagName string
	if cmdPrefix == "" {
		tcpSmartConnectFlagName = "tcp_smart_connect"
	} else {
		tcpSmartConnectFlagName = fmt.Sprintf("%v.tcp_smart_connect", cmdPrefix)
	}

	var tcpSmartConnectFlagDefault string

	_ = cmd.PersistentFlags().String(tcpSmartConnectFlagName, tcpSmartConnectFlagDefault, tcpSmartConnectDescription)

	if err := cmd.RegisterFlagCompletionFunc(tcpSmartConnectFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendTcpka(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpkaDescription := `Enum: ["enabled","disabled"]. `

	var tcpkaFlagName string
	if cmdPrefix == "" {
		tcpkaFlagName = "tcpka"
	} else {
		tcpkaFlagName = fmt.Sprintf("%v.tcpka", cmdPrefix)
	}

	var tcpkaFlagDefault string

	_ = cmd.PersistentFlags().String(tcpkaFlagName, tcpkaFlagDefault, tcpkaDescription)

	if err := cmd.RegisterFlagCompletionFunc(tcpkaFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendTransparent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transparentDescription := `Enum: ["enabled","disabled"]. `

	var transparentFlagName string
	if cmdPrefix == "" {
		transparentFlagName = "transparent"
	} else {
		transparentFlagName = fmt.Sprintf("%v.transparent", cmdPrefix)
	}

	var transparentFlagDefault string

	_ = cmd.PersistentFlags().String(transparentFlagName, transparentFlagDefault, transparentDescription)

	if err := cmd.RegisterFlagCompletionFunc(transparentFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendTunnelTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tunnelTimeoutDescription := ``

	var tunnelTimeoutFlagName string
	if cmdPrefix == "" {
		tunnelTimeoutFlagName = "tunnel_timeout"
	} else {
		tunnelTimeoutFlagName = fmt.Sprintf("%v.tunnel_timeout", cmdPrefix)
	}

	var tunnelTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tunnelTimeoutFlagName, tunnelTimeoutFlagDefault, tunnelTimeoutDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBackendFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, abortoncloseAdded := retrieveBackendAbortoncloseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || abortoncloseAdded

	err, acceptInvalidHttpResponseAdded := retrieveBackendAcceptInvalidHTTPResponseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || acceptInvalidHttpResponseAdded

	err, advCheckAdded := retrieveBackendAdvCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || advCheckAdded

	err, allbackupsAdded := retrieveBackendAllbackupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allbackupsAdded

	err, balanceAdded := retrieveBackendBalanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || balanceAdded

	err, bindProcessAdded := retrieveBackendBindProcessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bindProcessAdded

	err, checkTimeoutAdded := retrieveBackendCheckTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkTimeoutAdded

	err, checkcacheAdded := retrieveBackendCheckcacheFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkcacheAdded

	err, compressionAdded := retrieveBackendCompressionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compressionAdded

	err, connectTimeoutAdded := retrieveBackendConnectTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectTimeoutAdded

	err, cookieAdded := retrieveBackendCookieFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cookieAdded

	err, defaultServerAdded := retrieveBackendDefaultServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultServerAdded

	err, dynamicCookieKeyAdded := retrieveBackendDynamicCookieKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dynamicCookieKeyAdded

	err, externalCheckAdded := retrieveBackendExternalCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || externalCheckAdded

	err, externalCheckCommandAdded := retrieveBackendExternalCheckCommandFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || externalCheckCommandAdded

	err, externalCheckPathAdded := retrieveBackendExternalCheckPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || externalCheckPathAdded

	err, forwardforAdded := retrieveBackendForwardforFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forwardforAdded

	err, h1CaseAdjustBogusServerAdded := retrieveBackendH1CaseAdjustBogusServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h1CaseAdjustBogusServerAdded

	err, hashTypeAdded := retrieveBackendHashTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hashTypeAdded

	err, httpBufferRequestAdded := retrieveBackendHTTPBufferRequestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpBufferRequestAdded

	err, httpCheckAdded := retrieveBackendHTTPCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpCheckAdded

	err, httpKeepAliveAdded := retrieveBackendHTTPKeepAliveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpKeepAliveAdded

	err, httpNoDelayAdded := retrieveBackendHTTPNoDelayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpNoDelayAdded

	err, httpServerCloseAdded := retrieveBackendHTTPServerCloseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpServerCloseAdded

	err, httpUseHtxAdded := retrieveBackendHTTPUseHtxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpUseHtxAdded

	err, httpConnectionModeAdded := retrieveBackendHTTPConnectionModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpConnectionModeAdded

	err, httpKeepAliveTimeoutAdded := retrieveBackendHTTPKeepAliveTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpKeepAliveTimeoutAdded

	err, httpPretendKeepaliveAdded := retrieveBackendHTTPPretendKeepaliveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpPretendKeepaliveAdded

	err, httpProxyAdded := retrieveBackendHTTPProxyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpProxyAdded

	err, httpRequestTimeoutAdded := retrieveBackendHTTPRequestTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpRequestTimeoutAdded

	err, httpReuseAdded := retrieveBackendHTTPReuseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpReuseAdded

	err, httpchkParamsAdded := retrieveBackendHttpchkParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpchkParamsAdded

	err, httpcloseAdded := retrieveBackendHttpcloseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpcloseAdded

	err, independentStreamsAdded := retrieveBackendIndependentStreamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || independentStreamsAdded

	err, logHealthChecksAdded := retrieveBackendLogHealthChecksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logHealthChecksAdded

	err, logTagAdded := retrieveBackendLogTagFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logTagAdded

	err, modeAdded := retrieveBackendModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, mysqlCheckParamsAdded := retrieveBackendMysqlCheckParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mysqlCheckParamsAdded

	err, nameAdded := retrieveBackendNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, nolingerAdded := retrieveBackendNolingerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nolingerAdded

	err, originaltoAdded := retrieveBackendOriginaltoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || originaltoAdded

	err, persistAdded := retrieveBackendPersistFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || persistAdded

	err, pgsqlCheckParamsAdded := retrieveBackendPgsqlCheckParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pgsqlCheckParamsAdded

	err, preferLastServerAdded := retrieveBackendPreferLastServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || preferLastServerAdded

	err, queueTimeoutAdded := retrieveBackendQueueTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || queueTimeoutAdded

	err, redispatchAdded := retrieveBackendRedispatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redispatchAdded

	err, retriesAdded := retrieveBackendRetriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || retriesAdded

	err, serverTimeoutAdded := retrieveBackendServerTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverTimeoutAdded

	err, smtpchkParamsAdded := retrieveBackendSmtpchkParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || smtpchkParamsAdded

	err, spliceAutoAdded := retrieveBackendSpliceAutoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spliceAutoAdded

	err, spliceRequestAdded := retrieveBackendSpliceRequestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spliceRequestAdded

	err, spliceResponseAdded := retrieveBackendSpliceResponseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spliceResponseAdded

	err, spopCheckAdded := retrieveBackendSpopCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || spopCheckAdded

	err, srvtcpkaAdded := retrieveBackendSrvtcpkaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || srvtcpkaAdded

	err, srvtcpkaCntAdded := retrieveBackendSrvtcpkaCntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || srvtcpkaCntAdded

	err, srvtcpkaIdleAdded := retrieveBackendSrvtcpkaIdleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || srvtcpkaIdleAdded

	err, srvtcpkaIntvlAdded := retrieveBackendSrvtcpkaIntvlFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || srvtcpkaIntvlAdded

	err, statsOptionsAdded := retrieveBackendStatsOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statsOptionsAdded

	err, stickTableAdded := retrieveBackendStickTableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stickTableAdded

	err, tcpSmartConnectAdded := retrieveBackendTCPSmartConnectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpSmartConnectAdded

	err, tcpkaAdded := retrieveBackendTcpkaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpkaAdded

	err, transparentAdded := retrieveBackendTransparentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transparentAdded

	err, tunnelTimeoutAdded := retrieveBackendTunnelTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tunnelTimeoutAdded

	return nil, retAdded
}

func retrieveBackendAbortoncloseFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	abortoncloseFlagName := fmt.Sprintf("%v.abortonclose", cmdPrefix)
	if cmd.Flags().Changed(abortoncloseFlagName) {

		var abortoncloseFlagName string
		if cmdPrefix == "" {
			abortoncloseFlagName = "abortonclose"
		} else {
			abortoncloseFlagName = fmt.Sprintf("%v.abortonclose", cmdPrefix)
		}

		abortoncloseFlagValue, err := cmd.Flags().GetString(abortoncloseFlagName)
		if err != nil {
			return err, false
		}
		m.Abortonclose = abortoncloseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendAcceptInvalidHTTPResponseFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	acceptInvalidHttpResponseFlagName := fmt.Sprintf("%v.accept_invalid_http_response", cmdPrefix)
	if cmd.Flags().Changed(acceptInvalidHttpResponseFlagName) {

		var acceptInvalidHttpResponseFlagName string
		if cmdPrefix == "" {
			acceptInvalidHttpResponseFlagName = "accept_invalid_http_response"
		} else {
			acceptInvalidHttpResponseFlagName = fmt.Sprintf("%v.accept_invalid_http_response", cmdPrefix)
		}

		acceptInvalidHttpResponseFlagValue, err := cmd.Flags().GetString(acceptInvalidHttpResponseFlagName)
		if err != nil {
			return err, false
		}
		m.AcceptInvalidHTTPResponse = acceptInvalidHttpResponseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendAdvCheckFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	advCheckFlagName := fmt.Sprintf("%v.adv_check", cmdPrefix)
	if cmd.Flags().Changed(advCheckFlagName) {

		var advCheckFlagName string
		if cmdPrefix == "" {
			advCheckFlagName = "adv_check"
		} else {
			advCheckFlagName = fmt.Sprintf("%v.adv_check", cmdPrefix)
		}

		advCheckFlagValue, err := cmd.Flags().GetString(advCheckFlagName)
		if err != nil {
			return err, false
		}
		m.AdvCheck = advCheckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendAllbackupsFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allbackupsFlagName := fmt.Sprintf("%v.allbackups", cmdPrefix)
	if cmd.Flags().Changed(allbackupsFlagName) {

		var allbackupsFlagName string
		if cmdPrefix == "" {
			allbackupsFlagName = "allbackups"
		} else {
			allbackupsFlagName = fmt.Sprintf("%v.allbackups", cmdPrefix)
		}

		allbackupsFlagValue, err := cmd.Flags().GetString(allbackupsFlagName)
		if err != nil {
			return err, false
		}
		m.Allbackups = allbackupsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendBalanceFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	balanceFlagName := fmt.Sprintf("%v.balance", cmdPrefix)
	if cmd.Flags().Changed(balanceFlagName) {
		// info: complex object balance Balance is retrieved outside this Changed() block
	}
	balanceFlagValue := m.Balance
	if swag.IsZero(balanceFlagValue) {
		balanceFlagValue = &models.Balance{}
	}

	err, balanceAdded := retrieveModelBalanceFlags(depth+1, balanceFlagValue, balanceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || balanceAdded
	if balanceAdded {
		m.Balance = balanceFlagValue
	}

	return nil, retAdded
}

func retrieveBackendBindProcessFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bindProcessFlagName := fmt.Sprintf("%v.bind_process", cmdPrefix)
	if cmd.Flags().Changed(bindProcessFlagName) {

		var bindProcessFlagName string
		if cmdPrefix == "" {
			bindProcessFlagName = "bind_process"
		} else {
			bindProcessFlagName = fmt.Sprintf("%v.bind_process", cmdPrefix)
		}

		bindProcessFlagValue, err := cmd.Flags().GetString(bindProcessFlagName)
		if err != nil {
			return err, false
		}
		m.BindProcess = bindProcessFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendCheckTimeoutFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkTimeoutFlagName := fmt.Sprintf("%v.check_timeout", cmdPrefix)
	if cmd.Flags().Changed(checkTimeoutFlagName) {

		var checkTimeoutFlagName string
		if cmdPrefix == "" {
			checkTimeoutFlagName = "check_timeout"
		} else {
			checkTimeoutFlagName = fmt.Sprintf("%v.check_timeout", cmdPrefix)
		}

		checkTimeoutFlagValue, err := cmd.Flags().GetInt64(checkTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.CheckTimeout = &checkTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendCheckcacheFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkcacheFlagName := fmt.Sprintf("%v.checkcache", cmdPrefix)
	if cmd.Flags().Changed(checkcacheFlagName) {

		var checkcacheFlagName string
		if cmdPrefix == "" {
			checkcacheFlagName = "checkcache"
		} else {
			checkcacheFlagName = fmt.Sprintf("%v.checkcache", cmdPrefix)
		}

		checkcacheFlagValue, err := cmd.Flags().GetString(checkcacheFlagName)
		if err != nil {
			return err, false
		}
		m.Checkcache = checkcacheFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendCompressionFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	compressionFlagName := fmt.Sprintf("%v.compression", cmdPrefix)
	if cmd.Flags().Changed(compressionFlagName) {
		// info: complex object compression Compression is retrieved outside this Changed() block
	}
	compressionFlagValue := m.Compression
	if swag.IsZero(compressionFlagValue) {
		compressionFlagValue = &models.Compression{}
	}

	err, compressionAdded := retrieveModelCompressionFlags(depth+1, compressionFlagValue, compressionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compressionAdded
	if compressionAdded {
		m.Compression = compressionFlagValue
	}

	return nil, retAdded
}

func retrieveBackendConnectTimeoutFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectTimeoutFlagName := fmt.Sprintf("%v.connect_timeout", cmdPrefix)
	if cmd.Flags().Changed(connectTimeoutFlagName) {

		var connectTimeoutFlagName string
		if cmdPrefix == "" {
			connectTimeoutFlagName = "connect_timeout"
		} else {
			connectTimeoutFlagName = fmt.Sprintf("%v.connect_timeout", cmdPrefix)
		}

		connectTimeoutFlagValue, err := cmd.Flags().GetInt64(connectTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.ConnectTimeout = &connectTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendCookieFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cookieFlagName := fmt.Sprintf("%v.cookie", cmdPrefix)
	if cmd.Flags().Changed(cookieFlagName) {
		// info: complex object cookie Cookie is retrieved outside this Changed() block
	}
	cookieFlagValue := m.Cookie
	if swag.IsZero(cookieFlagValue) {
		cookieFlagValue = &models.Cookie{}
	}

	err, cookieAdded := retrieveModelCookieFlags(depth+1, cookieFlagValue, cookieFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cookieAdded
	if cookieAdded {
		m.Cookie = cookieFlagValue
	}

	return nil, retAdded
}

func retrieveBackendDefaultServerFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultServerFlagName := fmt.Sprintf("%v.default_server", cmdPrefix)
	if cmd.Flags().Changed(defaultServerFlagName) {
		// info: complex object default_server DefaultServer is retrieved outside this Changed() block
	}
	defaultServerFlagValue := m.DefaultServer
	if swag.IsZero(defaultServerFlagValue) {
		defaultServerFlagValue = &models.DefaultServer{}
	}

	err, defaultServerAdded := retrieveModelDefaultServerFlags(depth+1, defaultServerFlagValue, defaultServerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultServerAdded
	if defaultServerAdded {
		m.DefaultServer = defaultServerFlagValue
	}

	return nil, retAdded
}

func retrieveBackendDynamicCookieKeyFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dynamicCookieKeyFlagName := fmt.Sprintf("%v.dynamic_cookie_key", cmdPrefix)
	if cmd.Flags().Changed(dynamicCookieKeyFlagName) {

		var dynamicCookieKeyFlagName string
		if cmdPrefix == "" {
			dynamicCookieKeyFlagName = "dynamic_cookie_key"
		} else {
			dynamicCookieKeyFlagName = fmt.Sprintf("%v.dynamic_cookie_key", cmdPrefix)
		}

		dynamicCookieKeyFlagValue, err := cmd.Flags().GetString(dynamicCookieKeyFlagName)
		if err != nil {
			return err, false
		}
		m.DynamicCookieKey = dynamicCookieKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendExternalCheckFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	externalCheckFlagName := fmt.Sprintf("%v.external_check", cmdPrefix)
	if cmd.Flags().Changed(externalCheckFlagName) {

		var externalCheckFlagName string
		if cmdPrefix == "" {
			externalCheckFlagName = "external_check"
		} else {
			externalCheckFlagName = fmt.Sprintf("%v.external_check", cmdPrefix)
		}

		externalCheckFlagValue, err := cmd.Flags().GetString(externalCheckFlagName)
		if err != nil {
			return err, false
		}
		m.ExternalCheck = externalCheckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendExternalCheckCommandFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	externalCheckCommandFlagName := fmt.Sprintf("%v.external_check_command", cmdPrefix)
	if cmd.Flags().Changed(externalCheckCommandFlagName) {

		var externalCheckCommandFlagName string
		if cmdPrefix == "" {
			externalCheckCommandFlagName = "external_check_command"
		} else {
			externalCheckCommandFlagName = fmt.Sprintf("%v.external_check_command", cmdPrefix)
		}

		externalCheckCommandFlagValue, err := cmd.Flags().GetString(externalCheckCommandFlagName)
		if err != nil {
			return err, false
		}
		m.ExternalCheckCommand = externalCheckCommandFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendExternalCheckPathFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	externalCheckPathFlagName := fmt.Sprintf("%v.external_check_path", cmdPrefix)
	if cmd.Flags().Changed(externalCheckPathFlagName) {

		var externalCheckPathFlagName string
		if cmdPrefix == "" {
			externalCheckPathFlagName = "external_check_path"
		} else {
			externalCheckPathFlagName = fmt.Sprintf("%v.external_check_path", cmdPrefix)
		}

		externalCheckPathFlagValue, err := cmd.Flags().GetString(externalCheckPathFlagName)
		if err != nil {
			return err, false
		}
		m.ExternalCheckPath = externalCheckPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendForwardforFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forwardforFlagName := fmt.Sprintf("%v.forwardfor", cmdPrefix)
	if cmd.Flags().Changed(forwardforFlagName) {
		// info: complex object forwardfor Forwardfor is retrieved outside this Changed() block
	}
	forwardforFlagValue := m.Forwardfor
	if swag.IsZero(forwardforFlagValue) {
		forwardforFlagValue = &models.Forwardfor{}
	}

	err, forwardforAdded := retrieveModelForwardforFlags(depth+1, forwardforFlagValue, forwardforFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forwardforAdded
	if forwardforAdded {
		m.Forwardfor = forwardforFlagValue
	}

	return nil, retAdded
}

func retrieveBackendH1CaseAdjustBogusServerFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h1CaseAdjustBogusServerFlagName := fmt.Sprintf("%v.h1_case_adjust_bogus_server", cmdPrefix)
	if cmd.Flags().Changed(h1CaseAdjustBogusServerFlagName) {

		var h1CaseAdjustBogusServerFlagName string
		if cmdPrefix == "" {
			h1CaseAdjustBogusServerFlagName = "h1_case_adjust_bogus_server"
		} else {
			h1CaseAdjustBogusServerFlagName = fmt.Sprintf("%v.h1_case_adjust_bogus_server", cmdPrefix)
		}

		h1CaseAdjustBogusServerFlagValue, err := cmd.Flags().GetString(h1CaseAdjustBogusServerFlagName)
		if err != nil {
			return err, false
		}
		m.H1CaseAdjustBogusServer = h1CaseAdjustBogusServerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHashTypeFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hashTypeFlagName := fmt.Sprintf("%v.hash_type", cmdPrefix)
	if cmd.Flags().Changed(hashTypeFlagName) {
		// info: complex object hash_type BackendHashType is retrieved outside this Changed() block
	}
	hashTypeFlagValue := m.HashType
	if swag.IsZero(hashTypeFlagValue) {
		hashTypeFlagValue = &models.BackendHashType{}
	}

	err, hashTypeAdded := retrieveModelBackendHashTypeFlags(depth+1, hashTypeFlagValue, hashTypeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hashTypeAdded
	if hashTypeAdded {
		m.HashType = hashTypeFlagValue
	}

	return nil, retAdded
}

func retrieveBackendHTTPBufferRequestFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpBufferRequestFlagName := fmt.Sprintf("%v.http-buffer-request", cmdPrefix)
	if cmd.Flags().Changed(httpBufferRequestFlagName) {

		var httpBufferRequestFlagName string
		if cmdPrefix == "" {
			httpBufferRequestFlagName = "http-buffer-request"
		} else {
			httpBufferRequestFlagName = fmt.Sprintf("%v.http-buffer-request", cmdPrefix)
		}

		httpBufferRequestFlagValue, err := cmd.Flags().GetString(httpBufferRequestFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPBufferRequest = httpBufferRequestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHTTPCheckFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpCheckFlagName := fmt.Sprintf("%v.http-check", cmdPrefix)
	if cmd.Flags().Changed(httpCheckFlagName) {
		// info: complex object http-check HTTPCheck is retrieved outside this Changed() block
	}
	httpCheckFlagValue := m.HTTPCheck
	if swag.IsZero(httpCheckFlagValue) {
		httpCheckFlagValue = &models.HTTPCheck{}
	}

	err, httpCheckAdded := retrieveModelHTTPCheckFlags(depth+1, httpCheckFlagValue, httpCheckFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpCheckAdded
	if httpCheckAdded {
		m.HTTPCheck = httpCheckFlagValue
	}

	return nil, retAdded
}

func retrieveBackendHTTPKeepAliveFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpKeepAliveFlagName := fmt.Sprintf("%v.http-keep-alive", cmdPrefix)
	if cmd.Flags().Changed(httpKeepAliveFlagName) {

		var httpKeepAliveFlagName string
		if cmdPrefix == "" {
			httpKeepAliveFlagName = "http-keep-alive"
		} else {
			httpKeepAliveFlagName = fmt.Sprintf("%v.http-keep-alive", cmdPrefix)
		}

		httpKeepAliveFlagValue, err := cmd.Flags().GetString(httpKeepAliveFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPKeepAlive = httpKeepAliveFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHTTPNoDelayFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpNoDelayFlagName := fmt.Sprintf("%v.http-no-delay", cmdPrefix)
	if cmd.Flags().Changed(httpNoDelayFlagName) {

		var httpNoDelayFlagName string
		if cmdPrefix == "" {
			httpNoDelayFlagName = "http-no-delay"
		} else {
			httpNoDelayFlagName = fmt.Sprintf("%v.http-no-delay", cmdPrefix)
		}

		httpNoDelayFlagValue, err := cmd.Flags().GetString(httpNoDelayFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPNoDelay = httpNoDelayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHTTPServerCloseFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpServerCloseFlagName := fmt.Sprintf("%v.http-server-close", cmdPrefix)
	if cmd.Flags().Changed(httpServerCloseFlagName) {

		var httpServerCloseFlagName string
		if cmdPrefix == "" {
			httpServerCloseFlagName = "http-server-close"
		} else {
			httpServerCloseFlagName = fmt.Sprintf("%v.http-server-close", cmdPrefix)
		}

		httpServerCloseFlagValue, err := cmd.Flags().GetString(httpServerCloseFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPServerClose = httpServerCloseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHTTPUseHtxFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpUseHtxFlagName := fmt.Sprintf("%v.http-use-htx", cmdPrefix)
	if cmd.Flags().Changed(httpUseHtxFlagName) {

		var httpUseHtxFlagName string
		if cmdPrefix == "" {
			httpUseHtxFlagName = "http-use-htx"
		} else {
			httpUseHtxFlagName = fmt.Sprintf("%v.http-use-htx", cmdPrefix)
		}

		httpUseHtxFlagValue, err := cmd.Flags().GetString(httpUseHtxFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPUseHtx = httpUseHtxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHTTPConnectionModeFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpConnectionModeFlagName := fmt.Sprintf("%v.http_connection_mode", cmdPrefix)
	if cmd.Flags().Changed(httpConnectionModeFlagName) {

		var httpConnectionModeFlagName string
		if cmdPrefix == "" {
			httpConnectionModeFlagName = "http_connection_mode"
		} else {
			httpConnectionModeFlagName = fmt.Sprintf("%v.http_connection_mode", cmdPrefix)
		}

		httpConnectionModeFlagValue, err := cmd.Flags().GetString(httpConnectionModeFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPConnectionMode = httpConnectionModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHTTPKeepAliveTimeoutFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpKeepAliveTimeoutFlagName := fmt.Sprintf("%v.http_keep_alive_timeout", cmdPrefix)
	if cmd.Flags().Changed(httpKeepAliveTimeoutFlagName) {

		var httpKeepAliveTimeoutFlagName string
		if cmdPrefix == "" {
			httpKeepAliveTimeoutFlagName = "http_keep_alive_timeout"
		} else {
			httpKeepAliveTimeoutFlagName = fmt.Sprintf("%v.http_keep_alive_timeout", cmdPrefix)
		}

		httpKeepAliveTimeoutFlagValue, err := cmd.Flags().GetInt64(httpKeepAliveTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPKeepAliveTimeout = &httpKeepAliveTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHTTPPretendKeepaliveFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpPretendKeepaliveFlagName := fmt.Sprintf("%v.http_pretend_keepalive", cmdPrefix)
	if cmd.Flags().Changed(httpPretendKeepaliveFlagName) {

		var httpPretendKeepaliveFlagName string
		if cmdPrefix == "" {
			httpPretendKeepaliveFlagName = "http_pretend_keepalive"
		} else {
			httpPretendKeepaliveFlagName = fmt.Sprintf("%v.http_pretend_keepalive", cmdPrefix)
		}

		httpPretendKeepaliveFlagValue, err := cmd.Flags().GetString(httpPretendKeepaliveFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPPretendKeepalive = httpPretendKeepaliveFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHTTPProxyFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpProxyFlagName := fmt.Sprintf("%v.http_proxy", cmdPrefix)
	if cmd.Flags().Changed(httpProxyFlagName) {

		var httpProxyFlagName string
		if cmdPrefix == "" {
			httpProxyFlagName = "http_proxy"
		} else {
			httpProxyFlagName = fmt.Sprintf("%v.http_proxy", cmdPrefix)
		}

		httpProxyFlagValue, err := cmd.Flags().GetString(httpProxyFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPProxy = httpProxyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHTTPRequestTimeoutFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpRequestTimeoutFlagName := fmt.Sprintf("%v.http_request_timeout", cmdPrefix)
	if cmd.Flags().Changed(httpRequestTimeoutFlagName) {

		var httpRequestTimeoutFlagName string
		if cmdPrefix == "" {
			httpRequestTimeoutFlagName = "http_request_timeout"
		} else {
			httpRequestTimeoutFlagName = fmt.Sprintf("%v.http_request_timeout", cmdPrefix)
		}

		httpRequestTimeoutFlagValue, err := cmd.Flags().GetInt64(httpRequestTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPRequestTimeout = &httpRequestTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHTTPReuseFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpReuseFlagName := fmt.Sprintf("%v.http_reuse", cmdPrefix)
	if cmd.Flags().Changed(httpReuseFlagName) {

		var httpReuseFlagName string
		if cmdPrefix == "" {
			httpReuseFlagName = "http_reuse"
		} else {
			httpReuseFlagName = fmt.Sprintf("%v.http_reuse", cmdPrefix)
		}

		httpReuseFlagValue, err := cmd.Flags().GetString(httpReuseFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPReuse = httpReuseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHttpchkParamsFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpchkParamsFlagName := fmt.Sprintf("%v.httpchk_params", cmdPrefix)
	if cmd.Flags().Changed(httpchkParamsFlagName) {
		// info: complex object httpchk_params HttpchkParams is retrieved outside this Changed() block
	}
	httpchkParamsFlagValue := m.HttpchkParams
	if swag.IsZero(httpchkParamsFlagValue) {
		httpchkParamsFlagValue = &models.HttpchkParams{}
	}

	err, httpchkParamsAdded := retrieveModelHttpchkParamsFlags(depth+1, httpchkParamsFlagValue, httpchkParamsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpchkParamsAdded
	if httpchkParamsAdded {
		m.HttpchkParams = httpchkParamsFlagValue
	}

	return nil, retAdded
}

func retrieveBackendHttpcloseFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpcloseFlagName := fmt.Sprintf("%v.httpclose", cmdPrefix)
	if cmd.Flags().Changed(httpcloseFlagName) {

		var httpcloseFlagName string
		if cmdPrefix == "" {
			httpcloseFlagName = "httpclose"
		} else {
			httpcloseFlagName = fmt.Sprintf("%v.httpclose", cmdPrefix)
		}

		httpcloseFlagValue, err := cmd.Flags().GetString(httpcloseFlagName)
		if err != nil {
			return err, false
		}
		m.Httpclose = httpcloseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendIndependentStreamsFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	independentStreamsFlagName := fmt.Sprintf("%v.independent_streams", cmdPrefix)
	if cmd.Flags().Changed(independentStreamsFlagName) {

		var independentStreamsFlagName string
		if cmdPrefix == "" {
			independentStreamsFlagName = "independent_streams"
		} else {
			independentStreamsFlagName = fmt.Sprintf("%v.independent_streams", cmdPrefix)
		}

		independentStreamsFlagValue, err := cmd.Flags().GetString(independentStreamsFlagName)
		if err != nil {
			return err, false
		}
		m.IndependentStreams = independentStreamsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendLogHealthChecksFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logHealthChecksFlagName := fmt.Sprintf("%v.log_health_checks", cmdPrefix)
	if cmd.Flags().Changed(logHealthChecksFlagName) {

		var logHealthChecksFlagName string
		if cmdPrefix == "" {
			logHealthChecksFlagName = "log_health_checks"
		} else {
			logHealthChecksFlagName = fmt.Sprintf("%v.log_health_checks", cmdPrefix)
		}

		logHealthChecksFlagValue, err := cmd.Flags().GetString(logHealthChecksFlagName)
		if err != nil {
			return err, false
		}
		m.LogHealthChecks = logHealthChecksFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendLogTagFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logTagFlagName := fmt.Sprintf("%v.log_tag", cmdPrefix)
	if cmd.Flags().Changed(logTagFlagName) {

		var logTagFlagName string
		if cmdPrefix == "" {
			logTagFlagName = "log_tag"
		} else {
			logTagFlagName = fmt.Sprintf("%v.log_tag", cmdPrefix)
		}

		logTagFlagValue, err := cmd.Flags().GetString(logTagFlagName)
		if err != nil {
			return err, false
		}
		m.LogTag = logTagFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendModeFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendMysqlCheckParamsFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mysqlCheckParamsFlagName := fmt.Sprintf("%v.mysql_check_params", cmdPrefix)
	if cmd.Flags().Changed(mysqlCheckParamsFlagName) {
		// info: complex object mysql_check_params MysqlCheckParams is retrieved outside this Changed() block
	}
	mysqlCheckParamsFlagValue := m.MysqlCheckParams
	if swag.IsZero(mysqlCheckParamsFlagValue) {
		mysqlCheckParamsFlagValue = &models.MysqlCheckParams{}
	}

	err, mysqlCheckParamsAdded := retrieveModelMysqlCheckParamsFlags(depth+1, mysqlCheckParamsFlagValue, mysqlCheckParamsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mysqlCheckParamsAdded
	if mysqlCheckParamsAdded {
		m.MysqlCheckParams = mysqlCheckParamsFlagValue
	}

	return nil, retAdded
}

func retrieveBackendNameFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendNolingerFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nolingerFlagName := fmt.Sprintf("%v.nolinger", cmdPrefix)
	if cmd.Flags().Changed(nolingerFlagName) {

		var nolingerFlagName string
		if cmdPrefix == "" {
			nolingerFlagName = "nolinger"
		} else {
			nolingerFlagName = fmt.Sprintf("%v.nolinger", cmdPrefix)
		}

		nolingerFlagValue, err := cmd.Flags().GetString(nolingerFlagName)
		if err != nil {
			return err, false
		}
		m.Nolinger = nolingerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendOriginaltoFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	originaltoFlagName := fmt.Sprintf("%v.originalto", cmdPrefix)
	if cmd.Flags().Changed(originaltoFlagName) {

		var originaltoFlagName string
		if cmdPrefix == "" {
			originaltoFlagName = "originalto"
		} else {
			originaltoFlagName = fmt.Sprintf("%v.originalto", cmdPrefix)
		}

		originaltoFlagValue, err := cmd.Flags().GetString(originaltoFlagName)
		if err != nil {
			return err, false
		}
		m.Originalto = originaltoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendPersistFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	persistFlagName := fmt.Sprintf("%v.persist", cmdPrefix)
	if cmd.Flags().Changed(persistFlagName) {

		var persistFlagName string
		if cmdPrefix == "" {
			persistFlagName = "persist"
		} else {
			persistFlagName = fmt.Sprintf("%v.persist", cmdPrefix)
		}

		persistFlagValue, err := cmd.Flags().GetString(persistFlagName)
		if err != nil {
			return err, false
		}
		m.Persist = persistFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendPgsqlCheckParamsFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pgsqlCheckParamsFlagName := fmt.Sprintf("%v.pgsql_check_params", cmdPrefix)
	if cmd.Flags().Changed(pgsqlCheckParamsFlagName) {
		// info: complex object pgsql_check_params PgsqlCheckParams is retrieved outside this Changed() block
	}
	pgsqlCheckParamsFlagValue := m.PgsqlCheckParams
	if swag.IsZero(pgsqlCheckParamsFlagValue) {
		pgsqlCheckParamsFlagValue = &models.PgsqlCheckParams{}
	}

	err, pgsqlCheckParamsAdded := retrieveModelPgsqlCheckParamsFlags(depth+1, pgsqlCheckParamsFlagValue, pgsqlCheckParamsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pgsqlCheckParamsAdded
	if pgsqlCheckParamsAdded {
		m.PgsqlCheckParams = pgsqlCheckParamsFlagValue
	}

	return nil, retAdded
}

func retrieveBackendPreferLastServerFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	preferLastServerFlagName := fmt.Sprintf("%v.prefer_last_server", cmdPrefix)
	if cmd.Flags().Changed(preferLastServerFlagName) {

		var preferLastServerFlagName string
		if cmdPrefix == "" {
			preferLastServerFlagName = "prefer_last_server"
		} else {
			preferLastServerFlagName = fmt.Sprintf("%v.prefer_last_server", cmdPrefix)
		}

		preferLastServerFlagValue, err := cmd.Flags().GetString(preferLastServerFlagName)
		if err != nil {
			return err, false
		}
		m.PreferLastServer = preferLastServerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendQueueTimeoutFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	queueTimeoutFlagName := fmt.Sprintf("%v.queue_timeout", cmdPrefix)
	if cmd.Flags().Changed(queueTimeoutFlagName) {

		var queueTimeoutFlagName string
		if cmdPrefix == "" {
			queueTimeoutFlagName = "queue_timeout"
		} else {
			queueTimeoutFlagName = fmt.Sprintf("%v.queue_timeout", cmdPrefix)
		}

		queueTimeoutFlagValue, err := cmd.Flags().GetInt64(queueTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.QueueTimeout = &queueTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendRedispatchFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redispatchFlagName := fmt.Sprintf("%v.redispatch", cmdPrefix)
	if cmd.Flags().Changed(redispatchFlagName) {
		// info: complex object redispatch Redispatch is retrieved outside this Changed() block
	}
	redispatchFlagValue := m.Redispatch
	if swag.IsZero(redispatchFlagValue) {
		redispatchFlagValue = &models.Redispatch{}
	}

	err, redispatchAdded := retrieveModelRedispatchFlags(depth+1, redispatchFlagValue, redispatchFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redispatchAdded
	if redispatchAdded {
		m.Redispatch = redispatchFlagValue
	}

	return nil, retAdded
}

func retrieveBackendRetriesFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	retriesFlagName := fmt.Sprintf("%v.retries", cmdPrefix)
	if cmd.Flags().Changed(retriesFlagName) {

		var retriesFlagName string
		if cmdPrefix == "" {
			retriesFlagName = "retries"
		} else {
			retriesFlagName = fmt.Sprintf("%v.retries", cmdPrefix)
		}

		retriesFlagValue, err := cmd.Flags().GetInt64(retriesFlagName)
		if err != nil {
			return err, false
		}
		m.Retries = &retriesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendServerTimeoutFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverTimeoutFlagName := fmt.Sprintf("%v.server_timeout", cmdPrefix)
	if cmd.Flags().Changed(serverTimeoutFlagName) {

		var serverTimeoutFlagName string
		if cmdPrefix == "" {
			serverTimeoutFlagName = "server_timeout"
		} else {
			serverTimeoutFlagName = fmt.Sprintf("%v.server_timeout", cmdPrefix)
		}

		serverTimeoutFlagValue, err := cmd.Flags().GetInt64(serverTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.ServerTimeout = &serverTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendSmtpchkParamsFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	smtpchkParamsFlagName := fmt.Sprintf("%v.smtpchk_params", cmdPrefix)
	if cmd.Flags().Changed(smtpchkParamsFlagName) {
		// info: complex object smtpchk_params SmtpchkParams is retrieved outside this Changed() block
	}
	smtpchkParamsFlagValue := m.SmtpchkParams
	if swag.IsZero(smtpchkParamsFlagValue) {
		smtpchkParamsFlagValue = &models.SmtpchkParams{}
	}

	err, smtpchkParamsAdded := retrieveModelSmtpchkParamsFlags(depth+1, smtpchkParamsFlagValue, smtpchkParamsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || smtpchkParamsAdded
	if smtpchkParamsAdded {
		m.SmtpchkParams = smtpchkParamsFlagValue
	}

	return nil, retAdded
}

func retrieveBackendSpliceAutoFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spliceAutoFlagName := fmt.Sprintf("%v.splice_auto", cmdPrefix)
	if cmd.Flags().Changed(spliceAutoFlagName) {

		var spliceAutoFlagName string
		if cmdPrefix == "" {
			spliceAutoFlagName = "splice_auto"
		} else {
			spliceAutoFlagName = fmt.Sprintf("%v.splice_auto", cmdPrefix)
		}

		spliceAutoFlagValue, err := cmd.Flags().GetString(spliceAutoFlagName)
		if err != nil {
			return err, false
		}
		m.SpliceAuto = spliceAutoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendSpliceRequestFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spliceRequestFlagName := fmt.Sprintf("%v.splice_request", cmdPrefix)
	if cmd.Flags().Changed(spliceRequestFlagName) {

		var spliceRequestFlagName string
		if cmdPrefix == "" {
			spliceRequestFlagName = "splice_request"
		} else {
			spliceRequestFlagName = fmt.Sprintf("%v.splice_request", cmdPrefix)
		}

		spliceRequestFlagValue, err := cmd.Flags().GetString(spliceRequestFlagName)
		if err != nil {
			return err, false
		}
		m.SpliceRequest = spliceRequestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendSpliceResponseFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spliceResponseFlagName := fmt.Sprintf("%v.splice_response", cmdPrefix)
	if cmd.Flags().Changed(spliceResponseFlagName) {

		var spliceResponseFlagName string
		if cmdPrefix == "" {
			spliceResponseFlagName = "splice_response"
		} else {
			spliceResponseFlagName = fmt.Sprintf("%v.splice_response", cmdPrefix)
		}

		spliceResponseFlagValue, err := cmd.Flags().GetString(spliceResponseFlagName)
		if err != nil {
			return err, false
		}
		m.SpliceResponse = spliceResponseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendSpopCheckFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	spopCheckFlagName := fmt.Sprintf("%v.spop_check", cmdPrefix)
	if cmd.Flags().Changed(spopCheckFlagName) {

		var spopCheckFlagName string
		if cmdPrefix == "" {
			spopCheckFlagName = "spop_check"
		} else {
			spopCheckFlagName = fmt.Sprintf("%v.spop_check", cmdPrefix)
		}

		spopCheckFlagValue, err := cmd.Flags().GetString(spopCheckFlagName)
		if err != nil {
			return err, false
		}
		m.SpopCheck = spopCheckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendSrvtcpkaFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	srvtcpkaFlagName := fmt.Sprintf("%v.srvtcpka", cmdPrefix)
	if cmd.Flags().Changed(srvtcpkaFlagName) {

		var srvtcpkaFlagName string
		if cmdPrefix == "" {
			srvtcpkaFlagName = "srvtcpka"
		} else {
			srvtcpkaFlagName = fmt.Sprintf("%v.srvtcpka", cmdPrefix)
		}

		srvtcpkaFlagValue, err := cmd.Flags().GetString(srvtcpkaFlagName)
		if err != nil {
			return err, false
		}
		m.Srvtcpka = srvtcpkaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendSrvtcpkaCntFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	srvtcpkaCntFlagName := fmt.Sprintf("%v.srvtcpka_cnt", cmdPrefix)
	if cmd.Flags().Changed(srvtcpkaCntFlagName) {

		var srvtcpkaCntFlagName string
		if cmdPrefix == "" {
			srvtcpkaCntFlagName = "srvtcpka_cnt"
		} else {
			srvtcpkaCntFlagName = fmt.Sprintf("%v.srvtcpka_cnt", cmdPrefix)
		}

		srvtcpkaCntFlagValue, err := cmd.Flags().GetInt64(srvtcpkaCntFlagName)
		if err != nil {
			return err, false
		}
		m.SrvtcpkaCnt = &srvtcpkaCntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendSrvtcpkaIdleFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	srvtcpkaIdleFlagName := fmt.Sprintf("%v.srvtcpka_idle", cmdPrefix)
	if cmd.Flags().Changed(srvtcpkaIdleFlagName) {

		var srvtcpkaIdleFlagName string
		if cmdPrefix == "" {
			srvtcpkaIdleFlagName = "srvtcpka_idle"
		} else {
			srvtcpkaIdleFlagName = fmt.Sprintf("%v.srvtcpka_idle", cmdPrefix)
		}

		srvtcpkaIdleFlagValue, err := cmd.Flags().GetInt64(srvtcpkaIdleFlagName)
		if err != nil {
			return err, false
		}
		m.SrvtcpkaIdle = &srvtcpkaIdleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendSrvtcpkaIntvlFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	srvtcpkaIntvlFlagName := fmt.Sprintf("%v.srvtcpka_intvl", cmdPrefix)
	if cmd.Flags().Changed(srvtcpkaIntvlFlagName) {

		var srvtcpkaIntvlFlagName string
		if cmdPrefix == "" {
			srvtcpkaIntvlFlagName = "srvtcpka_intvl"
		} else {
			srvtcpkaIntvlFlagName = fmt.Sprintf("%v.srvtcpka_intvl", cmdPrefix)
		}

		srvtcpkaIntvlFlagValue, err := cmd.Flags().GetInt64(srvtcpkaIntvlFlagName)
		if err != nil {
			return err, false
		}
		m.SrvtcpkaIntvl = &srvtcpkaIntvlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendStatsOptionsFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statsOptionsFlagName := fmt.Sprintf("%v.stats_options", cmdPrefix)
	if cmd.Flags().Changed(statsOptionsFlagName) {
		// info: complex object stats_options StatsOptions is retrieved outside this Changed() block
	}
	statsOptionsFlagValue := m.StatsOptions
	if swag.IsZero(statsOptionsFlagValue) {
		statsOptionsFlagValue = &models.StatsOptions{}
	}

	err, statsOptionsAdded := retrieveModelStatsOptionsFlags(depth+1, statsOptionsFlagValue, statsOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statsOptionsAdded
	if statsOptionsAdded {
		m.StatsOptions = statsOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveBackendStickTableFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stickTableFlagName := fmt.Sprintf("%v.stick_table", cmdPrefix)
	if cmd.Flags().Changed(stickTableFlagName) {
		// info: complex object stick_table ConfigStickTable is retrieved outside this Changed() block
	}
	stickTableFlagValue := m.StickTable
	if swag.IsZero(stickTableFlagValue) {
		stickTableFlagValue = &models.ConfigStickTable{}
	}

	err, stickTableAdded := retrieveModelConfigStickTableFlags(depth+1, stickTableFlagValue, stickTableFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stickTableAdded
	if stickTableAdded {
		m.StickTable = stickTableFlagValue
	}

	return nil, retAdded
}

func retrieveBackendTCPSmartConnectFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpSmartConnectFlagName := fmt.Sprintf("%v.tcp_smart_connect", cmdPrefix)
	if cmd.Flags().Changed(tcpSmartConnectFlagName) {

		var tcpSmartConnectFlagName string
		if cmdPrefix == "" {
			tcpSmartConnectFlagName = "tcp_smart_connect"
		} else {
			tcpSmartConnectFlagName = fmt.Sprintf("%v.tcp_smart_connect", cmdPrefix)
		}

		tcpSmartConnectFlagValue, err := cmd.Flags().GetString(tcpSmartConnectFlagName)
		if err != nil {
			return err, false
		}
		m.TCPSmartConnect = tcpSmartConnectFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendTcpkaFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpkaFlagName := fmt.Sprintf("%v.tcpka", cmdPrefix)
	if cmd.Flags().Changed(tcpkaFlagName) {

		var tcpkaFlagName string
		if cmdPrefix == "" {
			tcpkaFlagName = "tcpka"
		} else {
			tcpkaFlagName = fmt.Sprintf("%v.tcpka", cmdPrefix)
		}

		tcpkaFlagValue, err := cmd.Flags().GetString(tcpkaFlagName)
		if err != nil {
			return err, false
		}
		m.Tcpka = tcpkaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendTransparentFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transparentFlagName := fmt.Sprintf("%v.transparent", cmdPrefix)
	if cmd.Flags().Changed(transparentFlagName) {

		var transparentFlagName string
		if cmdPrefix == "" {
			transparentFlagName = "transparent"
		} else {
			transparentFlagName = fmt.Sprintf("%v.transparent", cmdPrefix)
		}

		transparentFlagValue, err := cmd.Flags().GetString(transparentFlagName)
		if err != nil {
			return err, false
		}
		m.Transparent = transparentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendTunnelTimeoutFlags(depth int, m *models.Backend, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tunnelTimeoutFlagName := fmt.Sprintf("%v.tunnel_timeout", cmdPrefix)
	if cmd.Flags().Changed(tunnelTimeoutFlagName) {

		var tunnelTimeoutFlagName string
		if cmdPrefix == "" {
			tunnelTimeoutFlagName = "tunnel_timeout"
		} else {
			tunnelTimeoutFlagName = fmt.Sprintf("%v.tunnel_timeout", cmdPrefix)
		}

		tunnelTimeoutFlagValue, err := cmd.Flags().GetInt64(tunnelTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.TunnelTimeout = &tunnelTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for BackendHashType

// register flags to command
func registerModelBackendHashTypeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBackendHashTypeFunction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHashTypeMethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackendHashTypeModifier(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackendHashTypeFunction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	functionDescription := `Enum: ["sdbm","djb2","wt6","crc32"]. `

	var functionFlagName string
	if cmdPrefix == "" {
		functionFlagName = "function"
	} else {
		functionFlagName = fmt.Sprintf("%v.function", cmdPrefix)
	}

	var functionFlagDefault string

	_ = cmd.PersistentFlags().String(functionFlagName, functionFlagDefault, functionDescription)

	if err := cmd.RegisterFlagCompletionFunc(functionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["sdbm","djb2","wt6","crc32"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendHashTypeMethod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	methodDescription := `Enum: ["map-based","consistent"]. `

	var methodFlagName string
	if cmdPrefix == "" {
		methodFlagName = "method"
	} else {
		methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
	}

	var methodFlagDefault string

	_ = cmd.PersistentFlags().String(methodFlagName, methodFlagDefault, methodDescription)

	if err := cmd.RegisterFlagCompletionFunc(methodFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["map-based","consistent"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackendHashTypeModifier(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modifierDescription := `Enum: ["avalanche"]. `

	var modifierFlagName string
	if cmdPrefix == "" {
		modifierFlagName = "modifier"
	} else {
		modifierFlagName = fmt.Sprintf("%v.modifier", cmdPrefix)
	}

	var modifierFlagDefault string

	_ = cmd.PersistentFlags().String(modifierFlagName, modifierFlagDefault, modifierDescription)

	if err := cmd.RegisterFlagCompletionFunc(modifierFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["avalanche"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBackendHashTypeFlags(depth int, m *models.BackendHashType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, functionAdded := retrieveBackendHashTypeFunctionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || functionAdded

	err, methodAdded := retrieveBackendHashTypeMethodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || methodAdded

	err, modifierAdded := retrieveBackendHashTypeModifierFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modifierAdded

	return nil, retAdded
}

func retrieveBackendHashTypeFunctionFlags(depth int, m *models.BackendHashType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	functionFlagName := fmt.Sprintf("%v.function", cmdPrefix)
	if cmd.Flags().Changed(functionFlagName) {

		var functionFlagName string
		if cmdPrefix == "" {
			functionFlagName = "function"
		} else {
			functionFlagName = fmt.Sprintf("%v.function", cmdPrefix)
		}

		functionFlagValue, err := cmd.Flags().GetString(functionFlagName)
		if err != nil {
			return err, false
		}
		m.Function = functionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHashTypeMethodFlags(depth int, m *models.BackendHashType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	methodFlagName := fmt.Sprintf("%v.method", cmdPrefix)
	if cmd.Flags().Changed(methodFlagName) {

		var methodFlagName string
		if cmdPrefix == "" {
			methodFlagName = "method"
		} else {
			methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
		}

		methodFlagValue, err := cmd.Flags().GetString(methodFlagName)
		if err != nil {
			return err, false
		}
		m.Method = methodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackendHashTypeModifierFlags(depth int, m *models.BackendHashType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modifierFlagName := fmt.Sprintf("%v.modifier", cmdPrefix)
	if cmd.Flags().Changed(modifierFlagName) {

		var modifierFlagName string
		if cmdPrefix == "" {
			modifierFlagName = "modifier"
		} else {
			modifierFlagName = fmt.Sprintf("%v.modifier", cmdPrefix)
		}

		modifierFlagValue, err := cmd.Flags().GetString(modifierFlagName)
		if err != nil {
			return err, false
		}
		m.Modifier = modifierFlagValue

		retAdded = true
	}

	return nil, retAdded
}
