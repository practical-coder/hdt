// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/haproxytech/models"
	"github.com/spf13/cobra"
)

// Schema cli for ACL

// register flags to command
func registerModelACLFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerACLACLName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerACLCriterion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerACLIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerACLValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerACLACLName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aclNameDescription := `Required. `

	var aclNameFlagName string
	if cmdPrefix == "" {
		aclNameFlagName = "acl_name"
	} else {
		aclNameFlagName = fmt.Sprintf("%v.acl_name", cmdPrefix)
	}

	var aclNameFlagDefault string

	_ = cmd.PersistentFlags().String(aclNameFlagName, aclNameFlagDefault, aclNameDescription)

	return nil
}

func registerACLCriterion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	criterionDescription := `Required. `

	var criterionFlagName string
	if cmdPrefix == "" {
		criterionFlagName = "criterion"
	} else {
		criterionFlagName = fmt.Sprintf("%v.criterion", cmdPrefix)
	}

	var criterionFlagDefault string

	_ = cmd.PersistentFlags().String(criterionFlagName, criterionFlagDefault, criterionDescription)

	return nil
}

func registerACLIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	indexDescription := `Required. `

	var indexFlagName string
	if cmdPrefix == "" {
		indexFlagName = "index"
	} else {
		indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
	}

	var indexFlagDefault int64

	_ = cmd.PersistentFlags().Int64(indexFlagName, indexFlagDefault, indexDescription)

	return nil
}

func registerACLValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	valueDescription := `Required. `

	var valueFlagName string
	if cmdPrefix == "" {
		valueFlagName = "value"
	} else {
		valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
	}

	var valueFlagDefault string

	_ = cmd.PersistentFlags().String(valueFlagName, valueFlagDefault, valueDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelACLFlags(depth int, m *models.ACL, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, aclNameAdded := retrieveACLACLNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aclNameAdded

	err, criterionAdded := retrieveACLCriterionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || criterionAdded

	err, indexAdded := retrieveACLIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || indexAdded

	err, valueAdded := retrieveACLValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valueAdded

	return nil, retAdded
}

func retrieveACLACLNameFlags(depth int, m *models.ACL, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aclNameFlagName := fmt.Sprintf("%v.acl_name", cmdPrefix)
	if cmd.Flags().Changed(aclNameFlagName) {

		var aclNameFlagName string
		if cmdPrefix == "" {
			aclNameFlagName = "acl_name"
		} else {
			aclNameFlagName = fmt.Sprintf("%v.acl_name", cmdPrefix)
		}

		aclNameFlagValue, err := cmd.Flags().GetString(aclNameFlagName)
		if err != nil {
			return err, false
		}
		m.ACLName = aclNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveACLCriterionFlags(depth int, m *models.ACL, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	criterionFlagName := fmt.Sprintf("%v.criterion", cmdPrefix)
	if cmd.Flags().Changed(criterionFlagName) {

		var criterionFlagName string
		if cmdPrefix == "" {
			criterionFlagName = "criterion"
		} else {
			criterionFlagName = fmt.Sprintf("%v.criterion", cmdPrefix)
		}

		criterionFlagValue, err := cmd.Flags().GetString(criterionFlagName)
		if err != nil {
			return err, false
		}
		m.Criterion = criterionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveACLIndexFlags(depth int, m *models.ACL, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	indexFlagName := fmt.Sprintf("%v.index", cmdPrefix)
	if cmd.Flags().Changed(indexFlagName) {

		var indexFlagName string
		if cmdPrefix == "" {
			indexFlagName = "index"
		} else {
			indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
		}

		indexFlagValue, err := cmd.Flags().GetInt64(indexFlagName)
		if err != nil {
			return err, false
		}
		m.Index = &indexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveACLValueFlags(depth int, m *models.ACL, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valueFlagName := fmt.Sprintf("%v.value", cmdPrefix)
	if cmd.Flags().Changed(valueFlagName) {

		var valueFlagName string
		if cmdPrefix == "" {
			valueFlagName = "value"
		} else {
			valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
		}

		valueFlagValue, err := cmd.Flags().GetString(valueFlagName)
		if err != nil {
			return err, false
		}
		m.Value = valueFlagValue

		retAdded = true
	}

	return nil, retAdded
}
